/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	__webpack_require__(1);

	// main areas

	__webpack_require__(2);

	__webpack_require__(3);

	__webpack_require__(4);

	// // sidebar area

	__webpack_require__(5);

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "index.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var Unacademic = _interopRequire(__webpack_require__(6));

	var _helpersReactHelpers = __webpack_require__(7);

	var React = _helpersReactHelpers.React;
	var TestUtils = _helpersReactHelpers.TestUtils;
	var modelFixture = _helpersReactHelpers.modelFixture;

	describe("Layout", function () {
	  var container = undefined;

	  beforeEach(function () {

	    var model = modelFixture;
	    var appState = {
	      history: {},
	      user: undefined,
	      mode: "browse"
	    };

	    container = React.renderToString(React.createElement(Unacademic, { model: model, appState: appState }));
	  });

	  it("renders the container", function () {
	    expect(container).to.match(/class="app"/);
	  });

	  it("renders the sidebar", function () {
	    expect(container).to.match(/class="sidebar"/);
	  });

	  it("renders the main area", function () {
	    expect(container).to.match(/class="main"/);
	  });
	});

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "layout.spec.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _helpersReactHelpers = __webpack_require__(7);

	var React = _helpersReactHelpers.React;
	var modelFixture = _helpersReactHelpers.modelFixture;

	var Main = _interopRequire(__webpack_require__(8));

	describe("Main", function () {
	  var component = undefined;

	  beforeEach(function () {
	    component = React.renderToString(React.createElement(Main, { model: modelFixture }));
	  });

	  it("renders the cards area", function () {
	    expect(component).to.match(/class="cards"/);
	  });

	  it("renders the timeline area", function () {
	    expect(component).to.match(/class="timeline"/);
	  });
	});

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "main.spec.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _helpersReactHelpers = __webpack_require__(7);

	var React = _helpersReactHelpers.React;
	var TestUtils = _helpersReactHelpers.TestUtils;
	var appStateFixture = _helpersReactHelpers.appStateFixture;

	var Sidebar = _interopRequire(__webpack_require__(9));

	describe("Sidebar", function () {
	  var container = undefined;
	  var appState = undefined;

	  beforeEach(function () {
	    appState = appStateFixture;

	    container = React.renderToString(React.createElement(Sidebar, { appState: appState }));
	  });

	  it("renders the content panel", function () {
	    expect(container).to.match(/class="contentPanel"/);
	  });

	  it("renders the control panel", function () {
	    expect(container).to.match(/class="controlPanel"/);
	  });
	});

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "sidebar.spec.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _helpersReactHelpers = __webpack_require__(7);

	var React = _helpersReactHelpers.React;
	var TestUtils = _helpersReactHelpers.TestUtils;
	var modelFixture = _helpersReactHelpers.modelFixture;

	var Cards = _interopRequire(__webpack_require__(10));

	describe("Cards", function () {
	  var component = undefined;

	  beforeEach(function () {
	    component = React.renderToString(React.createElement(Cards, { collection: modelFixture.collection }));
	  });

	  it("renders the cards", function () {
	    expect(component).to.have.entriesCount("class=\"card\"", 5);
	  });
	});

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "cards.spec.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _helpersReactHelpers = __webpack_require__(7);

	var React = _helpersReactHelpers.React;
	var TestUtils = _helpersReactHelpers.TestUtils;
	var appStateFixture = _helpersReactHelpers.appStateFixture;

	var ControlPanel = _interopRequire(__webpack_require__(11));

	describe("Control Panel", function () {
	  var component = undefined;
	  var appState = appStateFixture;

	  describe("without user", function () {
	    beforeEach(function () {
	      component = React.renderToString(React.createElement(ControlPanel, { appState: appState }));
	    });

	    it("displays the signin button", function () {
	      expect(component).not.to.match(/Browse/);
	      expect(component).to.match(/Sign In/);
	    });
	  });

	  describe("with user", function () {
	    beforeEach(function () {
	      appState.user = "yeehaa";
	      component = React.renderToString(React.createElement(ControlPanel, { appState: appState }));
	    });

	    it("displays the mode buttons", function () {
	      expect(component).to.match(/Browse/);
	      expect(component).not.to.match(/Sign In/);
	    });
	  });
	});

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "controlPanel.spec.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	__webpack_require__(23);

	var css = _interopRequire(__webpack_require__(20));

	var React = _interopRequire(__webpack_require__(24));

	var Sidebar = _interopRequire(__webpack_require__(9));

	var Main = _interopRequire(__webpack_require__(8));

	var Unacademic = (function (_React$Component) {
	  function Unacademic() {
	    _classCallCheck(this, Unacademic);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Unacademic, _React$Component);

	  _createClass(Unacademic, {
	    render: {
	      value: function render() {
	        var _props = this.props;
	        var model = _props.model;
	        var appState = _props.appState;

	        return React.createElement(
	          "section",
	          { className: "app" },
	          React.createElement(Sidebar, { appState: appState }),
	          React.createElement(Main, { model: model })
	        );
	      }
	    }
	  });

	  return Unacademic;
	})(React.Component);

	;

	Unacademic.propTypes = {
	  model: React.PropTypes.object.isRequired,
	  appState: React.PropTypes.object.isRequired
	};

	module.exports = Unacademic;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "unacademic.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var chai = _interopRequire(__webpack_require__(19));

	var R = _interopRequire(__webpack_require__(26));

	var chaiString = _interopRequire(__webpack_require__(25));

	var React = _interopRequire(__webpack_require__(13));

	chai.use(chaiString);
	var expect = chai.expect;

	var Item = function Item(id) {
	  _classCallCheck(this, Item);

	  this.id = id;
	  this.description = ["ho"];
	  this.checkpoints = ["hi"];
	};

	var createItem = function (id) {
	  return new Item(id);
	};
	var range = R.times(R.identity, 5);
	var collection = R.map(createItem, range);
	var modelFixture = { collection: collection };

	var user = undefined;
	var mode = "browse";
	var history = [];
	var appStateFixture = { user: user, mode: mode, history: history };

	global.expect = expect;

	exports.React = React;
	exports.modelFixture = modelFixture;
	exports.appStateFixture = appStateFixture;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "react-helpers.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var Cards = _interopRequire(__webpack_require__(10));

	__webpack_require__(21);

	var Main = (function (_React$Component) {
	  function Main() {
	    _classCallCheck(this, Main);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Main, _React$Component);

	  _createClass(Main, {
	    render: {
	      value: function render() {
	        var collection = this.props.model.collection;

	        return React.createElement(
	          "section",
	          { className: "main" },
	          React.createElement(Cards, { collection: collection }),
	          React.createElement("section", { className: "timeline" })
	        );
	      }
	    }
	  });

	  return Main;
	})(React.Component);

	module.exports = Main;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "main.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	__webpack_require__(22);

	var React = _interopRequire(__webpack_require__(24));

	var DebugStateContainer = _interopRequire(__webpack_require__(12));

	var ControlPanel = _interopRequire(__webpack_require__(11));

	var Sidebar = (function (_React$Component) {
	  function Sidebar() {
	    _classCallCheck(this, Sidebar);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Sidebar, _React$Component);

	  _createClass(Sidebar, {
	    shouldComponentUpdate: {
	      value: function shouldComponentUpdate() {
	        return false;
	      }
	    },
	    render: {
	      value: function render() {
	        return React.createElement(
	          "div",
	          { className: "sidebar" },
	          React.createElement(
	            "section",
	            { className: "contentPanel" },
	            React.createElement(
	              "h1",
	              null,
	              "_Unacademic"
	            ),
	            React.createElement(
	              "p",
	              null,
	              " Learn By Dwelling"
	            )
	          ),
	          React.createElement(DebugStateContainer, null),
	          React.createElement(ControlPanel, { appState: this.props.appState })
	        );
	      }
	    }
	  });

	  return Sidebar;
	})(React.Component);

	;

	Sidebar.propTypes = {
	  appState: React.PropTypes.object.isRequired
	};

	module.exports = Sidebar;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "sidebar.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var R = _interopRequire(__webpack_require__(26));

	var Card = _interopRequire(__webpack_require__(14));

	var Actions = _interopRequire(__webpack_require__(15));

	var Cards = (function (_React$Component) {
	  function Cards(props) {
	    _classCallCheck(this, Cards);

	    _get(Object.getPrototypeOf(Cards.prototype), "constructor", this).call(this, props);
	  }

	  _inherits(Cards, _React$Component);

	  _createClass(Cards, {
	    render: {
	      value: function render() {
	        var collection = this.props.collection;

	        var createCards = R.map(function (model) {
	          return React.createElement(Card, { key: model.id, model: model });
	        });
	        var cards = createCards(collection);
	        return React.createElement(
	          "section",
	          { className: "cards" },
	          cards
	        );
	      }
	    }
	  });

	  return Cards;
	})(React.Component);

	module.exports = Cards;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "cards.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var HistoryButtons = _interopRequire(__webpack_require__(16));

	var AuthenticateButton = _interopRequire(__webpack_require__(17));

	var ModeButtons = _interopRequire(__webpack_require__(18));

	var ControlPanel = (function (_React$Component) {
	  function ControlPanel() {
	    _classCallCheck(this, ControlPanel);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ControlPanel, _React$Component);

	  _createClass(ControlPanel, {
	    render: {
	      value: function render() {
	        var _props$appState = this.props.appState;
	        var user = _props$appState.user;
	        var mode = _props$appState.mode;
	        var history = _props$appState.history;

	        return React.createElement(
	          "section",
	          { className: "controlPanel" },
	          React.createElement(HistoryButtons, { isEarliest: history.isEarliest, isLatest: history.isLatest }),
	          user ? React.createElement(ModeButtons, { mode: mode }) : React.createElement(AuthenticateButton, null)
	        );
	      }
	    }
	  });

	  return ControlPanel;
	})(React.Component);

	;

	ControlPanel.propTypes = {
	  appState: React.PropTypes.object.isRequired };

	module.exports = ControlPanel;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "controlPanel.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var moment = _interopRequire(__webpack_require__(37));

	var R = _interopRequire(__webpack_require__(26));

	var AppState = __webpack_require__(28).AppState;

	var DebugState = _interopRequire(__webpack_require__(29));

	var DebugStateContainer = (function (_React$Component) {
	  function DebugStateContainer(props) {
	    _classCallCheck(this, DebugStateContainer);

	    _get(Object.getPrototypeOf(DebugStateContainer.prototype), "constructor", this).call(this, props);
	    var debugObject = this.createDebugObject();
	    this.state = debugObject;
	    this.onChange = this.onChange.bind(this);
	  }

	  _inherits(DebugStateContainer, _React$Component);

	  _createClass(DebugStateContainer, {
	    componentDidMount: {
	      value: function componentDidMount() {
	        AppState.addChangeListener(this.onChange);
	      }
	    },
	    componentWillUnmount: {
	      value: function componentWillUnmount() {
	        AppState.removeChangeListener(this.onChange);
	      }
	    },
	    onChange: {
	      value: function onChange() {
	        var debugObject = this.createDebugObject();
	        return this.setState(debugObject);
	      }
	    },
	    getTime: {
	      value: function getTime(timestamp) {
	        return moment(timestamp).startOf("minutes").fromNow();
	      }
	    },
	    createDebugObject: {
	      value: function createDebugObject() {
	        var state = AppState.current;
	        var timestamp = state.timestamp;

	        state.timestamp = this.getTime(timestamp);
	        return this.divideDebugObject(state);
	      }
	    },
	    divideDebugObject: {
	      value: function divideDebugObject(object) {
	        var dataArray = R.toPairs(object);
	        var createTitleData = function (result, _ref) {
	          var _ref2 = _slicedToArray(_ref, 2);

	          var key = _ref2[0];
	          var value = _ref2[1];

	          if (R.is(Object, value)) {
	            result[key] = value;
	          } else {
	            result.general = result.general || {};
	            result.general[key] = value;
	          }
	          return result;
	        };
	        return R.reduce(createTitleData, {}, dataArray);
	      }
	    },
	    render: {
	      value: function render() {
	        return React.createElement(DebugState, { object: this.state });
	      }
	    }
	  });

	  return DebugStateContainer;
	})(React.Component);

	;

	module.exports = DebugStateContainer;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "debugStateContainer.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(27);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	__webpack_require__(21);

	var React = _interopRequire(__webpack_require__(24));

	var Checkpoint = _interopRequire(__webpack_require__(30));

	var Card = (function (_React$Component) {
	  function Card() {
	    _classCallCheck(this, Card);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Card, _React$Component);

	  _createClass(Card, {
	    render: {
	      value: function render() {
	        return React.createElement(
	          "section",
	          { className: "card" },
	          React.createElement("img", { src: this.props.model.image }),
	          React.createElement(
	            "hgroup",
	            null,
	            React.createElement(
	              "h1",
	              null,
	              this.props.model.title
	            )
	          ),
	          React.createElement(
	            "section",
	            null,
	            React.createElement(
	              "p",
	              null,
	              this.props.model.summary
	            )
	          ),
	          React.createElement(
	            "section",
	            null,
	            React.createElement(
	              "p",
	              null,
	              this.props.model.curator
	            )
	          ),
	          React.createElement(
	            "section",
	            null,
	            this.props.model.description.map(function (paragraph, index) {
	              return React.createElement(
	                "p",
	                { key: index },
	                paragraph
	              );
	            })
	          ),
	          React.createElement(
	            "section",
	            null,
	            this.props.model.checkpoints.map(function (checkpoint, index) {
	              return React.createElement(Checkpoint, { key: index, checkpoint: checkpoint });
	            })
	          ),
	          React.createElement(
	            "nav",
	            null,
	            React.createElement(
	              "button",
	              null,
	              "Explore"
	            ),
	            React.createElement(
	              "button",
	              null,
	              "Start"
	            )
	          )
	        );
	      }
	    }
	  });

	  return Card;
	})(React.Component);

	;

	module.exports = Card;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "card.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var AppDispatcher = _interopRequire(__webpack_require__(31));

	var AppStateConstants = _interopRequire(__webpack_require__(32));

	var API = _interopRequire(__webpack_require__(33));

	var Actions = {
	  loadedCollection: function loadedCollection(collection) {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.LOADED_COLLECTION,
	      collection: collection
	    });
	  },
	  getCollection: function getCollection(_ref) {
	    var user = _ref.user;
	    var mode = _ref.mode;

	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.GET_COLLECTION });
	    API.getCollection({ user: user, mode: mode });
	  },
	  authenticate: function authenticate() {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.AUTHENTICATE
	    });
	  },
	  switchMode: function switchMode(mode) {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.SWITCH_MODE,
	      mode: mode
	    });
	  },
	  revertHistory: function revertHistory() {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.REVERT_HISTORY
	    });
	  },
	  forwardHistory: function forwardHistory() {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.FORWARD_HISTORY
	    });
	  }
	};

	module.exports = Actions;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "index.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var Actions = _interopRequire(__webpack_require__(15));

	var HistoryButtons = (function (_React$Component) {
	  function HistoryButtons() {
	    _classCallCheck(this, HistoryButtons);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(HistoryButtons, _React$Component);

	  _createClass(HistoryButtons, {
	    revertHistory: {
	      value: function revertHistory() {
	        Actions.revertHistory();
	      }
	    },
	    forwardHistory: {
	      value: function forwardHistory() {
	        Actions.forwardHistory();
	      }
	    },
	    render: {
	      value: function render() {
	        var _props = this.props;
	        var isEarliest = _props.isEarliest;
	        var isLatest = _props.isLatest;

	        return React.createElement(
	          "div",
	          { className: "historyButtons" },
	          React.createElement(
	            "button",
	            { disabled: isEarliest, onClick: this.revertHistory },
	            "Revert History"
	          ),
	          React.createElement(
	            "button",
	            { disabled: isLatest, onClick: this.forwardHistory },
	            "Forward History"
	          )
	        );
	      }
	    }
	  });

	  return HistoryButtons;
	})(React.Component);

	HistoryButtons.propTypes = {
	  isEarliest: React.PropTypes.bool,
	  isLatest: React.PropTypes.bool
	};

	module.exports = HistoryButtons;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "historyButtons.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var React = _interopRequire(__webpack_require__(24));

	var Actions = _interopRequire(__webpack_require__(15));

	var Authenticate = React.createClass({
	  displayName: "Authenticate",

	  authenticate: function authenticate() {
	    Actions.authenticate();
	  },

	  render: function render() {
	    return React.createElement(
	      "section",
	      { className: "authenticate" },
	      React.createElement(
	        "button",
	        { onClick: this.authenticate },
	        "Sign In"
	      )
	    );
	  }
	});

	module.exports = Authenticate;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "authenticate.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var ModeButton = _interopRequire(__webpack_require__(34));

	var R = _interopRequire(__webpack_require__(26));

	var ModeButtons = (function (_React$Component) {
	  function ModeButtons() {
	    _classCallCheck(this, ModeButtons);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ModeButtons, _React$Component);

	  _createClass(ModeButtons, {
	    render: {
	      value: function render() {
	        var _this = this;

	        var createButtons = R.mapIndexed(function (mode, index) {
	          return React.createElement(ModeButton, { key: index, mode: mode, current: _this.props.mode });
	        });
	        var modeButtons = createButtons(this.props.modes);
	        return React.createElement(
	          "section",
	          { className: "modeButtons" },
	          modeButtons
	        );
	      }
	    }
	  });

	  return ModeButtons;
	})(React.Component);

	;

	ModeButtons.defaultProps = {
	  modes: ["browse", "learn", "curate"]
	};

	ModeButtons.propTypes = {
	  modes: React.PropTypes.array,
	  mode: React.PropTypes.string
	};

	module.exports = ModeButtons;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "modeButtons.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(35);


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "data:text/css;base64,QGZvbnQtZmFjZSB7CiAgZm9udC1mYW1pbHk6IE5pdHR5Tm9ybWFsOwogIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvTk4ud29mZicpIGZvcm1hdCgnd29mZicpOwp9CgpAZm9udC1mYWNlIHsKICBmb250LWZhbWlseTogTml0dHlCb2xkOwogIHNyYzogdXJsKCcuLi9hc3NldHMvZm9udHMvTkIud29mZicpIGZvcm1hdCgnd29mZicpOwp9Cgo6Oi13ZWJraXQtc2Nyb2xsYmFyIHsgCiAgICBkaXNwbGF5OiBub25lOyAKICB9CgpidXR0b24gewogIGZvbnQtZmFtaWx5OiBOaXR0eUJvbGQ7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBmb250LXNpemU6IDEzcHg7CiAgaGVpZ2h0OiBjYWxjKHZhcigtLWJhc2VVbml0KSAqIDEuNSk7CiAgYmFja2dyb3VuZDogdmFyKC0taW52ZXJzZUNvbG9yKTsKICBjb2xvcjogdmFyKC0tYmFzZUNvbG9yKTsKICBwYWRkaW5nOiAxMHB4IDIwcHggMTBweCAyMHB4OwogIG1hcmdpbi10b3A6IDEwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgYm9yZGVyOiBub25lOwp9Cgp0YWJsZSB7CiAgZm9udC1zaXplOiAxM3B4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgd2lkdGg6IDEwMCU7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3JkZXItc3BhY2luZzogMDsKfQoKdGQsIHRoIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGJvcmRlcjogbm9uZTsKICBoZWlnaHQ6IGNhbGModmFyKC0tYmFzZVVuaXQpICogMS41KTsKCgp9Cgp0aCB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgY29sb3I6IHZhcigtLWludmVyc2VDb2xvcik7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFzZUNvbG9yKTsKICB3aWR0aDogMTAwJTsKfQoKdGQgewogIHRleHQtYWxpZ246IGNlbnRlcjsKICB3aWR0aDogNTAlOwp9Cgpjb21wb25lbnQoYXBwKXsKICBkaXNwbGF5OiBmbGV4OwogIGZvbnQtZmFtaWx5OiBOaXR0eU5vcm1hbDsKICBoZWlnaHQ6IDEwMCU7Cn0KCmNvbXBvbmVudChjYXJkcyl7CiAgZGlzcGxheTogZmxleDsKICBvdmVyZmxvdy14OiBzY3JvbGw7CiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7CiAgaGVpZ2h0OiAxMDAlOwp9Cgpjb21wb25lbnQobWFpbil7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlnaHRCYXNlQ29sb3IpOwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgaGVpZ2h0OiAxMDAlOwp9Cgpjb21wb25lbnQodGltZWxpbmUpewogIGRpc3BsYXk6IG5vbmU7CiAgaGVpZ2h0OiAyMDBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZXR3ZWVuQmFzZUNvbG9yKTsKfQoKY29tcG9uZW50KGhpc3RvcnlCdXR0b25zKXsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBidXR0b24gewogICAgd2lkdGg6ICgxMDAlLzIpOwogICAgaGVpZ2h0OiBjYWxjKHZhcigtLWJhc2VVbml0KSAqIDIpOwogICAgJjpob3ZlciB7CiAgICAgIGNvbG9yOiB2YXIoLS1oaWdobGlnaHRDb2xvcik7CiAgICB9CiAgICAmOmRpc2FibGVkIHsKICAgICAgY29sb3I6IHZhcigtLWxpZ2h0QmFzZUNvbG9yKTsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmV0d2VlbkJhc2VDb2xvcik7CiAgICB9CiAgfQp9Cgpjb21wb25lbnQobW9kZUJ1dHRvbnMpewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIGJ1dHRvbiB7CiAgIHdpZHRoOiBjYWxjKDEwMCUvMyk7CiAgfQogIGJ1dHRvbi5hY3RpdmUgewogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFzZUNvbG9yKTsKICAgIGNvbG9yOiB2YXIoLS1pbnZlcnNlQ29sb3IpOwogIH0KfQoKY29tcG9uZW50KGF1dGhlbnRpY2F0ZSl7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgYnV0dG9uIHsKICAgd2lkdGg6IDEwMCU7CiAgfQogIGJ1dHRvbi5hY3RpdmUgewogICAgY29sb3I6IHZhcigtLWhpZ2hsaWdodENvbG9yKTsKICB9Cn0KCgpjb21wb25lbnQoZGVidWdnZXIpewogIGNvbG9yOiB2YXIoLS1iYXNlQ29sb3IpOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWludmVyc2VDb2xvcik7Cn0KCg=="

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "data:text/css;base64,Y29tcG9uZW50KGNhcmQpewogIGJveFNpemluZzogYm9yZGVyLWJveDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgbWFyZ2luOiB2YXIoLS1iYXNlVW5pdCk7CiAgbWluLXdpZHRoOiBjYWxjKDEyICogdmFyKC0tYmFzZVVuaXQpKTsKICBtYXgtd2lkdGg6IGNhbGMoMTIgKiB2YXIoLS1iYXNlVW5pdCkpOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWludmVyc2VDb2xvcik7CgogIGltZyB7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogYXV0bzsKICAgIGZpbHRlcjogZ3JheXNjYWxlKDEwMCUpOwogIH0KCiAgaW1nOmhvdmVyIHsKICAgIGZpbHRlcjogZ3JheXNjYWxlKDAlKTsKICB9CgogIGhncm91cCB7CiAgICBjb2xvcjogdmFyKC0tYmFzZUNvbG9yKTsKICAgIHBhZGRpbmc6IDIwcHggMzBweDsKICAgIG1hcmdpbi1ib3R0b206IDE1cHg7CgogICAgaDEgewogICAgICBmb250LWZhbWlseTogJ05pdHR5Qm9sZCc7CiAgICAgIGZvbnQtc2l6ZTogMjhweDsKICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7CiAgICAgIG1hcmdpbjogMDsKICAgIH0KICB9CgogIHNlY3Rpb24gewogICAgcGFkZGluZzogMzBweDsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsKICB9CgogIHNlY3Rpb246bGFzdC1vZi10eXBlIHsKICAgIGJvcmRlci1ib3R0b206IG5vbmU7CiAgfQoKICBuYXYgewogICAgZGlzcGxheTogZmxleDsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgfQoKICBidXR0b24gewogICAgYm9yZGVyOiBub25lOwogICAgaGVpZ2h0OiA0NXB4OwogICAgbWFyZ2luLWJvdHRvbTogNXB4OwogIH0KCiAgLmNoZWNrcG9pbnQgewogICAgc3BhbiB7CiAgICAgIG1hcmdpbi1yaWdodDogMzBweDsKICAgIH0KICB9Cn0K"

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "data:text/css;base64,Y29tcG9uZW50KHNpZGViYXIpIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgY29sb3I6IHZhcigtLWludmVyc2VDb2xvcik7CiAgcGFkZGluZzogdmFyKC0tYmFzZVVuaXQpOwogIG1pbi13aWR0aDogY2FsYygxMiAqIHZhcigtLWJhc2VVbml0KSk7CiAgbWF4LXdpZHRoOiBjYWxjKDEyICogdmFyKC0tYmFzZVVuaXQpKTsKICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrQmFzZUNvbG9yKTsKfQo="

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "data:text/css;base64,"

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(36);


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	(function (plugin) {
	  if (true) {
	    // NodeJS
	    module.exports = plugin;
	  }
	  else {
	    if (typeof define === "function" && define.amd) {
	      // AMD
	      define(function () {
	        return plugin;
	      });
	    }
	    else {
	      // Other environment (usually <script> tag): plug in to global chai instance directly.
	      chai.use(plugin);
	    }
	  }
	}(function (chai, utils) {
	  chai.string = chai.string || {};


	  chai.string.startsWith = function (str, prefix) {
	    return str.indexOf(prefix) === 0;
	  };

	  chai.string.endsWith = function (str, suffix) {
	    return str.indexOf(suffix, str.length - suffix.length) !== -1;
	  };

	  chai.string.equalIgnoreCase = function (str1, str2) {
	    return str1.toLowerCase() === str2.toLowerCase();
	  };

	  chai.string.singleLine = function(str) {
	    return str.trim().indexOf("\n") === -1;
	  };

	  chai.string.reverseOf = function(str, reversed) {
	    return str.split('').reverse().join('') === reversed;
	  };

	  chai.string.palindrome = function(str) {
	    var len = str.length;
	    for ( var i = 0; i < Math.floor(len/2); i++ ) {
	      if (str[i] !== str[len - 1 - i]) {
	        return false;
	      }
	    }
	    return true;
	  };

	  chai.string.entriesCount = function(str, substr, count) {
	    var i = 0,
	      len = str.length,
	      matches = 0;
	    while (i < len) {
	      var indx = str.indexOf(substr, i);
	      if (indx === -1) {
	        break;
	      }
	      else {
	        matches++;
	        i = indx + 1;
	      }
	    }
	    return matches === count;
	  };

	  var startsWithMethodWrapper = function (expected) {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.startsWith(actual, expected),
	      'expected ' + this._obj + ' to starts with ' + expected,
	      'expected ' + this._obj + ' to not starts with ' + expected
	    );
	  };

	  chai.Assertion.addChainableMethod('startsWith', startsWithMethodWrapper);
	  chai.Assertion.addChainableMethod('startWith', startsWithMethodWrapper);

	  var endsWithMethodWrapper = function (expected) {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.endsWith(actual, expected),
	      'expected ' + this._obj + ' to ends with ' + expected,
	      'expected ' + this._obj + ' to not ends with ' + expected
	    );
	  };

	  chai.Assertion.addChainableMethod('endsWith', endsWithMethodWrapper);
	  chai.Assertion.addChainableMethod('endWith', endsWithMethodWrapper);

	  chai.Assertion.addChainableMethod('equalIgnoreCase', function (expected) {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.equalIgnoreCase(actual, expected),
	      'expected ' + this._obj + ' to be equal to ' + expected + ' ignoring case',
	      'expected ' + this._obj + ' to be not equal to ' + expected + ' ignoring case'
	    );
	  });

	  chai.Assertion.addChainableMethod('singleLine', function () {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.singleLine(actual),
	      'expected ' + this._obj + ' to be single line',
	      'expected ' + this._obj + ' to be not single line'
	    );
	  });

	  chai.Assertion.addChainableMethod('reverseOf', function(expected) {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.reverseOf(actual, expected),
	      'expected ' + this._obj + ' to be reverse of ' + expected,
	      'expected ' + this._obj + ' to be not reverse of ' + expected
	    );
	  });

	  chai.Assertion.addChainableMethod('palindrome', function () {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.palindrome(actual),
	      'expected ' + this._obj + ' to be palindrome',
	      'expected ' + this._obj + ' to be not palindrome'
	    );
	  });

	  chai.Assertion.addChainableMethod('entriesCount', function(substr, expected) {
	    var actual = this._obj;

	    return this.assert(
	      chai.string.entriesCount(actual, substr, expected),
	      'expected ' + this._obj + ' to have ' + substr + ' ' + expected + ' time(s)',
	      'expected ' + this._obj + ' to not have ' + substr + ' ' + expected + ' time(s)'
	    );
	  });

	  // Asserts
	  var assert = chai.assert;

	  assert.startsWith = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.startsWith(exp);
	  };

	  assert.notStartsWith = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.startsWith(exp);
	  };

	  assert.endsWith = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.endsWith(exp);
	  };

	  assert.notEndsWith = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.endsWith(exp);
	  };

	  assert.equalIgnoreCase = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.be.equalIgnoreCase(exp);
	  };

	  assert.notEqualIgnoreCase = function (val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.be.equalIgnoreCase(exp);
	  };

	  assert.singleLine = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.be.singleLine();
	  };

	  assert.notSingleLine = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.be.singleLine();
	  };

	  assert.reverseOf = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.be.reverseOf(exp);
	  };

	  assert.notReverseOf = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.be.reverseOf(exp);
	  };

	  assert.palindrome = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.be.palindrome();
	  };

	  assert.notPalindrome = function(val, exp, msg) {
	    new chai.Assertion(val, msg).to.not.be.palindrome();
	  };

	  assert.entriesCount = function(str, substr, count, msg) {
	    new chai.Assertion(str, msg).to.have.entriesCount(substr, count);
	  }

	}));


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	//  Ramda v0.11.0
	//  https://github.com/ramda/ramda
	//  (c) 2013-2015 Scott Sauyet and Michael Hurley
	//  Ramda may be freely distributed under the MIT license.

	;(function() {

	    'use strict';

	    var __ = { ramda: 'placeholder' };

	    var _add = function _add(a, b) {
	        return a + b;
	    };

	    var _all = function _all(fn, list) {
	        var idx = -1;
	        while (++idx < list.length) {
	            if (!fn(list[idx])) {
	                return false;
	            }
	        }
	        return true;
	    };

	    var _any = function _any(fn, list) {
	        var idx = -1;
	        while (++idx < list.length) {
	            if (fn(list[idx])) {
	                return true;
	            }
	        }
	        return false;
	    };

	    var _assoc = function _assoc(prop, val, obj) {
	        var result = {};
	        for (var p in obj) {
	            result[p] = obj[p];
	        }
	        result[prop] = val;
	        return result;
	    };

	    /**
	     * Basic, right-associative composition function. Accepts two functions and returns the
	     * composite function; this composite function represents the operation `var h = f(g(x))`,
	     * where `f` is the first argument, `g` is the second argument, and `x` is whatever
	     * argument(s) are passed to `h`.
	     *
	     * This function's main use is to build the more general `compose` function, which accepts
	     * any number of functions.
	     *
	     * @private
	     * @category Function
	     * @param {Function} f A function.
	     * @param {Function} g A function.
	     * @return {Function} A new function that is the equivalent of `f(g(x))`.
	     * @example
	     *
	     *      var double = function(x) { return x * 2; };
	     *      var square = function(x) { return x * x; };
	     *      var squareThenDouble = _compose(double, square);
	     *
	     *      squareThenDouble(5); //≅ double(square(5)) => 50
	     */
	    var _compose = function _compose(f, g) {
	        return function () {
	            return f.call(this, g.apply(this, arguments));
	        };
	    };

	    /**
	     * Private `concat` function to merge two array-like objects.
	     *
	     * @private
	     * @param {Array|Arguments} [set1=[]] An array-like object.
	     * @param {Array|Arguments} [set2=[]] An array-like object.
	     * @return {Array} A new, merged array.
	     * @example
	     *
	     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     */
	    var _concat = function _concat(set1, set2) {
	        set1 = set1 || [];
	        set2 = set2 || [];
	        var idx;
	        var len1 = set1.length;
	        var len2 = set2.length;
	        var result = [];
	        idx = -1;
	        while (++idx < len1) {
	            result[result.length] = set1[idx];
	        }
	        idx = -1;
	        while (++idx < len2) {
	            result[result.length] = set2[idx];
	        }
	        return result;
	    };

	    var _containsWith = function _containsWith(pred, x, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len) {
	            if (pred(x, list[idx])) {
	                return true;
	            }
	        }
	        return false;
	    };

	    /**
	     * Create a function which takes a comparator function and a list
	     * and determines the winning value by a compatator. Used internally
	     * by `R.maxBy` and `R.minBy`
	     *
	     * @private
	     * @param {Function} compatator a function to compare two items
	     * @category Math
	     * @return {Function}
	     */
	    var _createMaxMinBy = function _createMaxMinBy(comparator) {
	        return function (valueComputer, list) {
	            if (!(list && list.length > 0)) {
	                return;
	            }
	            var idx = 0, winner = list[idx], computedWinner = valueComputer(winner), computedCurrent;
	            while (++idx < list.length) {
	                computedCurrent = valueComputer(list[idx]);
	                if (comparator(computedCurrent, computedWinner)) {
	                    computedWinner = computedCurrent;
	                    winner = list[idx];
	                }
	            }
	            return winner;
	        };
	    };

	    /**
	     * Optimized internal two-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry1 = function _curry1(fn) {
	        return function f1(a) {
	            if (arguments.length === 0) {
	                return f1;
	            } else if (a === __) {
	                return f1;
	            } else {
	                return fn(a);
	            }
	        };
	    };

	    /**
	     * Optimized internal two-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry2 = function _curry2(fn) {
	        return function f2(a, b) {
	            var n = arguments.length;
	            if (n === 0) {
	                return f2;
	            } else if (n === 1 && a === __) {
	                return f2;
	            } else if (n === 1) {
	                return _curry1(function (b) {
	                    return fn(a, b);
	                });
	            } else if (n === 2 && a === __ && b === __) {
	                return f2;
	            } else if (n === 2 && a === __) {
	                return _curry1(function (a) {
	                    return fn(a, b);
	                });
	            } else if (n === 2 && b === __) {
	                return _curry1(function (b) {
	                    return fn(a, b);
	                });
	            } else {
	                return fn(a, b);
	            }
	        };
	    };

	    /**
	     * Optimized internal three-arity curry function.
	     *
	     * @private
	     * @category Function
	     * @param {Function} fn The function to curry.
	     * @return {Function} The curried function.
	     */
	    var _curry3 = function _curry3(fn) {
	        return function f3(a, b, c) {
	            var n = arguments.length;
	            if (n === 0) {
	                return f3;
	            } else if (n === 1 && a === __) {
	                return f3;
	            } else if (n === 1) {
	                return _curry2(function (b, c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 2 && a === __ && b === __) {
	                return f3;
	            } else if (n === 2 && a === __) {
	                return _curry2(function (a, c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 2 && b === __) {
	                return _curry2(function (b, c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 2) {
	                return _curry1(function (c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && a === __ && b === __ && c === __) {
	                return f3;
	            } else if (n === 3 && a === __ && b === __) {
	                return _curry2(function (a, b) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && a === __ && c === __) {
	                return _curry2(function (a, c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && b === __ && c === __) {
	                return _curry2(function (b, c) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && a === __) {
	                return _curry1(function (a) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && b === __) {
	                return _curry1(function (b) {
	                    return fn(a, b, c);
	                });
	            } else if (n === 3 && c === __) {
	                return _curry1(function (c) {
	                    return fn(a, b, c);
	                });
	            } else {
	                return fn(a, b, c);
	            }
	        };
	    };

	    var _dissoc = function _dissoc(prop, obj) {
	        var result = {};
	        for (var p in obj) {
	            if (p !== prop) {
	                result[p] = obj[p];
	            }
	        }
	        return result;
	    };

	    var _filter = function _filter(fn, list) {
	        var idx = -1, len = list.length, result = [];
	        while (++idx < len) {
	            if (fn(list[idx])) {
	                result[result.length] = list[idx];
	            }
	        }
	        return result;
	    };

	    var _filterIndexed = function _filterIndexed(fn, list) {
	        var idx = -1, len = list.length, result = [];
	        while (++idx < len) {
	            if (fn(list[idx], idx, list)) {
	                result[result.length] = list[idx];
	            }
	        }
	        return result;
	    };

	    // i can't bear not to return *something*
	    var _forEach = function _forEach(fn, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len) {
	            fn(list[idx]);
	        }
	        // i can't bear not to return *something*
	        return list;
	    };

	    /**
	     * @private
	     * @param {Function} fn The strategy for extracting function names from an object
	     * @return {Function} A function that takes an object and returns an array of function names.
	     *
	     */
	    var _functionsWith = function _functionsWith(fn) {
	        return function (obj) {
	            return _filter(function (key) {
	                return typeof obj[key] === 'function';
	            }, fn(obj));
	        };
	    };

	    var _gt = function _gt(a, b) {
	        return a > b;
	    };

	    var _has = function _has(prop, obj) {
	        return Object.prototype.hasOwnProperty.call(obj, prop);
	    };

	    /**
	     * Internal implementation of `indexOf`.
	     * Returns the position of the first occurrence of an item in an array
	     * (by strict equality),
	     * or -1 if the item is not included in the array.
	     *
	     * @private
	     * @param {Array} list The array to search
	     * @param {*} item the item to find in the Array
	     * @param {Number} from (optional) the index to start searching the Array
	     * @return {Number} The index of the found item, or -1.
	     *
	     */
	    var _indexOf = function _indexOf(list, item, from) {
	        var idx = 0, len = list.length;
	        if (typeof from == 'number') {
	            idx = from < 0 ? Math.max(0, len + from) : from;
	        }
	        while (idx < len) {
	            if (list[idx] === item) {
	                return idx;
	            }
	            ++idx;
	        }
	        return -1;
	    };

	    /**
	     * Tests whether or not an object is an array.
	     *
	     * @private
	     * @param {*} val The object to test.
	     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
	     * @example
	     *
	     *      _isArray([]); //=> true
	     *      _isArray(null); //=> false
	     *      _isArray({}); //=> false
	     */
	    var _isArray = Array.isArray || function _isArray(val) {
	        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
	    };

	    /**
	     * Determine if the passed argument is an integer.
	     *
	     * @private
	     * @param {*} n
	     * @category Type
	     * @return {Boolean}
	     */
	    var _isInteger = Number.isInteger || function _isInteger(n) {
	        return n << 0 === n;
	    };

	    /**
	     * Tests if a value is a thenable (promise).
	     */
	    var _isThenable = function _isThenable(value) {
	        return value != null && value === Object(value) && typeof value.then === 'function';
	    };

	    /**
	     * Internal implementation of `lastIndexOf`.
	     * Returns the position of the last occurrence of an item in an array
	     * (by strict equality),
	     * or -1 if the item is not included in the array.
	     *
	     * @private
	     * @param {Array} list The array to search
	     * @param {*} item the item to find in the Array
	     * @param {Number} from (optional) the index to start searching the Array
	     * @return {Number} The index of the found item, or -1.
	     *
	     */
	    var _lastIndexOf = function _lastIndexOf(list, item, from) {
	        var idx = list.length;
	        if (typeof from == 'number') {
	            idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
	        }
	        while (--idx >= 0) {
	            if (list[idx] === item) {
	                return idx;
	            }
	        }
	        return -1;
	    };

	    var _lt = function _lt(a, b) {
	        return a < b;
	    };

	    var _map = function _map(fn, list) {
	        var idx = -1, len = list.length, result = [];
	        while (++idx < len) {
	            result[idx] = fn(list[idx]);
	        }
	        return result;
	    };

	    var _multiply = function _multiply(a, b) {
	        return a * b;
	    };

	    var _nth = function _nth(n, list) {
	        return n < 0 ? list[list.length + n] : list[n];
	    };

	    /**
	     * @private
	     * @param {Function} fn The strategy for extracting keys from an object
	     * @return {Function} A function that takes an object and returns an array of
	     *         key-value arrays.
	     */
	    var _pairWith = function _pairWith(fn) {
	        return function (obj) {
	            return _map(function (key) {
	                return [
	                    key,
	                    obj[key]
	                ];
	            }, fn(obj));
	        };
	    };

	    /**
	     * internal path function
	     * Takes an array, paths, indicating the deep set of keys
	     * to find.
	     *
	     * @private
	     * @memberOf R
	     * @category Object
	     * @param {Array} paths An array of strings to map to object properties
	     * @param {Object} obj The object to find the path in
	     * @return {Array} The value at the end of the path or `undefined`.
	     * @example
	     *
	     *      _path(['a', 'b'], {a: {b: 2}}); //=> 2
	     */
	    var _path = function _path(paths, obj) {
	        if (obj == null || paths.length === 0) {
	            return;
	        } else {
	            var val = obj;
	            for (var idx = 0, len = paths.length; idx < len && val != null; idx += 1) {
	                val = val[paths[idx]];
	            }
	            return val;
	        }
	    };

	    /**
	     * Internal implementation of `pickAll`
	     *
	     * @private
	     * @see R.pickAll
	     */
	    var _pickAll = function _pickAll(names, obj) {
	        var copy = {};
	        _forEach(function (name) {
	            copy[name] = obj[name];
	        }, names);
	        return copy;
	    };

	    var _prepend = function _prepend(el, list) {
	        return _concat([el], list);
	    };

	    var _reduce = function _reduce(fn, acc, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len) {
	            acc = fn(acc, list[idx]);
	        }
	        return acc;
	    };

	    /**
	     * internal helper for `where`
	     *
	     * @private
	     * @see R.where
	     */
	    var _satisfiesSpec = function _satisfiesSpec(spec, parsedSpec, testObj) {
	        if (spec === testObj) {
	            return true;
	        }
	        if (testObj == null) {
	            return false;
	        }
	        parsedSpec.fn = parsedSpec.fn || [];
	        parsedSpec.obj = parsedSpec.obj || [];
	        var key, val, idx = -1, fnLen = parsedSpec.fn.length, j = -1, objLen = parsedSpec.obj.length;
	        while (++idx < fnLen) {
	            key = parsedSpec.fn[idx];
	            val = spec[key];
	            if (!(key in testObj)) {
	                return false;
	            }
	            if (!val(testObj[key], testObj)) {
	                return false;
	            }
	        }
	        while (++j < objLen) {
	            key = parsedSpec.obj[j];
	            if (spec[key] !== testObj[key]) {
	                return false;
	            }
	        }
	        return true;
	    };

	    /**
	     * An optimized, private array `slice` implementation.
	     *
	     * @private
	     * @param {Arguments|Array} args The array or arguments object to consider.
	     * @param {Number} [from=0] The array index to slice from, inclusive.
	     * @param {Number} [to=args.length] The array index to slice to, exclusive.
	     * @return {Array} A new, sliced array.
	     * @example
	     *
	     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]
	     *
	     *      var firstThreeArgs = function(a, b, c, d) {
	     *        return _slice(arguments, 0, 3);
	     *      };
	     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]
	     */
	    var _slice = function _slice(args, from, to) {
	        switch (arguments.length) {
	        case 1:
	            return _slice(args, 0, args.length);
	        case 2:
	            return _slice(args, from, args.length);
	        default:
	            var length = Math.max(0, to - from), list = [], idx = -1;
	            while (++idx < length) {
	                list[idx] = args[from + idx];
	            }
	            return list;
	        }
	    };

	    /**
	     * Adds two numbers (or strings). Equivalent to `a + b` but curried.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @sig String -> String -> String
	     * @param {Number|String} a The first value.
	     * @param {Number|String} b The second value.
	     * @return {Number|String} The result of `a + b`.
	     * @example
	     *
	     *      var increment = R.add(1);
	     *      increment(10);   //=> 11
	     *      R.add(2, 3);       //=>  5
	     *      R.add(7)(10);      //=> 17
	     */
	    var add = _curry2(_add);

	    /**
	     * Returns `true` if all elements of the list match the predicate, `false` if there are any
	     * that don't.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
	     *         otherwise.
	     * @example
	     *
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      var lessThan3 = R.flip(R.lt)(3);
	     *      var xs = R.range(1, 3);
	     *      xs; //=> [1, 2]
	     *      R.all(lessThan2)(xs); //=> false
	     *      R.all(lessThan3)(xs); //=> true
	     */
	    var all = _curry2(_all);

	    /**
	     * Returns a function that always returns the given value.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig a -> (* -> a)
	     * @param {*} val The value to wrap in a function
	     * @return {Function} A Function :: * -> val.
	     * @example
	     *
	     *      var t = R.always('Tee');
	     *      t(); //=> 'Tee'
	     */
	    var always = _curry1(function always(val) {
	        return function () {
	            return val;
	        };
	    });

	    /**
	     *
	     * A function wrapping calls to the two functions in an `&&` operation, returning the result of the first
	     * function if it is false-y and the result of the second function otherwise.  Note that this is
	     * short-circuited, meaning that the second function will not be invoked if the first returns a false-y
	     * value.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and ANDs their outputs together.
	     * @example
	     *
	     *      var gt10 = function(x) { return x > 10; };
	     *      var even = function(x) { return x % 2 === 0 };
	     *      var f = R.and(gt10, even);
	     *      f(100); //=> true
	     *      f(101); //=> false
	     */
	    var and = _curry2(function and(f, g) {
	        return function _and() {
	            return f.apply(this, arguments) && g.apply(this, arguments);
	        };
	    });

	    /**
	     * Returns `true` if at least one of elements of the list match the predicate, `false`
	     * otherwise.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Boolean
	     * @param {Function} fn The predicate function.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
	     *         otherwise.
	     * @example
	     *
	     *      var lessThan0 = R.flip(R.lt)(0);
	     *      var lessThan2 = R.flip(R.lt)(2);
	     *      var xs = R.range(1, 3);
	     *      xs; //=> [1, 2]
	     *      R.any(lessThan0)(xs); //=> false
	     *      R.any(lessThan2)(xs); //=> true
	     */
	    var any = _curry2(_any);

	    /**
	     * Applies function `fn` to the argument list `args`. This is useful for
	     * creating a fixed-arity function from a variadic function. `fn` should
	     * be a bound function if context is significant.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (*... -> a) -> [*] -> a
	     * @param {Function} fn
	     * @param {Array} args
	     * @return {*}
	     * @example
	     *
	     *      var nums = [1, 2, 3, -99, 42, 6, 7];
	     *      R.apply(Math.max, nums); //=> 42
	     */
	    var apply = _curry2(function apply(fn, args) {
	        return fn.apply(this, args);
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts exactly `n`
	     * parameters. Unlike `nAry`, which passes only `n` arguments to the wrapped function,
	     * functions produced by `arity` will pass all provided arguments to the wrapped function.
	     *
	     * @func
	     * @memberOf R
	     * @sig (Number, (* -> *)) -> (* -> *)
	     * @category Function
	     * @param {Number} n The desired arity of the returned function.
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is
	     *         guaranteed to be of arity `n`.
	     * @example
	     *
	     *      var takesTwoArgs = function(a, b) {
	     *        return [a, b];
	     *      };
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.arity(1, takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // All arguments are passed through to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, 2]
	     */
	    var arity = _curry2(function (n, fn) {
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.apply(this, arguments);
	            };
	        case 1:
	            return function (a0) {
	                void a0;
	                return fn.apply(this, arguments);
	            };
	        case 2:
	            return function (a0, a1) {
	                void a1;
	                return fn.apply(this, arguments);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                void a2;
	                return fn.apply(this, arguments);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                void a3;
	                return fn.apply(this, arguments);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                void a4;
	                return fn.apply(this, arguments);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                void a5;
	                return fn.apply(this, arguments);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                void a6;
	                return fn.apply(this, arguments);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                void a7;
	                return fn.apply(this, arguments);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                void a8;
	                return fn.apply(this, arguments);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                void a9;
	                return fn.apply(this, arguments);
	            };
	        default:
	            throw new Error('First argument to arity must be a non-negative integer no greater than ten');
	        }
	    });

	    /**
	     * Makes a shallow clone of an object, setting or overriding the specified
	     * property with the given value.  Note that this copies and flattens
	     * prototype properties onto the new object as well.  All non-primitive
	     * properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig String -> a -> {k: v} -> {k: v}
	     * @param {String} prop the property name to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except for the specified property.
	     * @example
	     *
	     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
	     */
	    var assoc = _curry3(_assoc);

	    /**
	     * Creates a function that is bound to a context.
	     * Note: `R.bind` does not provide the additional argument-binding capabilities of
	     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @category Object
	     * @sig (* -> *) -> {*} -> (* -> *)
	     * @param {Function} fn The function to bind to context
	     * @param {Object} thisObj The context to bind `fn` to
	     * @return {Function} A function that will execute in the context of `thisObj`.
	     */
	    var bind = _curry2(function bind(fn, thisObj) {
	        return arity(fn.length, function () {
	            return fn.apply(thisObj, arguments);
	        });
	    });

	    /**
	     * Makes a comparator function out of a function that reports whether the first element is less than the second.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a, b -> Boolean) -> (a, b -> Number)
	     * @param {Function} pred A predicate function of arity two.
	     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.
	     * @example
	     *
	     *      var cmp = R.comparator(function(a, b) {
	     *        return a.age < b.age;
	     *      });
	     *      var people = [
	     *        // ...
	     *      ];
	     *      R.sort(cmp, people);
	     */
	    var comparator = _curry1(function comparator(pred) {
	        return function (a, b) {
	            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
	        };
	    });

	    /**
	     * Returns a function, `fn`, which encapsulates if/else-if/else logic.
	     * Each argument to `R.cond` is a [predicate, transform] pair. All of
	     * the arguments to `fn` are applied to each of the predicates in turn
	     * until one returns a "truthy" value, at which point `fn` returns the
	     * result of applying its arguments to the corresponding transformer.
	     * If none of the predicates matches, `fn` returns undefined.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig [(*... -> Boolean),(*... -> *)]... -> (*... -> *)
	     * @param {...Function} functions
	     * @return {Function}
	     * @example
	     *
	     *      var fn = R.cond(
	     *          [R.eq(0),   R.always('water freezes at 0°C')],
	     *          [R.eq(100), R.always('water boils at 100°C')],
	     *          [R.T,       function(temp) { return 'nothing special happens at ' + temp + '°C'; }]
	     *      );
	     *      fn(0); //=> 'water freezes at 0°C'
	     *      fn(50); //=> 'nothing special happens at 50°C'
	     *      fn(100); //=> 'water boils at 100°C'
	     */
	    var cond = function cond() {
	        var pairs = arguments;
	        return function () {
	            var idx = -1;
	            while (++idx < pairs.length) {
	                if (pairs[idx][0].apply(this, arguments)) {
	                    return pairs[idx][1].apply(this, arguments);
	                }
	            }
	        };
	    };

	    /**
	     * Returns `true` if the `x` is found in the `list`, using `pred` as an
	     * equality predicate for `x`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a, a -> Boolean) -> a -> [a] -> Boolean
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {*} x The item to find
	     * @param {Array} list The list to iterate over
	     * @return {Boolean} `true` if `x` is in `list`, else `false`.
	     * @example
	     *
	     *     var xs = [{x: 12}, {x: 11}, {x: 10}];
	     *     R.containsWith(function(a, b) { return a.x === b.x; }, {x: 10}, xs); //=> true
	     *     R.containsWith(function(a, b) { return a.x === b.x; }, {x: 1}, xs); //=> false
	     */
	    var containsWith = _curry3(_containsWith);

	    /**
	     * Counts the elements of a list according to how many match each value
	     * of a key generated by the supplied function. Returns an object
	     * mapping the keys produced by `fn` to the number of occurrences in
	     * the list. Note that all keys are coerced to strings because of how
	     * JavaScript objects work.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig (a -> String) -> [a] -> {*}
	     * @param {Function} fn The function used to map values to keys.
	     * @param {Array} list The list to count elements from.
	     * @return {Object} An object mapping keys to number of occurrences in the list.
	     * @example
	     *
	     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
	     *      var letters = R.split('', 'abcABCaaaBBc');
	     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
	     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}
	     */
	    var countBy = _curry2(function countBy(fn, list) {
	        var counts = {};
	        var len = list.length;
	        var idx = -1;
	        while (++idx < len) {
	            var key = fn(list[idx]);
	            counts[key] = (_has(key, counts) ? counts[key] : 0) + 1;
	        }
	        return counts;
	    });

	    /**
	     * Creates an object containing a single key:value pair.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig String -> a -> {String:a}
	     * @param {String} key
	     * @param {*} val
	     * @return {Object}
	     * @example
	     *
	     *      var matchPhrases = R.compose(
	     *          R.createMapEntry('must'),
	     *          R.map(R.createMapEntry('match_phrase'))
	     *      );
	     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
	     */
	    var createMapEntry = _curry2(function (key, val) {
	        var obj = {};
	        obj[key] = val;
	        return obj;
	    });

	    /**
	     * Returns a curried equivalent of the provided function, with the
	     * specified arity. The curried function has two unusual capabilities.
	     * First, its arguments needn't be provided one at a time. If `g` is
	     * `R.curryN(3, f)`, the following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`,
	     * the following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} length The arity for the returned function.
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curry
	     * @example
	     *
	     *      var addFourNumbers = function() {
	     *        return R.sum([].slice.call(arguments, 0, 4));
	     *      };
	     *
	     *      var curriedAddFourNumbers = R.curryN(4, addFourNumbers);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curryN = _curry2(function curryN(length, fn) {
	        return arity(length, function () {
	            var n = arguments.length;
	            var shortfall = length - n;
	            var idx = n;
	            while (idx--) {
	                if (arguments[idx] === __) {
	                    shortfall += 1;
	                }
	            }
	            if (shortfall <= 0) {
	                return fn.apply(this, arguments);
	            } else {
	                var initialArgs = _slice(arguments);
	                return curryN(shortfall, function () {
	                    var currentArgs = _slice(arguments);
	                    var combinedArgs = [];
	                    var idx = -1;
	                    while (++idx < n) {
	                        var val = initialArgs[idx];
	                        combinedArgs[idx] = val === __ ? currentArgs.shift() : val;
	                    }
	                    return fn.apply(this, combinedArgs.concat(currentArgs));
	                });
	            }
	        });
	    });

	    /**
	     * Decrements its argument.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @example
	     *
	     *      R.dec(42); //=> 41
	     */
	    var dec = add(-1);

	    /**
	     * Returns the second argument if it is not null or undefined. If it is null
	     * or undefined, the first (default) argument is returned.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig a -> b -> a | b
	     * @param {a} val The default value.
	     * @param {b} val The value to return if it is not null or undefined
	     * @return {*} The the second value or the default value
	     * @example
	     *
	     *      var defaultTo42 = defaultTo(42);
	     *
	     *      defaultTo42(null);  //=> 42
	     *      defaultTo42(undefined);  //=> 42
	     *      defaultTo42('Ramda');  //=> 'Ramda'
	     */
	    var defaultTo = _curry2(function defaultTo(d, v) {
	        return v == null ? d : v;
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.
	     * Duplication is determined according to the value returned by applying the supplied predicate to two list
	     * elements.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @see R.difference
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @example
	     *
	     *      function cmp(x, y) { return x.a === y.a; }
	     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
	     *      var l2 = [{a: 3}, {a: 4}];
	     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
	     *
	     */
	    var differenceWith = _curry3(function differenceWith(pred, first, second) {
	        var out = [];
	        var idx = -1;
	        var firstLen = first.length;
	        var containsPred = containsWith(pred);
	        while (++idx < firstLen) {
	            if (!containsPred(first[idx], second) && !containsPred(first[idx], out)) {
	                out[idx] = first[idx];
	            }
	        }
	        return out;
	    });

	    /**
	     * Returns a new object that does not contain a `prop` property.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig String -> {k: v} -> {k: v}
	     * @param {String} prop the name of the property to dissociate
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original but without the specified property
	     * @example
	     *
	     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
	     */
	    var dissoc = _curry2(_dissoc);

	    /**
	     * Divides two numbers. Equivalent to `a / b`.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a / b`.
	     * @example
	     *
	     *      R.divide(71, 100); //=> 0.71
	     *
	     *      var half = R.divide(R.__, 2);
	     *      half(42); //=> 21
	     *
	     *      var reciprocal = R.divide(1);
	     *      reciprocal(4);   //=> 0.25
	     */
	    var divide = _curry2(function divide(a, b) {
	        return a / b;
	    });

	    /**
	     * Returns a new list containing the last `n` elements of a given list, passing each value
	     * to the supplied predicate function, skipping elements while the predicate function returns
	     * `true`. The predicate function is passed one argument: *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @example
	     *
	     *      var lteTwo = function(x) {
	     *        return x <= 2;
	     *      };
	     *
	     *      R.dropWhile(lteTwo, [1, 2, 3, 4]); //=> [3, 4]
	     */
	    var dropWhile = _curry2(function dropWhile(pred, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len && pred(list[idx])) {
	        }
	        return _slice(list, idx);
	    });

	    /**
	     * Tests if two items are equal.  Equality is strict here, meaning reference equality for objects and
	     * non-coercing equality for primitives.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig a -> b -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      var o = {};
	     *      R.eq(o, o); //=> true
	     *      R.eq(o, {}); //=> false
	     *      R.eq(1, 1); //=> true
	     *      R.eq(1, '1'); //=> false
	     *      R.eq(0, -0); //=> false
	     *      R.eq(NaN, NaN); //=> true
	     */
	    var eq = _curry2(function eq(a, b) {
	        if (a === 0) {
	            return 1 / a === 1 / b;
	        } else {
	            return a === b || a !== a && b !== b;
	        }
	    });

	    /**
	     * Reports whether two objects have the same value for the specified property.  Useful as a curried predicate.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig k -> {k: v} -> {k: v} -> Boolean
	     * @param {String} prop The name of the property to compare
	     * @param {Object} obj1
	     * @param {Object} obj2
	     * @return {Boolean}
	     *
	     * @example
	     *
	     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
	     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
	     *      R.eqProps('a', o1, o2); //=> false
	     *      R.eqProps('c', o1, o2); //=> true
	     */
	    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {
	        return obj1[prop] === obj2[prop];
	    });

	    /**
	     * Like `filter`, but passes additional parameters to the predicate function. The predicate
	     * function is passed three arguments: *(value, index, list)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a, i, [a] -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} The new filtered array.
	     * @example
	     *
	     *      var lastTwo = function(val, idx, list) {
	     *        return list.length - idx <= 2;
	     *      };
	     *      R.filterIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]); //=> [0, 9]
	     */
	    var filterIndexed = _curry2(_filterIndexed);

	    /**
	     * Returns the first element of the list which matches the predicate, or `undefined` if no
	     * element matches.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     *        desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
	     *      R.find(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var find = _curry2(function find(fn, list) {
	        var idx = -1;
	        var len = list.length;
	        while (++idx < len) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	        }
	    });

	    /**
	     * Returns the index of the first element of the list which matches the predicate, or `-1`
	     * if no element matches.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @example
	     *
	     *      var xs = [{a: 1}, {a: 2}, {a: 3}];
	     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
	     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findIndex = _curry2(function findIndex(fn, list) {
	        var idx = -1;
	        var len = list.length;
	        while (++idx < len) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	        }
	        return -1;
	    });

	    /**
	     * Returns the last element of the list which matches the predicate, or `undefined` if no
	     * element matches.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> a | undefined
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Object} The element found, or `undefined`.
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
	     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
	     */
	    var findLast = _curry2(function findLast(fn, list) {
	        var idx = list.length;
	        while (idx--) {
	            if (fn(list[idx])) {
	                return list[idx];
	            }
	        }
	    });

	    /**
	     * Returns the index of the last element of the list which matches the predicate, or
	     * `-1` if no element matches.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> Number
	     * @param {Function} fn The predicate function used to determine if the element is the
	     * desired one.
	     * @param {Array} list The array to consider.
	     * @return {Number} The index of the element found, or `-1`.
	     * @example
	     *
	     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
	     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
	     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
	     */
	    var findLastIndex = _curry2(function findLastIndex(fn, list) {
	        var idx = list.length;
	        while (idx--) {
	            if (fn(list[idx])) {
	                return idx;
	            }
	        }
	        return -1;
	    });

	    /**
	     * Iterate over an input `list`, calling a provided function `fn` for each element in the
	     * list.
	     *
	     * `fn` receives one argument: *(value)*.
	     *
	     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse arrays), unlike
	     * the native `Array.prototype.forEach` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
	     *
	     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original
	     * array. In some libraries this function is named `each`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> *) -> [a] -> [a]
	     * @param {Function} fn The function to invoke. Receives one argument, `value`.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} The original list.
	     * @example
	     *
	     *      var printXPlusFive = function(x) { console.log(x + 5); };
	     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
	     *      //-> 6
	     *      //-> 7
	     *      //-> 8
	     */
	    var forEach = _curry2(_forEach);

	    /**
	     * Like `forEach`, but but passes additional parameters to the predicate function.
	     *
	     * `fn` receives three arguments: *(value, index, list)*.
	     *
	     * Note: `R.forEachIndexed` does not skip deleted or unassigned indices (sparse arrays),
	     * unlike the native `Array.prototype.forEach` method. For more details on this behavior,
	     * see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
	     *
	     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original
	     * array. In some libraries this function is named `each`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a, i, [a] -> ) -> [a] -> [a]
	     * @param {Function} fn The function to invoke. Receives three arguments:
	     *        (`value`, `index`, `list`).
	     * @param {Array} list The list to iterate over.
	     * @return {Array} The original list.
	     * @example
	     *
	     *      // Note that having access to the original `list` allows for
	     *      // mutation. While you *can* do this, it's very un-functional behavior:
	     *      var plusFive = function(num, idx, list) { list[idx] = num + 5 };
	     *      R.forEachIndexed(plusFive, [1, 2, 3]); //=> [6, 7, 8]
	     */
	    // i can't bear not to return *something*
	    var forEachIndexed = _curry2(function forEachIndexed(fn, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len) {
	            fn(list[idx], idx, list);
	        }
	        // i can't bear not to return *something*
	        return list;
	    });

	    /**
	     * Creates a new object out of a list key-value pairs.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [[k,v]] -> {k: v}
	     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
	     * @return {Object} The object made by pairing up `keys` and `values`.
	     * @example
	     *
	     *      R.fromPairs([['a', 1], ['b', 2],  ['c', 3]]); //=> {a: 1, b: 2, c: 3}
	     */
	    var fromPairs = _curry1(function fromPairs(pairs) {
	        var idx = -1, len = pairs.length, out = {};
	        while (++idx < len) {
	            if (_isArray(pairs[idx]) && pairs[idx].length) {
	                out[pairs[idx][0]] = pairs[idx][1];
	            }
	        }
	        return out;
	    });

	    /**
	     * Returns true if the first parameter is greater than the second.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean} a > b
	     * @example
	     *
	     *      R.gt(2, 6); //=> false
	     *      R.gt(2, 0); //=> true
	     *      R.gt(2, 2); //=> false
	     *      R.gt(R.__, 2)(10); //=> true
	     *      R.gt(2)(10); //=> false
	     */
	    var gt = _curry2(_gt);

	    /**
	     * Returns true if the first parameter is greater than or equal to the second.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean} a >= b
	     * @example
	     *
	     *      R.gte(2, 6); //=> false
	     *      R.gte(2, 0); //=> true
	     *      R.gte(2, 2); //=> true
	     *      R.gte(R.__, 6)(2); //=> false
	     *      R.gte(2)(0); //=> true
	     */
	    var gte = _curry2(function gte(a, b) {
	        return a >= b;
	    });

	    /**
	     * Returns whether or not an object has an own property with
	     * the specified name
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      var hasName = R.has('name');
	     *      hasName({name: 'alice'});   //=> true
	     *      hasName({name: 'bob'});     //=> true
	     *      hasName({});                //=> false
	     *
	     *      var point = {x: 0, y: 0};
	     *      var pointHas = R.has(R.__, point);
	     *      pointHas('x');  //=> true
	     *      pointHas('y');  //=> true
	     *      pointHas('z');  //=> false
	     */
	    var has = _curry2(_has);

	    /**
	     * Returns whether or not an object or its prototype chain has
	     * a property with the specified name
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig s -> {s: x} -> Boolean
	     * @param {String} prop The name of the property to check for.
	     * @param {Object} obj The object to query.
	     * @return {Boolean} Whether the property exists.
	     * @example
	     *
	     *      function Rectangle(width, height) {
	     *          this.width = width;
	     *          this.height = height;
	     *      }
	     *      Rectangle.prototype.area = function() {
	     *          return this.width * this.height;
	     *      };
	     *
	     *      var square = new Rectangle(2, 2);
	     *      R.hasIn('width', square);  //=> true
	     *      R.hasIn('area', square);  //=> true
	     */
	    var hasIn = _curry2(function (prop, obj) {
	        return prop in obj;
	    });

	    /**
	     * A function that does nothing but return the parameter supplied to it. Good as a default
	     * or placeholder function.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig a -> a
	     * @param {*} x The value to return.
	     * @return {*} The input value, `x`.
	     * @example
	     *
	     *      R.identity(1); //=> 1
	     *
	     *      var obj = {};
	     *      R.identity(obj) === obj; //=> true
	     */
	    var identity = _curry1(function identity(x) {
	        return x;
	    });

	    /**
	     * Creates a function that will process either the `onTrue` or the `onFalse` function depending
	     * upon the result of the `condition` predicate.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
	     * @param {Function} condition A predicate function
	     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
	     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
	     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
	     *                    function depending upon the result of the `condition` predicate.
	     * @example
	     *
	     *      // Flatten all arrays in the list but leave other values alone.
	     *      var flattenArrays = R.map(R.ifElse(Array.isArray, R.flatten, R.identity));
	     *
	     *      flattenArrays([[0], [[10], [8]], 1234, {}]); //=> [[0], [10, 8], 1234, {}]
	     *      flattenArrays([[[10], 123], [8, [10]], "hello"]); //=> [[10, 123], [8, 10], "hello"]
	     */
	    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {
	        return function _ifElse() {
	            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
	        };
	    });

	    /**
	     * Increments its argument.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @example
	     *
	     *      R.inc(42); //=> 43
	     */
	    var inc = add(1);

	    /**
	     * Returns the position of the first occurrence of an item in an array
	     * (by strict equality),
	     * or -1 if the item is not included in the array.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} list The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     *
	     * @example
	     *
	     *      R.indexOf(3, [1,2,3,4]); //=> 2
	     *      R.indexOf(10, [1,2,3,4]); //=> -1
	     */
	    var indexOf = _curry2(function indexOf(target, list) {
	        return _indexOf(list, target);
	    });

	    /**
	     * Inserts the sub-list into the list, at index `index`.  _Note  that this
	     * is not destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> [a] -> [a] -> [a]
	     * @param {Number} index The position to insert the sub-list
	     * @param {Array} elts The sub-list to insert into the Array
	     * @param {Array} list The list to insert the sub-list into
	     * @return {Array} A new Array with `elts` inserted starting at `index`.
	     * @example
	     *
	     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
	     */
	    var insertAll = _curry3(function insertAll(idx, elts, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));
	    });

	    /**
	     * See if an object (`val`) is an instance of the supplied constructor.
	     * This function will check up the inheritance chain, if any.
	     *
	     * @func
	     * @memberOf R
	     * @category Type
	     * @sig (* -> {*}) -> a -> Boolean
	     * @param {Object} ctor A constructor
	     * @param {*} val The value to test
	     * @return {Boolean}
	     * @example
	     *
	     *      R.is(Object, {}); //=> true
	     *      R.is(Number, 1); //=> true
	     *      R.is(Object, 1); //=> false
	     *      R.is(String, 's'); //=> true
	     *      R.is(String, new String('')); //=> true
	     *      R.is(Object, new String('')); //=> true
	     *      R.is(Object, 's'); //=> false
	     *      R.is(Number, {}); //=> false
	     */
	    var is = _curry2(function is(Ctor, val) {
	        return val != null && val.constructor === Ctor || val instanceof Ctor;
	    });

	    /**
	     * Tests whether or not an object is similar to an array.
	     *
	     * @func
	     * @memberOf R
	     * @category Type
	     * @category List
	     * @param {*} x The object to test.
	     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
	     * @example
	     *
	     *      R.isArrayLike([]); //=> true
	     *      R.isArrayLike(true); //=> false
	     *      R.isArrayLike({}); //=> false
	     *      R.isArrayLike({length: 10}); //=> false
	     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
	     */
	    var isArrayLike = _curry1(function isArrayLike(x) {
	        if (_isArray(x)) {
	            return true;
	        }
	        if (!x) {
	            return false;
	        }
	        if (typeof x !== 'object') {
	            return false;
	        }
	        if (x instanceof String) {
	            return false;
	        }
	        if (x.nodeType === 1) {
	            return !!x.length;
	        }
	        if (x.length === 0) {
	            return true;
	        }
	        if (x.length > 0) {
	            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
	        }
	        return false;
	    });

	    /**
	     * Reports whether the list has zero elements.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig [a] -> Boolean
	     * @param {Array} list
	     * @return {Boolean}
	     * @example
	     *
	     *      R.isEmpty([1, 2, 3]); //=> false
	     *      R.isEmpty([]); //=> true
	     *      R.isEmpty(''); //=> true
	     *      R.isEmpty(null); //=> false
	     */
	    var isEmpty = _curry1(function isEmpty(list) {
	        return Object(list).length === 0;
	    });

	    /**
	     * Checks if the input value is `null` or `undefined`.
	     *
	     * @func
	     * @memberOf R
	     * @category Type
	     * @sig * -> Boolean
	     * @param {*} x The value to test.
	     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
	     * @example
	     *
	     *     R.isNil(null); //=> true
	     *     R.isNil(undefined); //=> true
	     *     R.isNil(0); //=> false
	     *     R.isNil([]); //=> false
	     */
	    var isNil = _curry1(function isNil(x) {
	        return x == null;
	    });

	    /**
	     * Returns `true` if all elements are unique, otherwise `false`.
	     * Uniqueness is determined using strict equality (`===`).
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> Boolean
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if all elements are unique, else `false`.
	     * @example
	     *
	     *      R.isSet(['1', 1]); //=> true
	     *      R.isSet([1, 1]);   //=> false
	     *      R.isSet([{}, {}]); //=> true
	     */
	    var isSet = _curry1(function isSet(list) {
	        var len = list.length;
	        var idx = -1;
	        while (++idx < len) {
	            if (_indexOf(list, list[idx], idx + 1) >= 0) {
	                return false;
	            }
	        }
	        return true;
	    });

	    /**
	     * Returns a list containing the names of all the
	     * properties of the supplied object, including prototype properties.
	     * Note that the order of the output array is not guaranteed to be
	     * consistent across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.keysIn(f); //=> ['x', 'y']
	     */
	    var keysIn = _curry1(function keysIn(obj) {
	        var prop, ks = [];
	        for (prop in obj) {
	            ks[ks.length] = prop;
	        }
	        return ks;
	    });

	    /**
	     * Returns the position of the last occurrence of an item (by strict equality) in
	     * an array, or -1 if the item is not included in the array.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> [a] -> Number
	     * @param {*} target The item to find.
	     * @param {Array} list The array to search in.
	     * @return {Number} the index of the target, or -1 if the target is not found.
	     *
	     * @example
	     *
	     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
	     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
	     */
	    var lastIndexOf = _curry2(function lastIndexOf(target, list) {
	        return _lastIndexOf(list, target);
	    });

	    /**
	     * Returns the number of elements in the array by returning `list.length`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> Number
	     * @param {Array} list The array to inspect.
	     * @return {Number} The length of the array.
	     * @example
	     *
	     *      R.length([]); //=> 0
	     *      R.length([1, 2, 3]); //=> 3
	     */
	    var length = _curry1(function length(list) {
	        return list != null && is(Number, list.length) ? list.length : NaN;
	    });

	    /**
	     * Creates a lens. Supply a function to `get` values from inside an object, and a `set`
	     * function to change values on an object. (n.b.: This can, and should, be done without
	     * mutating the original object!) The lens is a function wrapped around the input `get`
	     * function, with the `set` function attached as a property on the wrapper. A `map`
	     * function is also attached to the returned function that takes a function to operate
	     * on the specified (`get`) property, which is then `set` before returning. The attached
	     * `set` and `map` functions are curried.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig (k -> v) -> (v -> a -> *) -> (a -> b)
	     * @param {Function} get A function that gets a value by property name
	     * @param {Function} set A function that sets a value by property name
	     * @return {Function} the returned function has `set` and `map` properties that are
	     *         also curried functions.
	     * @example
	     *
	     *     var headLens = R.lens(
	     *         function get(arr) { return arr[0]; },
	     *         function set(val, arr) { return [val].concat(arr.slice(1)); }
	     *     );
	     *     headLens([10, 20, 30, 40]); //=> 10
	     *     headLens.set('mu', [10, 20, 30, 40]); //=> ['mu', 20, 30, 40]
	     *     headLens.map(function(x) { return x + 1; }, [10, 20, 30, 40]); //=> [11, 20, 30, 40]
	     *
	     *     var phraseLens = R.lens(
	     *         function get(obj) { return obj.phrase; },
	     *         function set(val, obj) {
	     *             var out = R.clone(obj);
	     *             out.phrase = val;
	     *             return out;
	     *         }
	     *     );
	     *     var obj1 = { phrase: 'Absolute filth . . . and I LOVED it!'};
	     *     var obj2 = { phrase: "What's all this, then?"};
	     *     phraseLens(obj1); // => 'Absolute filth . . . and I LOVED it!'
	     *     phraseLens(obj2); // => "What's all this, then?"
	     *     phraseLens.set('Ooh Betty', obj1); //=> { phrase: 'Ooh Betty'}
	     *     phraseLens.map(R.toUpper, obj2); //=> { phrase: "WHAT'S ALL THIS, THEN?"}
	     */
	    var lens = _curry2(function lens(get, set) {
	        var lns = function (a) {
	            return get(a);
	        };
	        lns.set = _curry2(set);
	        lns.map = _curry2(function (fn, a) {
	            return set(fn(get(a)), a);
	        });
	        return lns;
	    });

	    /**
	     * Returns a lens associated with the provided object.
	     *
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {} -> ({} -> v) -> (v -> a -> *) -> (a -> b)
	     * @see R.lens
	     * @param {Function} get A function that gets a value by property name
	     * @param {Function} set A function that sets a value by property name
	     * @return {Function} the returned function has `set` and `map` properties that are
	     *         also curried functions.
	     * @example
	     *
	     *     var xo = {x: 1};
	     *     var xoLens = R.lensOn(xo,
	     *                           function get(o) { return o.x; },
	     *                           function set(v) { return {x: v}; });
	     *     xoLens(); //=> 1
	     *     xoLens.set(1000); //=> {x: 1000}
	     *     xoLens.map(R.add(1)); //=> {x: 2}
	     *
	     */
	    var lensOn = _curry3(function lensOn(get, set, obj) {
	        var lns = function () {
	            return get(obj);
	        };
	        lns.set = set;
	        lns.map = function (fn) {
	            return set(fn(get(obj)));
	        };
	        return lns;
	    });

	    /**
	     * Returns true if the first parameter is less than the second.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean} a < b
	     * @example
	     *
	     *      R.lt(2, 6); //=> true
	     *      R.lt(2, 0); //=> false
	     *      R.lt(2, 2); //=> false
	     *      R.lt(5)(10); //=> true
	     *      R.lt(R.__, 5)(10); //=> false // right-sectioned currying
	     */
	    var lt = _curry2(_lt);

	    /**
	     * Returns true if the first parameter is less than or equal to the second.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Boolean
	     * @param {Number} a
	     * @param {Number} b
	     * @return {Boolean} a <= b
	     * @example
	     *
	     *      R.lte(2, 6); //=> true
	     *      R.lte(2, 0); //=> false
	     *      R.lte(2, 2); //=> true
	     *      R.lte(R.__, 2)(1); //=> true
	     *      R.lte(2)(10); //=> true
	     */
	    var lte = _curry2(function lte(a, b) {
	        return a <= b;
	    });

	    /**
	     * The mapAccum function behaves like a combination of map and reduce; it applies a
	     * function to each element of a list, passing an accumulating parameter from left to
	     * right, and returning a final value of this accumulator together with the new list.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var append = function(a, b) {
	     *          return [a + b, a + b];
	     *      }
	     *
	     *      R.mapAccum(append, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
	     */
	    var mapAccum = _curry3(function mapAccum(fn, acc, list) {
	        var idx = -1, len = list.length, result = [], tuple = [acc];
	        while (++idx < len) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * The mapAccumRight function behaves like a combination of map and reduce; it applies a
	     * function to each element of a list, passing an accumulating parameter from right
	     * to left, and returning a final value of this accumulator together with the new list.
	     *
	     * Similar to `mapAccum`, except moves through the input list from the right to the
	     * left.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var digits = ['1', '2', '3', '4'];
	     *      var append = function(a, b) {
	     *          return [a + b, a + b];
	     *      }
	     *
	     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]
	     */
	    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {
	        var idx = list.length, result = [], tuple = [acc];
	        while (idx--) {
	            tuple = fn(tuple[0], list[idx]);
	            result[idx] = tuple[1];
	        }
	        return [
	            tuple[0],
	            result
	        ];
	    });

	    /**
	     * Like `map`, but but passes additional parameters to the mapping function.
	     * `fn` receives three arguments: *(value, index, list)*.
	     *
	     * Note: `R.mapIndexed` does not skip deleted or unassigned indices (sparse arrays), unlike
	     * the native `Array.prototype.map` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,i,[b] -> b) -> [a] -> [b]
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {Array} list The list to be iterated over.
	     * @return {Array} The new list.
	     * @example
	     *
	     *      var squareEnds = function(elt, idx, list) {
	     *        if (idx === 0 || idx === list.length - 1) {
	     *          return elt * elt;
	     *        }
	     *        return elt;
	     *      };
	     *
	     *      R.mapIndexed(squareEnds, [8, 5, 3, 0, 9]); //=> [64, 5, 3, 0, 81]
	     */
	    var mapIndexed = _curry2(function mapIndexed(fn, list) {
	        var idx = -1, len = list.length, result = [];
	        while (++idx < len) {
	            result[idx] = fn(list[idx], idx, list);
	        }
	        return result;
	    });

	    /**
	     * mathMod behaves like the modulo operator should mathematically, unlike the `%`
	     * operator (and by extension, R.modulo). So while "-17 % 5" is -2,
	     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
	     * when the modulus is zero or negative.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} m The dividend.
	     * @param {Number} p the modulus.
	     * @return {Number} The result of `b mod a`.
	     * @see R.moduloBy
	     * @example
	     *
	     *      R.mathMod(-17, 5);  //=> 3
	     *      R.mathMod(17, 5);   //=> 2
	     *      R.mathMod(17, -5);  //=> NaN
	     *      R.mathMod(17, 0);   //=> NaN
	     *      R.mathMod(17.2, 5); //=> NaN
	     *      R.mathMod(17, 5.3); //=> NaN
	     *
	     *      var clock = R.mathMod(R.__, 12);
	     *      clock(15); //=> 3
	     *      clock(24); //=> 0
	     *
	     *      var seventeenMod = R.mathMod(17);
	     *      seventeenMod(3);  //=> 2
	     *      seventeenMod(4);  //=> 1
	     *      seventeenMod(10); //=> 7
	     */
	    var mathMod = _curry2(function mathMod(m, p) {
	        if (!_isInteger(m)) {
	            return NaN;
	        }
	        if (!_isInteger(p) || p < 1) {
	            return NaN;
	        }
	        return (m % p + p) % p;
	    });

	    /**
	     * Determines the largest of a list of items as determined by pairwise comparisons from the supplied comparator
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig (a -> Number) -> [a] -> a
	     * @param {Function} keyFn A comparator function for elements in the list
	     * @param {Array} list A list of comparable elements
	     * @return {*} The greatest element in the list. `undefined` if the list is empty.
	     * @see R.max
	     * @example
	     *
	     *      function cmp(obj) { return obj.x; }
	     *      var a = {x: 1}, b = {x: 2}, c = {x: 3};
	     *      R.maxBy(cmp, [a, b, c]); //=> {x: 3}
	     */
	    var maxBy = _curry2(_createMaxMinBy(_gt));

	    /**
	     * Creates a new function that, when invoked, caches the result of calling `fn` for a given
	     * argument set and returns the result. Subsequent calls to the memoized `fn` with the same
	     * argument set will not result in an additional call to `fn`; instead, the cached result
	     * for that set of arguments will be returned.
	     *
	     * Note that this version of `memoize` should not be applied to functions which
	     * take objects as arguments.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (*... -> a) -> (*... -> a)
	     * @param {Function} fn The function to memoize.
	     * @return {Function} Memoized version of `fn`.
	     * @example
	     *
	     *      var count = 0;
	     *      var factorial = R.memoize(function(n) {
	     *          count += 1;
	     *          return R.product(R.range(1, n + 1));
	     *      });
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      factorial(5); //=> 120
	     *      count; //=> 1
	     */
	    // Returns a string representation of the given value suitable for use as
	    // a property name.
	    //
	    // > repr(42)
	    // '42::[object Number]'
	    // Serializes an array-like object. The approach is similar to that taken
	    // by [CANON](https://github.com/davidchambers/CANON), though it does not
	    // differentiate between objects at all (!) and, since it is not applied
	    // recursively, does not distinguish between [[42]] and [['42']].
	    //
	    // > serialize(['foo', 42])
	    // '2:{foo::[object String],42::[object Number]}'
	    var memoize = function () {
	        // Returns a string representation of the given value suitable for use as
	        // a property name.
	        //
	        // > repr(42)
	        // '42::[object Number]'
	        var repr = function (x) {
	            return x + '::' + Object.prototype.toString.call(x);
	        };
	        // Serializes an array-like object. The approach is similar to that taken
	        // by [CANON](https://github.com/davidchambers/CANON), though it does not
	        // differentiate between objects at all (!) and, since it is not applied
	        // recursively, does not distinguish between [[42]] and [['42']].
	        //
	        // > serialize(['foo', 42])
	        // '2:{foo::[object String],42::[object Number]}'
	        var serialize = function (args) {
	            return args.length + ':{' + _map(repr, args).join(',') + '}';
	        };
	        return _curry1(function memoize(fn) {
	            var cache = {};
	            return function () {
	                var key = serialize(arguments);
	                if (!_has(key, cache)) {
	                    cache[key] = fn.apply(this, arguments);
	                }
	                return cache[key];
	            };
	        });
	    }();

	    /**
	     * Determines the smallest of a list of items as determined by pairwise comparisons from the supplied comparator
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig (a -> Number) -> [a] -> a
	     * @param {Function} keyFn A comparator function for elements in the list
	     * @param {Array} list A list of comparable elements
	     * @see R.min
	     * @return {*} The greatest element in the list. `undefined` if the list is empty.
	     * @example
	     *
	     *      function cmp(obj) { return obj.x; }
	     *      var a = {x: 1}, b = {x: 2}, c = {x: 3};
	     *      R.minBy(cmp, [a, b, c]); //=> {x: 1}
	     */
	    var minBy = _curry2(_createMaxMinBy(_lt));

	    /**
	     * Divides the second parameter by the first and returns the remainder.
	     * Note that this functions preserves the JavaScript-style behavior for
	     * modulo. For mathematical modulo see `mathMod`
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The value to the divide.
	     * @param {Number} b The pseudo-modulus
	     * @return {Number} The result of `b % a`.
	     * @see R.mathMod
	     * @example
	     *
	     *      R.modulo(17, 3); //=> 2
	     *      // JS behavior:
	     *      R.modulo(-17, 3); //=> -2
	     *      R.modulo(17, -3); //=> 2
	     *
	     *      var isOdd = R.modulo(R.__, 2);
	     *      isOdd(42); //=> 0
	     *      isOdd(21); //=> 1
	     */
	    var modulo = _curry2(function modulo(a, b) {
	        return a % b;
	    });

	    /**
	     * Multiplies two numbers. Equivalent to `a * b` but curried.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a * b`.
	     * @example
	     *
	     *      var double = R.multiply(2);
	     *      var triple = R.multiply(3);
	     *      double(3);       //=>  6
	     *      triple(4);       //=> 12
	     *      R.multiply(2, 5);  //=> 10
	     */
	    var multiply = _curry2(_multiply);

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts exactly `n`
	     * parameters. Any extraneous parameters will not be passed to the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig Number -> (* -> a) -> (* -> a)
	     * @param {Number} n The desired arity of the new function.
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity `n`.
	     * @example
	     *
	     *      var takesTwoArgs = function(a, b) {
	     *        return [a, b];
	     *      };
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.nAry(1, takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only `n` arguments are passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var nAry = _curry2(function (n, fn) {
	        switch (n) {
	        case 0:
	            return function () {
	                return fn.call(this);
	            };
	        case 1:
	            return function (a0) {
	                return fn.call(this, a0);
	            };
	        case 2:
	            return function (a0, a1) {
	                return fn.call(this, a0, a1);
	            };
	        case 3:
	            return function (a0, a1, a2) {
	                return fn.call(this, a0, a1, a2);
	            };
	        case 4:
	            return function (a0, a1, a2, a3) {
	                return fn.call(this, a0, a1, a2, a3);
	            };
	        case 5:
	            return function (a0, a1, a2, a3, a4) {
	                return fn.call(this, a0, a1, a2, a3, a4);
	            };
	        case 6:
	            return function (a0, a1, a2, a3, a4, a5) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5);
	            };
	        case 7:
	            return function (a0, a1, a2, a3, a4, a5, a6) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
	            };
	        case 8:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
	            };
	        case 9:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
	            };
	        case 10:
	            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
	            };
	        default:
	            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
	        }
	    });

	    /**
	     * Negates its argument.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number
	     * @param {Number} n
	     * @return {Number}
	     * @example
	     *
	     *      R.negate(42); //=> -42
	     */
	    var negate = _curry1(function negate(n) {
	        return -n;
	    });

	    /**
	     * A function wrapping a call to the given function in a `!` operation.  It will return `true` when the
	     * underlying function would return a false-y value, and `false` when it would return a truth-y one.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @return {Function} a function that applies its arguments to `f` and logically inverts its output.
	     * @example
	     *
	     *      var gt10 = function(x) { return x > 10; };
	     *      var f = R.not(gt10);
	     *      f(11); //=> false
	     *      f(9); //=> true
	     */
	    var not = _curry1(function not(f) {
	        return function () {
	            return !f.apply(this, arguments);
	        };
	    });

	    /**
	     * Returns the nth element in a list.
	     * If n is negative the element at index length + n is returned.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> [a] -> a
	     * @param {Number} idx
	     * @param {Array} list
	     * @return {*} The nth element of the list.
	     * @example
	     *
	     *      var list = ['foo', 'bar', 'baz', 'quux'];
	     *      R.nth(1, list); //=> 'bar'
	     *      R.nth(-1, list); //=> 'quux'
	     *      R.nth(-99, list); //=> undefined
	     */
	    var nth = _curry2(_nth);

	    /**
	     * Returns a function which returns its nth argument.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig Number -> *... -> *
	     * @param {Number} n
	     * @return {Function}
	     * @example
	     *
	     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
	     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
	     */
	    var nthArg = _curry1(function nthArg(n) {
	        return function () {
	            return _nth(n, arguments);
	        };
	    });

	    /**
	     * Returns a singleton array containing the value provided.
	     *
	     * Note this `of` is different from the ES6 `of`; See
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig a -> [a]
	     * @param {*} x any value
	     * @return {Array} An array wrapping `x`.
	     * @example
	     *
	     *      R.of(null); //=> [null]
	     *      R.of([42]); //=> [[42]]
	     */
	    var of = _curry1(function of(x) {
	        return [x];
	    });

	    /**
	     * Returns a partial copy of an object omitting the keys specified.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [String] -> {String: *} -> {String: *}
	     * @param {Array} names an array of String property names to omit from the new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with properties from `names` not on it.
	     * @example
	     *
	     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
	     */
	    var omit = _curry2(function omit(names, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (_indexOf(names, prop) < 0) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Accepts a function `fn` and returns a function that guards invocation of `fn` such that
	     * `fn` can only ever be called once, no matter how many times the returned function is
	     * invoked.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a... -> b) -> (a... -> b)
	     * @param {Function} fn The function to wrap in a call-only-once wrapper.
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      var addOneOnce = R.once(function(x){ return x + 1; });
	     *      addOneOnce(10); //=> 11
	     *      addOneOnce(addOneOnce(50)); //=> 11
	     */
	    var once = _curry1(function once(fn) {
	        var called = false, result;
	        return function () {
	            if (called) {
	                return result;
	            }
	            called = true;
	            result = fn.apply(this, arguments);
	            return result;
	        };
	    });

	    /**
	     * A function wrapping calls to the two functions in an `||` operation, returning the result of the first
	     * function if it is truth-y and the result of the second function otherwise.  Note that this is
	     * short-circuited, meaning that the second function will not be invoked if the first returns a truth-y
	     * value.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
	     * @param {Function} f a predicate
	     * @param {Function} g another predicate
	     * @return {Function} a function that applies its arguments to `f` and `g` and ORs their outputs together.
	     * @example
	     *
	     *      var gt10 = function(x) { return x > 10; };
	     *      var even = function(x) { return x % 2 === 0 };
	     *      var f = R.or(gt10, even);
	     *      f(101); //=> true
	     *      f(8); //=> true
	     */
	    var or = _curry2(function or(f, g) {
	        return function _or() {
	            return f.apply(this, arguments) || g.apply(this, arguments);
	        };
	    });

	    /**
	     * Takes a predicate and a list and returns the pair of lists of
	     * elements which do and do not satisfy the predicate, respectively.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [[a],[a]]
	     * @param {Function} pred A predicate to determine which array the element belongs to.
	     * @param {Array} list The array to partition.
	     * @return {Array} A nested array, containing first an array of elements that satisfied the predicate,
	     *         and second an array of elements that did not satisfy.
	     * @example
	     *
	     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
	     *      //=> [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
	     */
	    var partition = _curry2(function partition(pred, list) {
	        return _reduce(function (acc, elt) {
	            var xs = acc[pred(elt) ? 0 : 1];
	            xs[xs.length] = elt;
	            return acc;
	        }, [
	            [],
	            []
	        ], list);
	    });

	    /**
	     * Retrieve the value at a given path.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [String] -> {*} -> *
	     * @param {Array} path The path to use.
	     * @return {*} The data at `path`.
	     * @example
	     *
	     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
	     */
	    var path = _curry2(_path);

	    /**
	     * Determines whether a nested path on an object, seperated by periods,
	     * has a specific value according to strict equality ('==='). Most
	     * likely used to filter a list:
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig [String] -> * -> {String: *} -> Boolean
	     * @param {Array} path The path of the nested property to use
	     * @param {*} val The value to compare the nested property with
	     * @param {Object} obj The object to check the nested property in
	     * @return {Boolean} `true` if the value equals the nested object property,
	     *         `false` otherwise.
	     * @example
	     *
	     *     var user1 = { address: { zipCode: 90210 } };
	     *     var user2 = { address: { zipCode: 55555 } };
	     *     var user3 = { name: 'Bob' };
	     *     var users = [ user1, user2, user3 ];
	     *     var isFamous = R.pathEq(['address', 'zipCode'], 90210);
	     *     R.filter(isFamous, users); //=> [ user1 ]
	     */
	    var pathEq = _curry3(function pathEq(path, val, obj) {
	        return _path(path, obj) === val;
	    });

	    /**
	     * Returns a partial copy of an object containing only the keys specified.  If the key does not exist, the
	     * property is ignored.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [String] -> {String: *} -> {String: *}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @example
	     *
	     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
	     */
	    var pick = _curry2(function pick(names, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (_indexOf(names, prop) >= 0) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Similar to `pick` except that this one includes a `key: undefined` pair for properties that don't exist.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [k] -> {k: v} -> {k: v}
	     * @param {Array} names an array of String property names to copy onto a new object
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties from `names` on it.
	     * @see R.pick
	     * @example
	     *
	     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
	     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
	     */
	    var pickAll = _curry2(_pickAll);

	    /**
	     * Returns a partial copy of an object containing only the keys that
	     * satisfy the supplied predicate.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
	     * @param {Function} pred A predicate to determine whether or not a key
	     *        should be included on the output object.
	     * @param {Object} obj The object to copy from
	     * @return {Object} A new object with only properties that satisfy `pred`
	     *         on it.
	     * @see R.pick
	     * @example
	     *
	     *      var isUpperCase = function(val, key) { return key.toUpperCase() === key; }
	     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
	     */
	    var pickBy = _curry2(function pickBy(test, obj) {
	        var result = {};
	        for (var prop in obj) {
	            if (test(obj[prop], prop, obj)) {
	                result[prop] = obj[prop];
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns a new list with the given element at the front, followed by the contents of the
	     * list.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The item to add to the head of the output list.
	     * @param {Array} list The array to add to the tail of the output list.
	     * @return {Array} A new array.
	     * @example
	     *
	     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
	     */
	    var prepend = _curry2(_prepend);

	    /**
	     * Returns a function that when supplied an object returns the indicated property of that object, if it exists.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig s -> {s: a} -> a
	     * @param {String} p The property name
	     * @param {Object} obj The object to query
	     * @return {*} The value at `obj.p`.
	     * @example
	     *
	     *      R.prop('x', {x: 100}); //=> 100
	     *      R.prop('x', {}); //=> undefined
	     */
	    var prop = _curry2(function prop(p, obj) {
	        return obj[p];
	    });

	    /**
	     * Determines whether the given property of an object has a specific
	     * value according to strict equality (`===`).  Most likely used to
	     * filter a list:
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig k -> v -> {k: v} -> Boolean
	     * @param {Number|String} name The property name (or index) to use.
	     * @param {*} val The value to compare the property with.
	     * @return {Boolean} `true` if the properties are equal, `false` otherwise.
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
	     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
	     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
	     *      var kids = [abby, fred, rusty, alois];
	     *      var hasBrownHair = R.propEq('hair', 'brown');
	     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
	     */
	    var propEq = _curry3(function propEq(name, val, obj) {
	        return obj[name] === val;
	    });

	    /**
	     * If the given, non-null object has an own property with the specified name,
	     * returns the value of that property.
	     * Otherwise returns the provided default value.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig a -> String -> Object -> a
	     * @param {*} val The default value.
	     * @param {String} p The name of the property to return.
	     * @param {Object} obj The object to query.
	     * @return {*} The value of given property of the supplied object or the default value.
	     * @example
	     *
	     *      var alice = {
	     *        name: 'ALICE',
	     *        age: 101
	     *      };
	     *      var favorite = R.prop('favoriteLibrary');
	     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
	     *
	     *      favorite(alice);  //=> undefined
	     *      favoriteWithDefault(alice);  //=> 'Ramda'
	     */
	    var propOr = _curry3(function propOr(val, p, obj) {
	        return _has(p, obj) ? obj[p] : val;
	    });

	    /**
	     * Acts as multiple `get`: array of keys in, array of values out. Preserves order.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [k] -> {k: v} -> [v]
	     * @param {Array} ps The property names to fetch
	     * @param {Object} obj The object to query
	     * @return {Array} The corresponding values or partially applied function.
	     * @example
	     *
	     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
	     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
	     *
	     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
	     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
	     */
	    var props = _curry2(function props(ps, obj) {
	        var len = ps.length, out = [], idx = -1;
	        while (++idx < len) {
	            out[idx] = obj[ps[idx]];
	        }
	        return out;
	    });

	    /**
	     * Returns a list of numbers from `from` (inclusive) to `to`
	     * (exclusive).
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> Number -> [Number]
	     * @param {Number} from The first number in the list.
	     * @param {Number} to One more than the last number in the list.
	     * @return {Array} The list of numbers in tthe set `[a, b)`.
	     * @example
	     *
	     *      R.range(1, 5);    //=> [1, 2, 3, 4]
	     *      R.range(50, 53);  //=> [50, 51, 52]
	     */
	    var range = _curry2(function range(from, to) {
	        if (from >= to) {
	            return [];
	        }
	        var idx = 0, result = [];
	        while (from < to) {
	            result[idx] = from++;
	            idx += 1;
	        }
	        return result;
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling the iterator
	     * function and passing it an accumulator value and the current value from the array, and
	     * then passing the result to the next call.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse arrays), unlike
	     * the native `Array.prototype.reduce` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var numbers = [1, 2, 3];
	     *      var add = function(a, b) {
	     *        return a + b;
	     *      };
	     *
	     *      R.reduce(add, 10, numbers); //=> 16
	     */
	    var reduce = _curry3(_reduce);

	    /**
	     * Like `reduce`, but passes additional parameters to the predicate function.
	     *
	     * The iterator function receives four values: *(acc, value, index, list)*
	     *
	     * Note: `R.reduceIndexed` does not skip deleted or unassigned indices (sparse arrays),
	     * unlike the native `Array.prototype.reduce` method. For more details on this behavior,
	     * see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,b,i,[b] -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives four values: the accumulator, the
	     *        current element from `list`, that element's index, and the entire `list` itself.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var letters = ['a', 'b', 'c'];
	     *      var objectify = function(accObject, elem, idx, list) {
	     *        accObject[elem] = idx;
	     *        return accObject;
	     *      };
	     *
	     *      R.reduceIndexed(objectify, {}, letters); //=> { 'a': 0, 'b': 1, 'c': 2 }
	     */
	    var reduceIndexed = _curry3(function reduceIndexed(fn, acc, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len) {
	            acc = fn(acc, list[idx], idx, list);
	        }
	        return acc;
	    });

	    /**
	     * Returns a single item by iterating through the list, successively calling the iterator
	     * function and passing it an accumulator value and the current value from the array, and
	     * then passing the result to the next call.
	     *
	     * Similar to `reduce`, except moves through the input list from the right to the left.
	     *
	     * The iterator function receives two values: *(acc, value)*
	     *
	     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse arrays), unlike
	     * the native `Array.prototype.reduce` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];
	     *      var flattenPairs = function(acc, pair) {
	     *        return acc.concat(pair);
	     *      };
	     *
	     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]
	     */
	    var reduceRight = _curry3(function reduceRight(fn, acc, list) {
	        var idx = list.length;
	        while (idx--) {
	            acc = fn(acc, list[idx]);
	        }
	        return acc;
	    });

	    /**
	     * Like `reduceRight`, but passes additional parameters to the predicate function. Moves through
	     * the input list from the right to the left.
	     *
	     * The iterator function receives four values: *(acc, value, index, list)*.
	     *
	     * Note: `R.reduceRightIndexed` does not skip deleted or unassigned indices (sparse arrays),
	     * unlike the native `Array.prototype.reduce` method. For more details on this behavior,
	     * see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,b,i,[b] -> a -> [b] -> a
	     * @param {Function} fn The iterator function. Receives four values: the accumulator, the
	     *        current element from `list`, that element's index, and the entire `list` itself.
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {*} The final, accumulated value.
	     * @example
	     *
	     *      var letters = ['a', 'b', 'c'];
	     *      var objectify = function(accObject, elem, idx, list) {
	     *        accObject[elem] = idx;
	     *        return accObject;
	     *      };
	     *
	     *      R.reduceRightIndexed(objectify, {}, letters); //=> { 'c': 2, 'b': 1, 'a': 0 }
	     */
	    var reduceRightIndexed = _curry3(function reduceRightIndexed(fn, acc, list) {
	        var idx = list.length;
	        while (idx--) {
	            acc = fn(acc, list[idx], idx, list);
	        }
	        return acc;
	    });

	    /**
	     * Like `reject`, but passes additional parameters to the predicate function. The predicate
	     * function is passed three arguments: *(value, index, list)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a, i, [a] -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} The new filtered array.
	     * @example
	     *
	     *      var lastTwo = function(val, idx, list) {
	     *        return list.length - idx <= 2;
	     *      };
	     *
	     *      R.rejectIndexed(lastTwo, [8, 6, 7, 5, 3, 0, 9]); //=> [8, 6, 7, 5, 3]
	     */
	    var rejectIndexed = _curry2(function rejectIndexed(fn, list) {
	        return _filterIndexed(not(fn), list);
	    });

	    /**
	     * Removes the sub-list of `list` starting at index `start` and containing
	     * `count` elements.  _Note that this is not destructive_: it returns a
	     * copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @param {Number} start The position to start removing elements
	     * @param {Number} count The number of elements to remove
	     * @param {Array} list The list to remove from
	     * @return {Array} A new Array with `count` elements from `start` removed.
	     * @example
	     *
	     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
	     */
	    var remove = _curry3(function remove(start, count, list) {
	        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));
	    });

	    /**
	     * Replace a substring or regex match in a string with a replacement.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig RegExp|String -> String -> String -> String
	     * @param {RegExp|String} pattern A regular expression or a substring to match.
	     * @param {String} replacement The string to replace the matches with.
	     * @param {String} str The String to do the search and replacement in.
	     * @return {String} The result.
	     * @example
	     *
	     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
	     *
	     *      // Use the "g" (global) flag to replace all occurrences:
	     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
	     */
	    var replace = _curry3(function replace(regex, replacement, str) {
	        return str.replace(regex, replacement);
	    });

	    /**
	     * Returns a new list with the same elements as the original list, just
	     * in the reverse order.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The list to reverse.
	     * @return {Array} A copy of the list in reverse order.
	     * @example
	     *
	     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
	     *      R.reverse([1, 2]);     //=> [2, 1]
	     *      R.reverse([1]);        //=> [1]
	     *      R.reverse([]);         //=> []
	     */
	    var reverse = _curry1(function reverse(list) {
	        return _slice(list).reverse();
	    });

	    /**
	     * Scan is similar to reduce, but returns a list of successively reduced values from the left
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,b -> a) -> a -> [b] -> [a]
	     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
	     *        current element from the array
	     * @param {*} acc The accumulator value.
	     * @param {Array} list The list to iterate over.
	     * @return {Array} A list of all intermediately reduced values.
	     * @example
	     *
	     *      var numbers = [1, 2, 3, 4];
	     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
	     */
	    var scan = _curry3(function scan(fn, acc, list) {
	        var idx = 0, len = list.length + 1, result = [acc];
	        while (++idx < len) {
	            acc = fn(acc, list[idx - 1]);
	            result[idx] = acc;
	        }
	        return result;
	    });

	    /**
	     * Sorts the list according to a key generated by the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig (a -> String) -> [a] -> [a]
	     * @param {Function} fn The function mapping `list` items to keys.
	     * @param {Array} list The list to sort.
	     * @return {Array} A new list sorted by the keys generated by `fn`.
	     * @example
	     *
	     *      var sortByFirstItem = R.sortBy(prop(0));
	     *      var sortByNameCaseInsensitive = R.sortBy(compose(R.toLower, prop('name')));
	     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
	     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
	     *      var alice = {
	     *         name: 'ALICE',
	     *         age: 101
	     *      };
	     *      var bob = {
	     *         name: 'Bob',
	     *        age: -10
	     *      };
	     *      var clara = {
	     *        name: 'clara',
	     *        age: 314.159
	     *      };
	     *      var people = [clara, bob, alice];
	     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
	     */
	    var sortBy = _curry2(function sortBy(fn, list) {
	        return _slice(list).sort(function (a, b) {
	            var aa = fn(a);
	            var bb = fn(b);
	            return aa < bb ? -1 : aa > bb ? 1 : 0;
	        });
	    });

	    /**
	     * Finds the first index of a substring in a string, returning -1 if it's not present
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String -> Number
	     * @param {String} c A string to find.
	     * @param {String} str The string to search in
	     * @return {Number} The first index of `c` or -1 if not found.
	     * @example
	     *
	     *      R.strIndexOf('c', 'abcdefg'); //=> 2
	     */
	    var strIndexOf = _curry2(function strIndexOf(c, str) {
	        return str.indexOf(c);
	    });

	    /**
	     *
	     * Finds the last index of a substring in a string, returning -1 if it's not present
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String -> Number
	     * @param {String} c A string to find.
	     * @param {String} str The string to search in
	     * @return {Number} The last index of `c` or -1 if not found.
	     * @example
	     *
	     *      R.strLastIndexOf('a', 'banana split'); //=> 5
	     */
	    var strLastIndexOf = _curry2(function (c, str) {
	        return str.lastIndexOf(c);
	    });

	    /**
	     * Subtracts two numbers. Equivalent to `a - b` but curried.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig Number -> Number -> Number
	     * @param {Number} a The first value.
	     * @param {Number} b The second value.
	     * @return {Number} The result of `a - b`.
	     * @example
	     *
	     *      R.subtract(10, 8); //=> 2
	     *
	     *      var minus5 = R.subtract(R.__, 5);
	     *      minus5(17); //=> 12
	     *
	     *      var complementaryAngle = R.subtract(90);
	     *      complementaryAngle(30); //=> 60
	     *      complementaryAngle(72); //=> 18
	     */
	    var subtract = _curry2(function subtract(a, b) {
	        return a - b;
	    });

	    /**
	     * Adds together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The sum of all the numbers in the list.
	     * @see reduce
	     * @example
	     *
	     *      R.sum([2,4,6,8,100,1]); //=> 121
	     */
	    var sum = reduce(_add, 0);

	    /**
	     * Runs the given function with the supplied object, then returns the object.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a -> *) -> a -> a
	     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
	     * @param {*} x
	     * @return {*} `x`.
	     * @example
	     *
	     *      var sayX = function(x) { console.log('x is ' + x); };
	     *      R.tap(sayX, 100); //=> 100
	     *      //-> 'x is 100')
	     */
	    var tap = _curry2(function tap(fn, x) {
	        fn(x);
	        return x;
	    });

	    /**
	     * Calls an input function `n` times, returning an array containing the results of those
	     * function calls.
	     *
	     * `fn` is passed one argument: The current value of `n`, which begins at `0` and is
	     * gradually incremented to `n - 1`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (i -> a) -> i -> [a]
	     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
	     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
	     * @return {Array} An array containing the return values of all calls to `fn`.
	     * @example
	     *
	     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
	     */
	    var times = _curry2(function times(fn, n) {
	        var len = Number(n);
	        var list = new Array(len);
	        var idx = 0;
	        while (idx < len) {
	            list[idx] = fn(idx);
	            idx += 1;
	        }
	        return list;
	    });

	    /**
	     * Converts an object into an array of key, value arrays.
	     * The object's own properties and prototype properties are used.
	     * Note that the order of the output array is not guaranteed to be
	     * consistent across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [[k,v]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own
	     *         and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
	     */
	    var toPairsIn = _curry1(_pairWith(keysIn));

	    /**
	     * Removes (strips) whitespace from both ends of the string.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to trim.
	     * @return {String} Trimmed version of `str`.
	     * @example
	     *
	     *      R.trim('   xyz  '); //=> 'xyz'
	     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
	     */
	    var trim = function () {
	        var ws = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
	        var zeroWidth = '\u200B';
	        var hasProtoTrim = typeof String.prototype.trim === 'function';
	        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {
	            return _curry1(function trim(str) {
	                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
	                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
	                return str.replace(beginRx, '').replace(endRx, '');
	            });
	        } else {
	            return _curry1(function trim(str) {
	                return str.trim();
	            });
	        }
	    }();

	    /**
	     * Gives a single-word string description of the (native) type of a value, returning such
	     * answers as 'Object', 'Number', 'Array', or 'Null'.  Does not attempt to distinguish user
	     * Object types any further, reporting them all as 'Object'.
	     *
	     * @func
	     * @memberOf R
	     * @category Type
	     * @sig (* -> {*}) -> String
	     * @param {*} val The value to test
	     * @return {String}
	     * @example
	     *
	     *      R.type({}); //=> "Object"
	     *      R.type(1); //=> "Number"
	     *      R.type(false); //=> "Boolean"
	     *      R.type('s'); //=> "String"
	     *      R.type(null); //=> "Null"
	     *      R.type([]); //=> "Array"
	     *      R.type(/[A-z]/); //=> "RegExp"
	     */
	    var type = _curry1(function type(val) {
	        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
	    });

	    /**
	     * Takes a function `fn`, which takes a single array argument, and returns
	     * a function which:
	     *
	     *   - takes any number of positional arguments;
	     *   - passes these arguments to `fn` as an array; and
	     *   - returns the result.
	     *
	     * In other words, R.unapply derives a variadic function from a function
	     * which takes an array. R.unapply is the inverse of R.apply.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ([*...] -> a) -> (*... -> a)
	     * @param {Function} fn
	     * @return {Function}
	     * @see R.apply
	     * @example
	     *
	     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
	     */
	    var unapply = _curry1(function unapply(fn) {
	        return function () {
	            return fn(_slice(arguments));
	        };
	    });

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts exactly 1
	     * parameter. Any extraneous parameters will not be passed to the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (* -> b) -> (a -> b)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 1.
	     * @example
	     *
	     *      var takesTwoArgs = function(a, b) {
	     *        return [a, b];
	     *      };
	     *      takesTwoArgs.length; //=> 2
	     *      takesTwoArgs(1, 2); //=> [1, 2]
	     *
	     *      var takesOneArg = R.unary(takesTwoArgs);
	     *      takesOneArg.length; //=> 1
	     *      // Only 1 argument is passed to the wrapped function
	     *      takesOneArg(1, 2); //=> [1, undefined]
	     */
	    var unary = _curry1(function unary(fn) {
	        return nAry(1, fn);
	    });

	    /**
	     * Builds a list from a seed value. Accepts an iterator function, which returns either false
	     * to stop iteration or an array of length 2 containing the value to add to the resulting
	     * list and the seed to be used in the next call to the iterator function.
	     *
	     * The iterator function receives one argument: *(seed)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> [b]) -> * -> [b]
	     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
	     *        either false to quit iteration or an array of length two to proceed. The element
	     *        at index 0 of this array will be added to the resulting array, and the element
	     *        at index 1 will be passed to the next call to `fn`.
	     * @param {*} seed The seed value.
	     * @return {Array} The final list.
	     * @example
	     *
	     *      var f = function(n) { return n > 50 ? false : [-n, n + 10] };
	     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
	     */
	    var unfold = _curry2(function unfold(fn, seed) {
	        var pair = fn(seed);
	        var result = [];
	        while (pair && pair.length) {
	            result[result.length] = pair[0];
	            pair = fn(pair[1]);
	        }
	        return result;
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original list, based
	     * upon the value returned by applying the supplied predicate to two list elements. Prefers
	     * the first item if two items compare equal based on the predicate.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a, a -> Boolean) -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      var strEq = function(a, b) { return String(a) === String(b); };
	     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
	     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
	     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
	     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
	     */
	    var uniqWith = _curry2(function uniqWith(pred, list) {
	        var idx = -1, len = list.length;
	        var result = [], item;
	        while (++idx < len) {
	            item = list[idx];
	            if (!_containsWith(pred, item, result)) {
	                result[result.length] = item;
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns a list of all the properties, including prototype properties,
	     * of the supplied object.
	     * Note that the order of the output array is not guaranteed to be
	     * consistent across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own and prototype properties.
	     * @example
	     *
	     *      var F = function() { this.x = 'X'; };
	     *      F.prototype.y = 'Y';
	     *      var f = new F();
	     *      R.valuesIn(f); //=> ['X', 'Y']
	     */
	    var valuesIn = _curry1(function valuesIn(obj) {
	        var prop, vs = [];
	        for (prop in obj) {
	            vs[vs.length] = obj[prop];
	        }
	        return vs;
	    });

	    /**
	     * Wrap a function inside another to allow you to make adjustments to the parameters, or do
	     * other processing either before the internal function is called or with its results.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)
	     * @param {Function} fn The function to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      var greet = function(name) {return 'Hello ' + name;};
	     *
	     *      var shoutedGreet = R.wrap(greet, function(gr, name) {
	     *          return gr(name).toUpperCase();
	     *      });
	     *      shoutedGreet("Kathy"); //=> "HELLO KATHY"
	     *
	     *      var shortenedGreet = R.wrap(greet, function(gr, name) {
	     *          return gr(name.substring(0, 3));
	     *      });
	     *      shortenedGreet("Robert"); //=> "Hello Rob"
	     *
	     */
	    var wrap = _curry2(function wrap(fn, wrapper) {
	        return curryN(fn.length, function () {
	            return wrapper.apply(this, _concat([fn], arguments));
	        });
	    });

	    /**
	     * Creates a new list out of the two supplied by creating each possible
	     * pair from the lists.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The list made by combining each possible pair from
	     *         `as` and `bs` into pairs (`[a, b]`).
	     * @example
	     *
	     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
	     */
	    // = xprodWith(prepend); (takes about 3 times as long...)
	    var xprod = _curry2(function xprod(a, b) {
	        // = xprodWith(prepend); (takes about 3 times as long...)
	        var idx = -1;
	        var ilen = a.length;
	        var j;
	        var jlen = b.length;
	        var result = [];
	        while (++idx < ilen) {
	            j = -1;
	            while (++j < jlen) {
	                result[result.length] = [
	                    a[idx],
	                    b[j]
	                ];
	            }
	        }
	        return result;
	    });

	    /**
	     * Creates a new list out of the two supplied by pairing up
	     * equally-positioned items from both lists.  The returned list is
	     * truncated to the length of the shorter of the two input lists.
	     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [b] -> [[a,b]]
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
	     * @example
	     *
	     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
	     */
	    var zip = _curry2(function zip(a, b) {
	        var rv = [];
	        var idx = -1;
	        var len = Math.min(a.length, b.length);
	        while (++idx < len) {
	            rv[idx] = [
	                a[idx],
	                b[idx]
	            ];
	        }
	        return rv;
	    });

	    /**
	     * Creates a new object out of a list of keys and a list of values.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [String] -> [*] -> {String: *}
	     * @param {Array} keys The array that will be properties on the output object.
	     * @param {Array} values The list of values on the output object.
	     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
	     * @example
	     *
	     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
	     */
	    var zipObj = _curry2(function zipObj(keys, values) {
	        var idx = -1, len = keys.length, out = {};
	        while (++idx < len) {
	            out[keys[idx]] = values[idx];
	        }
	        return out;
	    });

	    /**
	     * Creates a new list out of the two supplied by applying the function to
	     * each equally-positioned pair in the lists. The returned list is
	     * truncated to the length of the shorter of the two input lists.
	     *
	     * @function
	     * @memberOf R
	     * @category List
	     * @sig (a,b -> c) -> [a] -> [b] -> [c]
	     * @param {Function} fn The function used to combine the two elements into one value.
	     * @param {Array} list1 The first array to consider.
	     * @param {Array} list2 The second array to consider.
	     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
	     *         using `fn`.
	     * @example
	     *
	     *      var f = function(x, y) {
	     *        // ...
	     *      };
	     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
	     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
	     */
	    var zipWith = _curry3(function zipWith(fn, a, b) {
	        var rv = [], idx = -1, len = Math.min(a.length, b.length);
	        while (++idx < len) {
	            rv[idx] = fn(a[idx], b[idx]);
	        }
	        return rv;
	    });

	    /**
	     * A function that always returns `false`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig * -> false
	     * @see R.always
	     * @return {Boolean} false
	     * @example
	     *
	     *      R.F(); //=> false
	     */
	    var F = always(false);

	    /**
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @category Function
	     * @see R.identity
	     */
	    var I = identity;

	    /**
	     * A function that always returns `true`. Any passed in parameters are ignored.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig * -> true
	     * @see R.always
	     * @return {Boolean} `true`.
	     * @example
	     *
	     *      R.T(); //=> true
	     */
	    var T = always(true);

	    var _append = function _append(el, list) {
	        return _concat(list, [el]);
	    };

	    var _assocPath = function _assocPath(path, val, obj) {
	        switch (path.length) {
	        case 0:
	            return obj;
	        case 1:
	            return _assoc(path[0], val, obj);
	        default:
	            return _assoc(path[0], _assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);
	        }
	    };

	    /**
	     * Copies an object.
	     *
	     * @private
	     * @param {*} value The value to be copied
	     * @param {Array} refFrom Array containing the source references
	     * @param {Array} refTo Array containing the copied source references
	     * @return {*} The copied value.
	     */
	    var _baseCopy = function _baseCopy(value, refFrom, refTo) {
	        var copy = function copy(copiedValue) {
	            var len = refFrom.length;
	            var idx = -1;
	            while (++idx < len) {
	                if (value === refFrom[idx]) {
	                    return refTo[idx];
	                }
	            }
	            refFrom[idx + 1] = value;
	            refTo[idx + 1] = copiedValue;
	            for (var key in value) {
	                copiedValue[key] = _baseCopy(value[key], refFrom, refTo);
	            }
	            return copiedValue;
	        };
	        switch (type(value)) {
	        case 'Object':
	            return copy({});
	        case 'Array':
	            return copy([]);
	        case 'Date':
	            return new Date(value);
	        default:
	            return value;
	        }
	    };

	    /**
	     * Similar to hasMethod, this checks whether a function has a [methodname]
	     * function. If it isn't an array it will execute that function otherwise it will
	     * default to the ramda implementation.
	     *
	     * @private
	     * @param {Function} fn ramda implemtation
	     * @param {String} methodname property to check for a custom implementation
	     * @return {Object} Whatever the return value of the method is.
	     */
	    var _checkForMethod = function _checkForMethod(methodname, fn) {
	        return function () {
	            var length = arguments.length;
	            if (length === 0) {
	                return fn();
	            }
	            var obj = arguments[length - 1];
	            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));
	        };
	    };

	    /**
	     * A right-associative two-argument composition function like `_compose`
	     * but with automatic handling of promises (or, more precisely,
	     * "thenables"). This function is used to construct a more general
	     * `composeP` function, which accepts any number of arguments.
	     *
	     * @private
	     * @category Function
	     * @param {Function} f A function.
	     * @param {Function} g A function.
	     * @return {Function} A new function that is the equivalent of `f(g(x))`.
	     * @example
	     *
	     *      var Q = require('q');
	     *      var double = function(x) { return x * 2; };
	     *      var squareAsync = function(x) { return Q.when(x * x); };
	     *      var squareAsyncThenDouble = _composeP(double, squareAsync);
	     *
	     *      squareAsyncThenDouble(5)
	     *          .then(function(result) {
	     *            // the result is now 50.
	     *          });
	     */
	    var _composeP = function _composeP(f, g) {
	        return function () {
	            var context = this;
	            var value = g.apply(this, arguments);
	            if (_isThenable(value)) {
	                return value.then(function (result) {
	                    return f.call(context, result);
	                });
	            } else {
	                return f.call(this, value);
	            }
	        };
	    };

	    var _contains = function _contains(a, list) {
	        return _indexOf(list, a) >= 0;
	    };

	    /*
	     * Returns a function that makes a multi-argument version of compose from
	     * either _compose or _composeP.
	     */
	    var _createComposer = function _createComposer(composeFunction) {
	        return function () {
	            var idx = arguments.length - 1;
	            var fn = arguments[idx];
	            var length = fn.length;
	            while (idx--) {
	                fn = composeFunction(arguments[idx], fn);
	            }
	            return arity(length, fn);
	        };
	    };

	    /**
	     * Create a function which takes a list
	     * and determines the winning value by a comparator. Used internally
	     * by `R.max` and `R.min`
	     *
	     * @private
	     * @param {Function} compatator a function to compare two items
	     * @param {*} intialVal, default value if nothing else wins
	     * @category Math
	     * @return {Function}
	     */
	    var _createMaxMin = function _createMaxMin(comparator, initialVal) {
	        return _curry1(function (list) {
	            var idx = -1, winner = initialVal, computed;
	            while (++idx < list.length) {
	                computed = +list[idx];
	                if (comparator(computed, winner)) {
	                    winner = computed;
	                }
	            }
	            return winner;
	        });
	    };

	    var _createPartialApplicator = function _createPartialApplicator(concat) {
	        return function (fn) {
	            var args = _slice(arguments, 1);
	            return arity(Math.max(0, fn.length - args.length), function () {
	                return fn.apply(this, concat(args, arguments));
	            });
	        };
	    };

	    var _dissocPath = function _dissocPath(path, obj) {
	        switch (path.length) {
	        case 0:
	            return obj;
	        case 1:
	            return _dissoc(path[0], obj);
	        default:
	            var head = path[0];
	            var tail = _slice(path, 1);
	            return obj[head] == null ? obj : _assoc(head, _dissocPath(tail, obj[head]), obj);
	        }
	    };

	    /**
	     * Private function that determines whether or not a provided object has a given method.
	     * Does not ignore methods stored on the object's prototype chain. Used for dynamically
	     * dispatching Ramda methods to non-Array objects.
	     *
	     * @private
	     * @param {String} methodName The name of the method to check for.
	     * @param {Object} obj The object to test.
	     * @return {Boolean} `true` has a given method, `false` otherwise.
	     * @example
	     *
	     *      var person = { name: 'John' };
	     *      person.shout = function() { alert(this.name); };
	     *
	     *      _hasMethod('shout', person); //=> true
	     *      _hasMethod('foo', person); //=> false
	     */
	    var _hasMethod = function _hasMethod(methodName, obj) {
	        return obj != null && !_isArray(obj) && typeof obj[methodName] === 'function';
	    };

	    /**
	     * `_makeFlat` is a helper function that returns a one-level or fully recursive function
	     * based on the flag passed in.
	     *
	     * @private
	     */
	    var _makeFlat = function _makeFlat(recursive) {
	        return function flatt(list) {
	            var value, result = [], idx = -1, j, ilen = list.length, jlen;
	            while (++idx < ilen) {
	                if (isArrayLike(list[idx])) {
	                    value = recursive ? flatt(list[idx]) : list[idx];
	                    j = -1;
	                    jlen = value.length;
	                    while (++j < jlen) {
	                        result[result.length] = value[j];
	                    }
	                } else {
	                    result[result.length] = list[idx];
	                }
	            }
	            return result;
	        };
	    };

	    var _pluck = function _pluck(p, list) {
	        return _map(prop(p), list);
	    };

	    /**
	     * Returns a new list containing the contents of the given list, followed by the given
	     * element.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> [a] -> [a]
	     * @param {*} el The element to add to the end of the new list.
	     * @param {Array} list The list whose contents will be added to the beginning of the output
	     *        list.
	     * @return {Array} A new list containing the contents of the old list followed by `el`.
	     * @example
	     *
	     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
	     *      R.append('tests', []); //=> ['tests']
	     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
	     */
	    var append = _curry2(_append);

	    /**
	     * Makes a shallow clone of an object, setting or overriding the nodes
	     * required to create the given path, and placing the specific value at the
	     * tail end of that path.  Note that this copies and flattens prototype
	     * properties onto the new object as well.  All non-primitive properties
	     * are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [String] -> a -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {*} val the new value
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object similar to the original except along the specified path.
	     * @example
	     *
	     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
	     */
	    var assocPath = _curry3(_assocPath);

	    /**
	     * Wraps a function of any arity (including nullary) in a function that accepts exactly 2
	     * parameters. Any extraneous parameters will not be passed to the supplied function.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (* -> c) -> (a, b -> c)
	     * @param {Function} fn The function to wrap.
	     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
	     *         arity 2.
	     * @example
	     *
	     *      var takesThreeArgs = function(a, b, c) {
	     *        return [a, b, c];
	     *      };
	     *      takesThreeArgs.length; //=> 3
	     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      var takesTwoArgs = R.binary(takesThreeArgs);
	     *      takesTwoArgs.length; //=> 2
	     *      // Only 2 arguments are passed to the wrapped function
	     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
	     */
	    var binary = _curry1(function binary(fn) {
	        return nAry(2, fn);
	    });

	    /**
	     * Creates a deep copy of the value which may contain (nested) `Array`s and
	     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
	     * not copied, but assigned by their reference.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {*} -> {*}
	     * @param {*} value The object or array to clone
	     * @return {*} A new object or array.
	     * @example
	     *
	     *      var objects = [{}, {}, {}];
	     *      var objectsClone = R.clone(objects);
	     *      objects[0] === objectsClone[0]; //=> false
	     *
	     */
	    var clone = _curry1(function clone(value) {
	        return _baseCopy(value, [], []);
	    });

	    /**
	     * Creates a new function that runs each of the functions supplied as parameters in turn,
	     * passing the return value of each function invocation to the next function invocation,
	     * beginning with whatever arguments were passed to the initial invocation.
	     *
	     * Note that `compose` is a right-associative function, which means the functions provided
	     * will be invoked in order from right to left. In the example `var h = compose(f, g)`,
	     * the function `h` is equivalent to `f( g(x) )`, where `x` represents the arguments
	     * originally passed to `h`.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((y -> z), (x -> y), ..., (b -> c), (a... -> b)) -> (a... -> z)
	     * @param {...Function} functions A variable number of functions.
	     * @return {Function} A new function which represents the result of calling each of the
	     *         input `functions`, passing the result of each function call to the next, from
	     *         right to left.
	     * @example
	     *
	     *      var triple = function(x) { return x * 3; };
	     *      var double = function(x) { return x * 2; };
	     *      var square = function(x) { return x * x; };
	     *      var squareThenDoubleThenTriple = R.compose(triple, double, square);
	     *
	     *      //≅ triple(double(square(5)))
	     *      squareThenDoubleThenTriple(5); //=> 150
	     */
	    var compose = _createComposer(_compose);

	    /**
	     * Similar to `compose` but with automatic handling of promises (or, more
	     * precisely, "thenables"). The behavior is identical  to that of
	     * compose() if all composed functions return something other than
	     * promises (i.e., objects with a .then() method). If one of the function
	     * returns a promise, however, then the next function in the composition
	     * is called asynchronously, in the success callback of the promise, using
	     * the resolved value as an input. Note that `composeP` is a right-
	     * associative function, just like `compose`.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((y -> z), (x -> y), ..., (b -> c), (a... -> b)) -> (a... -> z)
	     * @param {...Function} functions A variable number of functions.
	     * @return {Function} A new function which represents the result of calling each of the
	     *         input `functions`, passing either the returned result or the asynchronously
	     *         resolved value) of each function call to the next, from right to left.
	     * @example
	     *
	     *      var Q = require('q');
	     *      var triple = function(x) { return x * 3; };
	     *      var double = function(x) { return x * 2; };
	     *      var squareAsync = function(x) { return Q.when(x * x); };
	     *      var squareAsyncThenDoubleThenTriple = R.composeP(triple, double, squareAsync);
	     *
	     *      //≅ squareAsync(5).then(function(x) { return triple(double(x)) };
	     *      squareAsyncThenDoubleThenTriple(5)
	     *          .then(function(result) {
	     *              // result is 150
	     *          });
	     */
	    var composeP = _createComposer(_composeP);

	    /**
	     * Returns a new list consisting of the elements of the first list followed by the elements
	     * of the second.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} list1 The first list to merge.
	     * @param {Array} list2 The second set to merge.
	     * @return {Array} A new array consisting of the contents of `list1` followed by the
	     *         contents of `list2`. If, instead of an Array for `list1`, you pass an
	     *         object with a `concat` method on it, `concat` will call `list1.concat`
	     *         and pass it the value of `list2`.
	     *
	     * @example
	     *
	     *      R.concat([], []); //=> []
	     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
	     *      R.concat('ABC', 'DEF'); // 'ABCDEF'
	     */
	    var concat = _curry2(function (set1, set2) {
	        if (_isArray(set2)) {
	            return _concat(set1, set2);
	        } else if (_hasMethod('concat', set1)) {
	            return set1.concat(set2);
	        } else {
	            throw new TypeError('can\'t concat ' + typeof set1);
	        }
	    });

	    /**
	     * Returns `true` if the specified item is somewhere in the list, `false` otherwise.
	     * Equivalent to `indexOf(a)(list) > -1`. Uses strict (`===`) equality checking.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> [a] -> Boolean
	     * @param {Object} a The item to compare against.
	     * @param {Array} list The array to consider.
	     * @return {Boolean} `true` if the item is in the list, `false` otherwise.
	     *
	     * @example
	     *
	     *      R.contains(3)([1, 2, 3]); //=> true
	     *      R.contains(4)([1, 2, 3]); //=> false
	     *      R.contains({})([{}, {}]); //=> false
	     *      var obj = {};
	     *      R.contains(obj)([{}, obj, {}]); //=> true
	     */
	    var contains = _curry2(_contains);

	    /**
	     * Accepts at least three functions and returns a new function. When invoked, this new
	     * function will invoke the first function, `after`, passing as its arguments the
	     * results of invoking the subsequent functions with whatever arguments are passed to
	     * the new function.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((*... -> c) -> (((* -> a), (* -> b), ...) -> c)
	     * @param {Function} after A function. `after` will be invoked with the return values of
	     *        `fn1` and `fn2` as its arguments.
	     * @param {...Function} functions A variable number of functions.
	     * @return {Function} A new function.
	     * @example
	     *
	     *      var add = function(a, b) { return a + b; };
	     *      var multiply = function(a, b) { return a * b; };
	     *      var subtract = function(a, b) { return a - b; };
	     *
	     *      //≅ multiply( add(1, 2), subtract(1, 2) );
	     *      R.converge(multiply, add, subtract)(1, 2); //=> -3
	     *
	     *      var add3 = function(a, b, c) { return a + b + c; };
	     *      R.converge(add3, multiply, add, subtract)(1, 2); //=> 4
	     */
	    var converge = curryN(3, function (after) {
	        var fns = _slice(arguments, 1);
	        return function () {
	            var args = arguments;
	            return after.apply(this, _map(function (fn) {
	                return fn.apply(this, args);
	            }, fns));
	        };
	    });

	    /**
	     * Returns a curried equivalent of the provided function. The curried
	     * function has two unusual capabilities. First, its arguments needn't
	     * be provided one at a time. If `f` is a ternary function and `g` is
	     * `R.curry(f)`, the following are equivalent:
	     *
	     *   - `g(1)(2)(3)`
	     *   - `g(1)(2, 3)`
	     *   - `g(1, 2)(3)`
	     *   - `g(1, 2, 3)`
	     *
	     * Secondly, the special placeholder value `R.__` may be used to specify
	     * "gaps", allowing partial application of any combination of arguments,
	     * regardless of their positions. If `g` is as above and `_` is `R.__`,
	     * the following are equivalent:
	     *
	     *   - `g(1, 2, 3)`
	     *   - `g(_, 2, 3)(1)`
	     *   - `g(_, _, 3)(1)(2)`
	     *   - `g(_, _, 3)(1, 2)`
	     *   - `g(_, 2)(1)(3)`
	     *   - `g(_, 2)(1, 3)`
	     *   - `g(_, 2)(_, 3)(1)`
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (* -> a) -> (* -> a)
	     * @param {Function} fn The function to curry.
	     * @return {Function} A new, curried function.
	     * @see R.curryN
	     * @example
	     *
	     *      var addFourNumbers = function(a, b, c, d) {
	     *        return a + b + c + d;
	     *      };
	     *
	     *      var curriedAddFourNumbers = R.curry(addFourNumbers);
	     *      var f = curriedAddFourNumbers(1, 2);
	     *      var g = f(3);
	     *      g(4); //=> 10
	     */
	    var curry = _curry1(function curry(fn) {
	        return curryN(fn.length, fn);
	    });

	    /**
	     * Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The elements in `list1` that are not in `list2`.
	     * @see R.differenceWith
	     * @example
	     *
	     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
	     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
	     */
	    var difference = _curry2(function difference(first, second) {
	        var out = [];
	        var idx = -1;
	        var firstLen = first.length;
	        while (++idx < firstLen) {
	            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
	                out[out.length] = first[idx];
	            }
	        }
	        return out;
	    });

	    /**
	     * Makes a shallow clone of an object, omitting the property at the
	     * given path. Note that this copies and flattens prototype properties
	     * onto the new object as well.  All non-primitive properties are copied
	     * by reference.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig [String] -> {k: v} -> {k: v}
	     * @param {Array} path the path to set
	     * @param {Object} obj the object to clone
	     * @return {Object} a new object without the property at path
	     * @example
	     *
	     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
	     */
	    var dissocPath = _curry2(_dissocPath);

	    /**
	     * Returns a new list containing all but the first `n` elements of the given `list`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @param {Number} n The number of elements of `list` to skip.
	     * @param {Array} list The array to consider.
	     * @return {Array} The last `n` elements of `list`.
	     * @example
	     *
	     *     R.drop(3, [1,2,3,4,5,6,7]); //=> [4,5,6,7]
	     */
	    var drop = _curry2(_checkForMethod('drop', function drop(n, list) {
	        return n < list.length ? _slice(list, n) : [];
	    }));

	    /**
	     * `empty` wraps any object in an array. This implementation is compatible with the
	     * Fantasy-land Monoid spec, and will work with types that implement that spec.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig * -> []
	     * @return {Array} An empty array.
	     * @example
	     *
	     *      R.empty([1,2,3,4,5]); //=> []
	     */
	    var empty = _curry1(function empty(x) {
	        return _hasMethod('empty', x) ? x.empty() : [];
	    });

	    /**
	     * Returns a new list containing only those items that match a given predicate function.
	     * The predicate function is passed one argument: *(value)*.
	     *
	     * Note that `R.filter` does not skip deleted or unassigned indices, unlike the native
	     * `Array.prototype.filter` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} The new filtered array.
	     * @example
	     *
	     *      var isEven = function(n) {
	     *        return n % 2 === 0;
	     *      };
	     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
	     */
	    var filter = _curry2(_checkForMethod('filter', _filter));

	    /**
	     * Returns a new list by pulling every item out of it (and all its sub-arrays) and putting
	     * them in a new array, depth-first.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [b]
	     * @param {Array} list The array to consider.
	     * @return {Array} The flattened list.
	     * @example
	     *
	     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
	     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
	     */
	    var flatten = _curry1(_makeFlat(true));

	    /**
	     * Returns a new function much like the supplied one, except that the first two arguments'
	     * order is reversed.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
	     * @param {Function} fn The function to invoke with its first two parameters reversed.
	     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
	     * @example
	     *
	     *      var mergeThree = function(a, b, c) {
	     *        return ([]).concat(a, b, c);
	     *      };
	     *
	     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
	     *
	     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
	     */
	    var flip = _curry1(function flip(fn) {
	        return curry(function (a, b) {
	            var args = _slice(arguments);
	            args[0] = b;
	            args[1] = a;
	            return fn.apply(this, args);
	        });
	    });

	    /**
	     * Calls the specified function on the supplied object. Any additional arguments
	     * after `fn` and `obj` are passed in to `fn`. If no additional arguments are passed to `func`,
	     * `fn` is invoked with no arguments.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig k -> {k : v} -> v(*)
	     * @param {String} funcName The name of the property mapped to the function to invoke
	     * @param {Object} obj The object
	     * @return {*} The value of invoking `obj.fn`.
	     * @example
	     *
	     *      R.func('add', R, 1, 2); //=> 3
	     *
	     *      var obj = { f: function() { return 'f called'; } };
	     *      R.func('f', obj); //=> 'f called'
	     */
	    var func = curry(function func(funcName, obj) {
	        return obj[funcName].apply(obj, _slice(arguments, 2));
	    });

	    /**
	     * Returns a list of function names of object's own and prototype functions
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {*} -> [String]
	     * @param {Object} obj The objects with functions in it
	     * @return {Array} A list of the object's own properties and prototype
	     *         properties that map to functions.
	     * @example
	     *
	     *      R.functionsIn(R); // returns list of ramda's own and prototype function names
	     *
	     *      var F = function() { this.x = function(){}; this.y = 1; }
	     *      F.prototype.z = function() {};
	     *      F.prototype.a = 100;
	     *      R.functionsIn(new F()); //=> ["x", "z"]
	     */
	    var functionsIn = _curry1(_functionsWith(keysIn));

	    /**
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @category Object
	     * @see R.prop
	     */
	    var get = prop;

	    /**
	     * Splits a list into sub-lists stored in an object, based on the result of calling a String-returning function
	     * on each element, and grouping the results according to values returned.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> s) -> [a] -> {s: a}
	     * @param {Function} fn Function :: a -> String
	     * @param {Array} list The array to group
	     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
	     *         that produced that key when passed to `fn`.
	     * @example
	     *
	     *     var byGrade = R.groupBy(function(student) {
	     *       var score = student.score;
	     *       return score < 65 ? 'F' :
	     *              score < 70 ? 'D' :
	     *              score < 80 ? 'C' :
	     *              score < 90 ? 'B' : 'A';
	     *     });
	     *     var students = [{name: 'Abby', score: 84},
	     *                     {name: 'Eddy', score: 58},
	     *                     // ...
	     *                     {name: 'Jack', score: 69}];
	     *     byGrade(students);
	     *     // {
	     *     //   'A': [{name: 'Dianne', score: 99}],
	     *     //   'B': [{name: 'Abby', score: 84}]
	     *     //   // ...,
	     *     //   'F': [{name: 'Eddy', score: 58}]
	     *     // }
	     */
	    var groupBy = _curry2(function groupBy(fn, list) {
	        return _reduce(function (acc, elt) {
	            var key = fn(elt);
	            acc[key] = _append(elt, acc[key] || (acc[key] = []));
	            return acc;
	        }, {}, list);
	    });

	    /**
	     * Returns the first element in a list.
	     * In some libraries this function is named `first`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> a
	     * @param {Array} list The array to consider.
	     * @return {*} The first element of the list, or `undefined` if the list is empty.
	     * @example
	     *
	     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
	     */
	    var head = nth(0);

	    /**
	     * Inserts the supplied element into the list, at index `index`.  _Note
	     * that this is not destructive_: it returns a copy of the list with the changes.
	     * <small>No lists have been harmed in the application of this function.</small>
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> a -> [a] -> [a]
	     * @param {Number} index The position to insert the element
	     * @param {*} elt The element to insert into the Array
	     * @param {Array} list The list to insert into
	     * @return {Array} A new Array with `elt` inserted at `index`.
	     * @example
	     *
	     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
	     */
	    var insert = _curry3(function insert(idx, elt, list) {
	        idx = idx < list.length && idx >= 0 ? idx : list.length;
	        return _concat(_append(elt, _slice(list, 0, idx)), _slice(list, idx));
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those
	     * elements common to both lists.  Duplication is determined according
	     * to the value returned by applying the supplied predicate to two list
	     * elements.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
	     * @param {Function} pred A predicate function that determines whether
	     *        the two supplied elements are equal.
	     * @param {Array} list1 One list of items to compare
	     * @param {Array} list2 A second list of items to compare
	     * @see R.intersection
	     * @return {Array} A new list containing those elements common to both lists.
	     * @example
	     *
	     *      var buffaloSpringfield = [
	     *        {id: 824, name: 'Richie Furay'},
	     *        {id: 956, name: 'Dewey Martin'},
	     *        {id: 313, name: 'Bruce Palmer'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *      var csny = [
	     *        {id: 204, name: 'David Crosby'},
	     *        {id: 456, name: 'Stephen Stills'},
	     *        {id: 539, name: 'Graham Nash'},
	     *        {id: 177, name: 'Neil Young'}
	     *      ];
	     *
	     *      var sameId = function(o1, o2) {return o1.id === o2.id;};
	     *
	     *      R.intersectionWith(sameId, buffaloSpringfield, csny);
	     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
	     */
	    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {
	        var results = [], idx = -1;
	        while (++idx < list1.length) {
	            if (_containsWith(pred, list1[idx], list2)) {
	                results[results.length] = list1[idx];
	            }
	        }
	        return uniqWith(pred, results);
	    });

	    /**
	     * Turns a named method with a specified arity into a function
	     * that can be called directly supplied with arguments and a target object.
	     *
	     * The returned function is curried and accepts `len + 1` parameters where
	     * the final parameter is the target object.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (Number, String) -> (a... -> c -> b)
	     * @param {Number} len Number of arguments the returned function should take
	     *        before the target object.
	     * @param {Function} method Name of the method to call.
	     * @return {Function} A new curried function.
	     * @example
	     *
	     *      var sliceFrom = R.invoker(1, 'slice');
	     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
	     *      var sliceFrom6 = R.invoker(2, 'slice', 6);
	     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
	     */
	    var invoker = curry(function invoker(arity, method) {
	        var initialArgs = _slice(arguments, 2);
	        var len = arity - initialArgs.length;
	        return curryN(len + 1, function () {
	            var target = arguments[len];
	            var args = initialArgs.concat(_slice(arguments, 0, len));
	            return target[method].apply(target, args);
	        });
	    });

	    /**
	     * Returns a string made by inserting the `separator` between each
	     * element and concatenating all the elements into a single string.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig String -> [a] -> String
	     * @param {Number|String} separator The string used to separate the elements.
	     * @param {Array} xs The elements to join into a string.
	     * @return {String} str The string made by concatenating `xs` with `separator`.
	     * @example
	     *
	     *      var spacer = R.join(' ');
	     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
	     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
	     */
	    var join = invoker(1, 'join');

	    /**
	     * Returns a list containing the names of all the enumerable own
	     * properties of the supplied object.
	     * Note that the order of the output array is not guaranteed to be
	     * consistent across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [k]
	     * @param {Object} obj The object to extract properties from
	     * @return {Array} An array of the object's own properties.
	     * @example
	     *
	     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
	     */
	    // cover IE < 9 keys issues
	    var keys = function () {
	        // cover IE < 9 keys issues
	        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
	        var nonEnumerableProps = [
	            'constructor',
	            'valueOf',
	            'isPrototypeOf',
	            'toString',
	            'propertyIsEnumerable',
	            'hasOwnProperty',
	            'toLocaleString'
	        ];
	        return _curry1(function keys(obj) {
	            if (Object(obj) !== obj) {
	                return [];
	            }
	            if (Object.keys) {
	                return Object.keys(obj);
	            }
	            var prop, ks = [], nIdx;
	            for (prop in obj) {
	                if (_has(prop, obj)) {
	                    ks[ks.length] = prop;
	                }
	            }
	            if (hasEnumBug) {
	                nIdx = nonEnumerableProps.length;
	                while (nIdx--) {
	                    prop = nonEnumerableProps[nIdx];
	                    if (_has(prop, obj) && !_contains(prop, ks)) {
	                        ks[ks.length] = prop;
	                    }
	                }
	            }
	            return ks;
	        });
	    }();

	    /**
	     * Returns the last element from a list.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> a
	     * @param {Array} list The array to consider.
	     * @return {*} The last element of the list, or `undefined` if the list is empty.
	     * @example
	     *
	     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
	     */
	    var last = nth(-1);

	    /**
	     * Returns a new list, constructed by applying the supplied function to every element of the
	     * supplied list.
	     *
	     * Note: `R.map` does not skip deleted or unassigned indices (sparse arrays), unlike the
	     * native `Array.prototype.map` method. For more details on this behavior, see:
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> b) -> [a] -> [b]
	     * @param {Function} fn The function to be called on every element of the input `list`.
	     * @param {Array} list The list to be iterated over.
	     * @return {Array} The new list.
	     * @example
	     *
	     *      var double = function(x) {
	     *        return x * 2;
	     *      };
	     *
	     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
	     */
	    var map = _curry2(_checkForMethod('map', _map));

	    /**
	     * Map, but for objects. Creates an object with the same keys as `obj` and values
	     * generated by running each property of `obj` through `fn`. `fn` is passed one argument:
	     * *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (v -> v) -> {k: v} -> {k: v}
	     * @param {Function} fn A function called for each property in `obj`. Its return value will
	     * become a new property on the return object.
	     * @param {Object} obj The object to iterate over.
	     * @return {Object} A new object with the same keys as `obj` and values that are the result
	     *         of running each property through `fn`.
	     * @example
	     *
	     *      var values = { x: 1, y: 2, z: 3 };
	     *      var double = function(num) {
	     *        return num * 2;
	     *      };
	     *
	     *      R.mapObj(double, values); //=> { x: 2, y: 4, z: 6 }
	     */
	    var mapObj = _curry2(function mapObject(fn, obj) {
	        return _reduce(function (acc, key) {
	            acc[key] = fn(obj[key]);
	            return acc;
	        }, {}, keys(obj));
	    });

	    /**
	     * Like `mapObj`, but but passes additional arguments to the predicate function. The
	     * predicate function is passed three arguments: *(value, key, obj)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (v, k, {k: v} -> v) -> {k: v} -> {k: v}
	     * @param {Function} fn A function called for each property in `obj`. Its return value will
	     *        become a new property on the return object.
	     * @param {Object} obj The object to iterate over.
	     * @return {Object} A new object with the same keys as `obj` and values that are the result
	     *         of running each property through `fn`.
	     * @example
	     *
	     *      var values = { x: 1, y: 2, z: 3 };
	     *      var prependKeyAndDouble = function(num, key, obj) {
	     *        return key + (num * 2);
	     *      };
	     *
	     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
	     */
	    var mapObjIndexed = _curry2(function mapObjectIndexed(fn, obj) {
	        return _reduce(function (acc, key) {
	            acc[key] = fn(obj[key], key, obj);
	            return acc;
	        }, {}, keys(obj));
	    });

	    /**
	     * Tests a regular expression against a String
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig RegExp -> String -> [String] | null
	     * @param {RegExp} rx A regular expression.
	     * @param {String} str The string to match against
	     * @return {Array} The list of matches, or null if no matches found.
	     * @see R.invoker
	     * @example
	     *
	     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
	     */
	    var match = invoker(1, 'match');

	    /**
	     * Determines the largest of a list of numbers (or elements that can be cast to numbers)
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig [Number] -> Number
	     * @see R.maxBy
	     * @param {Array} list A list of numbers
	     * @return {Number} The greatest number in the list.
	     * @example
	     *
	     *      R.max([7, 3, 9, 2, 4, 9, 3]); //=> 9
	     */
	    var max = _createMaxMin(_gt, -Infinity);

	    /**
	     * Determines the smallest of a list of numbers (or elements that can be cast to numbers)
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list A list of numbers
	     * @return {Number} The greatest number in the list.
	     * @see R.minBy
	     * @example
	     *
	     *      R.min([7, 3, 9, 2, 4, 9, 3]); //=> 2
	     */
	    var min = _createMaxMin(_lt, Infinity);

	    /**
	     * Accepts as its arguments a function and any number of values and returns a function that,
	     * when invoked, calls the original function with all of the values prepended to the
	     * original function's arguments list. In some libraries this function is named `applyLeft`.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a -> b -> ... -> i -> j -> ... -> m -> n) -> a -> b-> ... -> i -> (j -> ... -> m -> n)
	     * @param {Function} fn The function to invoke.
	     * @param {...*} [args] Arguments to prepend to `fn` when the returned function is invoked.
	     * @return {Function} A new function wrapping `fn`. When invoked, it will call `fn`
	     *         with `args` prepended to `fn`'s arguments list.
	     * @example
	     *
	     *      var multiply = function(a, b) { return a * b; };
	     *      var double = R.partial(multiply, 2);
	     *      double(2); //=> 4
	     *
	     *      var greet = function(salutation, title, firstName, lastName) {
	     *        return salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *      };
	     *      var sayHello = R.partial(greet, 'Hello');
	     *      var sayHelloToMs = R.partial(sayHello, 'Ms.');
	     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partial = curry(_createPartialApplicator(_concat));

	    /**
	     * Accepts as its arguments a function and any number of values and returns a function that,
	     * when invoked, calls the original function with all of the values appended to the original
	     * function's arguments list.
	     *
	     * Note that `partialRight` is the opposite of `partial`: `partialRight` fills `fn`'s arguments
	     * from the right to the left.  In some libraries this function is named `applyRight`.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (a -> b-> ... -> i -> j -> ... -> m -> n) -> j -> ... -> m -> n -> (a -> b-> ... -> i)
	     * @param {Function} fn The function to invoke.
	     * @param {...*} [args] Arguments to append to `fn` when the returned function is invoked.
	     * @return {Function} A new function wrapping `fn`. When invoked, it will call `fn` with
	     *         `args` appended to `fn`'s arguments list.
	     * @example
	     *
	     *      var greet = function(salutation, title, firstName, lastName) {
	     *        return salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
	     *      };
	     *      var greetMsJaneJones = R.partialRight(greet, 'Ms.', 'Jane', 'Jones');
	     *
	     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
	     */
	    var partialRight = curry(_createPartialApplicator(flip(_concat)));

	    /**
	     * Creates a new function that runs each of the functions supplied as parameters in turn,
	     * passing the return value of each function invocation to the next function invocation,
	     * beginning with whatever arguments were passed to the initial invocation.
	     *
	     * `pipe` is the mirror version of `compose`. `pipe` is left-associative, which means that
	     * each of the functions provided is executed in order from left to right.
	     *
	     * In some libraries this function is named `sequence`.
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((a... -> b), (b -> c), ..., (x -> y), (y -> z)) -> (a... -> z)
	     * @param {...Function} functions A variable number of functions.
	     * @return {Function} A new function which represents the result of calling each of the
	     *         input `functions`, passing the result of each function call to the next, from
	     *         left to right.
	     * @example
	     *
	     *      var triple = function(x) { return x * 3; };
	     *      var double = function(x) { return x * 2; };
	     *      var square = function(x) { return x * x; };
	     *      var squareThenDoubleThenTriple = R.pipe(square, double, triple);
	     *
	     *      //≅ triple(double(square(5)))
	     *      squareThenDoubleThenTriple(5); //=> 150
	     */
	    var pipe = function pipe() {
	        return compose.apply(this, reverse(arguments));
	    };

	    /**
	     * Creates a new function that runs each of the functions supplied as parameters in turn,
	     * passing to the next function invocation either the value returned by the previous
	     * function or the resolved value if the returned value is a promise. In other words,
	     * if some of the functions in the sequence return promises, `pipeP` pipes the values
	     * asynchronously. If none of the functions return promises, the behavior is the same as
	     * that of `pipe`.
	     *
	     * `pipeP` is the mirror version of `composeP`. `pipeP` is left-associative, which means that
	     * each of the functions provided is executed in order from left to right.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((a... -> b), (b -> c), ..., (x -> y), (y -> z)) -> (a... -> z)
	     * @param {...Function} functions A variable number of functions.
	     * @return {Function} A new function which represents the result of calling each of the
	     *         input `functions`, passing either the returned result or the asynchronously
	     *         resolved value) of each function call to the next, from left to right.
	     * @example
	     *
	     *      var Q = require('q');
	     *      var triple = function(x) { return x * 3; };
	     *      var double = function(x) { return x * 2; };
	     *      var squareAsync = function(x) { return Q.when(x * x); };
	     *      var squareAsyncThenDoubleThenTriple = R.pipeP(squareAsync, double, triple);
	     *
	     *      //≅ squareAsync(5).then(function(x) { return triple(double(x)) };
	     *      squareAsyncThenDoubleThenTriple(5)
	     *          .then(function(result) {
	     *              // result is 150
	     *          });
	     */
	    var pipeP = function pipeP() {
	        return composeP.apply(this, reverse(arguments));
	    };

	    /**
	     * Returns a new list by plucking the same named property off all objects in the list supplied.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig String -> {*} -> [*]
	     * @param {Number|String} key The key name to pluck off of each object.
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of values for the given key.
	     * @example
	     *
	     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
	     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
	     */
	    var pluck = _curry2(_pluck);

	    /**
	     * Flipped version of R.prepend.
	     *
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> a -> [a]
	     * @param {Array} list
	     * @param {*} el
	     * @return {Array}
	     * @example
	     *
	     *      R.prependTo(['fi', 'fo', 'fum'], 'fee'); //=> ['fee', 'fi', 'fo', 'fum']
	     */
	    var prependTo = flip(_prepend);

	    /**
	     * Multiplies together all the elements of a list.
	     *
	     * @func
	     * @memberOf R
	     * @category Math
	     * @sig [Number] -> Number
	     * @param {Array} list An array of numbers
	     * @return {Number} The product of all the numbers in the list.
	     * @see reduce
	     * @example
	     *
	     *      R.product([2,4,6,8,100,1]); //=> 38400
	     */
	    var product = reduce(_multiply, 1);

	    /**
	     * Returns the value at the specified property.
	     * The only difference from `prop` is the parameter order.
	     *
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @see R.prop
	     * @category Object
	     * @sig {k: v} -> k -> v
	     * @param {Object} obj The object to query
	     * @param {String} p The property name
	     * @return {*} The value at `obj.p`.
	     * @example
	     *
	     *      R.propOf({x: 100}, 'x'); //=> 100
	     */
	    var propOf = flip(prop);

	    /**
	     * Similar to `filter`, except that it keeps only values for which the given predicate
	     * function returns falsy. The predicate function is passed one argument: *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} The new filtered array.
	     * @example
	     *
	     *      var isOdd = function(n) {
	     *        return n % 2 === 1;
	     *      };
	     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
	     */
	    var reject = _curry2(function reject(fn, list) {
	        return filter(not(fn), list);
	    });

	    /**
	     * Returns a fixed list of size `n` containing a specified identical value.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig a -> n -> [a]
	     * @param {*} value The value to repeat.
	     * @param {Number} n The desired size of the output list.
	     * @return {Array} A new array containing `n` `value`s.
	     * @example
	     *
	     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
	     *
	     *      var obj = {};
	     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
	     *      repeatedObjs[0] === repeatedObjs[1]; //=> true
	     */
	    var repeat = _curry2(function repeat(value, n) {
	        return times(always(value), n);
	    });

	    /**
	     * Returns a list containing the elements of `xs` from `fromIndex` (inclusive)
	     * to `toIndex` (exclusive).
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> Number -> [a] -> [a]
	     * @param {Number} fromIndex The start index (inclusive).
	     * @param {Number} toIndex The end index (exclusive).
	     * @param {Array} xs The list to take elements from.
	     * @return {Array} The slice of `xs` from `fromIndex` to `toIndex`.
	     * @example
	     *
	     *      var xs = R.range(0, 10);
	     *      R.slice(2, 5)(xs); //=> [2, 3, 4]
	     */
	    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, xs) {
	        return Array.prototype.slice.call(xs, fromIndex, toIndex);
	    }));

	    /**
	     * Returns a copy of the list, sorted according to the comparator function, which should accept two values at a
	     * time and return a negative number if the first value is smaller, a positive number if it's larger, and zero
	     * if they are equal.  Please note that this is a **copy** of the list.  It does not modify the original.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a,a -> Number) -> [a] -> [a]
	     * @param {Function} comparator A sorting function :: a -> b -> Int
	     * @param {Array} list The list to sort
	     * @return {Array} a new array with its elements sorted by the comparator function.
	     * @example
	     *
	     *      var diff = function(a, b) { return a - b; };
	     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
	     */
	    var sort = _curry2(function sort(comparator, list) {
	        return clone(list).sort(comparator);
	    });

	    /**
	     * Splits a string into an array of strings based on the given
	     * separator.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String -> [String]
	     * @param {String} sep The separator string.
	     * @param {String} str The string to separate into an array.
	     * @return {Array} The array of strings from `str` separated by `str`.
	     * @example
	     *
	     *      var pathComponents = R.split('/');
	     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
	     *
	     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
	     */
	    var split = invoker(1, 'split');

	    /**
	     * returns a subset of a string between one index and another.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig Number -> Number -> String -> String
	     * @param {Number} indexA An integer between 0 and the length of the string.
	     * @param {Number} indexB An integer between 0 and the length of the string.
	     * @param {String} str The string to extract from
	     * @return {String} The extracted substring.
	     * @see R.invoker
	     * @example
	     *
	     *      R.substring(2, 5, 'abcdefghijklm'); //=> 'cde'
	     */
	    var substring = invoker(2, 'substring');

	    /**
	     * The trailing substring of a String starting with the nth character:
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig Number -> String -> String
	     * @param {Number} indexA An integer between 0 and the length of the string.
	     * @param {String} str The string to extract from
	     * @return {String} The extracted substring.
	     * @example
	     *
	     *      R.substringFrom(8, 'abcdefghijklm'); //=> 'ijklm'
	     */
	    var substringFrom = flip(substring)(void 0);

	    /**
	     * The leading substring of a String ending before the nth character:
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig Number -> String -> String
	     * @param {Number} indexA An integer between 0 and the length of the string.
	     * @param {String} str The string to extract from
	     * @return {String} The extracted substring.
	     * @example
	     *
	     *      R.substringTo(8, 'abcdefghijklm'); //=> 'abcdefgh'
	     */
	    var substringTo = substring(0);

	    /**
	     * Returns all but the first element of a list. If the list provided has the `tail` method,
	     * it will instead return `list.tail()`.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} A new array containing all but the first element of the input list, or an
	     *         empty list if the input list is empty.
	     * @example
	     *
	     *      R.tail(['fi', 'fo', 'fum']); //=> ['fo', 'fum']
	     */
	    var tail = _checkForMethod('tail', function (list) {
	        return _slice(list, 1);
	    });

	    /**
	     * Returns a new list containing the first `n` elements of the given list.  If
	     * `n > * list.length`, returns a list of `list.length` elements.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig Number -> [a] -> [a]
	     * @param {Number} n The number of elements to return.
	     * @param {Array} list The array to query.
	     * @return {Array} A new array containing the first elements of `list`.
	     */
	    var take = _curry2(_checkForMethod('take', function (n, list) {
	        return _slice(list, 0, Math.min(n, list.length));
	    }));

	    /**
	     * Returns a new list containing the first `n` elements of a given list, passing each value
	     * to the supplied predicate function, and terminating when the predicate function returns
	     * `false`. Excludes the element that caused the predicate function to fail. The predicate
	     * function is passed one argument: *(value)*.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> Boolean) -> [a] -> [a]
	     * @param {Function} fn The function called per iteration.
	     * @param {Array} list The collection to iterate over.
	     * @return {Array} A new array.
	     * @example
	     *
	     *      var isNotFour = function(x) {
	     *        return !(x === 4);
	     *      };
	     *
	     *      R.takeWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]
	     */
	    var takeWhile = _curry2(_checkForMethod('takeWhile', function (fn, list) {
	        var idx = -1, len = list.length;
	        while (++idx < len && fn(list[idx])) {
	        }
	        return _slice(list, 0, idx);
	    }));

	    /**
	     * The lower case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to lower case.
	     * @return {String} The lower case version of `str`.
	     * @example
	     *
	     *      R.toLower('XYZ'); //=> 'xyz'
	     */
	    var toLower = invoker(0, 'toLowerCase');

	    /**
	     * Converts an object into an array of key, value arrays.
	     * Only the object's own properties are used.
	     * Note that the order of the output array is not guaranteed to be
	     * consistent across different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [[k,v]]
	     * @param {Object} obj The object to extract from
	     * @return {Array} An array of key, value arrays from the object's own properties.
	     * @example
	     *
	     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
	     */
	    var toPairs = _curry1(_pairWith(keys));

	    /**
	     * The upper case version of a string.
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig String -> String
	     * @param {String} str The string to upper case.
	     * @return {String} The upper case version of `str`.
	     * @example
	     *
	     *      R.toUpper('abc'); //=> 'ABC'
	     */
	    var toUpper = invoker(0, 'toUpperCase');

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the elements of each list.  Duplication is
	     * determined according to the value returned by applying the supplied predicate to two list elements.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig (a,a -> Boolean) -> [a] -> [a] -> [a]
	     * @param {Function} pred A predicate used to test whether two items are equal.
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @see R.union
	     * @example
	     *
	     *      function cmp(x, y) { return x.a === y.a; }
	     *      var l1 = [{a: 1}, {a: 2}];
	     *      var l2 = [{a: 1}, {a: 4}];
	     *      R.unionWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
	     */
	    var unionWith = _curry3(function unionWith(pred, list1, list2) {
	        return uniqWith(pred, _concat(list1, list2));
	    });

	    /**
	     * Returns a new list containing only one copy of each element in the original list.
	     * Equality is strict here, meaning reference equality for objects and non-coercing equality
	     * for primitives.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} The list of unique items.
	     * @example
	     *
	     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
	     *      R.uniq([{}, {}]);     //=> [{}, {}]
	     *      R.uniq([1, '1']);     //=> [1, '1']
	     */
	    var uniq = _curry1(function uniq(list) {
	        var idx = -1, len = list.length;
	        var result = [], item;
	        while (++idx < len) {
	            item = list[idx];
	            if (!_contains(item, result)) {
	                result[result.length] = item;
	            }
	        }
	        return result;
	    });

	    /**
	     * Returns a new list by pulling every item at the first level of nesting out, and putting
	     * them in a new array.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [b]
	     * @param {Array} list The array to consider.
	     * @return {Array} The flattened list.
	     * @example
	     *
	     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
	     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
	     */
	    var unnest = _curry1(_makeFlat(false));

	    /**
	     * Accepts a function `fn` and any number of transformer functions and returns a new
	     * function. When the new function is invoked, it calls the function `fn` with parameters
	     * consisting of the result of calling each supplied handler on successive arguments to the
	     * new function.
	     *
	     * If more arguments are passed to the returned function than transformer functions, those
	     * arguments are passed directly to `fn` as additional parameters. If you expect additional
	     * arguments that don't need to be transformed, although you can ignore them, it's best to
	     * pass an identity function so that the new function reports the correct arity.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig ((* -> *), (* -> *)...) -> (* -> *)
	     * @param {Function} fn The function to wrap.
	     * @param {...Function} transformers A variable number of transformer functions
	     * @return {Function} The wrapped function.
	     * @example
	     *
	     *      // Example 1:
	     *
	     *      // Number -> [Person] -> [Person]
	     *      var byAge = R.useWith(R.filter, R.propEq('age'), R.identity);
	     *
	     *      var kids = [
	     *          {name: 'Abbie', age: 6},
	     *          {name: 'Brian', age: 5},
	     *          {name: 'Chris', age: 6},
	     *          {name: 'David', age: 4},
	     *          {name: 'Ellie', age: 5}
	     *      ];
	     *
	     *      byAge(5, kids); //=> [{name: 'Brian', age: 5}, {name: 'Ellie', age: 5}]
	     *
	     *
	     *      // Example 2:
	     *
	     *      var double = function(y) { return y * 2; };
	     *      var square = function(x) { return x * x; };
	     *      var add = function(a, b) { return a + b; };
	     *      // Adds any number of arguments together
	     *      var addAll = function() {
	     *        return R.reduce(add, 0, arguments);
	     *      };
	     *
	     *      // Basic example
	     *      var addDoubleAndSquare = R.useWith(addAll, double, square);
	     *
	     *      //≅ addAll(double(10), square(5));
	     *      addDoubleAndSquare(10, 5); //=> 45
	     *
	     *      // Example of passing more arguments than transformers
	     *      //≅ addAll(double(10), square(5), 100);
	     *      addDoubleAndSquare(10, 5, 100); //=> 145
	     *
	     *      // If there are extra _expected_ arguments that don't need to be transformed, although
	     *      // you can ignore them, it might be best to pass in the identity function so that the new
	     *      // function correctly reports arity.
	     *      var addDoubleAndSquareWithExtraParams = R.useWith(addAll, double, square, R.identity);
	     *      // addDoubleAndSquareWithExtraParams.length //=> 3
	     *      //≅ addAll(double(10), square(5), R.identity(100));
	     *      addDoubleAndSquare(10, 5, 100); //=> 145
	     */
	    /*, transformers */
	    var useWith = curry(function useWith(fn) {
	        var transformers = _slice(arguments, 1);
	        var tlen = transformers.length;
	        return curry(arity(tlen, function () {
	            var args = [], idx = -1;
	            while (++idx < tlen) {
	                args[idx] = transformers[idx](arguments[idx]);
	            }
	            return fn.apply(this, args.concat(_slice(arguments, tlen)));
	        }));
	    });

	    /**
	     * Returns a list of all the enumerable own properties of the supplied object.
	     * Note that the order of the output array is not guaranteed across
	     * different JS platforms.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> [v]
	     * @param {Object} obj The object to extract values from
	     * @return {Array} An array of the values of the object's own properties.
	     * @example
	     *
	     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
	     */
	    var values = _curry1(function values(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var vals = [];
	        var idx = -1;
	        while (++idx < len) {
	            vals[idx] = obj[props[idx]];
	        }
	        return vals;
	    });

	    /**
	     * Takes a spec object and a test object and returns true if the test satisfies the spec.
	     * Any property on the spec that is not a function is interpreted as an equality
	     * relation.
	     *
	     * If the spec has a property mapped to a function, then `where` evaluates the function, passing in
	     * the test object's value for the property in question, as well as the whole test object.
	     *
	     * `where` is well suited to declaratively expressing constraints for other functions, e.g.,
	     * `filter`, `find`, `pickBy`, etc.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> {k: v} -> Boolean
	     * @param {Object} spec
	     * @param {Object} testObj
	     * @return {Boolean}
	     * @example
	     *
	     *      var spec = {x: 2};
	     *      R.where(spec, {w: 10, x: 2, y: 300}); //=> true
	     *      R.where(spec, {x: 1, y: 'moo', z: true}); //=> false
	     *
	     *      var spec2 = {x: function(val, obj) { return  val + obj.y > 10; }};
	     *      R.where(spec2, {x: 2, y: 7}); //=> false
	     *      R.where(spec2, {x: 3, y: 8}); //=> true
	     *
	     *      var xs = [{x: 2, y: 1}, {x: 10, y: 2}, {x: 8, y: 3}, {x: 10, y: 4}];
	     *      R.filter(R.where({x: 10}), xs); // ==> [{x: 10, y: 2}, {x: 10, y: 4}]
	     */
	    var where = _curry2(function where(spec, testObj) {
	        var parsedSpec = groupBy(function (key) {
	            return typeof spec[key] === 'function' ? 'fn' : 'obj';
	        }, keys(spec));
	        return _satisfiesSpec(spec, parsedSpec, testObj);
	    });

	    var _ap = function _ap(fns, vs) {
	        return _hasMethod('ap', fns) ? fns.ap(vs) : _reduce(function (acc, fn) {
	            return _concat(acc, _map(fn, vs));
	        }, [], fns);
	    };

	    // The algorithm used to handle cyclic structures is
	    // inspired by underscore's isEqual
	    // RegExp equality algorithm: http://stackoverflow.com/a/10776635
	    var _eqDeep = function _eqDeep(a, b, stackA, stackB) {
	        var typeA = type(a);
	        if (typeA !== type(b)) {
	            return false;
	        }
	        if (eq(a, b)) {
	            return true;
	        }
	        if (typeA == 'RegExp') {
	            // RegExp equality algorithm: http://stackoverflow.com/a/10776635
	            return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode;
	        }
	        if (Object(a) === a) {
	            if (typeA === 'Date' && a.getTime() != b.getTime()) {
	                return false;
	            }
	            var keysA = keys(a);
	            if (keysA.length !== keys(b).length) {
	                return false;
	            }
	            var idx = stackA.length;
	            while (idx--) {
	                if (stackA[idx] === a) {
	                    return stackB[idx] === b;
	                }
	            }
	            stackA[stackA.length] = a;
	            stackB[stackB.length] = b;
	            idx = keysA.length;
	            while (idx--) {
	                var key = keysA[idx];
	                if (!_has(key, b) || !_eqDeep(b[key], a[key], stackA, stackB)) {
	                    return false;
	                }
	            }
	            stackA.pop();
	            stackB.pop();
	            return true;
	        }
	        return false;
	    };

	    /**
	     * Assigns own enumerable properties of the other object to the destination
	     * object preferring items in other.
	     *
	     * @private
	     * @memberOf R
	     * @category Object
	     * @param {Object} destination The destination object.
	     * @param {Object} other The other object to merge with destination.
	     * @return {Object} The destination object.
	     * @example
	     *
	     *      _extend({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	     *      //=> { 'name': 'fred', 'age': 40 }
	     */
	    var _extend = function _extend(destination, other) {
	        var props = keys(other), idx = -1, length = props.length;
	        while (++idx < length) {
	            destination[props[idx]] = other[props[idx]];
	        }
	        return destination;
	    };

	    /**
	     * Create a predicate wrapper which will call a pick function (all/any) for each predicate
	     *
	     * @private
	     * @see R.all
	     * @see R.any
	     */
	    // Call function immediately if given arguments
	    // Return a function which will call the predicates with the provided arguments
	    var _predicateWrap = function _predicateWrap(predPicker) {
	        return function (preds) {
	            var predIterator = function () {
	                var args = arguments;
	                return predPicker(function (predicate) {
	                    return predicate.apply(null, args);
	                }, preds);
	            };
	            return arguments.length > 1 ? // Call function immediately if given arguments
	            predIterator.apply(null, _slice(arguments, 1)) : // Return a function which will call the predicates with the provided arguments
	            arity(max(_pluck('length', preds)), predIterator);
	        };
	    };

	    /**
	     * Given a list of predicates, returns a new predicate that will be true exactly when all of them are.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} list An array of predicate functions
	     * @param {*} optional Any arguments to pass into the predicates
	     * @return {Function} a function that applies its arguments to each of
	     *         the predicates, returning `true` if all are satisfied.
	     * @example
	     *
	     *      var gt10 = function(x) { return x > 10; };
	     *      var even = function(x) { return x % 2 === 0};
	     *      var f = R.allPass([gt10, even]);
	     *      f(11); //=> false
	     *      f(12); //=> true
	     */
	    var allPass = curry(_predicateWrap(_all));

	    /**
	     * Given a list of predicates returns a new predicate that will be true exactly when any one of them is.
	     *
	     * @func
	     * @memberOf R
	     * @category Logic
	     * @sig [(*... -> Boolean)] -> (*... -> Boolean)
	     * @param {Array} list An array of predicate functions
	     * @param {*} optional Any arguments to pass into the predicates
	     * @return {Function} A function that applies its arguments to each of the predicates, returning
	     *         `true` if all are satisfied.
	     * @example
	     *
	     *      var gt10 = function(x) { return x > 10; };
	     *      var even = function(x) { return x % 2 === 0};
	     *      var f = R.anyPass([gt10, even]);
	     *      f(11); //=> true
	     *      f(8); //=> true
	     *      f(9); //=> false
	     */
	    var anyPass = curry(_predicateWrap(_any));

	    /**
	     * ap applies a list of functions to a list of values.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig [f] -> [a] -> [f a]
	     * @param {Array} fns An array of functions
	     * @param {Array} vs An array of values
	     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.
	     * @example
	     *
	     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
	     */
	    var ap = _curry2(_ap);

	    /**
	     * Flipped version of R.append.
	     *
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> a -> [a]
	     * @param {Array} list
	     * @param {*} el
	     * @return {Array}
	     * @example
	     *
	     *      R.appendTo([], 1); //=> [1]
	     *      R.appendTo([1, 2, 3], 4); //=> [1, 2, 3, 4]
	     *      R.appendTo([1, 2, 3], [4, 5, 6]); //=> [1, 2, 3, [4, 5, 6]]
	     */
	    var appendTo = flip(_append);

	    /**
	     * Returns the result of calling its first argument with the remaining
	     * arguments. This is occasionally useful as a converging function for
	     * `R.converge`: the left branch can produce a function while the right
	     * branch produces a value to be passed to that function as an argument.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (*... -> a),*... -> a
	     * @param {Function} fn The function to apply to the remaining arguments.
	     * @param {...*} args Any number of positional arguments.
	     * @return {*}
	     * @example
	     *
	     *      var indentN = R.pipe(R.times(R.always(' ')),
	     *                           R.join(''),
	     *                           R.replace(/^(?!$)/gm));
	     *
	     *      var format = R.converge(R.call,
	     *                              R.pipe(R.prop('indent'), indentN),
	     *                              R.prop('value'));
	     *
	     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
	     */
	    var call = curry(function call(fn) {
	        return fn.apply(this, _slice(arguments, 1));
	    });

	    /**
	     * `chain` maps a function over a list and concatenates the results.
	     * This implementation is compatible with the
	     * Fantasy-land Chain spec, and will work with types that implement that spec.
	     * `chain` is also known as `flatMap` in some libraries
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig (a -> [b]) -> [a] -> [b]
	     * @param {Function} fn
	     * @param {Array} list
	     * @return {Array}
	     * @example
	     *
	     *      var duplicate = function(n) {
	     *        return [n, n];
	     *      };
	     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
	     *
	     */
	    var chain = _curry2(_checkForMethod('chain', function chain(f, list) {
	        return unnest(_map(f, list));
	    }));

	    /**
	     * The character at the nth position in a String:
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig Number -> String -> String
	     * @param {Number} index An integer between 0 and the length of the string.
	     * @param {String} str The string to extract a char from
	     * @return {String} The character at `index` of `str`.
	     * @see R.invoker
	     * @example
	     *
	     *      R.charAt(8, 'abcdefghijklm'); //=> 'i'
	     */
	    var charAt = invoker(1, 'charAt');

	    /**
	     * The ascii code of the character at the nth position in a String:
	     *
	     * @func
	     * @memberOf R
	     * @category String
	     * @sig Number -> String -> Number
	     * @param {Number} index An integer between 0 and the length of the string.
	     * @param {String} str The string to extract a charCode from
	     * @return {Number} The code of the character at `index` of `str`.
	     * @see R.invoker
	     * @example
	     *
	     *      R.charCodeAt(8, 'abcdefghijklm'); //=> 105
	     *      // (... 'a' ~ 97, 'b' ~ 98, ... 'i' ~ 105)
	     */
	    var charCodeAt = invoker(1, 'charCodeAt');

	    /**
	     * Turns a list of Functors into a Functor of a list, applying
	     * a mapping function to the elements of the list along the way.
	     *
	     * Note: `commuteMap` may be more useful to convert a list of non-Array Functors (e.g.
	     * Maybe, Either, etc.) to Functor of a list.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @see R.commute
	     * @sig (a -> (b -> c)) -> (x -> [x]) -> [[*]...]
	     * @param {Function} fn The transformation function
	     * @param {Function} of A function that returns the data type to return
	     * @param {Array} list An Array (or other Functor) of Arrays (or other Functors)
	     * @return {Array}
	     * @example
	     *
	     *     var plus10map = R.map(function(x) { return x + 10; });
	     *     var as = [[1], [3, 4]];
	     *     R.commuteMap(R.map(function(x) { return x + 10; }), R.of, as); //=> [[11, 13], [11, 14]]
	     *
	     *     var bs = [[1, 2], [3]];
	     *     R.commuteMap(plus10map, R.of, bs); //=> [[11, 13], [12, 13]]
	     *
	     *     var cs = [[1, 2], [3, 4]];
	     *     R.commuteMap(plus10map, R.of, cs); //=> [[11, 13], [12, 13], [11, 14], [12, 14]]
	     *
	     */
	    var commuteMap = _curry3(function commuteMap(fn, of, list) {
	        function consF(acc, ftor) {
	            return _ap(_map(append, fn(ftor)), acc);
	        }
	        return _reduce(consF, of([]), list);
	    });

	    /**
	     * Wraps a constructor function inside a curried function that can be called with the same
	     * arguments and returns the same type. The arity of the function returned is specified
	     * to allow using variadic constructor functions.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig Number -> (* -> {*}) -> (* -> {*})
	     * @param {Number} n The arity of the constructor function.
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Variadic constructor function
	     *      var Widget = function() {
	     *        this.children = Array.prototype.slice.call(arguments);
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = {
	     *        // ...
	     *      };
	     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets
	     */
	    var constructN = _curry2(function constructN(n, Fn) {
	        if (n > 10) {
	            throw new Error('Constructor with greater than ten arguments');
	        }
	        if (n === 0) {
	            return function () {
	                return new Fn();
	            };
	        }
	        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
	            switch (arguments.length) {
	            case 1:
	                return new Fn($0);
	            case 2:
	                return new Fn($0, $1);
	            case 3:
	                return new Fn($0, $1, $2);
	            case 4:
	                return new Fn($0, $1, $2, $3);
	            case 5:
	                return new Fn($0, $1, $2, $3, $4);
	            case 6:
	                return new Fn($0, $1, $2, $3, $4, $5);
	            case 7:
	                return new Fn($0, $1, $2, $3, $4, $5, $6);
	            case 8:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
	            case 9:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
	            case 10:
	                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
	            }
	        }));
	    });

	    /**
	     * Performs a deep test on whether two items are equal.
	     * Equality implies the two items are semmatically equivalent.
	     * Cyclic structures are handled as expected
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig a -> b -> Boolean
	     * @param {*} a
	     * @param {*} b
	     * @return {Boolean}
	     * @example
	     *
	     *      var o = {};
	     *      R.eqDeep(o, o); //=> true
	     *      R.eqDeep(o, {}); //=> true
	     *      R.eqDeep(1, 1); //=> true
	     *      R.eqDeep(1, '1'); //=> false
	     *
	     *      var a = {}; a.v = a;
	     *      var b = {}; b.v = b;
	     *      R.eqDeep(a, b); //=> true
	     */
	    var eqDeep = _curry2(function eqDeep(a, b) {
	        return _eqDeep(a, b, [], []);
	    });

	    /**
	     * Creates a new object by evolving a shallow copy of `object`, according to the
	     * `transformation` functions.  All non-primitive properties are copied by reference.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: (v -> v)} -> {k: v} -> {k: v}
	     * @param {Object} transformations The object specifying transformation functions to apply
	     *        to the object.
	     * @param {Object} object The object to be transformed.
	     * @return {Object} The transformed object.
	     * @example
	     *
	     *      R.evolve({ elapsed: R.add(1), remaining: R.add(-1) }, { name: 'Tomato', elapsed: 100, remaining: 1400 }); //=> { name: 'Tomato', elapsed: 101, remaining: 1399 }
	     */
	    var evolve = _curry2(function evolve(transformations, object) {
	        return _extend(_extend({}, object), mapObjIndexed(function (fn, key) {
	            return fn(object[key]);
	        }, transformations));
	    });

	    /**
	     * Returns a list of function names of object's own functions
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {*} -> [String]
	     * @param {Object} obj The objects with functions in it
	     * @return {Array} A list of the object's own properties that map to functions.
	     * @example
	     *
	     *      R.functions(R); // returns list of ramda's own function names
	     *
	     *      var F = function() { this.x = function(){}; this.y = 1; }
	     *      F.prototype.z = function() {};
	     *      F.prototype.a = 100;
	     *      R.functions(new F()); //=> ["x"]
	     */
	    var functions = _curry1(_functionsWith(keys));

	    /**
	     * Returns all but the last element of a list.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [a] -> [a]
	     * @param {Array} list The array to consider.
	     * @return {Array} A new array containing all but the last element of the input list, or an
	     *         empty list if the input list is empty.
	     * @example
	     *
	     *      R.init(['fi', 'fo', 'fum']); //=> ['fi', 'fo']
	     */
	    var init = slice(0, -1);

	    /* global R */
	    /**
	     * Expose the functions from ramda as properties of another object.
	     * If the provided object is the global object then the ramda
	     * functions become global functions.
	     * Warning: This function *will* mutate the object provided.
	     *
	     * @deprecated since v0.11.0
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig -> {*} -> {*}
	     * @param {Object} obj The object to attach ramda functions
	     * @return {Object} a reference to the mutated object.
	     * @example
	     *
	     *      var x = {}
	     *      R.installTo(x); // x now contains ramda functions
	     *      R.installTo(this); // add ramda functions to `this` object
	     */
	    var installTo = _curry1(function (obj) {
	        return _extend(obj, R);
	    });

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} list1 The first list.
	     * @param {Array} list2 The second list.
	     * @see R.intersectionWith
	     * @return {Array} The list of elements found in both `list1` and `list2`.
	     * @example
	     *
	     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
	     */
	    var intersection = _curry2(function intersection(list1, list2) {
	        return uniq(_filter(flip(_contains)(list1), list2));
	    });

	    /**
	     * Same as R.invertObj, however this accounts for objects
	     * with duplicate values by putting the values into an
	     * array.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {s: x} -> {x: [ s, ... ]}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object with keys
	     * in an array.
	     * @example
	     *
	     *      var raceResultsByFirstName = {
	     *        first: 'alice',
	     *        second: 'jake',
	     *        third: 'alice',
	     *      };
	     *      R.invert(raceResultsByFirstName);
	     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
	     *
	     */
	    var invert = _curry1(function invert(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = -1;
	        var out = {};
	        while (++idx < len) {
	            var key = props[idx];
	            var val = obj[key];
	            var list = _has(val, out) ? out[val] : out[val] = [];
	            list[list.length] = key;
	        }
	        return out;
	    });

	    /**
	     * Returns a new object with the keys of the given object
	     * as values, and the values of the given object as keys.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {s: x} -> {x: s}
	     * @param {Object} obj The object or array to invert
	     * @return {Object} out A new object
	     * @example
	     *
	     *      var raceResults = {
	     *        first: 'alice',
	     *        second: 'jake'
	     *      };
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': 'first', 'jake':'second' }
	     *
	     *      // Alternatively:
	     *      var raceResults = ['alice', 'jake'];
	     *      R.invertObj(raceResults);
	     *      //=> { 'alice': '0', 'jake':'1' }
	     */
	    var invertObj = _curry1(function invertObj(obj) {
	        var props = keys(obj);
	        var len = props.length;
	        var idx = -1;
	        var out = {};
	        while (++idx < len) {
	            var key = props[idx];
	            out[obj[key]] = key;
	        }
	        return out;
	    });

	    /**
	     * "lifts" a function to be the specified arity, so that it may "map over" that many
	     * lists (or other Functors).
	     *
	     * @func
	     * @memberOf R
	     * @see R.lift
	     * @category Function
	     * @sig Number -> (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The function `fn` applicable to mappable objects.
	     * @example
	     *
	     *     var madd3 = R.liftN(3, R.curryN(3, function() {
	     *         return R.reduce(R.add, 0, arguments);
	     *     }));
	     *     madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     */
	    var liftN = _curry2(function liftN(arity, fn) {
	        var lifted = curryN(arity, fn);
	        return curryN(arity, function () {
	            return _reduce(_ap, map(lifted, arguments[0]), _slice(arguments, 1));
	        });
	    });

	    /**
	     * Create a new object with the own properties of a
	     * merged with the own properties of object b.
	     * This function will *not* mutate passed-in objects.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @sig {k: v} -> {k: v} -> {k: v}
	     * @param {Object} a source object
	     * @param {Object} b object with higher precedence in output
	     * @return {Object} The destination object.
	     * @example
	     *
	     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
	     *      //=> { 'name': 'fred', 'age': 40 }
	     *
	     *      var resetToDefault = R.merge(R.__, {x: 0});
	     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
	     */
	    var merge = _curry2(function merge(a, b) {
	        return _extend(_extend({}, a), b);
	    });

	    /**
	     * Merges a list of objects together into one object.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @sig [{k: v}] -> {k: v}
	     * @param {Array} list An array of objects
	     * @return {Object} A merged object.
	     * @see reduce
	     * @example
	     *
	     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
	     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
	     */
	    var mergeAll = _curry1(function mergeAll(list) {
	        return reduce(merge, {}, list);
	    });

	    /**
	     * Reasonable analog to SQL `select` statement.
	     *
	     * @func
	     * @memberOf R
	     * @category Object
	     * @category Relation
	     * @sig [k] -> [{k: v}] -> [{k: v}]
	     * @param {Array} props The property names to project
	     * @param {Array} objs The objects to query
	     * @return {Array} An array of objects with just the `props` properties.
	     * @example
	     *
	     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
	     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
	     *      var kids = [abby, fred];
	     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
	     */
	    // passing `identity` gives correct arity
	    var project = useWith(_map, pickAll, identity);

	    /**
	     * Combines two lists into a set (i.e. no duplicates) composed of the
	     * elements of each list.
	     *
	     * @func
	     * @memberOf R
	     * @category Relation
	     * @sig [a] -> [a] -> [a]
	     * @param {Array} as The first list.
	     * @param {Array} bs The second list.
	     * @return {Array} The first and second lists concatenated, with
	     *         duplicates removed.
	     * @example
	     *
	     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
	     */
	    var union = _curry2(compose(uniq, _concat));

	    /**
	     * Turns a list of Functors into a Functor of a list.
	     *
	     * Note: `commute` may be more useful to convert a list of non-Array Functors (e.g.
	     * Maybe, Either, etc.) to Functor of a list.
	     *
	     * @func
	     * @memberOf R
	     * @category List
	     * @see R.commuteMap
	     * @sig (x -> [x]) -> [[*]...]
	     * @param {Function} of A function that returns the data type to return
	     * @param {Array} list An Array (or other Functor) of Arrays (or other Functors)
	     * @return {Array}
	     * @example
	     *
	     *     var as = [[1], [3, 4]];
	     *     R.commute(R.of, as); //=> [[1, 3], [1, 4]]
	     *
	     *     var bs = [[1, 2], [3]];
	     *     R.commute(R.of, bs); //=> [[1, 3], [2, 3]]
	     *
	     *     var cs = [[1, 2], [3, 4]];
	     *     R.commute(R.of, cs); //=> [[1, 3], [2, 3], [1, 4], [2, 4]]
	     */
	    var commute = commuteMap(map(identity));

	    /**
	     * Wraps a constructor function inside a curried function that can be called with the same
	     * arguments and returns the same type.
	     *
	     * @func
	     * @memberOf R
	     * @category Function
	     * @sig (* -> {*}) -> (* -> {*})
	     * @param {Function} Fn The constructor function to wrap.
	     * @return {Function} A wrapped, curried constructor function.
	     * @example
	     *
	     *      // Constructor function
	     *      var Widget = function(config) {
	     *        // ...
	     *      };
	     *      Widget.prototype = {
	     *        // ...
	     *      };
	     *      var allConfigs = {
	     *        // ...
	     *      };
	     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets
	     */
	    var construct = _curry1(function construct(Fn) {
	        return constructN(Fn.length, Fn);
	    });

	    /**
	     * "lifts" a function of arity > 1 so that it may "map over" an Array or
	     * other Functor.
	     *
	     * @func
	     * @memberOf R
	     * @see R.liftN
	     * @category Function
	     * @sig (*... -> *) -> ([*]... -> [*])
	     * @param {Function} fn The function to lift into higher context
	     * @return {Function} The function `fn` applicable to mappable objects.
	     * @example
	     *
	     *     var madd3 = R.lift(R.curry(function(a, b, c) {
	     *         return a + b + c;
	     *     }));
	     *     madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
	     *
	     *     var madd5 = R.lift(R.curry(function(a, b, c, d, e) {
	     *         return a + b + c + d + e;
	     *     }));
	     *     madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
	     */
	    var lift = _curry1(function lift(fn) {
	        return liftN(fn.length, fn);
	    });

	    var R = {
	        F: F,
	        I: I,
	        T: T,
	        __: __,
	        add: add,
	        all: all,
	        allPass: allPass,
	        always: always,
	        and: and,
	        any: any,
	        anyPass: anyPass,
	        ap: ap,
	        append: append,
	        appendTo: appendTo,
	        apply: apply,
	        arity: arity,
	        assoc: assoc,
	        assocPath: assocPath,
	        binary: binary,
	        bind: bind,
	        call: call,
	        chain: chain,
	        charAt: charAt,
	        charCodeAt: charCodeAt,
	        clone: clone,
	        commute: commute,
	        commuteMap: commuteMap,
	        comparator: comparator,
	        compose: compose,
	        composeP: composeP,
	        concat: concat,
	        cond: cond,
	        construct: construct,
	        constructN: constructN,
	        contains: contains,
	        containsWith: containsWith,
	        converge: converge,
	        countBy: countBy,
	        createMapEntry: createMapEntry,
	        curry: curry,
	        curryN: curryN,
	        dec: dec,
	        defaultTo: defaultTo,
	        difference: difference,
	        differenceWith: differenceWith,
	        dissoc: dissoc,
	        dissocPath: dissocPath,
	        divide: divide,
	        drop: drop,
	        dropWhile: dropWhile,
	        empty: empty,
	        eq: eq,
	        eqDeep: eqDeep,
	        eqProps: eqProps,
	        evolve: evolve,
	        filter: filter,
	        filterIndexed: filterIndexed,
	        find: find,
	        findIndex: findIndex,
	        findLast: findLast,
	        findLastIndex: findLastIndex,
	        flatten: flatten,
	        flip: flip,
	        forEach: forEach,
	        forEachIndexed: forEachIndexed,
	        fromPairs: fromPairs,
	        func: func,
	        functions: functions,
	        functionsIn: functionsIn,
	        get: get,
	        groupBy: groupBy,
	        gt: gt,
	        gte: gte,
	        has: has,
	        hasIn: hasIn,
	        head: head,
	        identity: identity,
	        ifElse: ifElse,
	        inc: inc,
	        indexOf: indexOf,
	        init: init,
	        insert: insert,
	        insertAll: insertAll,
	        installTo: installTo,
	        intersection: intersection,
	        intersectionWith: intersectionWith,
	        invert: invert,
	        invertObj: invertObj,
	        invoker: invoker,
	        is: is,
	        isArrayLike: isArrayLike,
	        isEmpty: isEmpty,
	        isNil: isNil,
	        isSet: isSet,
	        join: join,
	        keys: keys,
	        keysIn: keysIn,
	        last: last,
	        lastIndexOf: lastIndexOf,
	        length: length,
	        lens: lens,
	        lensOn: lensOn,
	        lift: lift,
	        liftN: liftN,
	        lt: lt,
	        lte: lte,
	        map: map,
	        mapAccum: mapAccum,
	        mapAccumRight: mapAccumRight,
	        mapIndexed: mapIndexed,
	        mapObj: mapObj,
	        mapObjIndexed: mapObjIndexed,
	        match: match,
	        mathMod: mathMod,
	        max: max,
	        maxBy: maxBy,
	        memoize: memoize,
	        merge: merge,
	        mergeAll: mergeAll,
	        min: min,
	        minBy: minBy,
	        modulo: modulo,
	        multiply: multiply,
	        nAry: nAry,
	        negate: negate,
	        not: not,
	        nth: nth,
	        nthArg: nthArg,
	        of: of,
	        omit: omit,
	        once: once,
	        or: or,
	        partial: partial,
	        partialRight: partialRight,
	        partition: partition,
	        path: path,
	        pathEq: pathEq,
	        pick: pick,
	        pickAll: pickAll,
	        pickBy: pickBy,
	        pipe: pipe,
	        pipeP: pipeP,
	        pluck: pluck,
	        prepend: prepend,
	        prependTo: prependTo,
	        product: product,
	        project: project,
	        prop: prop,
	        propEq: propEq,
	        propOf: propOf,
	        propOr: propOr,
	        props: props,
	        range: range,
	        reduce: reduce,
	        reduceIndexed: reduceIndexed,
	        reduceRight: reduceRight,
	        reduceRightIndexed: reduceRightIndexed,
	        reject: reject,
	        rejectIndexed: rejectIndexed,
	        remove: remove,
	        repeat: repeat,
	        replace: replace,
	        reverse: reverse,
	        scan: scan,
	        slice: slice,
	        sort: sort,
	        sortBy: sortBy,
	        split: split,
	        strIndexOf: strIndexOf,
	        strLastIndexOf: strLastIndexOf,
	        substring: substring,
	        substringFrom: substringFrom,
	        substringTo: substringTo,
	        subtract: subtract,
	        sum: sum,
	        tail: tail,
	        take: take,
	        takeWhile: takeWhile,
	        tap: tap,
	        times: times,
	        toLower: toLower,
	        toPairs: toPairs,
	        toPairsIn: toPairsIn,
	        toUpper: toUpper,
	        trim: trim,
	        type: type,
	        unapply: unapply,
	        unary: unary,
	        unfold: unfold,
	        union: union,
	        unionWith: unionWith,
	        uniq: uniq,
	        uniqWith: uniqWith,
	        unnest: unnest,
	        useWith: useWith,
	        values: values,
	        valuesIn: valuesIn,
	        where: where,
	        wrap: wrap,
	        xprod: xprod,
	        zip: zip,
	        zipObj: zipObj,
	        zipWith: zipWith
	    };

	    /* TEST_ENTRY_POINT */

	    if (true) {
	        module.exports = R;
	    } else if (typeof define === 'function' && define.amd) {
	        define(function() { return R; });
	    } else {
	        this.R = R;
	    }

	}.call(this));


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(38);
	var React = __webpack_require__(36);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(39);
	var ReactCSSTransitionGroup = __webpack_require__(40);
	var ReactFragment = __webpack_require__(41);
	var ReactTransitionGroup = __webpack_require__(42);
	var ReactUpdates = __webpack_require__(43);

	var cx = __webpack_require__(44);
	var cloneWithProps = __webpack_require__(45);
	var update = __webpack_require__(46);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(47);
	  React.addons.TestUtils = __webpack_require__(48);
	}

	module.exports = React;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var AppStateStore = _interopRequire(__webpack_require__(50));

	var ModelStore = _interopRequire(__webpack_require__(51));

	var AppState = new AppStateStore();
	var Model = new ModelStore();

	exports.AppState = AppState;
	exports.Model = Model;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "index.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _slicedToArray = function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) { _arr.push(_step.value); if (i && _arr.length === i) break; } return _arr; } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var R = _interopRequire(__webpack_require__(26));

	var DebugStateSection = _interopRequire(__webpack_require__(49));

	var DebugState = (function (_React$Component) {
	  function DebugState() {
	    _classCallCheck(this, DebugState);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(DebugState, _React$Component);

	  _createClass(DebugState, {
	    render: {
	      value: function render() {
	        var object = this.props.object;

	        var dataArray = R.toPairs(object);
	        var createSections = R.map(function (_ref) {
	          var _ref2 = _slicedToArray(_ref, 2);

	          var title = _ref2[0];
	          var data = _ref2[1];
	          return React.createElement(DebugStateSection, { key: title, title: title, data: data });
	        });
	        var sections = createSections(dataArray);

	        return React.createElement(
	          "section",
	          { className: "debugState" },
	          React.createElement(
	            "table",
	            { className: "debugger" },
	            sections
	          )
	        );
	      }
	    }
	  });

	  return DebugState;
	})(React.Component);

	;

	DebugState.propTypes = {
	  object: React.PropTypes.object
	};

	module.exports = DebugState;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "debugState.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var React = _interopRequire(__webpack_require__(24));

	var Checkpoint = React.createClass({
	  displayName: "Checkpoint",

	  render: function render() {
	    var check = function () {
	      return React.createElement(
	        "span",
	        null,
	        getRandomInt(0, 2) === 1 ? "x" : "v"
	      );
	    };
	    return React.createElement(
	      "p",
	      { className: "checkpoint" },
	      check(),
	      this.props.checkpoint
	    );
	  }
	});

	module.exports = Checkpoint;

	function getRandomInt(min, max) {
	  return Math.floor(Math.random() * (max - min)) + min;
	}

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "checkpoint.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var Dispatcher = _interopRequire(__webpack_require__(58));

	var AppDispatcher = (function (_Dispatcher) {
	  function AppDispatcher() {
	    _classCallCheck(this, AppDispatcher);

	    if (_Dispatcher != null) {
	      _Dispatcher.apply(this, arguments);
	    }
	  }

	  _inherits(AppDispatcher, _Dispatcher);

	  _createClass(AppDispatcher, {
	    handleViewAction: {
	      value: function handleViewAction(action) {
	        this.dispatch({
	          source: "VIEW_ACTION",
	          action: action
	        });
	      }
	    }
	  });

	  return AppDispatcher;
	})(Dispatcher);

	module.exports = new AppDispatcher();

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "AppDispatcher.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var keyMirror = _interopRequire(__webpack_require__(84));

	var constants = keyMirror({
	  LOADED_COLLECTION: null,
	  GET_COLLECTION: null,
	  AUTHENTICATE: null,
	  LEARN: null,
	  SWITCH_MODE: null,
	  REVERT_HISTORY: null,
	  FORWARD_HISTORY: null });

	module.exports = constants;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "AppStateConstants.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var faker = _interopRequire(__webpack_require__(85));

	var R = _interopRequire(__webpack_require__(26));

	var Actions = _interopRequire(__webpack_require__(59));

	var Waypoint = function Waypoint(index) {
	  _classCallCheck(this, Waypoint);

	  this.id = index;
	  this.title = getRandomString(1, 3);
	  this.image = faker.image.image();
	  this.curator = "Yeehaa";
	  this.summary = faker.lorem.sentence();
	  this.description = R.map(faker.lorem.paragraph, getRandomRange(1, 3));
	  this.checkpoints = R.map(R.partial(getRandomString, 1, 3), getRandomRange(2, 8));
	};

	;

	var allWaypoints = allWaypoints || R.map(function (i) {
	  return new Waypoint(i);
	}, R.range(1, 10));
	var userWaypoints = userWaypoints || R.map(function (i) {
	  return new Waypoint(i);
	}, R.range(1, 10));
	var collection = [];

	function getRandomString(min, max) {
	  return faker.lorem.words(getRandomInt(min, max)).join(" ");
	}

	function getRandomRange(min, max) {
	  return R.range(min, getRandomInt(min + 1, max + 1));
	}

	function getRandomInt(min, max) {
	  return Math.floor(Math.random() * (max - min)) + min;
	}

	module.exports = {
	  getCollection: function getCollection(_ref) {
	    var user = _ref.user;
	    var mode = _ref.mode;

	    collection = user ? userWaypoints : allWaypoints;
	    Actions.loadedCollection(collection);
	  }
	};

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "API.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var Actions = _interopRequire(__webpack_require__(15));

	var _ = _interopRequire(__webpack_require__(86));

	var ModeButton = (function (_React$Component) {
	  function ModeButton() {
	    _classCallCheck(this, ModeButton);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ModeButton, _React$Component);

	  _createClass(ModeButton, {
	    switchMode: {
	      value: function switchMode() {
	        Actions.switchMode(this.props.mode);
	      }
	    },
	    render: {
	      value: function render() {
	        var classes = this.props.current === this.props.mode ? "active" : null;

	        return React.createElement(
	          "button",
	          { className: classes, onClick: this.switchMode.bind(this) },
	          _.capitalize(this.props.mode)
	        );
	      }
	    }
	  });

	  return ModeButton;
	})(React.Component);

	;

	ModeButton.propTypes = {
	  mode: React.PropTypes.string,
	  currentMode: React.PropTypes.string
	};

	module.exports = ModeButton;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "modeButton.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var used = []
	  , exports = module.exports = {};

	/*!
	 * Chai version
	 */

	exports.version = '2.1.1';

	/*!
	 * Assertion Error
	 */

	exports.AssertionError = __webpack_require__(87);

	/*!
	 * Utils for plugins (not exported)
	 */

	var util = __webpack_require__(60);

	/**
	 * # .use(function)
	 *
	 * Provides a way to extend the internals of Chai
	 *
	 * @param {Function}
	 * @returns {this} for chaining
	 * @api public
	 */

	exports.use = function (fn) {
	  if (!~used.indexOf(fn)) {
	    fn(this, util);
	    used.push(fn);
	  }

	  return this;
	};

	/*!
	 * Utility Functions
	 */

	exports.util = util;

	/*!
	 * Configuration
	 */

	var config = __webpack_require__(52);
	exports.config = config;

	/*!
	 * Primary `Assertion` prototype
	 */

	var assertion = __webpack_require__(53);
	exports.use(assertion);

	/*!
	 * Core Assertions
	 */

	var core = __webpack_require__(54);
	exports.use(core);

	/*!
	 * Expect interface
	 */

	var expect = __webpack_require__(55);
	exports.use(expect);

	/*!
	 * Should interface
	 */

	var should = __webpack_require__(56);
	exports.use(should);

	/*!
	 * Assert interface
	 */

	var assert = __webpack_require__(57);
	exports.use(assert);


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(61);
	var ReactChildren = __webpack_require__(62);
	var ReactComponent = __webpack_require__(63);
	var ReactClass = __webpack_require__(64);
	var ReactContext = __webpack_require__(65);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactElement = __webpack_require__(67);
	var ReactElementValidator = __webpack_require__(68);
	var ReactDOM = __webpack_require__(69);
	var ReactDOMTextComponent = __webpack_require__(70);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(73);
	var ReactPerf = __webpack_require__(74);
	var ReactPropTypes = __webpack_require__(75);
	var ReactReconciler = __webpack_require__(76);
	var ReactServerRendering = __webpack_require__(77);

	var assign = __webpack_require__(78);
	var findDOMNode = __webpack_require__(79);
	var onlyChild = __webpack_require__(80);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(81);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'http://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'http://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.0';

	module.exports = React;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.9.0
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	(function (undefined) {
	    /************************************
	        Constants
	    ************************************/

	    var moment,
	        VERSION = '2.9.0',
	        // the global-scope this is NOT the global object in Node.js
	        globalScope = (typeof global !== 'undefined' && (typeof window === 'undefined' || window === global.window)) ? global : this,
	        oldGlobalMoment,
	        round = Math.round,
	        hasOwnProperty = Object.prototype.hasOwnProperty,
	        i,

	        YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,

	        // internal storage for locale config files
	        locales = {},

	        // extra moment internal properties (plugins register props here)
	        momentProperties = [],

	        // check for nodeJS
	        hasModule = (typeof module !== 'undefined' && module && module.exports),

	        // ASP.NET json date format regex
	        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
	        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

	        // format tokens
	        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,

	        // parsing token regexes
	        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
	        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
	        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
	        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
	        parseTokenDigits = /\d+/, // nonzero number of digits
	        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
	        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        parseTokenT = /T/i, // T (ISO separator)
	        parseTokenOffsetMs = /[\+\-]?\d+/, // 1234567890123
	        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123

	        //strict parsing regexes
	        parseTokenOneDigit = /\d/, // 0 - 9
	        parseTokenTwoDigits = /\d\d/, // 00 - 99
	        parseTokenThreeDigits = /\d{3}/, // 000 - 999
	        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
	        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
	        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

	        // iso 8601 regex
	        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

	        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
	            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
	            ['YYYY-DDD', /\d{4}-\d{3}/]
	        ],

	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
	            ['HH:mm', /(T| )\d\d:\d\d/],
	            ['HH', /(T| )\d\d/]
	        ],

	        // timezone chunker '+10:00' > ['10', '00'] or '-1530' > ['-', '15', '30']
	        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

	        // getter and setter names
	        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
	        unitMillisecondFactors = {
	            'Milliseconds' : 1,
	            'Seconds' : 1e3,
	            'Minutes' : 6e4,
	            'Hours' : 36e5,
	            'Days' : 864e5,
	            'Months' : 2592e6,
	            'Years' : 31536e6
	        },

	        unitAliases = {
	            ms : 'millisecond',
	            s : 'second',
	            m : 'minute',
	            h : 'hour',
	            d : 'day',
	            D : 'date',
	            w : 'week',
	            W : 'isoWeek',
	            M : 'month',
	            Q : 'quarter',
	            y : 'year',
	            DDD : 'dayOfYear',
	            e : 'weekday',
	            E : 'isoWeekday',
	            gg: 'weekYear',
	            GG: 'isoWeekYear'
	        },

	        camelFunctions = {
	            dayofyear : 'dayOfYear',
	            isoweekday : 'isoWeekday',
	            isoweek : 'isoWeek',
	            weekyear : 'weekYear',
	            isoweekyear : 'isoWeekYear'
	        },

	        // format function strings
	        formatFunctions = {},

	        // default relative time thresholds
	        relativeTimeThresholds = {
	            s: 45,  // seconds to minute
	            m: 45,  // minutes to hour
	            h: 22,  // hours to day
	            d: 26,  // days to month
	            M: 11   // months to year
	        },

	        // tokens to ordinalize and pad
	        ordinalizeTokens = 'DDD w W M D d'.split(' '),
	        paddedTokens = 'M D H h m s w W'.split(' '),

	        formatTokenFunctions = {
	            M    : function () {
	                return this.month() + 1;
	            },
	            MMM  : function (format) {
	                return this.localeData().monthsShort(this, format);
	            },
	            MMMM : function (format) {
	                return this.localeData().months(this, format);
	            },
	            D    : function () {
	                return this.date();
	            },
	            DDD  : function () {
	                return this.dayOfYear();
	            },
	            d    : function () {
	                return this.day();
	            },
	            dd   : function (format) {
	                return this.localeData().weekdaysMin(this, format);
	            },
	            ddd  : function (format) {
	                return this.localeData().weekdaysShort(this, format);
	            },
	            dddd : function (format) {
	                return this.localeData().weekdays(this, format);
	            },
	            w    : function () {
	                return this.week();
	            },
	            W    : function () {
	                return this.isoWeek();
	            },
	            YY   : function () {
	                return leftZeroFill(this.year() % 100, 2);
	            },
	            YYYY : function () {
	                return leftZeroFill(this.year(), 4);
	            },
	            YYYYY : function () {
	                return leftZeroFill(this.year(), 5);
	            },
	            YYYYYY : function () {
	                var y = this.year(), sign = y >= 0 ? '+' : '-';
	                return sign + leftZeroFill(Math.abs(y), 6);
	            },
	            gg   : function () {
	                return leftZeroFill(this.weekYear() % 100, 2);
	            },
	            gggg : function () {
	                return leftZeroFill(this.weekYear(), 4);
	            },
	            ggggg : function () {
	                return leftZeroFill(this.weekYear(), 5);
	            },
	            GG   : function () {
	                return leftZeroFill(this.isoWeekYear() % 100, 2);
	            },
	            GGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 4);
	            },
	            GGGGG : function () {
	                return leftZeroFill(this.isoWeekYear(), 5);
	            },
	            e : function () {
	                return this.weekday();
	            },
	            E : function () {
	                return this.isoWeekday();
	            },
	            a    : function () {
	                return this.localeData().meridiem(this.hours(), this.minutes(), true);
	            },
	            A    : function () {
	                return this.localeData().meridiem(this.hours(), this.minutes(), false);
	            },
	            H    : function () {
	                return this.hours();
	            },
	            h    : function () {
	                return this.hours() % 12 || 12;
	            },
	            m    : function () {
	                return this.minutes();
	            },
	            s    : function () {
	                return this.seconds();
	            },
	            S    : function () {
	                return toInt(this.milliseconds() / 100);
	            },
	            SS   : function () {
	                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
	            },
	            SSS  : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            SSSS : function () {
	                return leftZeroFill(this.milliseconds(), 3);
	            },
	            Z    : function () {
	                var a = this.utcOffset(),
	                    b = '+';
	                if (a < 0) {
	                    a = -a;
	                    b = '-';
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
	            },
	            ZZ   : function () {
	                var a = this.utcOffset(),
	                    b = '+';
	                if (a < 0) {
	                    a = -a;
	                    b = '-';
	                }
	                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
	            },
	            z : function () {
	                return this.zoneAbbr();
	            },
	            zz : function () {
	                return this.zoneName();
	            },
	            x    : function () {
	                return this.valueOf();
	            },
	            X    : function () {
	                return this.unix();
	            },
	            Q : function () {
	                return this.quarter();
	            }
	        },

	        deprecations = {},

	        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'],

	        updateInProgress = false;

	    // Pick the first defined of two or three arguments. dfl comes from
	    // default.
	    function dfl(a, b, c) {
	        switch (arguments.length) {
	            case 2: return a != null ? a : b;
	            case 3: return a != null ? a : b != null ? b : c;
	            default: throw new Error('Implement me');
	        }
	    }

	    function hasOwnProp(a, b) {
	        return hasOwnProperty.call(a, b);
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object, and es5 standard is not very
	        // helpful.
	        return {
	            empty : false,
	            unusedTokens : [],
	            unusedInput : [],
	            overflow : -2,
	            charsLeftOver : 0,
	            nullInput : false,
	            invalidMonth : null,
	            invalidFormat : false,
	            userInvalidated : false,
	            iso: false
	        };
	    }

	    function printMsg(msg) {
	        if (moment.suppressDeprecationWarnings === false &&
	                typeof console !== 'undefined' && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;
	        return extend(function () {
	            if (firstTime) {
	                printMsg(msg);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    function deprecateSimple(name, msg) {
	        if (!deprecations[name]) {
	            printMsg(msg);
	            deprecations[name] = true;
	        }
	    }

	    function padToken(func, count) {
	        return function (a) {
	            return leftZeroFill(func.call(this, a), count);
	        };
	    }
	    function ordinalizeToken(func, period) {
	        return function (a) {
	            return this.localeData().ordinal(func.call(this, a), period);
	        };
	    }

	    function monthDiff(a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        return -(wholeMonthDiff + adjust);
	    }

	    while (ordinalizeTokens.length) {
	        i = ordinalizeTokens.pop();
	        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
	    }
	    while (paddedTokens.length) {
	        i = paddedTokens.pop();
	        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
	    }
	    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // thie is not supposed to happen
	            return hour;
	        }
	    }

	    /************************************
	        Constructors
	    ************************************/

	    function Locale() {
	    }

	    // Moment prototype object
	    function Moment(config, skipOverflow) {
	        if (skipOverflow !== false) {
	            checkOverflow(config);
	        }
	        copyConfig(this, config);
	        this._d = new Date(+config._d);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            moment.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    // Duration Constructor
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 36e5; // 1000 * 60 * 60
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = moment.localeData();

	        this._bubble();
	    }

	    /************************************
	        Helpers
	    ************************************/


	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (typeof from._isAMomentObject !== 'undefined') {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (typeof from._i !== 'undefined') {
	            to._i = from._i;
	        }
	        if (typeof from._f !== 'undefined') {
	            to._f = from._f;
	        }
	        if (typeof from._l !== 'undefined') {
	            to._l = from._l;
	        }
	        if (typeof from._strict !== 'undefined') {
	            to._strict = from._strict;
	        }
	        if (typeof from._tzm !== 'undefined') {
	            to._tzm = from._tzm;
	        }
	        if (typeof from._isUTC !== 'undefined') {
	            to._isUTC = from._isUTC;
	        }
	        if (typeof from._offset !== 'undefined') {
	            to._offset = from._offset;
	        }
	        if (typeof from._pf !== 'undefined') {
	            to._pf = from._pf;
	        }
	        if (typeof from._locale !== 'undefined') {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (typeof val !== 'undefined') {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.ceil(number);
	        } else {
	            return Math.floor(number);
	        }
	    }

	    // left zero fill a number
	    // see http://jsperf.com/left-zero-filling for performance comparison
	    function leftZeroFill(number, targetLength, forceSign) {
	        var output = '' + Math.abs(number),
	            sign = number >= 0;

	        while (output.length < targetLength) {
	            output = '0' + output;
	        }
	        return (sign ? (forceSign ? '+' : '') : '-') + output;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        other = makeAs(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = moment.duration(val, period);
	            addOrSubtractDurationFromMoment(this, dur, direction);
	            return this;
	        };
	    }

	    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = duration._days,
	            months = duration._months;
	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(+mom._d + milliseconds * isAdding);
	        }
	        if (days) {
	            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            moment.updateOffset(mom, days || months);
	        }
	    }

	    // check if is an array
	    function isArray(input) {
	        return Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isDate(input) {
	        return Object.prototype.toString.call(input) === '[object Date]' ||
	            input instanceof Date;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function normalizeUnits(units) {
	        if (units) {
	            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
	            units = unitAliases[units] || camelFunctions[lowered] || lowered;
	        }
	        return units;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    function makeList(field) {
	        var count, setter;

	        if (field.indexOf('week') === 0) {
	            count = 7;
	            setter = 'day';
	        }
	        else if (field.indexOf('month') === 0) {
	            count = 12;
	            setter = 'month';
	        }
	        else {
	            return;
	        }

	        moment[field] = function (format, index) {
	            var i, getter,
	                method = moment._locale[field],
	                results = [];

	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            getter = function (i) {
	                var m = moment().utc().set(setter, i);
	                return method.call(moment._locale, m, format || '');
	            };

	            if (index != null) {
	                return getter(index);
	            }
	            else {
	                for (i = 0; i < count; i++) {
	                    results.push(getter(i));
	                }
	                return results;
	            }
	        };
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            if (coercedNumber >= 0) {
	                value = Math.floor(coercedNumber);
	            } else {
	                value = Math.ceil(coercedNumber);
	            }
	        }

	        return value;
	    }

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    function weeksInYear(year, dow, doy) {
	        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
	    }

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function checkOverflow(m) {
	        var overflow;
	        if (m._a && m._pf.overflow === -2) {
	            overflow =
	                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
	                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
	                m._a[HOUR] < 0 || m._a[HOUR] > 24 ||
	                    (m._a[HOUR] === 24 && (m._a[MINUTE] !== 0 ||
	                                           m._a[SECOND] !== 0 ||
	                                           m._a[MILLISECOND] !== 0)) ? HOUR :
	                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
	                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
	                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }

	            m._pf.overflow = overflow;
	        }
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            m._isValid = !isNaN(m._d.getTime()) &&
	                m._pf.overflow < 0 &&
	                !m._pf.empty &&
	                !m._pf.invalidMonth &&
	                !m._pf.nullInput &&
	                !m._pf.invalidFormat &&
	                !m._pf.userInvalidated;

	            if (m._strict) {
	                m._isValid = m._isValid &&
	                    m._pf.charsLeftOver === 0 &&
	                    m._pf.unusedTokens.length === 0 &&
	                    m._pf.bigHour === undefined;
	            }
	        }
	        return m._isValid;
	    }

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        if (!locales[name] && hasModule) {
	            try {
	                oldLocale = moment.locale();
	                __webpack_require__(82)("./" + name);
	                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
	                moment.locale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // Return a moment from input, that is local/utc/utcOffset equivalent to
	    // model.
	    function makeAs(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (moment.isMoment(input) || isDate(input) ?
	                    +input : +moment(input)) - (+res);
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(+res._d + diff);
	            moment.updateOffset(res, false);
	            return res;
	        } else {
	            return moment(input).local();
	        }
	    }

	    /************************************
	        Locale
	    ************************************/


	    extend(Locale.prototype, {

	        set : function (config) {
	            var prop, i;
	            for (i in config) {
	                prop = config[i];
	                if (typeof prop === 'function') {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	            // Lenient ordinal parsing accepts just a number in addition to
	            // number + (possibly) stuff coming from _ordinalParseLenient.
	            this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
	        },

	        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        months : function (m) {
	            return this._months[m.month()];
	        },

	        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        monthsShort : function (m) {
	            return this._monthsShort[m.month()];
	        },

	        monthsParse : function (monthName, format, strict) {
	            var i, mom, regex;

	            if (!this._monthsParse) {
	                this._monthsParse = [];
	                this._longMonthsParse = [];
	                this._shortMonthsParse = [];
	            }

	            for (i = 0; i < 12; i++) {
	                // make the regex if we don't have it already
	                mom = moment.utc([2000, i]);
	                if (strict && !this._longMonthsParse[i]) {
	                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	                }
	                if (!strict && !this._monthsParse[i]) {
	                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                    return i;
	                } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                    return i;
	                } else if (!strict && this._monthsParse[i].test(monthName)) {
	                    return i;
	                }
	            }
	        },

	        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdays : function (m) {
	            return this._weekdays[m.day()];
	        },

	        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysShort : function (m) {
	            return this._weekdaysShort[m.day()];
	        },

	        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        weekdaysMin : function (m) {
	            return this._weekdaysMin[m.day()];
	        },

	        weekdaysParse : function (weekdayName) {
	            var i, mom, regex;

	            if (!this._weekdaysParse) {
	                this._weekdaysParse = [];
	            }

	            for (i = 0; i < 7; i++) {
	                // make the regex if we don't have it already
	                if (!this._weekdaysParse[i]) {
	                    mom = moment([2000, 1]).day(i);
	                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	                }
	                // test the regex
	                if (this._weekdaysParse[i].test(weekdayName)) {
	                    return i;
	                }
	            }
	        },

	        _longDateFormat : {
	            LTS : 'h:mm:ss A',
	            LT : 'h:mm A',
	            L : 'MM/DD/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY LT',
	            LLLL : 'dddd, MMMM D, YYYY LT'
	        },
	        longDateFormat : function (key) {
	            var output = this._longDateFormat[key];
	            if (!output && this._longDateFormat[key.toUpperCase()]) {
	                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
	                    return val.slice(1);
	                });
	                this._longDateFormat[key] = output;
	            }
	            return output;
	        },

	        isPM : function (input) {
	            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	            // Using charAt should be more compatible.
	            return ((input + '').toLowerCase().charAt(0) === 'p');
	        },

	        _meridiemParse : /[ap]\.?m?\.?/i,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'pm' : 'PM';
	            } else {
	                return isLower ? 'am' : 'AM';
	            }
	        },


	        _calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        calendar : function (key, mom, now) {
	            var output = this._calendar[key];
	            return typeof output === 'function' ? output.apply(mom, [now]) : output;
	        },

	        _relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },

	        relativeTime : function (number, withoutSuffix, string, isFuture) {
	            var output = this._relativeTime[string];
	            return (typeof output === 'function') ?
	                output(number, withoutSuffix, string, isFuture) :
	                output.replace(/%d/i, number);
	        },

	        pastFuture : function (diff, output) {
	            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
	        },

	        ordinal : function (number) {
	            return this._ordinal.replace('%d', number);
	        },
	        _ordinal : '%d',
	        _ordinalParse : /\d{1,2}/,

	        preparse : function (string) {
	            return string;
	        },

	        postformat : function (string) {
	            return string;
	        },

	        week : function (mom) {
	            return weekOfYear(mom, this._week.dow, this._week.doy).week;
	        },

	        _week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        },

	        firstDayOfWeek : function () {
	            return this._week.dow;
	        },

	        firstDayOfYear : function () {
	            return this._week.doy;
	        },

	        _invalidDate: 'Invalid date',
	        invalidDate: function () {
	            return this._invalidDate;
	        }
	    });

	    /************************************
	        Formatting
	    ************************************/


	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '';
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());

	        if (!formatFunctions[format]) {
	            formatFunctions[format] = makeFormatFunction(format);
	        }

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }


	    /************************************
	        Parsing
	    ************************************/


	    // get the regex to find the next token
	    function getParseRegexForToken(token, config) {
	        var a, strict = config._strict;
	        switch (token) {
	        case 'Q':
	            return parseTokenOneDigit;
	        case 'DDDD':
	            return parseTokenThreeDigits;
	        case 'YYYY':
	        case 'GGGG':
	        case 'gggg':
	            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
	        case 'Y':
	        case 'G':
	        case 'g':
	            return parseTokenSignedNumber;
	        case 'YYYYYY':
	        case 'YYYYY':
	        case 'GGGGG':
	        case 'ggggg':
	            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
	        case 'S':
	            if (strict) {
	                return parseTokenOneDigit;
	            }
	            /* falls through */
	        case 'SS':
	            if (strict) {
	                return parseTokenTwoDigits;
	            }
	            /* falls through */
	        case 'SSS':
	            if (strict) {
	                return parseTokenThreeDigits;
	            }
	            /* falls through */
	        case 'DDD':
	            return parseTokenOneToThreeDigits;
	        case 'MMM':
	        case 'MMMM':
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	            return parseTokenWord;
	        case 'a':
	        case 'A':
	            return config._locale._meridiemParse;
	        case 'x':
	            return parseTokenOffsetMs;
	        case 'X':
	            return parseTokenTimestampMs;
	        case 'Z':
	        case 'ZZ':
	            return parseTokenTimezone;
	        case 'T':
	            return parseTokenT;
	        case 'SSSS':
	            return parseTokenDigits;
	        case 'MM':
	        case 'DD':
	        case 'YY':
	        case 'GG':
	        case 'gg':
	        case 'HH':
	        case 'hh':
	        case 'mm':
	        case 'ss':
	        case 'ww':
	        case 'WW':
	            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
	        case 'M':
	        case 'D':
	        case 'd':
	        case 'H':
	        case 'h':
	        case 'm':
	        case 's':
	        case 'w':
	        case 'W':
	        case 'e':
	        case 'E':
	            return parseTokenOneOrTwoDigits;
	        case 'Do':
	            return strict ? config._locale._ordinalParse : config._locale._ordinalParseLenient;
	        default :
	            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
	            return a;
	        }
	    }

	    function utcOffsetFromString(string) {
	        string = string || '';
	        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
	            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
	            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
	            minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // function to convert string input to date
	    function addTimeToArrayFromToken(token, input, config) {
	        var a, datePartArray = config._a;

	        switch (token) {
	        // QUARTER
	        case 'Q':
	            if (input != null) {
	                datePartArray[MONTH] = (toInt(input) - 1) * 3;
	            }
	            break;
	        // MONTH
	        case 'M' : // fall through to MM
	        case 'MM' :
	            if (input != null) {
	                datePartArray[MONTH] = toInt(input) - 1;
	            }
	            break;
	        case 'MMM' : // fall through to MMMM
	        case 'MMMM' :
	            a = config._locale.monthsParse(input, token, config._strict);
	            // if we didn't find a month name, mark the date as invalid.
	            if (a != null) {
	                datePartArray[MONTH] = a;
	            } else {
	                config._pf.invalidMonth = input;
	            }
	            break;
	        // DAY OF MONTH
	        case 'D' : // fall through to DD
	        case 'DD' :
	            if (input != null) {
	                datePartArray[DATE] = toInt(input);
	            }
	            break;
	        case 'Do' :
	            if (input != null) {
	                datePartArray[DATE] = toInt(parseInt(
	                            input.match(/\d{1,2}/)[0], 10));
	            }
	            break;
	        // DAY OF YEAR
	        case 'DDD' : // fall through to DDDD
	        case 'DDDD' :
	            if (input != null) {
	                config._dayOfYear = toInt(input);
	            }

	            break;
	        // YEAR
	        case 'YY' :
	            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
	            break;
	        case 'YYYY' :
	        case 'YYYYY' :
	        case 'YYYYYY' :
	            datePartArray[YEAR] = toInt(input);
	            break;
	        // AM / PM
	        case 'a' : // fall through to A
	        case 'A' :
	            config._meridiem = input;
	            // config._isPm = config._locale.isPM(input);
	            break;
	        // HOUR
	        case 'h' : // fall through to hh
	        case 'hh' :
	            config._pf.bigHour = true;
	            /* falls through */
	        case 'H' : // fall through to HH
	        case 'HH' :
	            datePartArray[HOUR] = toInt(input);
	            break;
	        // MINUTE
	        case 'm' : // fall through to mm
	        case 'mm' :
	            datePartArray[MINUTE] = toInt(input);
	            break;
	        // SECOND
	        case 's' : // fall through to ss
	        case 'ss' :
	            datePartArray[SECOND] = toInt(input);
	            break;
	        // MILLISECOND
	        case 'S' :
	        case 'SS' :
	        case 'SSS' :
	        case 'SSSS' :
	            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
	            break;
	        // UNIX OFFSET (MILLISECONDS)
	        case 'x':
	            config._d = new Date(toInt(input));
	            break;
	        // UNIX TIMESTAMP WITH MS
	        case 'X':
	            config._d = new Date(parseFloat(input) * 1000);
	            break;
	        // TIMEZONE
	        case 'Z' : // fall through to ZZ
	        case 'ZZ' :
	            config._useUTC = true;
	            config._tzm = utcOffsetFromString(input);
	            break;
	        // WEEKDAY - human
	        case 'dd':
	        case 'ddd':
	        case 'dddd':
	            a = config._locale.weekdaysParse(input);
	            // if we didn't get a weekday name, mark the date as invalid
	            if (a != null) {
	                config._w = config._w || {};
	                config._w['d'] = a;
	            } else {
	                config._pf.invalidWeekday = input;
	            }
	            break;
	        // WEEK, WEEK DAY - numeric
	        case 'w':
	        case 'ww':
	        case 'W':
	        case 'WW':
	        case 'd':
	        case 'e':
	        case 'E':
	            token = token.substr(0, 1);
	            /* falls through */
	        case 'gggg':
	        case 'GGGG':
	        case 'GGGGG':
	            token = token.substr(0, 2);
	            if (input) {
	                config._w = config._w || {};
	                config._w[token] = toInt(input);
	            }
	            break;
	        case 'gg':
	        case 'GG':
	            config._w = config._w || {};
	            config._w[token] = moment.parseTwoDigitYear(input);
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
	            week = dfl(w.W, 1);
	            weekday = dfl(w.E, 1);
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
	            week = dfl(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < dow) {
	                    ++week;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function dateFromConfig(config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                config._pf._overflowDayOfYear = true;
	            }

	            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dateFromObject(config) {
	        var normalizedInput;

	        if (config._d) {
	            return;
	        }

	        normalizedInput = normalizeObjectUnits(config._i);
	        config._a = [
	            normalizedInput.year,
	            normalizedInput.month,
	            normalizedInput.day || normalizedInput.date,
	            normalizedInput.hour,
	            normalizedInput.minute,
	            normalizedInput.second,
	            normalizedInput.millisecond
	        ];

	        dateFromConfig(config);
	    }

	    function currentDateArray(config) {
	        var now = new Date();
	        if (config._useUTC) {
	            return [
	                now.getUTCFullYear(),
	                now.getUTCMonth(),
	                now.getUTCDate()
	            ];
	        } else {
	            return [now.getFullYear(), now.getMonth(), now.getDate()];
	        }
	    }

	    // date from string and format string
	    function makeDateFromStringAndFormat(config) {
	        if (config._f === moment.ISO_8601) {
	            parseISO(config);
	            return;
	        }

	        config._a = [];
	        config._pf.empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    config._pf.unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    config._pf.empty = false;
	                }
	                else {
	                    config._pf.unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                config._pf.unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            config._pf.unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (config._pf.bigHour === true && config._a[HOUR] <= 12) {
	            config._pf.bigHour = undefined;
	        }
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR],
	                config._meridiem);
	        dateFromConfig(config);
	        checkOverflow(config);
	    }

	    function unescapeFormat(s) {
	        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        });
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function regexpEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    // date from string and array of format strings
	    function makeDateFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            config._pf.invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._pf = defaultParsingFlags();
	            tempConfig._f = config._f[i];
	            makeDateFromStringAndFormat(tempConfig);

	            if (!isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += tempConfig._pf.charsLeftOver;

	            //or tokens
	            currentScore += tempConfig._pf.unusedTokens.length * 10;

	            tempConfig._pf.score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    // date from iso format
	    function parseISO(config) {
	        var i, l,
	            string = config._i,
	            match = isoRegex.exec(string);

	        if (match) {
	            config._pf.iso = true;
	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(string)) {
	                    // match[5] should be 'T' or undefined
	                    config._f = isoDates[i][0] + (match[6] || ' ');
	                    break;
	                }
	            }
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(string)) {
	                    config._f += isoTimes[i][0];
	                    break;
	                }
	            }
	            if (string.match(parseTokenTimezone)) {
	                config._f += 'Z';
	            }
	            makeDateFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function makeDateFromString(config) {
	        parseISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            moment.createFromInputFallback(config);
	        }
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function makeDateFromInput(config) {
	        var input = config._i, matched;
	        if (input === undefined) {
	            config._d = new Date();
	        } else if (isDate(input)) {
	            config._d = new Date(+input);
	        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
	            config._d = new Date(+matched[1]);
	        } else if (typeof input === 'string') {
	            makeDateFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            dateFromConfig(config);
	        } else if (typeof(input) === 'object') {
	            dateFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            moment.createFromInputFallback(config);
	        }
	    }

	    function makeDate(y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor doesn't accept years < 1970
	        if (y < 1970) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function makeUTCDate(y) {
	        var date = new Date(Date.UTC.apply(null, arguments));
	        if (y < 1970) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    function parseWeekday(input, locale) {
	        if (typeof input === 'string') {
	            if (!isNaN(input)) {
	                input = parseInt(input, 10);
	            }
	            else {
	                input = locale.weekdaysParse(input);
	                if (typeof input !== 'number') {
	                    return null;
	                }
	            }
	        }
	        return input;
	    }

	    /************************************
	        Relative Time
	    ************************************/


	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime(posNegDuration, withoutSuffix, locale) {
	        var duration = moment.duration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            years = round(duration.as('y')),

	            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
	                minutes === 1 && ['m'] ||
	                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
	                hours === 1 && ['h'] ||
	                hours < relativeTimeThresholds.h && ['hh', hours] ||
	                days === 1 && ['d'] ||
	                days < relativeTimeThresholds.d && ['dd', days] ||
	                months === 1 && ['M'] ||
	                months < relativeTimeThresholds.M && ['MM', months] ||
	                years === 1 && ['y'] || ['yy', years];

	        args[2] = withoutSuffix;
	        args[3] = +posNegDuration > 0;
	        args[4] = locale;
	        return substituteTimeAgo.apply({}, args);
	    }


	    /************************************
	        Week of Year
	    ************************************/


	    // firstDayOfWeek       0 = sun, 6 = sat
	    //                      the day of the week that starts the week
	    //                      (usually sunday or monday)
	    // firstDayOfWeekOfYear 0 = sun, 6 = sat
	    //                      the first week is the week that contains the first
	    //                      of this day of the week
	    //                      (eg. ISO weeks use thursday (4))
	    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
	        var end = firstDayOfWeekOfYear - firstDayOfWeek,
	            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
	            adjustedMoment;


	        if (daysToDayOfWeek > end) {
	            daysToDayOfWeek -= 7;
	        }

	        if (daysToDayOfWeek < end - 7) {
	            daysToDayOfWeek += 7;
	        }

	        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
	        return {
	            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
	            year: adjustedMoment.year()
	        };
	    }

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
	        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

	        d = d === 0 ? 7 : d;
	        weekday = weekday != null ? weekday : firstDayOfWeek;
	        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
	        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

	        return {
	            year: dayOfYear > 0 ? year : year - 1,
	            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
	        };
	    }

	    /************************************
	        Top Level Functions
	    ************************************/

	    function makeMoment(config) {
	        var input = config._i,
	            format = config._f,
	            res;

	        config._locale = config._locale || moment.localeData(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return moment.invalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (moment.isMoment(input)) {
	            return new Moment(input, true);
	        } else if (format) {
	            if (isArray(format)) {
	                makeDateFromStringAndArray(config);
	            } else {
	                makeDateFromStringAndFormat(config);
	            }
	        } else {
	            makeDateFromInput(config);
	        }

	        res = new Moment(config);
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    moment = function (input, format, locale, strict) {
	        var c;

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._i = input;
	        c._f = format;
	        c._l = locale;
	        c._strict = strict;
	        c._isUTC = false;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c);
	    };

	    moment.suppressDeprecationWarnings = false;

	    moment.createFromInputFallback = deprecate(
	        'moment construction falls back to js Date. This is ' +
	        'discouraged and will be removed in upcoming major ' +
	        'release. Please refer to ' +
	        'https://github.com/moment/moment/issues/1407 for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return moment();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    moment.min = function () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    };

	    moment.max = function () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    };

	    // creating with utc
	    moment.utc = function (input, format, locale, strict) {
	        var c;

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c = {};
	        c._isAMomentObject = true;
	        c._useUTC = true;
	        c._isUTC = true;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	        c._pf = defaultParsingFlags();

	        return makeMoment(c).utc();
	    };

	    // creating with unix timestamp (in seconds)
	    moment.unix = function (input) {
	        return moment(input * 1000);
	    };

	    // duration
	    moment.duration = function (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            parseIso,
	            diffRes;

	        if (moment.isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(match[MILLISECOND]) * sign
	            };
	        } else if (!!(match = isoDurationRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            parseIso = function (inp) {
	                // We'd normally use ~~inp for this, but unfortunately it also
	                // converts floats to ints.
	                // inp may be undefined, so careful calling replace on it.
	                var res = inp && parseFloat(inp.replace(',', '.'));
	                // apply sign while we're at it
	                return (isNaN(res) ? 0 : res) * sign;
	            };
	            duration = {
	                y: parseIso(match[2]),
	                M: parseIso(match[3]),
	                d: parseIso(match[4]),
	                h: parseIso(match[5]),
	                m: parseIso(match[6]),
	                s: parseIso(match[7]),
	                w: parseIso(match[8])
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' &&
	                ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (moment.isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    };

	    // version number
	    moment.version = VERSION;

	    // default format
	    moment.defaultFormat = isoFormat;

	    // constant that refers to the ISO standard
	    moment.ISO_8601 = function () {};

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    moment.momentProperties = momentProperties;

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    moment.updateOffset = function () {};

	    // This function allows you to set a threshold for relative time strings
	    moment.relativeTimeThreshold = function (threshold, limit) {
	        if (relativeTimeThresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return relativeTimeThresholds[threshold];
	        }
	        relativeTimeThresholds[threshold] = limit;
	        return true;
	    };

	    moment.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        function (key, value) {
	            return moment.locale(key, value);
	        }
	    );

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    moment.locale = function (key, values) {
	        var data;
	        if (key) {
	            if (typeof(values) !== 'undefined') {
	                data = moment.defineLocale(key, values);
	            }
	            else {
	                data = moment.localeData(key);
	            }

	            if (data) {
	                moment.duration._locale = moment._locale = data;
	            }
	        }

	        return moment._locale._abbr;
	    };

	    moment.defineLocale = function (name, values) {
	        if (values !== null) {
	            values.abbr = name;
	            if (!locales[name]) {
	                locales[name] = new Locale();
	            }
	            locales[name].set(values);

	            // backwards compat for now: also set the locale
	            moment.locale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    };

	    moment.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        function (key) {
	            return moment.localeData(key);
	        }
	    );

	    // returns locale data
	    moment.localeData = function (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return moment._locale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    };

	    // compare moment object
	    moment.isMoment = function (obj) {
	        return obj instanceof Moment ||
	            (obj != null && hasOwnProp(obj, '_isAMomentObject'));
	    };

	    // for typechecking Duration objects
	    moment.isDuration = function (obj) {
	        return obj instanceof Duration;
	    };

	    for (i = lists.length - 1; i >= 0; --i) {
	        makeList(lists[i]);
	    }

	    moment.normalizeUnits = function (units) {
	        return normalizeUnits(units);
	    };

	    moment.invalid = function (flags) {
	        var m = moment.utc(NaN);
	        if (flags != null) {
	            extend(m._pf, flags);
	        }
	        else {
	            m._pf.userInvalidated = true;
	        }

	        return m;
	    };

	    moment.parseZone = function () {
	        return moment.apply(null, arguments).parseZone();
	    };

	    moment.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    moment.isDate = isDate;

	    /************************************
	        Moment Prototype
	    ************************************/


	    extend(moment.fn = Moment.prototype, {

	        clone : function () {
	            return moment(this);
	        },

	        valueOf : function () {
	            return +this._d - ((this._offset || 0) * 60000);
	        },

	        unix : function () {
	            return Math.floor(+this / 1000);
	        },

	        toString : function () {
	            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	        },

	        toDate : function () {
	            return this._offset ? new Date(+this) : this._d;
	        },

	        toISOString : function () {
	            var m = moment(this).utc();
	            if (0 < m.year() && m.year() <= 9999) {
	                if ('function' === typeof Date.prototype.toISOString) {
	                    // native implementation is ~50x faster, use it when we can
	                    return this.toDate().toISOString();
	                } else {
	                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	                }
	            } else {
	                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        },

	        toArray : function () {
	            var m = this;
	            return [
	                m.year(),
	                m.month(),
	                m.date(),
	                m.hours(),
	                m.minutes(),
	                m.seconds(),
	                m.milliseconds()
	            ];
	        },

	        isValid : function () {
	            return isValid(this);
	        },

	        isDSTShifted : function () {
	            if (this._a) {
	                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
	            }

	            return false;
	        },

	        parsingFlags : function () {
	            return extend({}, this._pf);
	        },

	        invalidAt: function () {
	            return this._pf.overflow;
	        },

	        utc : function (keepLocalTime) {
	            return this.utcOffset(0, keepLocalTime);
	        },

	        local : function (keepLocalTime) {
	            if (this._isUTC) {
	                this.utcOffset(0, keepLocalTime);
	                this._isUTC = false;

	                if (keepLocalTime) {
	                    this.subtract(this._dateUtcOffset(), 'm');
	                }
	            }
	            return this;
	        },

	        format : function (inputString) {
	            var output = formatMoment(this, inputString || moment.defaultFormat);
	            return this.localeData().postformat(output);
	        },

	        add : createAdder(1, 'add'),

	        subtract : createAdder(-1, 'subtract'),

	        diff : function (input, units, asFloat) {
	            var that = makeAs(input, this),
	                zoneDiff = (that.utcOffset() - this.utcOffset()) * 6e4,
	                anchor, diff, output, daysAdjust;

	            units = normalizeUnits(units);

	            if (units === 'year' || units === 'month' || units === 'quarter') {
	                output = monthDiff(this, that);
	                if (units === 'quarter') {
	                    output = output / 3;
	                } else if (units === 'year') {
	                    output = output / 12;
	                }
	            } else {
	                diff = this - that;
	                output = units === 'second' ? diff / 1e3 : // 1000
	                    units === 'minute' ? diff / 6e4 : // 1000 * 60
	                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
	                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                    diff;
	            }
	            return asFloat ? output : absRound(output);
	        },

	        from : function (time, withoutSuffix) {
	            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        },

	        fromNow : function (withoutSuffix) {
	            return this.from(moment(), withoutSuffix);
	        },

	        calendar : function (time) {
	            // We want to compare the start of today, vs this.
	            // Getting start-of-today depends on whether we're locat/utc/offset
	            // or not.
	            var now = time || moment(),
	                sod = makeAs(now, this).startOf('day'),
	                diff = this.diff(sod, 'days', true),
	                format = diff < -6 ? 'sameElse' :
	                    diff < -1 ? 'lastWeek' :
	                    diff < 0 ? 'lastDay' :
	                    diff < 1 ? 'sameDay' :
	                    diff < 2 ? 'nextDay' :
	                    diff < 7 ? 'nextWeek' : 'sameElse';
	            return this.format(this.localeData().calendar(format, this, moment(now)));
	        },

	        isLeapYear : function () {
	            return isLeapYear(this.year());
	        },

	        isDST : function () {
	            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
	                this.utcOffset() > this.clone().month(5).utcOffset());
	        },

	        day : function (input) {
	            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	            if (input != null) {
	                input = parseWeekday(input, this.localeData());
	                return this.add(input - day, 'd');
	            } else {
	                return day;
	            }
	        },

	        month : makeAccessor('Month', true),

	        startOf : function (units) {
	            units = normalizeUnits(units);
	            // the following switch intentionally omits break keywords
	            // to utilize falling through the cases.
	            switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	                /* falls through */
	            }

	            // weeks are a special case
	            if (units === 'week') {
	                this.weekday(0);
	            } else if (units === 'isoWeek') {
	                this.isoWeekday(1);
	            }

	            // quarters are also special
	            if (units === 'quarter') {
	                this.month(Math.floor(this.month() / 3) * 3);
	            }

	            return this;
	        },

	        endOf: function (units) {
	            units = normalizeUnits(units);
	            if (units === undefined || units === 'millisecond') {
	                return this;
	            }
	            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	        },

	        isAfter: function (input, units) {
	            var inputMs;
	            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	            if (units === 'millisecond') {
	                input = moment.isMoment(input) ? input : moment(input);
	                return +this > +input;
	            } else {
	                inputMs = moment.isMoment(input) ? +input : +moment(input);
	                return inputMs < +this.clone().startOf(units);
	            }
	        },

	        isBefore: function (input, units) {
	            var inputMs;
	            units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
	            if (units === 'millisecond') {
	                input = moment.isMoment(input) ? input : moment(input);
	                return +this < +input;
	            } else {
	                inputMs = moment.isMoment(input) ? +input : +moment(input);
	                return +this.clone().endOf(units) < inputMs;
	            }
	        },

	        isBetween: function (from, to, units) {
	            return this.isAfter(from, units) && this.isBefore(to, units);
	        },

	        isSame: function (input, units) {
	            var inputMs;
	            units = normalizeUnits(units || 'millisecond');
	            if (units === 'millisecond') {
	                input = moment.isMoment(input) ? input : moment(input);
	                return +this === +input;
	            } else {
	                inputMs = +moment(input);
	                return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
	            }
	        },

	        min: deprecate(
	                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
	                 function (other) {
	                     other = moment.apply(null, arguments);
	                     return other < this ? this : other;
	                 }
	         ),

	        max: deprecate(
	                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
	                function (other) {
	                    other = moment.apply(null, arguments);
	                    return other > this ? this : other;
	                }
	        ),

	        zone : deprecate(
	                'moment().zone is deprecated, use moment().utcOffset instead. ' +
	                'https://github.com/moment/moment/issues/1779',
	                function (input, keepLocalTime) {
	                    if (input != null) {
	                        if (typeof input !== 'string') {
	                            input = -input;
	                        }

	                        this.utcOffset(input, keepLocalTime);

	                        return this;
	                    } else {
	                        return -this.utcOffset();
	                    }
	                }
	        ),

	        // keepLocalTime = true means only change the timezone, without
	        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	        // +0200, so we adjust the time as needed, to be valid.
	        //
	        // Keeping the time actually adds/subtracts (one hour)
	        // from the actual represented time. That is why we call updateOffset
	        // a second time. In case it wants us to change the offset again
	        // _changeInProgress == true case, then we have to adjust, because
	        // there is no such time in the given timezone.
	        utcOffset : function (input, keepLocalTime) {
	            var offset = this._offset || 0,
	                localAdjust;
	            if (input != null) {
	                if (typeof input === 'string') {
	                    input = utcOffsetFromString(input);
	                }
	                if (Math.abs(input) < 16) {
	                    input = input * 60;
	                }
	                if (!this._isUTC && keepLocalTime) {
	                    localAdjust = this._dateUtcOffset();
	                }
	                this._offset = input;
	                this._isUTC = true;
	                if (localAdjust != null) {
	                    this.add(localAdjust, 'm');
	                }
	                if (offset !== input) {
	                    if (!keepLocalTime || this._changeInProgress) {
	                        addOrSubtractDurationFromMoment(this,
	                                moment.duration(input - offset, 'm'), 1, false);
	                    } else if (!this._changeInProgress) {
	                        this._changeInProgress = true;
	                        moment.updateOffset(this, true);
	                        this._changeInProgress = null;
	                    }
	                }

	                return this;
	            } else {
	                return this._isUTC ? offset : this._dateUtcOffset();
	            }
	        },

	        isLocal : function () {
	            return !this._isUTC;
	        },

	        isUtcOffset : function () {
	            return this._isUTC;
	        },

	        isUtc : function () {
	            return this._isUTC && this._offset === 0;
	        },

	        zoneAbbr : function () {
	            return this._isUTC ? 'UTC' : '';
	        },

	        zoneName : function () {
	            return this._isUTC ? 'Coordinated Universal Time' : '';
	        },

	        parseZone : function () {
	            if (this._tzm) {
	                this.utcOffset(this._tzm);
	            } else if (typeof this._i === 'string') {
	                this.utcOffset(utcOffsetFromString(this._i));
	            }
	            return this;
	        },

	        hasAlignedHourOffset : function (input) {
	            if (!input) {
	                input = 0;
	            }
	            else {
	                input = moment(input).utcOffset();
	            }

	            return (this.utcOffset() - input) % 60 === 0;
	        },

	        daysInMonth : function () {
	            return daysInMonth(this.year(), this.month());
	        },

	        dayOfYear : function (input) {
	            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
	            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	        },

	        quarter : function (input) {
	            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	        },

	        weekYear : function (input) {
	            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
	            return input == null ? year : this.add((input - year), 'y');
	        },

	        isoWeekYear : function (input) {
	            var year = weekOfYear(this, 1, 4).year;
	            return input == null ? year : this.add((input - year), 'y');
	        },

	        week : function (input) {
	            var week = this.localeData().week(this);
	            return input == null ? week : this.add((input - week) * 7, 'd');
	        },

	        isoWeek : function (input) {
	            var week = weekOfYear(this, 1, 4).week;
	            return input == null ? week : this.add((input - week) * 7, 'd');
	        },

	        weekday : function (input) {
	            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	            return input == null ? weekday : this.add(input - weekday, 'd');
	        },

	        isoWeekday : function (input) {
	            // behaves the same as moment#day except
	            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	            // as a setter, sunday should belong to the previous week.
	            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
	        },

	        isoWeeksInYear : function () {
	            return weeksInYear(this.year(), 1, 4);
	        },

	        weeksInYear : function () {
	            var weekInfo = this.localeData()._week;
	            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units]();
	        },

	        set : function (units, value) {
	            var unit;
	            if (typeof units === 'object') {
	                for (unit in units) {
	                    this.set(unit, units[unit]);
	                }
	            }
	            else {
	                units = normalizeUnits(units);
	                if (typeof this[units] === 'function') {
	                    this[units](value);
	                }
	            }
	            return this;
	        },

	        // If passed a locale key, it will set the locale for this
	        // instance.  Otherwise, it will return the locale configuration
	        // variables for this instance.
	        locale : function (key) {
	            var newLocaleData;

	            if (key === undefined) {
	                return this._locale._abbr;
	            } else {
	                newLocaleData = moment.localeData(key);
	                if (newLocaleData != null) {
	                    this._locale = newLocaleData;
	                }
	                return this;
	            }
	        },

	        lang : deprecate(
	            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	            function (key) {
	                if (key === undefined) {
	                    return this.localeData();
	                } else {
	                    return this.locale(key);
	                }
	            }
	        ),

	        localeData : function () {
	            return this._locale;
	        },

	        _dateUtcOffset : function () {
	            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	            // https://github.com/moment/moment/pull/1871
	            return -Math.round(this._d.getTimezoneOffset() / 15) * 15;
	        }

	    });

	    function rawMonthSetter(mom, value) {
	        var dayOfMonth;

	        // TODO: Move this out of here!
	        if (typeof value === 'string') {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (typeof value !== 'number') {
	                return mom;
	            }
	        }

	        dayOfMonth = Math.min(mom.date(),
	                daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function rawGetter(mom, unit) {
	        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
	    }

	    function rawSetter(mom, unit, value) {
	        if (unit === 'Month') {
	            return rawMonthSetter(mom, value);
	        } else {
	            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }

	    function makeAccessor(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                rawSetter(this, unit, value);
	                moment.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return rawGetter(this, unit);
	            }
	        };
	    }

	    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
	    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
	    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
	    // moment.fn.month is defined separately
	    moment.fn.date = makeAccessor('Date', true);
	    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
	    moment.fn.year = makeAccessor('FullYear', true);
	    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

	    // add plural methods
	    moment.fn.days = moment.fn.day;
	    moment.fn.months = moment.fn.month;
	    moment.fn.weeks = moment.fn.week;
	    moment.fn.isoWeeks = moment.fn.isoWeek;
	    moment.fn.quarters = moment.fn.quarter;

	    // add aliased format methods
	    moment.fn.toJSON = moment.fn.toISOString;

	    // alias isUtc for dev-friendliness
	    moment.fn.isUTC = moment.fn.isUtc;

	    /************************************
	        Duration Prototype
	    ************************************/


	    function daysToYears (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        return days * 400 / 146097;
	    }

	    function yearsToDays (years) {
	        // years * 365 + absRound(years / 4) -
	        //     absRound(years / 100) + absRound(years / 400);
	        return years * 146097 / 400;
	    }

	    extend(moment.duration.fn = Duration.prototype, {

	        _bubble : function () {
	            var milliseconds = this._milliseconds,
	                days = this._days,
	                months = this._months,
	                data = this._data,
	                seconds, minutes, hours, years = 0;

	            // The following code bubbles up values, see the tests for
	            // examples of what that means.
	            data.milliseconds = milliseconds % 1000;

	            seconds = absRound(milliseconds / 1000);
	            data.seconds = seconds % 60;

	            minutes = absRound(seconds / 60);
	            data.minutes = minutes % 60;

	            hours = absRound(minutes / 60);
	            data.hours = hours % 24;

	            days += absRound(hours / 24);

	            // Accurately convert days to years, assume start from year 0.
	            years = absRound(daysToYears(days));
	            days -= absRound(yearsToDays(years));

	            // 30 days to a month
	            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
	            months += absRound(days / 30);
	            days %= 30;

	            // 12 months -> 1 year
	            years += absRound(months / 12);
	            months %= 12;

	            data.days = days;
	            data.months = months;
	            data.years = years;
	        },

	        abs : function () {
	            this._milliseconds = Math.abs(this._milliseconds);
	            this._days = Math.abs(this._days);
	            this._months = Math.abs(this._months);

	            this._data.milliseconds = Math.abs(this._data.milliseconds);
	            this._data.seconds = Math.abs(this._data.seconds);
	            this._data.minutes = Math.abs(this._data.minutes);
	            this._data.hours = Math.abs(this._data.hours);
	            this._data.months = Math.abs(this._data.months);
	            this._data.years = Math.abs(this._data.years);

	            return this;
	        },

	        weeks : function () {
	            return absRound(this.days() / 7);
	        },

	        valueOf : function () {
	            return this._milliseconds +
	              this._days * 864e5 +
	              (this._months % 12) * 2592e6 +
	              toInt(this._months / 12) * 31536e6;
	        },

	        humanize : function (withSuffix) {
	            var output = relativeTime(this, !withSuffix, this.localeData());

	            if (withSuffix) {
	                output = this.localeData().pastFuture(+this, output);
	            }

	            return this.localeData().postformat(output);
	        },

	        add : function (input, val) {
	            // supports only 2.0-style add(1, 's') or add(moment)
	            var dur = moment.duration(input, val);

	            this._milliseconds += dur._milliseconds;
	            this._days += dur._days;
	            this._months += dur._months;

	            this._bubble();

	            return this;
	        },

	        subtract : function (input, val) {
	            var dur = moment.duration(input, val);

	            this._milliseconds -= dur._milliseconds;
	            this._days -= dur._days;
	            this._months -= dur._months;

	            this._bubble();

	            return this;
	        },

	        get : function (units) {
	            units = normalizeUnits(units);
	            return this[units.toLowerCase() + 's']();
	        },

	        as : function (units) {
	            var days, months;
	            units = normalizeUnits(units);

	            if (units === 'month' || units === 'year') {
	                days = this._days + this._milliseconds / 864e5;
	                months = this._months + daysToYears(days) * 12;
	                return units === 'month' ? months : months / 12;
	            } else {
	                // handle milliseconds separately because of floating point math errors (issue #1867)
	                days = this._days + Math.round(yearsToDays(this._months / 12));
	                switch (units) {
	                    case 'week': return days / 7 + this._milliseconds / 6048e5;
	                    case 'day': return days + this._milliseconds / 864e5;
	                    case 'hour': return days * 24 + this._milliseconds / 36e5;
	                    case 'minute': return days * 24 * 60 + this._milliseconds / 6e4;
	                    case 'second': return days * 24 * 60 * 60 + this._milliseconds / 1000;
	                    // Math.floor prevents floating point math errors here
	                    case 'millisecond': return Math.floor(days * 24 * 60 * 60 * 1000) + this._milliseconds;
	                    default: throw new Error('Unknown unit ' + units);
	                }
	            }
	        },

	        lang : moment.fn.lang,
	        locale : moment.fn.locale,

	        toIsoString : deprecate(
	            'toIsoString() is deprecated. Please use toISOString() instead ' +
	            '(notice the capitals)',
	            function () {
	                return this.toISOString();
	            }
	        ),

	        toISOString : function () {
	            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	            var years = Math.abs(this.years()),
	                months = Math.abs(this.months()),
	                days = Math.abs(this.days()),
	                hours = Math.abs(this.hours()),
	                minutes = Math.abs(this.minutes()),
	                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

	            if (!this.asSeconds()) {
	                // this is the same as C#'s (Noda) and python (isodate)...
	                // but not other JS (goog.date)
	                return 'P0D';
	            }

	            return (this.asSeconds() < 0 ? '-' : '') +
	                'P' +
	                (years ? years + 'Y' : '') +
	                (months ? months + 'M' : '') +
	                (days ? days + 'D' : '') +
	                ((hours || minutes || seconds) ? 'T' : '') +
	                (hours ? hours + 'H' : '') +
	                (minutes ? minutes + 'M' : '') +
	                (seconds ? seconds + 'S' : '');
	        },

	        localeData : function () {
	            return this._locale;
	        },

	        toJSON : function () {
	            return this.toISOString();
	        }
	    });

	    moment.duration.fn.toString = moment.duration.fn.toISOString;

	    function makeDurationGetter(name) {
	        moment.duration.fn[name] = function () {
	            return this._data[name];
	        };
	    }

	    for (i in unitMillisecondFactors) {
	        if (hasOwnProp(unitMillisecondFactors, i)) {
	            makeDurationGetter(i.toLowerCase());
	        }
	    }

	    moment.duration.fn.asMilliseconds = function () {
	        return this.as('ms');
	    };
	    moment.duration.fn.asSeconds = function () {
	        return this.as('s');
	    };
	    moment.duration.fn.asMinutes = function () {
	        return this.as('m');
	    };
	    moment.duration.fn.asHours = function () {
	        return this.as('h');
	    };
	    moment.duration.fn.asDays = function () {
	        return this.as('d');
	    };
	    moment.duration.fn.asWeeks = function () {
	        return this.as('weeks');
	    };
	    moment.duration.fn.asMonths = function () {
	        return this.as('M');
	    };
	    moment.duration.fn.asYears = function () {
	        return this.as('y');
	    };

	    /************************************
	        Default Locale
	    ************************************/


	    // Set default locale, other locale will inherit from English.
	    moment.locale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    /* EMBED_LOCALES */

	    /************************************
	        Exposing Moment
	    ************************************/

	    function makeGlobal(shouldDeprecate) {
	        /*global ender:false */
	        if (typeof ender !== 'undefined') {
	            return;
	        }
	        oldGlobalMoment = globalScope.moment;
	        if (shouldDeprecate) {
	            globalScope.moment = deprecate(
	                    'Accessing Moment through the global scope is ' +
	                    'deprecated, and will be removed in an upcoming ' +
	                    'release.',
	                    moment);
	        } else {
	            globalScope.moment = moment;
	        }
	    }

	    // CommonJS module is defined
	    if (hasModule) {
	        module.exports = moment;
	    } else if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	            if (module.config && module.config() && module.config().noGlobal === true) {
	                // release the global variable
	                globalScope.moment = oldGlobalMoment;
	            }

	            return moment;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        makeGlobal(true);
	    } else {
	        makeGlobal();
	    }
	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(89);
	var ReactStateSetters = __webpack_require__(90);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(88);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(36);

	var assign = __webpack_require__(78);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(42)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(92)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(67);

	var warning = __webpack_require__(91);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(36);
	var ReactTransitionChildMapping = __webpack_require__(93);

	var assign = __webpack_require__(78);
	var cloneWithProps = __webpack_require__(45);
	var emptyFunction = __webpack_require__(94);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(95);
	var PooledClass = __webpack_require__(96);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactPerf = __webpack_require__(74);
	var ReactReconciler = __webpack_require__(76);
	var Transaction = __webpack_require__(97);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(91);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactPropTransferer = __webpack_require__(99);

	var keyOf = __webpack_require__(100);
	var warning = __webpack_require__(91);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	'use strict';

	var assign = __webpack_require__(78);
	var keyOf = __webpack_require__(100);
	var invariant = __webpack_require__(98);

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (spec.hasOwnProperty(COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (spec.hasOwnProperty(COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (spec.hasOwnProperty(COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (spec.hasOwnProperty(COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(101);
	var ReactDefaultPerfAnalysis = __webpack_require__(102);
	var ReactMount = __webpack_require__(73);
	var ReactPerf = __webpack_require__(74);

	var performanceNow = __webpack_require__(103);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (moduleName === 'ReactDOMIDOperations' ||
	        moduleName === 'ReactComponentBrowserEnvironment') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: typeof this._currentElement.type === 'string' ?
	            this._currentElement.type :
	            this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPluginHub = __webpack_require__(105);
	var EventPropagators = __webpack_require__(106);
	var React = __webpack_require__(36);
	var ReactElement = __webpack_require__(67);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactBrowserEventEmitter = __webpack_require__(108);
	var ReactCompositeComponent = __webpack_require__(109);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactMount = __webpack_require__(73);
	var ReactUpdates = __webpack_require__(43);
	var SyntheticEvent = __webpack_require__(111);

	var assign = __webpack_require__(78);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.getDOMNode && inst.tagName);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var _ = _interopRequire(__webpack_require__(86));

	var DebugStateRow = _interopRequire(__webpack_require__(112));

	var DebugStateSection = (function (_React$Component) {
	  function DebugStateSection() {
	    _classCallCheck(this, DebugStateSection);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(DebugStateSection, _React$Component);

	  _createClass(DebugStateSection, {
	    render: {
	      value: function render() {
	        var _props = this.props;
	        var title = _props.title;
	        var data = _props.data;

	        var rows = _.map(data, function (value, key) {
	          return React.createElement(DebugStateRow, { key: key, title: key, data: value });
	        });

	        return React.createElement(
	          "div",
	          null,
	          React.createElement(
	            "tr",
	            null,
	            React.createElement(
	              "th",
	              { colSpan: "2" },
	              _.capitalize(title)
	            )
	          ),
	          rows
	        );
	      }
	    }
	  });

	  return DebugStateSection;
	})(React.Component);

	;

	DebugStateSection.propTypes = {
	  title: React.PropTypes.string,
	  data: React.PropTypes.object
	};

	module.exports = DebugStateSection;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "debugStateSection.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var BaseStore = _interopRequire(__webpack_require__(113));

	var _immutable = __webpack_require__(278);

	var Map = _immutable.Map;
	var Stack = _immutable.Stack;

	var AppStateConstants = _interopRequire(__webpack_require__(32));

	var _History = undefined;
	var _Future = undefined;

	var initialState = {
	  timestamp: Date.now(),
	  user: undefined,
	  mode: "browse" };

	var AppState = (function (_BaseStore) {
	  function AppState() {
	    _classCallCheck(this, AppState);

	    this.initialState = Map(initialState);
	    this.initializeHistory(initialState);
	    _get(Object.getPrototypeOf(AppState.prototype), "constructor", this).call(this);
	  }

	  _inherits(AppState, _BaseStore);

	  _createClass(AppState, {
	    _current: {
	      get: function () {
	        return _History.first();
	      }
	    },
	    current: {
	      get: function () {
	        var currentState = this._current.toJS();
	        var isLatest = _Future.size < 1 ? true : false;
	        var isEarliest = _History.size <= 1 ? true : false;
	        currentState.history = { isLatest: isLatest, isEarliest: isEarliest };
	        return currentState;
	      }
	    },
	    initializeHistory: {
	      value: function initializeHistory() {
	        _History = Stack([this.initialState]);
	        _Future = Stack([]);
	      }
	    },
	    authenticate: {
	      value: function authenticate() {
	        this.update({ user: "yeehaa" });
	      }
	    },
	    switchMode: {
	      value: function switchMode(mode) {
	        this.update({ mode: mode });
	      }
	    },
	    revertHistory: {
	      value: function revertHistory() {
	        if (_History.size > 1) {
	          _Future = _Future.push(this._current);
	          _History = _History.shift();
	          this.emitChange();
	        }
	      }
	    },
	    forwardHistory: {
	      value: function forwardHistory() {
	        if (_Future.size > 0) {
	          var lastState = _Future.first();
	          _History = _History.push(lastState);
	          _Future = _Future.shift();
	          this.emitChange();
	        }
	      }
	    },
	    update: {
	      value: function update(props) {
	        props.timestamp = Date.now();
	        _History = _History.push(this._current.merge(props));
	        _Future = Stack([]);
	        this.emitChange();
	      }
	    },
	    handleAction: {
	      value: function handleAction(action) {
	        switch (action.actionType) {
	          case AppStateConstants.AUTHENTICATE:
	            this.authenticate();
	            break;
	          case AppStateConstants.SWITCH_MODE:
	            this.switchMode(action.mode);
	            break;
	          case AppStateConstants.REVERT_HISTORY:
	            this.revertHistory();
	            break;
	          case AppStateConstants.FORWARD_HISTORY:
	            this.forwardHistory();
	            break;
	        }
	        return true;
	      }
	    }
	  });

	  return AppState;
	})(BaseStore);

	module.exports = AppState;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "appState.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var BaseStore = _interopRequire(__webpack_require__(113));

	var _immutable = __webpack_require__(278);

	var Map = _immutable.Map;
	var Stack = _immutable.Stack;

	var AppStateConstants = _interopRequire(__webpack_require__(32));

	var collection = [];

	var ModelStore = (function (_BaseStore) {
	  function ModelStore() {
	    _classCallCheck(this, ModelStore);

	    _get(Object.getPrototypeOf(ModelStore.prototype), "constructor", this).call(this);
	  }

	  _inherits(ModelStore, _BaseStore);

	  _createClass(ModelStore, {
	    collection: {
	      get: function () {
	        return collection;
	      }
	    },
	    handleAction: {
	      value: function handleAction(action) {
	        switch (action.actionType) {
	          case AppStateConstants.LOADED_COLLECTION:
	            collection = action.collection;
	            this.emitChange();
	            break;
	        }
	        return true;
	      }
	    }
	  });

	  return ModelStore;
	})(BaseStore);

	module.exports = ModelStore;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "collection.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {

	  /**
	   * ### config.includeStack
	   *
	   * User configurable property, influences whether stack trace
	   * is included in Assertion error message. Default of false
	   * suppresses stack trace in the error message.
	   *
	   *     chai.config.includeStack = true;  // enable stack on error
	   *
	   * @param {Boolean}
	   * @api public
	   */

	   includeStack: false,

	  /**
	   * ### config.showDiff
	   *
	   * User configurable property, influences whether or not
	   * the `showDiff` flag should be included in the thrown
	   * AssertionErrors. `false` will always be `false`; `true`
	   * will be true when the assertion has requested a diff
	   * be shown.
	   *
	   * @param {Boolean}
	   * @api public
	   */

	  showDiff: true,

	  /**
	   * ### config.truncateThreshold
	   *
	   * User configurable property, sets length threshold for actual and
	   * expected values in assertion errors. If this threshold is exceeded, for
	   * example for large data structures, the value is replaced with something
	   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
	   *
	   * Set it to zero if you want to disable truncating altogether.
	   *
	   * This is especially userful when doing assertions on arrays: having this
	   * set to a reasonable large value makes the failure messages readily
	   * inspectable.
	   *
	   *     chai.config.truncateThreshold = 0;  // disable truncating
	   *
	   * @param {Number}
	   * @api public
	   */

	  truncateThreshold: 40

	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(52);

	module.exports = function (_chai, util) {
	  /*!
	   * Module dependencies.
	   */

	  var AssertionError = _chai.AssertionError
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  _chai.Assertion = Assertion;

	  /*!
	   * Assertion Constructor
	   *
	   * Creates object for chaining.
	   *
	   * @api private
	   */

	  function Assertion (obj, msg, stack) {
	    flag(this, 'ssfi', stack || arguments.callee);
	    flag(this, 'object', obj);
	    flag(this, 'message', msg);
	  }

	  Object.defineProperty(Assertion, 'includeStack', {
	    get: function() {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      return config.includeStack;
	    },
	    set: function(value) {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      config.includeStack = value;
	    }
	  });

	  Object.defineProperty(Assertion, 'showDiff', {
	    get: function() {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      return config.showDiff;
	    },
	    set: function(value) {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      config.showDiff = value;
	    }
	  });

	  Assertion.addProperty = function (name, fn) {
	    util.addProperty(this.prototype, name, fn);
	  };

	  Assertion.addMethod = function (name, fn) {
	    util.addMethod(this.prototype, name, fn);
	  };

	  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
	    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  Assertion.overwriteProperty = function (name, fn) {
	    util.overwriteProperty(this.prototype, name, fn);
	  };

	  Assertion.overwriteMethod = function (name, fn) {
	    util.overwriteMethod(this.prototype, name, fn);
	  };

	  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
	    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };

	  /*!
	   * ### .assert(expression, message, negateMessage, expected, actual)
	   *
	   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
	   *
	   * @name assert
	   * @param {Philosophical} expression to be tested
	   * @param {String or Function} message or function that returns message to display if expression fails
	   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
	   * @param {Mixed} expected value (remember to check for negation)
	   * @param {Mixed} actual (optional) will default to `this.obj`
	   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
	   * @api private
	   */

	  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
	    var ok = util.test(this, arguments);
	    if (true !== showDiff) showDiff = false;
	    if (true !== config.showDiff) showDiff = false;

	    if (!ok) {
	      var msg = util.getMessage(this, arguments)
	        , actual = util.getActual(this, arguments);
	      throw new AssertionError(msg, {
	          actual: actual
	        , expected: expected
	        , showDiff: showDiff
	      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
	    }
	  };

	  /*!
	   * ### ._obj
	   *
	   * Quick reference to stored `actual` value for plugin developers.
	   *
	   * @api private
	   */

	  Object.defineProperty(Assertion.prototype, '_obj',
	    { get: function () {
	        return flag(this, 'object');
	      }
	    , set: function (val) {
	        flag(this, 'object', val);
	      }
	  });
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, _) {
	  var Assertion = chai.Assertion
	    , toString = Object.prototype.toString
	    , flag = _.flag;

	  /**
	   * ### Language Chains
	   *
	   * The following are provided as chainable getters to
	   * improve the readability of your assertions. They
	   * do not provide testing capabilities unless they
	   * have been overwritten by a plugin.
	   *
	   * **Chains**
	   *
	   * - to
	   * - be
	   * - been
	   * - is
	   * - that
	   * - which
	   * - and
	   * - has
	   * - have
	   * - with
	   * - at
	   * - of
	   * - same
	   *
	   * @name language chains
	   * @api public
	   */

	  [ 'to', 'be', 'been'
	  , 'is', 'and', 'has', 'have'
	  , 'with', 'that', 'which', 'at'
	  , 'of', 'same' ].forEach(function (chain) {
	    Assertion.addProperty(chain, function () {
	      return this;
	    });
	  });

	  /**
	   * ### .not
	   *
	   * Negates any of assertions following in the chain.
	   *
	   *     expect(foo).to.not.equal('bar');
	   *     expect(goodFn).to.not.throw(Error);
	   *     expect({ foo: 'baz' }).to.have.property('foo')
	   *       .and.not.equal('bar');
	   *
	   * @name not
	   * @api public
	   */

	  Assertion.addProperty('not', function () {
	    flag(this, 'negate', true);
	  });

	  /**
	   * ### .deep
	   *
	   * Sets the `deep` flag, later used by the `equal` and
	   * `property` assertions.
	   *
	   *     expect(foo).to.deep.equal({ bar: 'baz' });
	   *     expect({ foo: { bar: { baz: 'quux' } } })
	   *       .to.have.deep.property('foo.bar.baz', 'quux');
	   *
	   * @name deep
	   * @api public
	   */

	  Assertion.addProperty('deep', function () {
	    flag(this, 'deep', true);
	  });

	  /**
	   * ### .any
	   *
	   * Sets the `any` flag, (opposite of the `all` flag)
	   * later used in the `keys` assertion. 
	   *
	   *     expect(foo).to.have.any.keys('bar', 'baz');
	   *
	   * @name any
	   * @api public
	   */

	  Assertion.addProperty('any', function () {
	    flag(this, 'any', true);
	    flag(this, 'all', false)
	  });


	  /**
	   * ### .all
	   *
	   * Sets the `all` flag (opposite of the `any` flag) 
	   * later used by the `keys` assertion.
	   *
	   *     expect(foo).to.have.all.keys('bar', 'baz');
	   *
	   * @name all
	   * @api public
	   */

	  Assertion.addProperty('all', function () {
	    flag(this, 'all', true);
	    flag(this, 'any', false);
	  });

	  /**
	   * ### .a(type)
	   *
	   * The `a` and `an` assertions are aliases that can be
	   * used either as language chains or to assert a value's
	   * type.
	   *
	   *     // typeof
	   *     expect('test').to.be.a('string');
	   *     expect({ foo: 'bar' }).to.be.an('object');
	   *     expect(null).to.be.a('null');
	   *     expect(undefined).to.be.an('undefined');
	   *
	   *     // language chain
	   *     expect(foo).to.be.an.instanceof(Foo);
	   *
	   * @name a
	   * @alias an
	   * @param {String} type
	   * @param {String} message _optional_
	   * @api public
	   */

	  function an (type, msg) {
	    if (msg) flag(this, 'message', msg);
	    type = type.toLowerCase();
	    var obj = flag(this, 'object')
	      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

	    this.assert(
	        type === _.type(obj)
	      , 'expected #{this} to be ' + article + type
	      , 'expected #{this} not to be ' + article + type
	    );
	  }

	  Assertion.addChainableMethod('an', an);
	  Assertion.addChainableMethod('a', an);

	  /**
	   * ### .include(value)
	   *
	   * The `include` and `contain` assertions can be used as either property
	   * based language chains or as methods to assert the inclusion of an object
	   * in an array or a substring in a string. When used as language chains,
	   * they toggle the `contains` flag for the `keys` assertion.
	   *
	   *     expect([1,2,3]).to.include(2);
	   *     expect('foobar').to.contain('foo');
	   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
	   *
	   * @name include
	   * @alias contain
	   * @alias includes
	   * @alias contains
	   * @param {Object|String|Number} obj
	   * @param {String} message _optional_
	   * @api public
	   */

	  function includeChainingBehavior () {
	    flag(this, 'contains', true);
	  }

	  function include (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var expected = false;
	    if (_.type(obj) === 'array' && _.type(val) === 'object') {
	      for (var i in obj) {
	        if (_.eql(obj[i], val)) {
	          expected = true;
	          break;
	        }
	      }
	    } else if (_.type(val) === 'object') {
	      if (!flag(this, 'negate')) {
	        for (var k in val) new Assertion(obj).property(k, val[k]);
	        return;
	      }
	      var subset = {};
	      for (var k in val) subset[k] = obj[k];
	      expected = _.eql(subset, val);
	    } else {
	      expected = obj && ~obj.indexOf(val);
	    }
	    this.assert(
	        expected
	      , 'expected #{this} to include ' + _.inspect(val)
	      , 'expected #{this} to not include ' + _.inspect(val));
	  }

	  Assertion.addChainableMethod('include', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
	  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

	  /**
	   * ### .ok
	   *
	   * Asserts that the target is truthy.
	   *
	   *     expect('everthing').to.be.ok;
	   *     expect(1).to.be.ok;
	   *     expect(false).to.not.be.ok;
	   *     expect(undefined).to.not.be.ok;
	   *     expect(null).to.not.be.ok;
	   *
	   * @name ok
	   * @api public
	   */

	  Assertion.addProperty('ok', function () {
	    this.assert(
	        flag(this, 'object')
	      , 'expected #{this} to be truthy'
	      , 'expected #{this} to be falsy');
	  });

	  /**
	   * ### .true
	   *
	   * Asserts that the target is `true`.
	   *
	   *     expect(true).to.be.true;
	   *     expect(1).to.not.be.true;
	   *
	   * @name true
	   * @api public
	   */

	  Assertion.addProperty('true', function () {
	    this.assert(
	        true === flag(this, 'object')
	      , 'expected #{this} to be true'
	      , 'expected #{this} to be false'
	      , this.negate ? false : true
	    );
	  });

	  /**
	   * ### .false
	   *
	   * Asserts that the target is `false`.
	   *
	   *     expect(false).to.be.false;
	   *     expect(0).to.not.be.false;
	   *
	   * @name false
	   * @api public
	   */

	  Assertion.addProperty('false', function () {
	    this.assert(
	        false === flag(this, 'object')
	      , 'expected #{this} to be false'
	      , 'expected #{this} to be true'
	      , this.negate ? true : false
	    );
	  });

	  /**
	   * ### .null
	   *
	   * Asserts that the target is `null`.
	   *
	   *     expect(null).to.be.null;
	   *     expect(undefined).not.to.be.null;
	   *
	   * @name null
	   * @api public
	   */

	  Assertion.addProperty('null', function () {
	    this.assert(
	        null === flag(this, 'object')
	      , 'expected #{this} to be null'
	      , 'expected #{this} not to be null'
	    );
	  });

	  /**
	   * ### .undefined
	   *
	   * Asserts that the target is `undefined`.
	   *
	   *     expect(undefined).to.be.undefined;
	   *     expect(null).to.not.be.undefined;
	   *
	   * @name undefined
	   * @api public
	   */

	  Assertion.addProperty('undefined', function () {
	    this.assert(
	        undefined === flag(this, 'object')
	      , 'expected #{this} to be undefined'
	      , 'expected #{this} not to be undefined'
	    );
	  });

	  /**
	   * ### .exist
	   *
	   * Asserts that the target is neither `null` nor `undefined`.
	   *
	   *     var foo = 'hi'
	   *       , bar = null
	   *       , baz;
	   *
	   *     expect(foo).to.exist;
	   *     expect(bar).to.not.exist;
	   *     expect(baz).to.not.exist;
	   *
	   * @name exist
	   * @api public
	   */

	  Assertion.addProperty('exist', function () {
	    this.assert(
	        null != flag(this, 'object')
	      , 'expected #{this} to exist'
	      , 'expected #{this} to not exist'
	    );
	  });


	  /**
	   * ### .empty
	   *
	   * Asserts that the target's length is `0`. For arrays and strings, it checks
	   * the `length` property. For objects, it gets the count of
	   * enumerable keys.
	   *
	   *     expect([]).to.be.empty;
	   *     expect('').to.be.empty;
	   *     expect({}).to.be.empty;
	   *
	   * @name empty
	   * @api public
	   */

	  Assertion.addProperty('empty', function () {
	    var obj = flag(this, 'object')
	      , expected = obj;

	    if (Array.isArray(obj) || 'string' === typeof object) {
	      expected = obj.length;
	    } else if (typeof obj === 'object') {
	      expected = Object.keys(obj).length;
	    }

	    this.assert(
	        !expected
	      , 'expected #{this} to be empty'
	      , 'expected #{this} not to be empty'
	    );
	  });

	  /**
	   * ### .arguments
	   *
	   * Asserts that the target is an arguments object.
	   *
	   *     function test () {
	   *       expect(arguments).to.be.arguments;
	   *     }
	   *
	   * @name arguments
	   * @alias Arguments
	   * @api public
	   */

	  function checkArguments () {
	    var obj = flag(this, 'object')
	      , type = Object.prototype.toString.call(obj);
	    this.assert(
	        '[object Arguments]' === type
	      , 'expected #{this} to be arguments but got ' + type
	      , 'expected #{this} to not be arguments'
	    );
	  }

	  Assertion.addProperty('arguments', checkArguments);
	  Assertion.addProperty('Arguments', checkArguments);

	  /**
	   * ### .equal(value)
	   *
	   * Asserts that the target is strictly equal (`===`) to `value`.
	   * Alternately, if the `deep` flag is set, asserts that
	   * the target is deeply equal to `value`.
	   *
	   *     expect('hello').to.equal('hello');
	   *     expect(42).to.equal(42);
	   *     expect(1).to.not.equal(true);
	   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
	   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
	   *
	   * @name equal
	   * @alias equals
	   * @alias eq
	   * @alias deep.equal
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertEqual (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'deep')) {
	      return this.eql(val);
	    } else {
	      this.assert(
	          val === obj
	        , 'expected #{this} to equal #{exp}'
	        , 'expected #{this} to not equal #{exp}'
	        , val
	        , this._obj
	        , true
	      );
	    }
	  }

	  Assertion.addMethod('equal', assertEqual);
	  Assertion.addMethod('equals', assertEqual);
	  Assertion.addMethod('eq', assertEqual);

	  /**
	   * ### .eql(value)
	   *
	   * Asserts that the target is deeply equal to `value`.
	   *
	   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
	   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
	   *
	   * @name eql
	   * @alias eqls
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertEql(obj, msg) {
	    if (msg) flag(this, 'message', msg);
	    this.assert(
	        _.eql(obj, flag(this, 'object'))
	      , 'expected #{this} to deeply equal #{exp}'
	      , 'expected #{this} to not deeply equal #{exp}'
	      , obj
	      , this._obj
	      , true
	    );
	  }

	  Assertion.addMethod('eql', assertEql);
	  Assertion.addMethod('eqls', assertEql);

	  /**
	   * ### .above(value)
	   *
	   * Asserts that the target is greater than `value`.
	   *
	   *     expect(10).to.be.above(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *
	   * @name above
	   * @alias gt
	   * @alias greaterThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertAbove (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len > n
	        , 'expected #{this} to have a length above #{exp} but got #{act}'
	        , 'expected #{this} to not have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj > n
	        , 'expected #{this} to be above ' + n
	        , 'expected #{this} to be at most ' + n
	      );
	    }
	  }

	  Assertion.addMethod('above', assertAbove);
	  Assertion.addMethod('gt', assertAbove);
	  Assertion.addMethod('greaterThan', assertAbove);

	  /**
	   * ### .least(value)
	   *
	   * Asserts that the target is greater than or equal to `value`.
	   *
	   *     expect(10).to.be.at.least(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.least(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
	   *
	   * @name least
	   * @alias gte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertLeast (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= n
	        , 'expected #{this} to have a length at least #{exp} but got #{act}'
	        , 'expected #{this} to have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj >= n
	        , 'expected #{this} to be at least ' + n
	        , 'expected #{this} to be below ' + n
	      );
	    }
	  }

	  Assertion.addMethod('least', assertLeast);
	  Assertion.addMethod('gte', assertLeast);

	  /**
	   * ### .below(value)
	   *
	   * Asserts that the target is less than `value`.
	   *
	   *     expect(5).to.be.below(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *
	   * @name below
	   * @alias lt
	   * @alias lessThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertBelow (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len < n
	        , 'expected #{this} to have a length below #{exp} but got #{act}'
	        , 'expected #{this} to not have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj < n
	        , 'expected #{this} to be below ' + n
	        , 'expected #{this} to be at least ' + n
	      );
	    }
	  }

	  Assertion.addMethod('below', assertBelow);
	  Assertion.addMethod('lt', assertBelow);
	  Assertion.addMethod('lessThan', assertBelow);

	  /**
	   * ### .most(value)
	   *
	   * Asserts that the target is less than or equal to `value`.
	   *
	   *     expect(5).to.be.at.most(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.most(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
	   *
	   * @name most
	   * @alias lte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertMost (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len <= n
	        , 'expected #{this} to have a length at most #{exp} but got #{act}'
	        , 'expected #{this} to have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj <= n
	        , 'expected #{this} to be at most ' + n
	        , 'expected #{this} to be above ' + n
	      );
	    }
	  }

	  Assertion.addMethod('most', assertMost);
	  Assertion.addMethod('lte', assertMost);

	  /**
	   * ### .within(start, finish)
	   *
	   * Asserts that the target is within a range.
	   *
	   *     expect(7).to.be.within(5,10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a length range. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name within
	   * @param {Number} start lowerbound inclusive
	   * @param {Number} finish upperbound inclusive
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('within', function (start, finish, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , range = start + '..' + finish;
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= start && len <= finish
	        , 'expected #{this} to have a length within ' + range
	        , 'expected #{this} to not have a length within ' + range
	      );
	    } else {
	      this.assert(
	          obj >= start && obj <= finish
	        , 'expected #{this} to be within ' + range
	        , 'expected #{this} to not be within ' + range
	      );
	    }
	  });

	  /**
	   * ### .instanceof(constructor)
	   *
	   * Asserts that the target is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , Chai = new Tea('chai');
	   *
	   *     expect(Chai).to.be.an.instanceof(Tea);
	   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
	   *
	   * @name instanceof
	   * @param {Constructor} constructor
	   * @param {String} message _optional_
	   * @alias instanceOf
	   * @api public
	   */

	  function assertInstanceOf (constructor, msg) {
	    if (msg) flag(this, 'message', msg);
	    var name = _.getName(constructor);
	    this.assert(
	        flag(this, 'object') instanceof constructor
	      , 'expected #{this} to be an instance of ' + name
	      , 'expected #{this} to not be an instance of ' + name
	    );
	  };

	  Assertion.addMethod('instanceof', assertInstanceOf);
	  Assertion.addMethod('instanceOf', assertInstanceOf);

	  /**
	   * ### .property(name, [value])
	   *
	   * Asserts that the target has a property `name`, optionally asserting that
	   * the value of that property is strictly equal to  `value`.
	   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
	   * references into objects and arrays.
	   *
	   *     // simple referencing
	   *     var obj = { foo: 'bar' };
	   *     expect(obj).to.have.property('foo');
	   *     expect(obj).to.have.property('foo', 'bar');
	   *
	   *     // deep referencing
	   *     var deepObj = {
	   *         green: { tea: 'matcha' }
	   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
	   *     };

	   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
	   *
	   * You can also use an array as the starting point of a `deep.property`
	   * assertion, or traverse nested arrays.
	   *
	   *     var arr = [
	   *         [ 'chai', 'matcha', 'konacha' ]
	   *       , [ { tea: 'chai' }
	   *         , { tea: 'matcha' }
	   *         , { tea: 'konacha' } ]
	   *     ];
	   *
	   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
	   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
	   *
	   * Furthermore, `property` changes the subject of the assertion
	   * to be the value of that property from the original object. This
	   * permits for further chainable assertions on that property.
	   *
	   *     expect(obj).to.have.property('foo')
	   *       .that.is.a('string');
	   *     expect(deepObj).to.have.property('green')
	   *       .that.is.an('object')
	   *       .that.deep.equals({ tea: 'matcha' });
	   *     expect(deepObj).to.have.property('teas')
	   *       .that.is.an('array')
	   *       .with.deep.property('[2]')
	   *         .that.deep.equals({ tea: 'konacha' });
	   *
	   * @name property
	   * @alias deep.property
	   * @param {String} name
	   * @param {Mixed} value (optional)
	   * @param {String} message _optional_
	   * @returns value of property for chaining
	   * @api public
	   */

	  Assertion.addMethod('property', function (name, val, msg) {
	    if (msg) flag(this, 'message', msg);

	    var isDeep = !!flag(this, 'deep')
	      , descriptor = isDeep ? 'deep property ' : 'property '
	      , negate = flag(this, 'negate')
	      , obj = flag(this, 'object')
	      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null
	      , hasProperty = isDeep
	        ? pathInfo.exists
	        : _.hasProperty(name, obj)
	      , value = isDeep
	        ? pathInfo.value
	        : obj[name];

	    if (negate && undefined !== val) {
	      if (undefined === value) {
	        msg = (msg != null) ? msg + ': ' : '';
	        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
	      }
	    } else {
	      this.assert(
	          hasProperty
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
	        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
	    }

	    if (undefined !== val) {
	      this.assert(
	          val === value
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
	        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
	        , val
	        , value
	      );
	    }

	    flag(this, 'object', value);
	  });


	  /**
	   * ### .ownProperty(name)
	   *
	   * Asserts that the target has an own property `name`.
	   *
	   *     expect('test').to.have.ownProperty('length');
	   *
	   * @name ownProperty
	   * @alias haveOwnProperty
	   * @param {String} name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertOwnProperty (name, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        obj.hasOwnProperty(name)
	      , 'expected #{this} to have own property ' + _.inspect(name)
	      , 'expected #{this} to not have own property ' + _.inspect(name)
	    );
	  }

	  Assertion.addMethod('ownProperty', assertOwnProperty);
	  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

	  /**
	   * ### .length(value)
	   *
	   * Asserts that the target's `length` property has
	   * the expected value.
	   *
	   *     expect([ 1, 2, 3]).to.have.length(3);
	   *     expect('foobar').to.have.length(6);
	   *
	   * Can also be used as a chain precursor to a value
	   * comparison for the length property.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name length
	   * @alias lengthOf
	   * @param {Number} length
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertLengthChain () {
	    flag(this, 'doLength', true);
	  }

	  function assertLength (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).to.have.property('length');
	    var len = obj.length;

	    this.assert(
	        len == n
	      , 'expected #{this} to have a length of #{exp} but got #{act}'
	      , 'expected #{this} to not have a length of #{act}'
	      , n
	      , len
	    );
	  }

	  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
	  Assertion.addMethod('lengthOf', assertLength);

	  /**
	   * ### .match(regexp)
	   *
	   * Asserts that the target matches a regular expression.
	   *
	   *     expect('foobar').to.match(/^foo/);
	   *
	   * @name match
	   * @param {RegExp} RegularExpression
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('match', function (re, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        re.exec(obj)
	      , 'expected #{this} to match ' + re
	      , 'expected #{this} not to match ' + re
	    );
	  });

	  /**
	   * ### .string(string)
	   *
	   * Asserts that the string target contains another string.
	   *
	   *     expect('foobar').to.have.string('bar');
	   *
	   * @name string
	   * @param {String} string
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('string', function (str, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('string');

	    this.assert(
	        ~obj.indexOf(str)
	      , 'expected #{this} to contain ' + _.inspect(str)
	      , 'expected #{this} to not contain ' + _.inspect(str)
	    );
	  });


	  /**
	   * ### .keys(key1, [key2], [...])
	   *
	   * Asserts that the target contains any or all of the passed-in keys.
	   * Use in combination with `any`, `all`, `contains`, or `have` will affect 
	   * what will pass.
	   * 
	   * When used in conjunction with `any`, at least one key that is passed 
	   * in must exist in the target object. This is regardless whether or not 
	   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`
	   * should be used in the assertion. If neither are used, the assertion is
	   * defaulted to `all`.
	   * 
	   * When both `all` and `contain` are used, the target object must have at 
	   * least all of the passed-in keys but may have more keys not listed.
	   * 
	   * When both `all` and `have` are used, the target object must both contain
	   * all of the passed-in keys AND the number of keys in the target object must
	   * match the number of keys passed in (in other words, a target object must 
	   * have all and only all of the passed-in keys).
	   * 
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);
	   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo', 7});
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys([{'bar': 6}}]);
	   *
	   *
	   * @name keys
	   * @alias key
	   * @param {String...|Array|Object} keys
	   * @api public
	   */

	  function assertKeys (keys) {
	    var obj = flag(this, 'object')
	      , str
	      , ok = true
	      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';

	    switch (_.type(keys)) {
	      case "array":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        break;
	      case "object":
	        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
	        keys = Object.keys(keys);
	        break;
	      default:
	        keys = Array.prototype.slice.call(arguments);
	    }

	    if (!keys.length) throw new Error('keys required');

	    var actual = Object.keys(obj)
	      , expected = keys
	      , len = keys.length
	      , any = flag(this, 'any')
	      , all = flag(this, 'all');

	    if (!any && !all) {
	      all = true;
	    }

	    // Has any
	    if (any) {
	      var intersection = expected.filter(function(key) {
	        return ~actual.indexOf(key);
	      });
	      ok = intersection.length > 0;
	    }

	    // Has all
	    if (all) {
	      ok = keys.every(function(key){
	        return ~actual.indexOf(key);
	      });
	      if (!flag(this, 'negate') && !flag(this, 'contains')) {
	        ok = ok && keys.length == actual.length;
	      }
	    }

	    // Key string
	    if (len > 1) {
	      keys = keys.map(function(key){
	        return _.inspect(key);
	      });
	      var last = keys.pop();
	      if (all) {
	        str = keys.join(', ') + ', and ' + last;
	      }
	      if (any) {
	        str = keys.join(', ') + ', or ' + last;
	      }
	    } else {
	      str = _.inspect(keys[0]);
	    }

	    // Form
	    str = (len > 1 ? 'keys ' : 'key ') + str;

	    // Have / include
	    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

	    // Assertion
	    this.assert(
	        ok
	      , 'expected #{this} to ' + str
	      , 'expected #{this} to not ' + str
	      , expected.slice(0).sort()
	      , actual.sort()
	      , true
	    );
	  }

	  Assertion.addMethod('keys', assertKeys);
	  Assertion.addMethod('key', assertKeys);

	  /**
	   * ### .throw(constructor)
	   *
	   * Asserts that the function target will throw a specific error, or specific type of error
	   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
	   * for the error's message.
	   *
	   *     var err = new ReferenceError('This is a bad function.');
	   *     var fn = function () { throw err; }
	   *     expect(fn).to.throw(ReferenceError);
	   *     expect(fn).to.throw(Error);
	   *     expect(fn).to.throw(/bad function/);
	   *     expect(fn).to.not.throw('good function');
	   *     expect(fn).to.throw(ReferenceError, /bad function/);
	   *     expect(fn).to.throw(err);
	   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
	   *
	   * Please note that when a throw expectation is negated, it will check each
	   * parameter independently, starting with error constructor type. The appropriate way
	   * to check for the existence of a type of error but for a message that does not match
	   * is to use `and`.
	   *
	   *     expect(fn).to.throw(ReferenceError)
	   *        .and.not.throw(/good function/);
	   *
	   * @name throw
	   * @alias throws
	   * @alias Throw
	   * @param {ErrorConstructor} constructor
	   * @param {String|RegExp} expected error message
	   * @param {String} message _optional_
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @returns error for chaining (null if no error)
	   * @api public
	   */

	  function assertThrows (constructor, errMsg, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('function');

	    var thrown = false
	      , desiredError = null
	      , name = null
	      , thrownError = null;

	    if (arguments.length === 0) {
	      errMsg = null;
	      constructor = null;
	    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
	      errMsg = constructor;
	      constructor = null;
	    } else if (constructor && constructor instanceof Error) {
	      desiredError = constructor;
	      constructor = null;
	      errMsg = null;
	    } else if (typeof constructor === 'function') {
	      name = constructor.prototype.name || constructor.name;
	      if (name === 'Error' && constructor !== Error) {
	        name = (new constructor()).name;
	      }
	    } else {
	      constructor = null;
	    }

	    try {
	      obj();
	    } catch (err) {
	      // first, check desired error
	      if (desiredError) {
	        this.assert(
	            err === desiredError
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp}'
	          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	          , (err instanceof Error ? err.toString() : err)
	        );

	        flag(this, 'object', err);
	        return this;
	      }

	      // next, check constructor
	      if (constructor) {
	        this.assert(
	            err instanceof constructor
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
	          , name
	          , (err instanceof Error ? err.toString() : err)
	        );

	        if (!errMsg) {
	          flag(this, 'object', err);
	          return this;
	        }
	      }

	      // next, check message
	      var message = 'object' === _.type(err) && "message" in err
	        ? err.message
	        : '' + err;

	      if ((message != null) && errMsg && errMsg instanceof RegExp) {
	        this.assert(
	            errMsg.exec(message)
	          , 'expected #{this} to throw error matching #{exp} but got #{act}'
	          , 'expected #{this} to throw error not matching #{exp}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
	        this.assert(
	            ~message.indexOf(errMsg)
	          , 'expected #{this} to throw error including #{exp} but got #{act}'
	          , 'expected #{this} to throw error not including #{act}'
	          , errMsg
	          , message
	        );

	        flag(this, 'object', err);
	        return this;
	      } else {
	        thrown = true;
	        thrownError = err;
	      }
	    }

	    var actuallyGot = ''
	      , expectedThrown = name !== null
	        ? name
	        : desiredError
	          ? '#{exp}' //_.inspect(desiredError)
	          : 'an error';

	    if (thrown) {
	      actuallyGot = ' but #{act} was thrown'
	    }

	    this.assert(
	        thrown === true
	      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
	      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
	      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
	    );

	    flag(this, 'object', thrownError);
	  };

	  Assertion.addMethod('throw', assertThrows);
	  Assertion.addMethod('throws', assertThrows);
	  Assertion.addMethod('Throw', assertThrows);

	  /**
	   * ### .respondTo(method)
	   *
	   * Asserts that the object or class target will respond to a method.
	   *
	   *     Klass.prototype.bar = function(){};
	   *     expect(Klass).to.respondTo('bar');
	   *     expect(obj).to.respondTo('bar');
	   *
	   * To check if a constructor will respond to a static function,
	   * set the `itself` flag.
	   *
	   *     Klass.baz = function(){};
	   *     expect(Klass).itself.to.respondTo('baz');
	   *
	   * @name respondTo
	   * @param {String} method
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('respondTo', function (method, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , itself = flag(this, 'itself')
	      , context = ('function' === _.type(obj) && !itself)
	        ? obj.prototype[method]
	        : obj[method];

	    this.assert(
	        'function' === typeof context
	      , 'expected #{this} to respond to ' + _.inspect(method)
	      , 'expected #{this} to not respond to ' + _.inspect(method)
	    );
	  });

	  /**
	   * ### .itself
	   *
	   * Sets the `itself` flag, later used by the `respondTo` assertion.
	   *
	   *     function Foo() {}
	   *     Foo.bar = function() {}
	   *     Foo.prototype.baz = function() {}
	   *
	   *     expect(Foo).itself.to.respondTo('bar');
	   *     expect(Foo).itself.not.to.respondTo('baz');
	   *
	   * @name itself
	   * @api public
	   */

	  Assertion.addProperty('itself', function () {
	    flag(this, 'itself', true);
	  });

	  /**
	   * ### .satisfy(method)
	   *
	   * Asserts that the target passes a given truth test.
	   *
	   *     expect(1).to.satisfy(function(num) { return num > 0; });
	   *
	   * @name satisfy
	   * @param {Function} matcher
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('satisfy', function (matcher, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var result = matcher(obj);
	    this.assert(
	        result
	      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
	      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
	      , this.negate ? false : true
	      , result
	    );
	  });

	  /**
	   * ### .closeTo(expected, delta)
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     expect(1.5).to.be.closeTo(1, 0.5);
	   *
	   * @name closeTo
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('closeTo', function (expected, delta, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj, msg).is.a('number');
	    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
	      throw new Error('the arguments to closeTo must be numbers');
	    }

	    this.assert(
	        Math.abs(obj - expected) <= delta
	      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
	      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
	    );
	  });

	  function isSubsetOf(subset, superset, cmp) {
	    return subset.every(function(elem) {
	      if (!cmp) return superset.indexOf(elem) !== -1;

	      return superset.some(function(elem2) {
	        return cmp(elem, elem2);
	      });
	    })
	  }

	  /**
	   * ### .members(set)
	   *
	   * Asserts that the target is a superset of `set`,
	   * or that the target and `set` have the same strictly-equal (===) members.
	   * Alternately, if the `deep` flag is set, set members are compared for deep
	   * equality.
	   *
	   *     expect([1, 2, 3]).to.include.members([3, 2]);
	   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
	   *
	   *     expect([4, 2]).to.have.members([2, 4]);
	   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
	   *
	   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
	   *
	   * @name members
	   * @param {Array} set
	   * @param {String} message _optional_
	   * @api public
	   */

	  Assertion.addMethod('members', function (subset, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');

	    new Assertion(obj).to.be.an('array');
	    new Assertion(subset).to.be.an('array');

	    var cmp = flag(this, 'deep') ? _.eql : undefined;

	    if (flag(this, 'contains')) {
	      return this.assert(
	          isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to be a superset of #{act}'
	        , 'expected #{this} to not be a superset of #{act}'
	        , obj
	        , subset
	      );
	    }

	    this.assert(
	        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to have the same members as #{act}'
	        , 'expected #{this} to not have the same members as #{act}'
	        , obj
	        , subset
	    );
	  });

	  /**
	   * ### .change(function)
	   *
	   * Asserts that a function changes an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val += 3 };
	   *     var noChangeFn = function() { return 'foo' + 'bar'; }
	   *     expect(fn).to.change(obj, 'val');
	   *     expect(noChangFn).to.not.change(obj, 'val')
	   *
	   * @name change
	   * @alias changes
	   * @alias Change
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertChanges (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      initial !== object[prop]
	      , 'expected .' + prop + ' to change'
	      , 'expected .' + prop + ' to not change'
	    );
	  }

	  Assertion.addChainableMethod('change', assertChanges);
	  Assertion.addChainableMethod('changes', assertChanges);

	  /**
	   * ### .increase(function)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     expect(fn).to.increase(obj, 'val');
	   *
	   * @name increase
	   * @alias increases
	   * @alias Increase
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertIncreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial > 0
	      , 'expected .' + prop + ' to increase'
	      , 'expected .' + prop + ' to not increase'
	    );
	  }

	  Assertion.addChainableMethod('increase', assertIncreases);
	  Assertion.addChainableMethod('increases', assertIncreases);

	  /**
	   * ### .decrease(function)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     expect(fn).to.decrease(obj, 'val');
	   *
	   * @name decrease
	   * @alias decreases
	   * @alias Decrease
	   * @param {String} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  function assertDecreases (object, prop, msg) {
	    if (msg) flag(this, 'message', msg);
	    var fn = flag(this, 'object');
	    new Assertion(object, msg).to.have.property(prop);
	    new Assertion(fn).is.a('function');

	    var initial = object[prop];
	    fn();

	    this.assert(
	      object[prop] - initial < 0
	      , 'expected .' + prop + ' to decrease'
	      , 'expected .' + prop + ' to not decrease'
	    );
	  }

	  Assertion.addChainableMethod('decrease', assertDecreases);
	  Assertion.addChainableMethod('decreases', assertDecreases);

	};


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  chai.expect = function (val, message) {
	    return new chai.Assertion(val, message);
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @api public
	   */

	  chai.expect.fail = function (actual, expected, message, operator) {
	    message = message || 'expect.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, chai.expect.fail);
	  };
	};


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	module.exports = function (chai, util) {
	  var Assertion = chai.Assertion;

	  function loadShould () {
	    // explicitly define this method as function as to have it's name to include as `ssfi`
	    function shouldGetter() {
	      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {
	        return new Assertion(this.valueOf(), null, shouldGetter);
	      }
	      return new Assertion(this, null, shouldGetter);
	    }
	    function shouldSetter(value) {
	      // See https://github.com/chaijs/chai/issues/86: this makes
	      // `whatever.should = someValue` actually set `someValue`, which is
	      // especially useful for `global.should = require('chai').should()`.
	      //
	      // Note that we have to use [[DefineProperty]] instead of [[Put]]
	      // since otherwise we would trigger this very setter!
	      Object.defineProperty(this, 'should', {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    }
	    // modify Object.prototype to have `should`
	    Object.defineProperty(Object.prototype, 'should', {
	      set: shouldSetter
	      , get: shouldGetter
	      , configurable: true
	    });

	    var should = {};

	    /**
	     * ### .fail(actual, expected, [message], [operator])
	     *
	     * Throw a failure.
	     *
	     * @name fail
	     * @param {Mixed} actual
	     * @param {Mixed} expected
	     * @param {String} message
	     * @param {String} operator
	     * @api public
	     */

	    should.fail = function (actual, expected, message, operator) {
	      message = message || 'should.fail()';
	      throw new chai.AssertionError(message, {
	          actual: actual
	        , expected: expected
	        , operator: operator
	      }, should.fail);
	    };

	    should.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.equal(val2);
	    };

	    should.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.Throw(errt, errs);
	    };

	    should.exist = function (val, msg) {
	      new Assertion(val, msg).to.exist;
	    }

	    // negation
	    should.not = {}

	    should.not.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.not.equal(val2);
	    };

	    should.not.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.not.Throw(errt, errs);
	    };

	    should.not.exist = function (val, msg) {
	      new Assertion(val, msg).to.not.exist;
	    }

	    should['throw'] = should['Throw'];
	    should.not['throw'] = should.not['Throw'];

	    return should;
	  };

	  chai.should = loadShould;
	  chai.Should = loadShould;
	};


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */


	module.exports = function (chai, util) {

	  /*!
	   * Chai dependencies.
	   */

	  var Assertion = chai.Assertion
	    , flag = util.flag;

	  /*!
	   * Module export.
	   */

	  /**
	   * ### assert(expression, message)
	   *
	   * Write your own test expressions.
	   *
	   *     assert('foo' !== 'bar', 'foo is not bar');
	   *     assert(Array.isArray([]), 'empty arrays are arrays');
	   *
	   * @param {Mixed} expression to test for truthiness
	   * @param {String} message to display on error
	   * @name assert
	   * @api public
	   */

	  var assert = chai.assert = function (express, errmsg) {
	    var test = new Assertion(null, null, chai.assert);
	    test.assert(
	        express
	      , errmsg
	      , '[ negation message unavailable ]'
	    );
	  };

	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure. Node.js `assert` module-compatible.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @api public
	   */

	  assert.fail = function (actual, expected, message, operator) {
	    message = message || 'assert.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, assert.fail);
	  };

	  /**
	   * ### .ok(object, [message])
	   *
	   * Asserts that `object` is truthy.
	   *
	   *     assert.ok('everything', 'everything is ok');
	   *     assert.ok(false, 'this will fail');
	   *
	   * @name ok
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */

	  assert.ok = function (val, msg) {
	    new Assertion(val, msg).is.ok;
	  };

	  /**
	   * ### .notOk(object, [message])
	   *
	   * Asserts that `object` is falsy.
	   *
	   *     assert.notOk('everything', 'this will fail');
	   *     assert.notOk(false, 'this will pass');
	   *
	   * @name notOk
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */

	  assert.notOk = function (val, msg) {
	    new Assertion(val, msg).is.not.ok;
	  };

	  /**
	   * ### .equal(actual, expected, [message])
	   *
	   * Asserts non-strict equality (`==`) of `actual` and `expected`.
	   *
	   *     assert.equal(3, '3', '== coerces values to strings');
	   *
	   * @name equal
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.equal = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.equal);

	    test.assert(
	        exp == flag(test, 'object')
	      , 'expected #{this} to equal #{exp}'
	      , 'expected #{this} to not equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .notEqual(actual, expected, [message])
	   *
	   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
	   *
	   *     assert.notEqual(3, 4, 'these numbers are not equal');
	   *
	   * @name notEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notEqual = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.notEqual);

	    test.assert(
	        exp != flag(test, 'object')
	      , 'expected #{this} to not equal #{exp}'
	      , 'expected #{this} to equal #{act}'
	      , exp
	      , act
	    );
	  };

	  /**
	   * ### .strictEqual(actual, expected, [message])
	   *
	   * Asserts strict equality (`===`) of `actual` and `expected`.
	   *
	   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
	   *
	   * @name strictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.strictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.equal(exp);
	  };

	  /**
	   * ### .notStrictEqual(actual, expected, [message])
	   *
	   * Asserts strict inequality (`!==`) of `actual` and `expected`.
	   *
	   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
	   *
	   * @name notStrictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notStrictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.equal(exp);
	  };

	  /**
	   * ### .deepEqual(actual, expected, [message])
	   *
	   * Asserts that `actual` is deeply equal to `expected`.
	   *
	   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
	   *
	   * @name deepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.deepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.eql(exp);
	  };

	  /**
	   * ### .notDeepEqual(actual, expected, [message])
	   *
	   * Assert that `actual` is not deeply equal to `expected`.
	   *
	   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
	   *
	   * @name notDeepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */

	  assert.notDeepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.eql(exp);
	  };

	  /**
	   * ### .isTrue(value, [message])
	   *
	   * Asserts that `value` is true.
	   *
	   *     var teaServed = true;
	   *     assert.isTrue(teaServed, 'the tea has been served');
	   *
	   * @name isTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isAbove = function (val, abv, msg) {
	    new Assertion(val, msg).to.be.above(abv);
	  };

	   /**
	   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
	   *
	   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`
	   *
	   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
	   *
	   * @name isAbove
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeAbove
	   * @param {String} message
	   * @api public
	   */

	  assert.isBelow = function (val, blw, msg) {
	    new Assertion(val, msg).to.be.below(blw);
	  };

	   /**
	   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
	   *
	   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`
	   *
	   *     assert.isBelow(3, 6, '3 is strictly less than 6');
	   *
	   * @name isBelow
	   * @param {Mixed} valueToCheck
	   * @param {Mixed} valueToBeBelow
	   * @param {String} message
	   * @api public
	   */

	  assert.isTrue = function (val, msg) {
	    new Assertion(val, msg).is['true'];
	  };

	  /**
	   * ### .isFalse(value, [message])
	   *
	   * Asserts that `value` is false.
	   *
	   *     var teaServed = false;
	   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
	   *
	   * @name isFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isFalse = function (val, msg) {
	    new Assertion(val, msg).is['false'];
	  };

	  /**
	   * ### .isNull(value, [message])
	   *
	   * Asserts that `value` is null.
	   *
	   *     assert.isNull(err, 'there was no error');
	   *
	   * @name isNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNull = function (val, msg) {
	    new Assertion(val, msg).to.equal(null);
	  };

	  /**
	   * ### .isNotNull(value, [message])
	   *
	   * Asserts that `value` is not null.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotNull(tea, 'great, time for tea!');
	   *
	   * @name isNotNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotNull = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(null);
	  };

	  /**
	   * ### .isUndefined(value, [message])
	   *
	   * Asserts that `value` is `undefined`.
	   *
	   *     var tea;
	   *     assert.isUndefined(tea, 'no tea defined');
	   *
	   * @name isUndefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isUndefined = function (val, msg) {
	    new Assertion(val, msg).to.equal(undefined);
	  };

	  /**
	   * ### .isDefined(value, [message])
	   *
	   * Asserts that `value` is not `undefined`.
	   *
	   *     var tea = 'cup of chai';
	   *     assert.isDefined(tea, 'tea has been defined');
	   *
	   * @name isDefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isDefined = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(undefined);
	  };

	  /**
	   * ### .isFunction(value, [message])
	   *
	   * Asserts that `value` is a function.
	   *
	   *     function serveTea() { return 'cup of tea'; };
	   *     assert.isFunction(serveTea, 'great, we can have tea now');
	   *
	   * @name isFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isFunction = function (val, msg) {
	    new Assertion(val, msg).to.be.a('function');
	  };

	  /**
	   * ### .isNotFunction(value, [message])
	   *
	   * Asserts that `value` is _not_ a function.
	   *
	   *     var serveTea = [ 'heat', 'pour', 'sip' ];
	   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
	   *
	   * @name isNotFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotFunction = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('function');
	  };

	  /**
	   * ### .isObject(value, [message])
	   *
	   * Asserts that `value` is an object (as revealed by
	   * `Object.prototype.toString`).
	   *
	   *     var selection = { name: 'Chai', serve: 'with spices' };
	   *     assert.isObject(selection, 'tea selection is an object');
	   *
	   * @name isObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isObject = function (val, msg) {
	    new Assertion(val, msg).to.be.a('object');
	  };

	  /**
	   * ### .isNotObject(value, [message])
	   *
	   * Asserts that `value` is _not_ an object.
	   *
	   *     var selection = 'chai'
	   *     assert.isNotObject(selection, 'tea selection is not an object');
	   *     assert.isNotObject(null, 'null is not an object');
	   *
	   * @name isNotObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotObject = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('object');
	  };

	  /**
	   * ### .isArray(value, [message])
	   *
	   * Asserts that `value` is an array.
	   *
	   *     var menu = [ 'green', 'chai', 'oolong' ];
	   *     assert.isArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isArray = function (val, msg) {
	    new Assertion(val, msg).to.be.an('array');
	  };

	  /**
	   * ### .isNotArray(value, [message])
	   *
	   * Asserts that `value` is _not_ an array.
	   *
	   *     var menu = 'green|chai|oolong';
	   *     assert.isNotArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isNotArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotArray = function (val, msg) {
	    new Assertion(val, msg).to.not.be.an('array');
	  };

	  /**
	   * ### .isString(value, [message])
	   *
	   * Asserts that `value` is a string.
	   *
	   *     var teaOrder = 'chai';
	   *     assert.isString(teaOrder, 'order placed');
	   *
	   * @name isString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isString = function (val, msg) {
	    new Assertion(val, msg).to.be.a('string');
	  };

	  /**
	   * ### .isNotString(value, [message])
	   *
	   * Asserts that `value` is _not_ a string.
	   *
	   *     var teaOrder = 4;
	   *     assert.isNotString(teaOrder, 'order placed');
	   *
	   * @name isNotString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotString = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('string');
	  };

	  /**
	   * ### .isNumber(value, [message])
	   *
	   * Asserts that `value` is a number.
	   *
	   *     var cups = 2;
	   *     assert.isNumber(cups, 'how many cups');
	   *
	   * @name isNumber
	   * @param {Number} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNumber = function (val, msg) {
	    new Assertion(val, msg).to.be.a('number');
	  };

	  /**
	   * ### .isNotNumber(value, [message])
	   *
	   * Asserts that `value` is _not_ a number.
	   *
	   *     var cups = '2 cups please';
	   *     assert.isNotNumber(cups, 'how many cups');
	   *
	   * @name isNotNumber
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotNumber = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('number');
	  };

	  /**
	   * ### .isBoolean(value, [message])
	   *
	   * Asserts that `value` is a boolean.
	   *
	   *     var teaReady = true
	   *       , teaServed = false;
	   *
	   *     assert.isBoolean(teaReady, 'is the tea ready');
	   *     assert.isBoolean(teaServed, 'has tea been served');
	   *
	   * @name isBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isBoolean = function (val, msg) {
	    new Assertion(val, msg).to.be.a('boolean');
	  };

	  /**
	   * ### .isNotBoolean(value, [message])
	   *
	   * Asserts that `value` is _not_ a boolean.
	   *
	   *     var teaReady = 'yep'
	   *       , teaServed = 'nope';
	   *
	   *     assert.isNotBoolean(teaReady, 'is the tea ready');
	   *     assert.isNotBoolean(teaServed, 'has tea been served');
	   *
	   * @name isNotBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.isNotBoolean = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('boolean');
	  };

	  /**
	   * ### .typeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
	   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
	   *     assert.typeOf('tea', 'string', 'we have a string');
	   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
	   *     assert.typeOf(null, 'null', 'we have a null');
	   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
	   *
	   * @name typeOf
	   * @param {Mixed} value
	   * @param {String} name
	   * @param {String} message
	   * @api public
	   */

	  assert.typeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.a(type);
	  };

	  /**
	   * ### .notTypeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is _not_ `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
	   *
	   * @name notTypeOf
	   * @param {Mixed} value
	   * @param {String} typeof name
	   * @param {String} message
	   * @api public
	   */

	  assert.notTypeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.a(type);
	  };

	  /**
	   * ### .instanceOf(object, constructor, [message])
	   *
	   * Asserts that `value` is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new Tea('chai');
	   *
	   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
	   *
	   * @name instanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */

	  assert.instanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.instanceOf(type);
	  };

	  /**
	   * ### .notInstanceOf(object, constructor, [message])
	   *
	   * Asserts `value` is not an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new String('chai');
	   *
	   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
	   *
	   * @name notInstanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */

	  assert.notInstanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.instanceOf(type);
	  };

	  /**
	   * ### .include(haystack, needle, [message])
	   *
	   * Asserts that `haystack` includes `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
	   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
	   *
	   * @name include
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */

	  assert.include = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.include).include(inc);
	  };

	  /**
	   * ### .notInclude(haystack, needle, [message])
	   *
	   * Asserts that `haystack` does not include `needle`. Works
	   * for strings and arrays.
	   *i
	   *     assert.notInclude('foobar', 'baz', 'string not include substring');
	   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
	   *
	   * @name notInclude
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */

	  assert.notInclude = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.notInclude).not.include(inc);
	  };

	  /**
	   * ### .match(value, regexp, [message])
	   *
	   * Asserts that `value` matches the regular expression `regexp`.
	   *
	   *     assert.match('foobar', /^foo/, 'regexp matches');
	   *
	   * @name match
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */

	  assert.match = function (exp, re, msg) {
	    new Assertion(exp, msg).to.match(re);
	  };

	  /**
	   * ### .notMatch(value, regexp, [message])
	   *
	   * Asserts that `value` does not match the regular expression `regexp`.
	   *
	   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
	   *
	   * @name notMatch
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */

	  assert.notMatch = function (exp, re, msg) {
	    new Assertion(exp, msg).to.not.match(re);
	  };

	  /**
	   * ### .property(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`.
	   *
	   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
	   *
	   * @name property
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.property = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.property(prop);
	  };

	  /**
	   * ### .notProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`.
	   *
	   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
	   *
	   * @name notProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.notProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop);
	  };

	  /**
	   * ### .deepProperty(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`, which can be a
	   * string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
	   *
	   * @name deepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.deepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop);
	  };

	  /**
	   * ### .notDeepProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`, which
	   * can be a string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
	   *
	   * @name notDeepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */

	  assert.notDeepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop);
	  };

	  /**
	   * ### .propertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`.
	   *
	   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
	   *
	   * @name propertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.propertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.property(prop, val);
	  };

	  /**
	   * ### .propertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`.
	   *
	   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
	   *
	   * @name propertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.propertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`. `property` can use dot- and bracket-notation for deep
	   * reference.
	   *
	   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
	   *
	   * @name deepPropertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.deepPropertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop, val);
	  };

	  /**
	   * ### .deepPropertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`. `property` can use dot- and
	   * bracket-notation for deep reference.
	   *
	   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
	   *
	   * @name deepPropertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */

	  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
	  };

	  /**
	   * ### .lengthOf(object, length, [message])
	   *
	   * Asserts that `object` has a `length` property with the expected value.
	   *
	   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
	   *     assert.lengthOf('foobar', 5, 'string has length of 6');
	   *
	   * @name lengthOf
	   * @param {Mixed} object
	   * @param {Number} length
	   * @param {String} message
	   * @api public
	   */

	  assert.lengthOf = function (exp, len, msg) {
	    new Assertion(exp, msg).to.have.length(len);
	  };

	  /**
	   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
	   *
	   * Asserts that `function` will throw an error that is an instance of
	   * `constructor`, or alternately that it will throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.throw(fn, 'function throws a reference error');
	   *     assert.throw(fn, /function throws a reference error/);
	   *     assert.throw(fn, ReferenceError);
	   *     assert.throw(fn, ReferenceError, 'function throws a reference error');
	   *     assert.throw(fn, ReferenceError, /function throws a reference error/);
	   *
	   * @name throws
	   * @alias throw
	   * @alias Throw
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */

	  assert.Throw = function (fn, errt, errs, msg) {
	    if ('string' === typeof errt || errt instanceof RegExp) {
	      errs = errt;
	      errt = null;
	    }

	    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);
	    return flag(assertErr, 'object');
	  };

	  /**
	   * ### .doesNotThrow(function, [constructor/regexp], [message])
	   *
	   * Asserts that `function` will _not_ throw an error that is an instance of
	   * `constructor`, or alternately that it will not throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.doesNotThrow(fn, Error, 'function does not throw');
	   *
	   * @name doesNotThrow
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */

	  assert.doesNotThrow = function (fn, type, msg) {
	    if ('string' === typeof type) {
	      msg = type;
	      type = null;
	    }

	    new Assertion(fn, msg).to.not.Throw(type);
	  };

	  /**
	   * ### .operator(val1, operator, val2, [message])
	   *
	   * Compares two values using `operator`.
	   *
	   *     assert.operator(1, '<', 2, 'everything is ok');
	   *     assert.operator(1, '>', 2, 'this will fail');
	   *
	   * @name operator
	   * @param {Mixed} val1
	   * @param {String} operator
	   * @param {Mixed} val2
	   * @param {String} message
	   * @api public
	   */

	  assert.operator = function (val, operator, val2, msg) {
	    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {
	      throw new Error('Invalid operator "' + operator + '"');
	    }
	    var test = new Assertion(eval(val + operator + val2), msg);
	    test.assert(
	        true === flag(test, 'object')
	      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
	      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
	  };

	  /**
	   * ### .closeTo(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name closeTo
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @api public
	   */

	  assert.closeTo = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.closeTo(exp, delta);
	  };

	  /**
	   * ### .sameMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members.
	   * Order is not taken into account.
	   *
	   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
	   *
	   * @name sameMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @api public
	   */

	  assert.sameMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.members(set2);
	  }

	  /**
	   * ### .sameDeepMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.
	   * Order is not taken into account.
	   *
	   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');
	   *
	   * @name sameDeepMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @api public
	   */

	  assert.sameDeepMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.deep.members(set2);
	  }

	  /**
	   * ### .includeMembers(superset, subset, [message])
	   *
	   * Asserts that `subset` is included in `superset`.
	   * Order is not taken into account.
	   *
	   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
	   *
	   * @name includeMembers
	   * @param {Array} superset
	   * @param {Array} subset
	   * @param {String} message
	   * @api public
	   */

	  assert.includeMembers = function (superset, subset, msg) {
	    new Assertion(superset, msg).to.include.members(subset);
	  }

	   /**
	   * ### .changes(function, object, property)
	   *
	   * Asserts that a function changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 22 };
	   *     assert.changes(fn, obj, 'val');
	   *
	   * @name changes
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.changes = function (fn, obj, prop) {
	    new Assertion(fn).to.change(obj, prop);
	  }

	   /**
	   * ### .doesNotChange(function, object, property)
	   *
	   * Asserts that a function does not changes the value of a property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { console.log('foo'); };
	   *     assert.doesNotChange(fn, obj, 'val');
	   *
	   * @name doesNotChange
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotChange = function (fn, obj, prop) {
	    new Assertion(fn).to.not.change(obj, prop);
	  }

	   /**
	   * ### .increases(function, object, property)
	   *
	   * Asserts that a function increases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 13 };
	   *     assert.increases(fn, obj, 'val');
	   *
	   * @name increases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.increases = function (fn, obj, prop) {
	    new Assertion(fn).to.increase(obj, prop);
	  }

	   /**
	   * ### .doesNotIncrease(function, object, property)
	   *
	   * Asserts that a function does not increase object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 8 };
	   *     assert.doesNotIncrease(fn, obj, 'val');
	   *
	   * @name doesNotIncrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotIncrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.increase(obj, prop);
	  }

	   /**
	   * ### .decreases(function, object, property)
	   *
	   * Asserts that a function decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 5 };
	   *     assert.decreases(fn, obj, 'val');
	   *
	   * @name decreases
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.decreases = function (fn, obj, prop) {
	    new Assertion(fn).to.decrease(obj, prop);
	  }

	   /**
	   * ### .doesNotDecrease(function, object, property)
	   *
	   * Asserts that a function does not decreases an object property
	   *
	   *     var obj = { val: 10 };
	   *     var fn = function() { obj.val = 15 };
	   *     assert.doesNotDecrease(fn, obj, 'val');
	   *
	   * @name doesNotDecrease
	   * @param {Function} modifier function
	   * @param {Object} object
	   * @param {String} property name
	   * @param {String} message _optional_
	   * @api public
	   */

	  assert.doesNotDecrease = function (fn, obj, prop) {
	    new Assertion(fn).to.not.decrease(obj, prop);
	  }

	  /*!
	   * Undocumented / untested
	   */

	  assert.ifError = function (val, msg) {
	    new Assertion(val, msg).to.not.be.ok;
	  };

	  /*!
	   * Aliases.
	   */

	  (function alias(name, as){
	    assert[as] = assert[name];
	    return alias;
	  })
	  ('Throw', 'throw')
	  ('Throw', 'throws');
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var _callbacks = [];
	var _promises = [];

	var Dispatcher = (function () {
	  function Dispatcher() {
	    _classCallCheck(this, Dispatcher);
	  }

	  _createClass(Dispatcher, {
	    register: {
	      value: function register(callback) {
	        _callbacks.push(callback);
	        return _callbacks.length - 1; // index
	      }
	    },
	    dispatch: {
	      value: function dispatch(payload) {
	        var resolves = [];
	        var rejects = [];

	        _promises = _callbacks.map(function (_, i) {
	          return new Promise(function (resolve, reject) {
	            resolves[i] = resolve;
	            rejects[i] = reject;
	          });
	        });

	        _callbacks.forEach(function (callback, i) {
	          Promise.resolve(callback(payload)).then(function () {
	            resolves[i](payload);
	          }, function () {
	            rejects[i](new Error("Dispatcher callback unsuccessful"));
	          });
	        });
	        _promises = [];
	      }
	    }
	  });

	  return Dispatcher;
	})();

	module.exports = Dispatcher;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "Dispatcher.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var AppDispatcher = _interopRequire(__webpack_require__(31));

	var AppStateConstants = _interopRequire(__webpack_require__(32));

	var Actions = {
	  loadedCollection: function loadedCollection(collection) {
	    AppDispatcher.dispatch({
	      actionType: AppStateConstants.LOADED_COLLECTION,
	      collection: collection
	    });
	  }
	};

	module.exports = Actions;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "server.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Main exports
	 */

	var exports = module.exports = {};

	/*!
	 * test utility
	 */

	exports.test = __webpack_require__(194);

	/*!
	 * type utility
	 */

	exports.type = __webpack_require__(195);

	/*!
	 * message utility
	 */

	exports.getMessage = __webpack_require__(196);

	/*!
	 * actual utility
	 */

	exports.getActual = __webpack_require__(197);

	/*!
	 * Inspect util
	 */

	exports.inspect = __webpack_require__(198);

	/*!
	 * Object Display util
	 */

	exports.objDisplay = __webpack_require__(199);

	/*!
	 * Flag utility
	 */

	exports.flag = __webpack_require__(200);

	/*!
	 * Flag transferring utility
	 */

	exports.transferFlags = __webpack_require__(201);

	/*!
	 * Deep equal utility
	 */

	exports.eql = __webpack_require__(277);

	/*!
	 * Deep path value
	 */

	exports.getPathValue = __webpack_require__(202);

	/*!
	 * Deep path info
	 */

	exports.getPathInfo = __webpack_require__(203);

	/*!
	 * Check if a property exists
	 */

	exports.hasProperty = __webpack_require__(204);

	/*!
	 * Function name
	 */

	exports.getName = __webpack_require__(205);

	/*!
	 * add Property
	 */

	exports.addProperty = __webpack_require__(206);

	/*!
	 * add Method
	 */

	exports.addMethod = __webpack_require__(207);

	/*!
	 * overwrite Property
	 */

	exports.overwriteProperty = __webpack_require__(208);

	/*!
	 * overwrite Method
	 */

	exports.overwriteMethod = __webpack_require__(209);

	/*!
	 * Add a chainable method
	 */

	exports.addChainableMethod = __webpack_require__(210);

	/*!
	 * Overwrite chainable method
	 */

	exports.overwriteChainableMethod = __webpack_require__(211);



/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);

	var invariant = __webpack_require__(98);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);
	var ReactFragment = __webpack_require__(41);

	var traverseAllChildren = __webpack_require__(212);
	var warning = __webpack_require__(91);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(213);

	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: 'getDOMNode',
	    isMounted: 'isMounted',
	    replaceProps: 'replaceProps',
	    replaceState: 'replaceState',
	    setProps: 'setProps'
	  };
	  var defineDeprecationWarning = function(methodName, displayName) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes.',
	            displayName
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(63);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactElement = __webpack_require__(67);
	var ReactErrorUtils = __webpack_require__(214);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactLifeCycle = __webpack_require__(215);
	var ReactPropTypeLocations = __webpack_require__(216);
	var ReactPropTypeLocationNames = __webpack_require__(217);
	var ReactUpdateQueue = __webpack_require__(213);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);
	var keyMirror = __webpack_require__(218);
	var keyOf = __webpack_require__(100);
	var warning = __webpack_require__(91);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: http://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(78);
	var emptyObject = __webpack_require__(219);
	var warning = __webpack_require__(91);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(65);
	var ReactCurrentOwner = __webpack_require__(66);

	var assign = __webpack_require__(78);
	var warning = __webpack_require__(91);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactFragment = __webpack_require__(41);
	var ReactPropTypeLocations = __webpack_require__(216);
	var ReactPropTypeLocationNames = __webpack_require__(217);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactNativeComponent = __webpack_require__(220);

	var getIteratorFn = __webpack_require__(221);
	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See http://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. ' +
	    'Instead, specify the correct value when ' +
	    'initially creating the element.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactElementValidator = __webpack_require__(68);

	var mapObject = __webpack_require__(222);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(223);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(224);
	var ReactDOMComponent = __webpack_require__(225);

	var assign = __webpack_require__(78);
	var escapeTextContentForBrowser = __webpack_require__(226);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(227);
	var ChangeEventPlugin = __webpack_require__(228);
	var ClientReactRootIndex = __webpack_require__(229);
	var DefaultEventPluginOrder = __webpack_require__(230);
	var EnterLeaveEventPlugin = __webpack_require__(231);
	var ExecutionEnvironment = __webpack_require__(81);
	var HTMLDOMPropertyConfig = __webpack_require__(232);
	var MobileSafariClickEventPlugin = __webpack_require__(233);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(224);
	var ReactDefaultBatchingStrategy = __webpack_require__(235);
	var ReactDOMComponent = __webpack_require__(225);
	var ReactDOMButton = __webpack_require__(236);
	var ReactDOMForm = __webpack_require__(237);
	var ReactDOMImg = __webpack_require__(238);
	var ReactDOMIDOperations = __webpack_require__(239);
	var ReactDOMIframe = __webpack_require__(240);
	var ReactDOMInput = __webpack_require__(241);
	var ReactDOMOption = __webpack_require__(242);
	var ReactDOMSelect = __webpack_require__(243);
	var ReactDOMTextarea = __webpack_require__(244);
	var ReactDOMTextComponent = __webpack_require__(70);
	var ReactElement = __webpack_require__(67);
	var ReactEventListener = __webpack_require__(245);
	var ReactInjection = __webpack_require__(246);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(73);
	var ReactReconcileTransaction = __webpack_require__(247);
	var SelectEventPlugin = __webpack_require__(248);
	var ServerReactRootIndex = __webpack_require__(249);
	var SimpleEventPlugin = __webpack_require__(250);
	var SVGDOMPropertyConfig = __webpack_require__(251);

	var createFullPageComponent = __webpack_require__(252);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(47);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(253);

	var invariant = __webpack_require__(98);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(101);
	var ReactBrowserEventEmitter = __webpack_require__(108);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactElement = __webpack_require__(67);
	var ReactElementValidator = __webpack_require__(68);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactMarkupChecksum = __webpack_require__(254);
	var ReactPerf = __webpack_require__(74);
	var ReactReconciler = __webpack_require__(76);
	var ReactUpdateQueue = __webpack_require__(213);
	var ReactUpdates = __webpack_require__(43);

	var emptyObject = __webpack_require__(219);
	var containsNode = __webpack_require__(255);
	var getReactRootElementInContainer = __webpack_require__(256);
	var instantiateReactComponent = __webpack_require__(257);
	var invariant = __webpack_require__(98);
	var setInnerHTML = __webpack_require__(258);
	var shouldUpdateReactComponent = __webpack_require__(259);
	var warning = __webpack_require__(91);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactFragment = __webpack_require__(41);
	var ReactPropTypeLocationNames = __webpack_require__(217);

	var emptyFunction = __webpack_require__(94);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(260);
	var ReactElementValidator = __webpack_require__(68);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMarkupChecksum = __webpack_require__(254);
	var ReactServerRenderingTransaction =
	  __webpack_require__(261);

	var emptyObject = __webpack_require__(219);
	var instantiateReactComponent = __webpack_require__(257);
	var invariant = __webpack_require__(98);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(66);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactMount = __webpack_require__(73);

	var invariant = __webpack_require__(98);
	var isNode = __webpack_require__(262);
	var warning = __webpack_require__(91);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(67);

	var invariant = __webpack_require__(98);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 114,
		"./af.js": 114,
		"./ar": 118,
		"./ar-ma": 115,
		"./ar-ma.js": 115,
		"./ar-sa": 116,
		"./ar-sa.js": 116,
		"./ar-tn": 117,
		"./ar-tn.js": 117,
		"./ar.js": 118,
		"./az": 119,
		"./az.js": 119,
		"./be": 120,
		"./be.js": 120,
		"./bg": 121,
		"./bg.js": 121,
		"./bn": 122,
		"./bn.js": 122,
		"./bo": 123,
		"./bo.js": 123,
		"./br": 124,
		"./br.js": 124,
		"./bs": 125,
		"./bs.js": 125,
		"./ca": 126,
		"./ca.js": 126,
		"./cs": 127,
		"./cs.js": 127,
		"./cv": 128,
		"./cv.js": 128,
		"./cy": 129,
		"./cy.js": 129,
		"./da": 130,
		"./da.js": 130,
		"./de": 132,
		"./de-at": 131,
		"./de-at.js": 131,
		"./de.js": 132,
		"./el": 133,
		"./el.js": 133,
		"./en-au": 134,
		"./en-au.js": 134,
		"./en-ca": 135,
		"./en-ca.js": 135,
		"./en-gb": 136,
		"./en-gb.js": 136,
		"./eo": 137,
		"./eo.js": 137,
		"./es": 138,
		"./es.js": 138,
		"./et": 139,
		"./et.js": 139,
		"./eu": 140,
		"./eu.js": 140,
		"./fa": 141,
		"./fa.js": 141,
		"./fi": 142,
		"./fi.js": 142,
		"./fo": 143,
		"./fo.js": 143,
		"./fr": 145,
		"./fr-ca": 144,
		"./fr-ca.js": 144,
		"./fr.js": 145,
		"./fy": 146,
		"./fy.js": 146,
		"./gl": 147,
		"./gl.js": 147,
		"./he": 148,
		"./he.js": 148,
		"./hi": 149,
		"./hi.js": 149,
		"./hr": 150,
		"./hr.js": 150,
		"./hu": 151,
		"./hu.js": 151,
		"./hy-am": 152,
		"./hy-am.js": 152,
		"./id": 153,
		"./id.js": 153,
		"./is": 154,
		"./is.js": 154,
		"./it": 155,
		"./it.js": 155,
		"./ja": 156,
		"./ja.js": 156,
		"./ka": 157,
		"./ka.js": 157,
		"./km": 158,
		"./km.js": 158,
		"./ko": 159,
		"./ko.js": 159,
		"./lb": 160,
		"./lb.js": 160,
		"./lt": 161,
		"./lt.js": 161,
		"./lv": 162,
		"./lv.js": 162,
		"./mk": 163,
		"./mk.js": 163,
		"./ml": 164,
		"./ml.js": 164,
		"./mr": 165,
		"./mr.js": 165,
		"./ms-my": 166,
		"./ms-my.js": 166,
		"./my": 167,
		"./my.js": 167,
		"./nb": 168,
		"./nb.js": 168,
		"./ne": 169,
		"./ne.js": 169,
		"./nl": 170,
		"./nl.js": 170,
		"./nn": 171,
		"./nn.js": 171,
		"./pl": 172,
		"./pl.js": 172,
		"./pt": 174,
		"./pt-br": 173,
		"./pt-br.js": 173,
		"./pt.js": 174,
		"./ro": 175,
		"./ro.js": 175,
		"./ru": 176,
		"./ru.js": 176,
		"./sk": 177,
		"./sk.js": 177,
		"./sl": 178,
		"./sl.js": 178,
		"./sq": 179,
		"./sq.js": 179,
		"./sr": 181,
		"./sr-cyrl": 180,
		"./sr-cyrl.js": 180,
		"./sr.js": 181,
		"./sv": 182,
		"./sv.js": 182,
		"./ta": 183,
		"./ta.js": 183,
		"./th": 184,
		"./th.js": 184,
		"./tl-ph": 185,
		"./tl-ph.js": 185,
		"./tr": 186,
		"./tr.js": 186,
		"./tzm": 188,
		"./tzm-latn": 187,
		"./tzm-latn.js": 187,
		"./tzm.js": 188,
		"./uk": 189,
		"./uk.js": 189,
		"./uz": 190,
		"./uz.js": 190,
		"./vi": 191,
		"./vi.js": 191,
		"./zh-cn": 192,
		"./zh-cn.js": 192,
		"./zh-tw": 193,
		"./zh-tw.js": 193
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 82;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	"use strict";

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  if (!(obj instanceof Object && !Array.isArray(obj))) {
	    throw new Error('keyMirror(...): Argument must be an object.');
	  }
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*

	   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

	   you can include the faker library into your existing node.js application by requiring the entire /faker directory

	    var faker = require(./faker);
	    var randomName = faker.name.findName();

	   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

	    var faker = require(./customAppPath/faker);
	    var randomName = faker.name.findName();


	  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

	*/

	exports.name = __webpack_require__(263);
	exports.address = __webpack_require__(264);
	exports.phone = __webpack_require__(265);
	exports.internet = __webpack_require__(266);
	exports.company = __webpack_require__(267);
	exports.image = __webpack_require__(268);
	exports.lorem = __webpack_require__(269);
	exports.helpers =  __webpack_require__(270);
	exports.date = __webpack_require__(271);
	exports.random = __webpack_require__(272);
	exports.finance = __webpack_require__(273);
	exports.hacker = __webpack_require__(274);

	var locales = exports.locales = __webpack_require__(275);

	// default locale
	exports.locale = "en";

	// in case a locale is missing a definition, fallback to this locale
	exports.localeFallback = "en";

	exports.definitions = {};

	var _definitions = {
	  "name": ["first_name", "last_name", "prefix", "suffix"],
	  "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "state", "state_abbr"],
	  "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb"],
	  "lorem": ["words"],
	  "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
	  "phone_number": ["formats"],
	  "finance": ["account_type", "transaction_type", "currency"],
	  "internet": ["avatar_uri", "domain_suffix", "free_email", "password"]
	};

	// Create a Getter for all definitions.foo.bar propetries
	Object.keys(_definitions).forEach(function(d){
	  if (typeof exports.definitions[d] === "undefined") {
	    exports.definitions[d] = {};
	  }
	  _definitions[d].forEach(function(p){
	    Object.defineProperty(exports.definitions[d], p, {
	      get: function () {
	        if (typeof locales[exports.locale][d] === "undefined" || typeof locales[exports.locale][d][p] === "undefined") {
	          // certain localization sets contain less data then others.
	          // in the case of a missing defintion, use the default localeFallback to substitute the missing set data
	          return locales[exports.localeFallback][d][p];
	        } else {
	          // return localized data
	          return locales[exports.locale][d][p];
	        }
	      }
	    });
	  });
	});

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license
	 * lodash 3.5.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.2 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.5.0';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      REARG_FLAG = 128,
	      ARY_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_DROP_WHILE_FLAG = 0,
	      LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /**
	   * Used to match ES template delimiters.
	   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)
	   * for more details.
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect named functions. */
	  var reFuncName = /^\s*function[ \n\r\t]+\w/;

	  /** Used to detect hexadecimal string values. */
	  var reHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /**
	   * Used to match `RegExp` special characters.
	   * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
	   * for more details.
	   */
	  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to detect functions containing a `this` reference. */
	  var reThis = /\bthis\b/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to detect and test for whitespace. */
	  var whitespace = (
	    // Basic whitespace characters.
	    ' \t\x0b\f\xa0\ufeff' +

	    // Line terminators.
	    '\n\r\u2028\u2029' +

	    // Unicode category "Zs" space separators.
	    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
	  );

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
	    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    'window', 'WinRTError'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used as an internal `_.debounce` options object by `_.throttle`. */
	  var debounceOptions = {
	    'leading': false,
	    'maxWait': 0,
	    'trailing': false
	  };

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it is the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare to `other`.
	   * @param {*} other The value to compare to `value`.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsReflexive = value === value,
	          othIsReflexive = other === other;

	      if (value > other || !valIsReflexive || (typeof value == 'undefined' && othIsReflexive)) {
	        return 1;
	      }
	      if (value < other || !othIsReflexive || (typeof other == 'undefined' && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it is not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    if (typeof value == 'string') {
	      return value;
	    }
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.max` and `_.min` as the default callback for string values.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the code unit of the first character of the string.
	   */
	  function charAtCallback(string) {
	    return string.charCodeAt(0);
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of each element
	   * in a collection and stable sort them in the following order:
	   *
	   * If orders is unspecified, sort in ascending order for all properties.
	   * Otherwise, for each property, sort in ascending order if its corresponding value in
	   * orders is true, and descending order if false.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        return result * (orders[index] ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   * If `fromRight` is provided elements of `array` are iterated from right to left.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return (value && typeof value == 'object') || false;
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'add': function(a, b) { return a + b; } });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'sub': function(a, b) { return a - b; } });
	   *
	   * _.isFunction(_.add);
	   * // => true
	   * _.isFunction(_.sub);
	   * // => false
	   *
	   * lodash.isFunction(lodash.add);
	   * // => false
	   * lodash.isFunction(lodash.sub);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to detect DOM support. */
	    var document = (document = context.window) && document.document;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to the length of n-tuples for `_.unzip`. */
	    var getLength = baseProperty('length');

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the `toStringTag` of values.
	     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
	     * for more details.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = context._;

	    /** Used to detect if a method is native. */
	    var reNative = RegExp('^' +
	      escapeRegExp(objToString)
	      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
	        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
	        ceil = Math.ceil,
	        clearTimeout = context.clearTimeout,
	        floor = Math.floor,
	        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
	        push = arrayProto.push,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = isNative(Set = context.Set) && Set,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
	        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

	    /** Used to clone array buffers. */
	    var Float64Array = (function() {
	      // Safari 5 errors when using an array buffer to initialize a typed array
	      // where the array buffer's `byteLength` is not a multiple of the typed
	      // array's `BYTES_PER_ELEMENT`.
	      try {
	        var func = isNative(func = context.Float64Array) && func,
	            result = new func(new ArrayBuffer(10), 0, 1) && func;
	      } catch(e) {}
	      return result;
	    }());

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	        nativeIsFinite = context.isFinite,
	        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
	        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
	        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /** Used as the size, in bytes, of each `Float64Array` element. */
	    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

	    /**
	     * Used as the maximum length of an array-like value.
	     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	     * for more details.
	     */
	    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that return a boolean or single value will
	     * automatically end the chain returning the unwrapped value. Explicit chaining
	     * may be enabled using `_.chain`. The execution of chained methods is lazy,
	     * that is, execution is deferred until `_#value` is implicitly or explicitly
	     * called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization that merges iteratees to avoid creating intermediate
	     * arrays and reduce the number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
	     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
	     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
	     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
	     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
	     * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`, `merge`,
	     * `mixin`, `negate`, `noop`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
	     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,
	     * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,
	     * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,
	     * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,
	     * `without`, `wrap`, `xor`, `zip`, and `zipObject`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
	     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
	     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
	     * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,
	     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`,
	     * `isFinite`,`isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,
	     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,
	     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`,
	     * `noConflict`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`,
	     * `random`, `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`,
	     * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`,
	     * `startCase`, `startsWith`, `sum`, `template`, `trim`, `trimLeft`,
	     * `trimRight`, `trunc`, `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(sum, n) {
	     *   return sum + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function(x) {

	      /**
	       * Detect if functions can be decompiled by `Function#toString`
	       * (all but Firefox OS certified apps, older Opera mobile browsers, and
	       * the PlayStation 3; forced `false` for Windows 8 apps).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

	      /**
	       * Detect if `Function#name` is supported (all but IE).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcNames = typeof Function.name == 'string';

	      /**
	       * Detect if the DOM is supported.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.dom = document.createDocumentFragment().nodeType === 11;
	      } catch(e) {
	        support.dom = false;
	      }

	      /**
	       * Detect if `arguments` object indexes are non-enumerable.
	       *
	       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
	       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
	       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
	       * checks for indexes that exceed their function's formal parameters with
	       * associated values of `0`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
	      } catch(e) {
	        support.nonEnumArgs = true;
	      }
	    }(0, 0));

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = null;
	      this.__dir__ = 1;
	      this.__dropCount__ = 0;
	      this.__filtered__ = false;
	      this.__iteratees__ = null;
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = null;
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var actions = this.__actions__,
	          iteratees = this.__iteratees__,
	          views = this.__views__,
	          result = new LazyWrapper(this.__wrapped__);

	      result.__actions__ = actions ? arrayCopy(actions) : null;
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = views ? arrayCopy(views) : null;
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value();
	      if (!isArray(array)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var dir = this.__dir__,
	          isRight = dir < 0,
	          view = getView(0, array.length, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          takeCount = nativeMin(length, this.__takeCount__),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees ? iteratees.length : 0,
	          resIndex = 0,
	          result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type;

	          if (type == LAZY_DROP_WHILE_FLAG) {
	            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
	              data.count = 0;
	              data.done = false;
	            }
	            data.index = index;
	            if (!data.done) {
	              var limit = data.limit;
	              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
	                continue outer;
	              }
	            }
	          } else {
	            var computed = iteratee(value);
	            if (type == LAZY_MAP_FLAG) {
	              value = computed;
	            } else if (!computed) {
	              if (type == LAZY_FILTER_FLAG) {
	                continue outer;
	              } else {
	                break outer;
	              }
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Adds `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.max` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     */
	    function arrayMax(array) {
	      var index = -1,
	          length = array.length,
	          result = NEGATIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value > result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.min` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     */
	    function arrayMin(array) {
	      var index = -1,
	          length = array.length,
	          result = POSITIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value < result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return typeof objectValue == 'undefined' ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This method is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (typeof objectValue == 'undefined' || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize assigning values.
	     * @returns {Object} Returns the destination object.
	     */
	    function baseAssign(object, source, customizer) {
	      var props = keys(source);
	      if (!customizer) {
	        return baseCopy(source, object, props);
	      }
	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (typeof value == 'undefined' && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.at` without support for strings and individual
	     * key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} [props] The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          length = collection.length,
	          isArr = isLength(length),
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          key = parseFloat(key);
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Array} props The property names to copy.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, object, props) {
	      if (!props) {
	        props = object;
	        object = {};
	      }
	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.bindAll` without support for individual
	     * method name arguments.
	     *
	     * @private
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {string[]} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     */
	    function baseBindAll(object, methodNames) {
	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return (typeof thisArg != 'undefined' && isBindable(func))
	          ? bindCallback(func, thisArg, argCount)
	          : func;
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return typeof thisArg == 'undefined'
	        ? baseProperty(func + '')
	        : baseMatchesProperty(func + '', thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (typeof result != 'undefined') {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseCopy(value, result, keys(value));
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function Object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          Object.prototype = prototype;
	          var result = new Object;
	          Object.prototype = null;
	        }
	        return result || context.Object();
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The `arguments` object to slice and provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args, fromIndex) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, baseSlice(args, fromIndex)); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    function baseEach(collection, iteratee) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        return baseForOwn(collection, iteratee);
	      }
	      var index = -1,
	          iterable = toObject(collection);

	      while (++index < length) {
	        if (iteratee(iterable[index], index, iterable) === false) {
	          break;
	        }
	      }
	      return collection;
	    }

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    function baseEachRight(collection, iteratee) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        return baseForOwnRight(collection, iteratee);
	      }
	      var iterable = toObject(collection);
	      while (length--) {
	        if (iteratee(iterable[length], length, iterable) === false) {
	          break;
	        }
	      }
	      return collection;
	    }

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} isDeep Specify a deep flatten.
	     * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
	     * @param {number} fromIndex The index to start from.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, fromIndex) {
	      var index = fromIndex - 1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];

	        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            value = baseFlatten(value, isDeep, isStrict, 0);
	          }
	          var valIndex = -1,
	              valLength = value.length;

	          result.length += valLength;
	          while (++valIndex < valLength) {
	            result[++resIndex] = value[valIndex];
	          }
	        } else if (!isStrict) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iterator functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    function baseFor(object, iteratee, keysFunc) {
	      var index = -1,
	          iterable = toObject(object),
	          props = keysFunc(object),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        if (iteratee(iterable[key], key, iterable) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForRight(object, iteratee, keysFunc) {
	      var iterable = toObject(object),
	          props = keysFunc(object),
	          length = props.length;

	      while (length--) {
	        var key = props[length];
	        if (iteratee(iterable[key], key, iterable) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invoke` which requires additional arguments
	     * to be provided as an array of arguments rather than individually.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|string} methodName The name of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {Array} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     */
	    function baseInvoke(collection, methodName, args) {
	      var index = -1,
	          isFunc = typeof methodName == 'function',
	          length = collection ? collection.length : 0,
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? methodName : (value != null && value[methodName]);
	        result[++index] = func ? func.apply(value, args) : undefined;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
	      // Exit early for identical values.
	      if (value === other) {
	        // Treat `+0` vs. `-0` as not equal.
	        return value !== 0 || (1 / value == 1 / other);
	      }
	      var valType = typeof value,
	          othType = typeof other;

	      // Exit early for unlike primitive values.
	      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
	          value == null || other == null) {
	        // Return `false` unless both values are `NaN`.
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	          othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	      if (valWrapped || othWrapped) {
	        return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The source property names to match.
	     * @param {Array} values The source values to match.
	     * @param {Array} strictCompareFlags Strict comparison flags for source values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      var index = -1,
	          noCustomizer = !customizer;

	      while (++index < length) {
	        if ((noCustomizer && strictCompareFlags[index])
	              ? values[index] !== object[props[index]]
	              : !hasOwnProperty.call(object, props[index])
	            ) {
	          return false;
	        }
	      }
	      index = -1;
	      while (++index < length) {
	        var key = props[index];
	        if (noCustomizer && strictCompareFlags[index]) {
	          var result = hasOwnProperty.call(object, key);
	        } else {
	          var objValue = object[key],
	              srcValue = values[index];

	          result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (typeof result == 'undefined') {
	            result = baseIsEqual(srcValue, objValue, customizer, true);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var result = [];
	      baseEach(collection, function(value, key, collection) {
	        result.push(iteratee(value, key, collection));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var props = keys(source),
	          length = props.length;

	      if (length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return function(object) {
	            return object != null && object[key] === value && hasOwnProperty.call(object, key);
	          };
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = source[props[length]];
	        values[length] = value;
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return function(object) {
	        return baseIsMatch(object, props, values, strictCompareFlags);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not coerce `key`
	     * to a string.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(key, value) {
	      if (isStrictComparable(value)) {
	        return function(object) {
	          return object != null && object[key] === value;
	        };
	      }
	      return function(object) {
	        return object != null && baseIsEqual(value, object[key], null, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns the destination object.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
	      (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        var value = object[key],
	            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	            isCommon = typeof result == 'undefined';

	        if (isCommon) {
	          result = srcValue;
	        }
	        if ((isSrcArr || typeof result != 'undefined') &&
	            (isCommon || (result === result ? (result !== value) : (value === value)))) {
	          object[key] = result;
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = typeof result == 'undefined';

	      if (isCommon) {
	        result = srcValue;
	        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (value ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` which does not coerce `key` to a string.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     */
	    function basePullAt(array, indexes) {
	      var length = indexes.length,
	          result = baseAt(array, indexes);

	      indexes.sort(baseCompareAscending);
	      while (length--) {
	        var index = parseFloat(indexes[length]);
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + floor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands or `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {string[]} props The property names to sort by.
	     * @param {boolean[]} orders The sort orders of `props`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, props, orders) {
	      var index = -1,
	          length = collection.length,
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value) {
	        var length = props.length,
	            criteria = Array(length);

	        while (length--) {
	          criteria[length] = value == null ? undefined : value[props[length]];
	        }
	        result[++index] = { 'criteria': criteria, 'index': index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= 200,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * returned by `keysFunc`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved unwrapped value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var args = [result],
	            action = actions[index];

	        push.apply(args, action.args);
	        result = action.func.apply(action.thisArg, args);
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest, instead
	     *  of the lowest, index at which a value should be inserted into `array`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (retHighest ? (computed <= value) : (computed < value)) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest, instead
	     *  of the lowest, index at which a value should be inserted into `array`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsUndef = typeof value == 'undefined';

	      while (low < high) {
	        var mid = floor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || typeof computed != 'undefined');
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (typeof thisArg == 'undefined') {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      return bufferSlice.call(buffer, 0);
	    }
	    if (!bufferSlice) {
	      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
	      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
	        var byteLength = buffer.byteLength,
	            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
	            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
	            result = new ArrayBuffer(byteLength);

	        if (floatLength) {
	          var view = new Float64Array(result, 0, floatLength);
	          view.set(new Float64Array(buffer, 0, floatLength));
	        }
	        if (byteLength != offset) {
	          view = new Uint8Array(result, offset);
	          view.set(new Uint8Array(buffer, offset));
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(argsLength + leftLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var pad = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[pad + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[pad + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a function that aggregates a collection, creating an accumulator
	     * object composed from the results of running each element in the collection
	     * through an iteratee.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that assigns properties of source object(s) to a given
	     * destination object.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return function() {
	        var args = arguments,
	            length = args.length,
	            object = args[0];

	        if (length < 2 || object == null) {
	          return object;
	        }
	        var customizer = args[length - 2],
	            thisArg = args[length - 1],
	            guard = args[3];

	        if (length > 3 && typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = (length > 2 && typeof thisArg == 'function') ? thisArg : null;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(args[1], args[2], guard)) {
	          customizer = length == 3 ? null : customizer;
	          length = 2;
	        }
	        var index = 0;
	        while (++index < length) {
	          var source = args[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
	      return new SetCache(values);
	    };

	    /**
	     * Creates a function to compose other functions into a single function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new composer function.
	     */
	    function createComposer(fromRight) {
	      return function() {
	        var length = arguments.length,
	            index = length,
	            fromIndex = fromRight ? (length - 1) : 0;

	        if (!length) {
	          return function() { return arguments[0]; };
	        }
	        var funcs = Array(length);
	        while (index--) {
	          funcs[index] = arguments[index];
	          if (typeof funcs[index] != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	        }
	        return function() {
	          var index = fromIndex,
	              result = funcs[index].apply(this, arguments);

	          while ((fromRight ? index-- : ++index < length)) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, arguments);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that gets the extremum value of a collection.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to get the extremum value from an array.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
	     *  extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(arrayFunc, isMin) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = null;
	        }
	        var func = getCallback(),
	            noIteratee = iteratee == null;

	        if (!(func === baseCallback && noIteratee)) {
	          noIteratee = false;
	          iteratee = func(iteratee, thisArg, 3);
	        }
	        if (noIteratee) {
	          var isArr = isArray(collection);
	          if (!isArr && isString(collection)) {
	            iteratee = charAtCallback;
	          } else {
	            return arrayFunc(isArr ? collection : toIterable(collection));
	          }
	        }
	        return extremumBy(collection, iteratee, isMin);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

	      var Ctor = !isBindKey && createCtorWrapper(func),
	          key = func;

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : null,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : null,
	                newHoldersRight = isCurry ? null : argsHolders,
	                newPartials = isCurry ? args : null,
	                newPartialsRight = isCurry ? null : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var result = createHybridWrapper(func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity);
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this;
	        if (isBindKey) {
	          func = thisBinding[key];
	        }
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? (Ctor || createCtorWrapper(func)) : func;
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the pad required for `string` based on the given padding length.
	     * The `chars` string may be truncated if the number of padding characters
	     * exceeds the padding length.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPad(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(argsLength + leftLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = null;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = null;
	      }
	      var data = !isBindKey && getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data && data !== true) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length,
	          result = true;

	      if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
	        return false;
	      }
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (result && ++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        result = undefined;
	        if (customizer) {
	          result = isWhere
	            ? customizer(othValue, arrValue, index)
	            : customizer(arrValue, othValue, index);
	        }
	        if (typeof result == 'undefined') {
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (isWhere) {
	            var othIndex = othLength;
	            while (othIndex--) {
	              othValue = other[othIndex];
	              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	              if (result) {
	                break;
	              }
	            }
	          } else {
	            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	          }
	        }
	      }
	      return !!result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} value The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            // But, treat `-0` vs. `+0` as not equal.
	            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isWhere) {
	        return false;
	      }
	      var hasCtor,
	          index = -1;

	      while (++index < objLength) {
	        var key = objProps[index],
	            result = hasOwnProperty.call(other, key);

	        if (result) {
	          var objValue = object[key],
	              othValue = other[key];

	          result = undefined;
	          if (customizer) {
	            result = isWhere
	              ? customizer(othValue, objValue, key)
	              : customizer(objValue, othValue, key);
	          }
	          if (typeof result == 'undefined') {
	            // Recursively compare objects (susceptible to call stack limits).
	            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	        hasCtor || (hasCtor = key == 'constructor');
	      }
	      if (!hasCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments; (value, index, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the
	     *  maximum, extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function extremumBy(collection, iteratee, isMin) {
	      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
	          computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = iteratee(value, index, collection);
	        if ((isMin ? (current < computed) : (current > computed)) ||
	            (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} [transforms] The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms ? transforms.length : 0;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Checks if `func` is eligible for `this` binding.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is eligible, else `false`.
	     */
	    function isBindable(func) {
	      var support = lodash.support,
	          result = !(support.funcNames ? func.name : support.funcDecomp);

	      if (!result) {
	        var source = fnToString.call(func);
	        if (!support.funcNames) {
	          result = !reFuncName.test(source);
	        }
	        if (!result) {
	          // Check if `func` references the `this` keyword and store the result.
	          result = reThis.test(source) || isNative(func);
	          baseSetData(func, result);
	        }
	      }
	      return result;
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = +value;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number') {
	        var length = object.length,
	            prereq = isLength(length) && isIndex(index, length);
	      } else {
	        prereq = type == 'string' && index in object;
	      }
	      if (prereq) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on ES `ToLength`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
	     * for more details.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask;

	      var arityFlags = ARY_FLAG | REARG_FLAG,
	          bindFlags = BIND_FLAG | BIND_KEY_FLAG,
	          comboFlags = arityFlags | bindFlags | CURRY_BOUND_FLAG | CURRY_RIGHT_FLAG;

	      var isAry = bitmask & ARY_FLAG && !(srcBitmask & ARY_FLAG),
	          isRearg = bitmask & REARG_FLAG && !(srcBitmask & REARG_FLAG),
	          argPos = (isRearg ? data : source)[7],
	          ary = (isAry ? data : source)[8];

	      var isCommon = !(bitmask >= REARG_FLAG && srcBitmask > bindFlags) &&
	        !(bitmask > bindFlags && srcBitmask >= REARG_FLAG);

	      var isCombo = (newBitmask >= arityFlags && newBitmask <= comboFlags) &&
	        (bitmask < REARG_FLAG || ((isRearg || isAry) && argPos.length <= ary));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties specified
	     * by the `props` array.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `_.isPlainObject` which checks if `value`
	     * is an object created by the `Object` constructor or has a `[[Prototype]]`
	     * of `null`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     */
	    function shimIsPlainObject(value) {
	      var Ctor,
	          support = lodash.support;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
	          (!hasOwnProperty.call(value, 'constructor') &&
	            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
	    }

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length,
	          support = lodash.support;

	      var allowIndexes = length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isLength(value.length)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(+size || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(ceil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all values of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    function difference() {
	      var args = arguments,
	          index = -1,
	          length = args.length;

	      while (++index < length) {
	        var value = args[index];
	        if (isArray(value) || isArguments(value)) {
	          break;
	        }
	      }
	      return baseDifference(value, baseFlatten(args, false, true, ++index));
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length-- && predicate(array[length], length, array)) {}
	      return baseSlice(array, 0, length + 1);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var index = -1;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length && predicate(array[index], index, array)) {}
	      return baseSlice(array, index);
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for, instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length--) {
	        if (predicate(array[length], length, array)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]];
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4];
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep, false, 0) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4];
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true, false, 0) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
	     * it is used as the offset from the end of `array`. If `array` is sorted
	     * providing `true` for `fromIndex` performs a faster binary search.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value),
	            other = array[index];

	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values in all provided arrays using `SameValueZero`
	     * for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    function intersection() {
	      var args = [],
	          argsIndex = -1,
	          argsLength = arguments.length,
	          caches = [],
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf;

	      while (++argsIndex < argsLength) {
	        var value = arguments[argsIndex];
	        if (isArray(value) || isArguments(value)) {
	          args.push(value);
	          caches.push((isCommon && value.length >= 120) ? createCache(argsIndex && value) : null);
	        }
	      }
	      argsLength = args.length;
	      var array = args[0],
	          index = -1,
	          length = array ? array.length : 0,
	          result = [],
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          argsIndex = argsLength;
	          while (--argsIndex) {
	            var cache = caches[argsIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using `SameValueZero` for equality
	     * comparisons.
	     *
	     * **Notes:**
	     *  - Unlike `_.without`, this method mutates `array`.
	     *  - `SameValueZero` comparisons are like strict equality comparisons, e.g. `===`,
	     *    except that `NaN` matches `NaN`. See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     *    for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    function pullAt(array) {
	      return basePullAt(array || [], baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0,
	          result = [];

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          splice.call(array, index--, 1);
	          length--;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This function is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    function sortedIndex(array, value, iteratee, thisArg) {
	      var func = getCallback(iteratee);
	      return (func === baseCallback && iteratee == null)
	        ? binaryIndex(array, value)
	        : binaryIndexBy(array, value, func(iteratee, thisArg, 1));
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value, iteratee, thisArg) {
	      var func = getCallback(iteratee);
	      return (func === baseCallback && iteratee == null)
	        ? binaryIndex(array, value, true)
	        : binaryIndexBy(array, value, func(iteratee, thisArg, 1), true);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length-- && predicate(array[length], length, array)) {}
	      return baseSlice(array, length + 1);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var index = -1;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length && predicate(array[index], index, array)) {}
	      return baseSlice(array, 0, index);
	    }

	    /**
	     * Creates an array of unique values, in order, of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    function union() {
	      return baseUniq(baseFlatten(arguments, false, true, 0));
	    }

	    /**
	     * Creates a duplicate-value-free version of an array using `SameValueZero`
	     * for equality comparisons. Providing `true` for `isSorted` performs a faster
	     * search algorithm for sorted arrays. If an iteratee function is provided it
	     * is invoked for each value in the array to generate the criterion by which
	     * uniqueness is computed. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([1, 2, 1]);
	     * // => [1, 2]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
	        isSorted = false;
	      }
	      var func = getCallback();
	      if (!(func === baseCallback && iteratee == null)) {
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-`_.zip`
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      var index = -1,
	          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all provided values using `SameValueZero` for
	     * equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    function without(array) {
	      return baseDifference(array, baseSlice(arguments, 1));
	    }

	    /**
	     * Creates an array that is the symmetric difference of the provided arrays.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Symmetric_difference) for
	     * more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArray(array) || isArguments(array)) {
	          var result = result
	            ? baseDifference(result, array).concat(baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    function zip() {
	      var length = arguments.length,
	          array = Array(length);

	      while (length--) {
	        array[length] = arguments[length];
	      }
	      return unzip(array);
	    }

	    /**
	     * Creates an object composed from arrays of property names and values. Provide
	     * either a single two dimensional array, e.g. `[[key1, value1], [key2, value2]]`
	     * or two arrays, one of property names and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .last()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => [3]
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapper = wrapper.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapper.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapper = wrapper.plant(other);
	     *
	     * otherWrapper.value();
	     * // => [9, 16]
	     *
	     * wrapper.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        if (this.__actions__.length) {
	          value = new LazyWrapper(this);
	        }
	        return new LodashWrapper(value.reverse(), this.__chain__);
	      }
	      return this.thru(function(value) {
	        return value.reverse();
	      });
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
	     * // => ['fred', 'pebbles']
	     */
	    function at(collection) {
	      var length = collection ? collection.length : 0;
	      if (isLength(length)) {
	        collection = toIterable(collection);
	      }
	      return baseAt(collection, baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    function find(collection, predicate, thisArg) {
	      if (isArray(collection)) {
	        var index = findIndex(collection, predicate, thisArg);
	        return index > -1 ? collection[index] : undefined;
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    function findLast(collection, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection). Iterator functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a `length` property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    function forEach(collection, iteratee, thisArg) {
	      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, bindCallback(iteratee, thisArg, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).join(',');
	     * // => logs each value from right to left and returns the array
	     */
	    function forEachRight(collection, iteratee, thisArg) {
	      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, bindCallback(iteratee, thisArg, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using `SameValueZero` for equality
	     * comparisons. If `fromIndex` is negative, it is used as the offset from
	     * the end of `collection`.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (!length) {
	        return false;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      } else {
	        fromIndex = 0;
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
	        : (getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method named by `methodName` on each element in `collection`,
	     * returning an array of the results of each invoked method. Any additional
	     * arguments are provided to each invoked method. If `methodName` is a function
	     * it is invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|string} methodName The name of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    function invoke(collection, methodName) {
	      return baseInvoke(collection, methodName, baseSlice(arguments, 2));
	    }

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`, `drop`,
	     * `dropRight`, `fill`, `flatten`, `invert`, `max`, `min`, `parseInt`, `slice`,
	     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimLeft`, `trimRight`,
	     * `trunc`, `random`, `range`, `sample`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     *  create a `_.property` or `_.matches` style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the value of `key` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {string} key The key of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, key) {
	      return map(collection, baseProperty(key));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg`and invoked with four arguments;
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `merge`, and `sortAllBy`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator, thisArg) {
	      var func = isArray(collection) ? arrayReduce : baseReduce;
	      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator, thisArg) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce;
	      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var result = shuffle(collection);
	      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the Fisher-Yates
	     * shuffle. See [Wikipedia](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      collection = toIterable(collection);

	      var index = -1,
	          length = collection.length,
	          result = Array(length);

	      while (++index < length) {
	        var rand = baseRandom(0, index);
	        if (index != rand) {
	          result[index] = result[rand];
	        }
	        result[rand] = collection[index];
	      }
	      return result;
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? collection.length : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity] The function
	     *  invoked per iteration. If a property name or an object is provided it is
	     *  used to create a `_.property` or `_.matches` style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      var index = -1,
	          length = collection.length,
	          result = isLength(length) ? Array(length) : [];

	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = { 'criteria': iteratee(value, key, collection), 'index': index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it sorts by property names
	     * instead of an iteratee function.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(string|string[])} props The property names to sort by,
	     *  specified as individual property names or arrays of property names.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 26 },
	     *   { 'user': 'fred',   'age': 30 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
	     */
	    function sortByAll(collection) {
	      if (collection == null) {
	        return [];
	      }
	      var args = arguments,
	          guard = args[3];

	      if (guard && isIterateeCall(args[1], args[2], guard)) {
	        args = [collection, args[1]];
	      }
	      return baseSortByOrder(collection, baseFlatten(args, false, false, 1), []);
	    }

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the property names to sort by. A truthy value in `orders`
	     * will sort the corresponding property name in ascending order while a
	     * falsey value will sort it in descending order.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {string[]} props The property names to sort by.
	     * @param {boolean[]} orders The sort orders of `props`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 26 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 30 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
	     * // => [['barney', 36], ['barney', 26], ['fred', 40], ['fred', 30]]
	     */
	    function sortByOrder(collection, props, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(props, orders, guard)) {
	        orders = null;
	      }
	      if (!isArray(props)) {
	        props = props == null ? [] : [props];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, props, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = null;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        } else {
	          func = null;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the `length`
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    function bind(func, thisArg) {
	      var bitmask = BIND_FLAG;
	      if (arguments.length > 2) {
	        var partials = baseSlice(arguments, 2),
	            holders = replaceHolders(partials, bind.placeholder);

	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    }

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the `length` property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    function bindAll(object) {
	      return baseBindAll(object,
	        arguments.length > 1
	          ? baseFlatten(arguments, false, false, 1)
	          : functions(object)
	      );
	    }

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    function bindKey(object, key) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (arguments.length > 2) {
	        var partials = baseSlice(arguments, 2),
	            holders = replaceHolders(partials, bindKey.placeholder);

	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    }

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the `length` property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      if (guard && isIterateeCall(func, arity, guard)) {
	        arity = null;
	      }
	      var result = createWrapper(func, CURRY_FLAG, null, null, null, null, null, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the `length` property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      if (guard && isIterateeCall(func, arity, guard)) {
	        arity = null;
	      }
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, null, null, null, null, null, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a function that delays invoking `func` until after `wait` milliseconds
	     * have elapsed since the last time it was invoked. The created function comes
	     * with a `cancel` method to cancel delayed invocations. Provide an options
	     * object to indicate that `func` should be invoked on the leading and/or
	     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
	     * function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          if (maxTimeoutId) {
	            clearTimeout(maxTimeoutId);
	          }
	          var isCalled = trailingCall;
	          maxTimeoutId = timeoutId = trailingCall = undefined;
	          if (isCalled) {
	            lastCalled = now();
	            result = func.apply(thisArg, args);
	            if (!timeoutId && !maxTimeoutId) {
	              args = thisArg = null;
	            }
	          }
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (trailing || (maxWait !== wait)) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    function defer(func) {
	      return baseDelay(func, 1, arguments, 1);
	    }

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    function delay(func, wait) {
	      return baseDelay(func, wait, arguments, 2);
	    }

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createComposer();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createComposer(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the ES `Map` method interface
	     * of `get`, `has`, and `set`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            cache = memoized.cache,
	            key = resolver ? resolver.apply(this, args) : args[0];

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(func, 2);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the `length` property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    function partial(func) {
	      var partials = baseSlice(arguments, 1),
	          holders = replaceHolders(partials, partial.placeholder);

	      return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
	    }

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the `length` property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    function partialRight(func) {
	      var partials = baseSlice(arguments, 1),
	          holders = replaceHolders(partials, partialRight.placeholder);

	      return createWrapper(func, PARTIAL_RIGHT_FLAG, null, partials, holders);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    function rearg(func) {
	      var indexes = baseFlatten(arguments, false, false, 1);
	      return createWrapper(func, REARG_FLAG, null, null, null, indexes);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and the array of arguments provided to the created
	     * function much like [Function#apply](http://es5.github.io/#x15.3.4.3).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {*} Returns the new function.
	     * @example
	     *
	     * var spread = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * spread(['Fred', 'hello']);
	     * // => 'Fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a function that only invokes `func` at most once per every `wait`
	     * milliseconds. The created function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the throttled function return the result of the last
	     * `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      debounceOptions.leading = leading;
	      debounceOptions.maxWait = +wait;
	      debounceOptions.trailing = trailing;
	      return debounce(func, wait, debounceOptions);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the structured clone algorithm.
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, isDeep, customizer);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the structured clone algorithm.
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, true, customizer);
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      var length = isObjectLike(value) ? value.length : undefined;
	      return (isLength(length) && objToString.call(value) == argsTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return (value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return (isObjectLike(value) && objToString.call(value) == dateTag) || false;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return (value && value.nodeType === 1 && isObjectLike(value) &&
	        (objToString.call(value).indexOf('Element') > -1)) || false;
	    }
	    // Fallback for environments without DOM support.
	    if (!support.dom) {
	      isElement = function(value) {
	        return (value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value)) || false;
	      };
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      var length = value.length;
	      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments; (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
	        return value === other;
	      }
	      var result = customizer ? customizer(value, other) : undefined;
	      return typeof result == 'undefined' ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return (isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag) || false;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on ES `Number.isFinite`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    var isFinite = nativeNumIsFinite || function(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    };

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return objToString.call(value) == funcTag;
	    };

	    /**
	     * Checks if `value` is the language type of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return type == 'function' || (value && type == 'object') || false;
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments; (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      var props = keys(source),
	          length = props.length;

	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return object != null && value === object[key] && hasOwnProperty.call(object, key);
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = values[length] = source[props[length]];
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as native `isNaN` which returns `true`
	     * for `undefined` and other non-numeric values. See the [ES5 spec](https://es5.github.io/#x15.1.2.4)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (objToString.call(value) == funcTag) {
	        return reNative.test(fnToString.call(value));
	      }
	      return (isObjectLike(value) && reHostCtor.test(value)) || false;
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag) || false;
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
	      if (!(value && objToString.call(value) == objectTag)) {
	        return false;
	      }
	      var valueOf = value.valueOf,
	          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

	      return objProto
	        ? (value == objProto || getPrototypeOf(value) == objProto)
	        : shimIsPlainObject(value);
	    };

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return typeof value == 'undefined';
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? value.length : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments;
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return typeof value == 'undefined' ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(baseAssign);

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = null;
	      }
	      return properties ? baseCopy(properties, result, keys(properties)) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    function defaults(object) {
	      if (object == null) {
	        return object;
	      }
	      var args = arrayCopy(arguments);
	      args.push(assignDefaults);
	      return assign.apply(undefined, args);
	    }

	    /**
	     * This method is like `_.findIndex` except that it returns the key of the
	     * first element `predicate` returns truthy for, instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(object, predicate, baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(object, predicate, baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments; (value, key, object). Iterator functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    function forIn(object, iteratee, thisArg) {
	      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
	        iteratee = bindCallback(iteratee, thisArg, 3);
	      }
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    function forInRight(object, iteratee, thisArg) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	      return baseForRight(object, iteratee, keysIn);
	    }

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments; (value, key, object). Iterator functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    function forOwn(object, iteratee, thisArg) {
	      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
	        iteratee = bindCallback(iteratee, thisArg, 3);
	      }
	      return baseForOwn(object, iteratee);
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    function forOwnRight(object, iteratee, thisArg) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Checks if `key` exists as a direct property of `object` instead of an
	     * inherited property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 3 };
	     *
	     * _.has(object, 'b');
	     * // => true
	     */
	    function has(object, key) {
	      return object ? hasOwnProperty.call(object, key) : false;
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = null;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      if (object) {
	        var Ctor = object.constructor,
	            length = object.length;
	      }
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && (length && isLength(length)))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee, thisArg) {
	      var result = {};
	      iteratee = getCallback(iteratee, thisArg, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments; (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If `predicate` is provided it is invoked for each property
	     * of `object` omitting the properties `predicate` returns truthy for. The
	     * predicate is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    function omit(object, predicate, thisArg) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof predicate != 'function') {
	        var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      predicate = bindCallback(predicate, thisArg, 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    }

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    function pick(object, predicate, thisArg) {
	      if (object == null) {
	        return {};
	      }
	      return typeof predicate == 'function'
	        ? pickByCallback(object, bindCallback(predicate, thisArg, 3))
	        : pickByArray(object, baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Resolves the value of property `key` on `object`. If the value of `key` is
	     * a function it is invoked with the `this` binding of `object` and its result
	     * is returned, else the property value is returned. If the property value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the property value
	     *  resolves to `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': _.constant(40) };
	     *
	     * _.result(object, 'user');
	     * // => 'fred'
	     *
	     * _.result(object, 'age');
	     * // => 40
	     *
	     * _.result(object, 'status', 'busy');
	     * // => 'busy'
	     *
	     * _.result(object, 'status', _.constant('busy'));
	     * // => 'busy'
	     */
	    function result(object, key, defaultValue) {
	      var value = object == null ? undefined : object[key];
	      if (typeof value == 'undefined') {
	        value = defaultValue;
	      }
	      return isFunction(value) ? value.call(object) : value;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments; (accumulator, value, key, object). Iterator functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (typeof end === 'undefined') {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= start && value < end;
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = null;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to camel case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/CamelCase) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting latin-1 supplementary letters to basic latin letters.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter);
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = typeof position == 'undefined'
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't require escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#102](https://html5sec.org/#102),
	     * [#108](https://html5sec.org/#108), and [#133](https://html5sec.org/#133) of
	     * the [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always quote attribute values to reduce
	     * XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
	     * "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to kebab case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles) for
	     * more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it is shorter then the given
	     * padding length. The `chars` string may be truncated if the number of padding
	     * characters can't be evenly divided by the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = floor(mid),
	          rightLength = ceil(mid);

	      chars = createPad('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it is shorter then the given padding
	     * length. The `chars` string may be truncated if the number of padding
	     * characters exceeds the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    function padLeft(string, length, chars) {
	      string = baseToString(string);
	      return string && (createPad(string, length, chars) + string);
	    }

	    /**
	     * Pads `string` on the right side if it is shorter then the given padding
	     * length. The `chars` string may be truncated if the number of padding
	     * characters exceeds the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    function padRight(string, length, chars) {
	      string = baseToString(string);
	      return string && (string + createPad(string, length, chars));
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the ES5 implementation of `parseInt`.
	     * See the [ES5 spec](https://es5.github.io/#E) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard && isIterateeCall(string, radix, guard)) {
	        radix = 0;
	      }
	      return nativeParseInt(string, radix);
	    }
	    // Fallback for environments with pre-ES5 implementations.
	    if (nativeParseInt(whitespace + '08') != 8) {
	      parseInt = function(string, radix, guard) {
	        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	        // Chrome fails to trim leading <BOM> whitespace characters.
	        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	          radix = 0;
	        } else if (radix) {
	          radix = +radix;
	        }
	        string = trim(string);
	        return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));
	      };
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = floor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to snake case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Snake_case) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to start case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes sourceURLs for easier debugging.
	     * See the [HTML5 Rocks article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for more details.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = null;
	      }
	      string = baseToString(string);
	      options = baseAssign(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = baseAssign(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar]
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it is longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * //=> 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = null;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = null;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    function attempt() {
	      var func = arguments[0],
	          length = arguments.length,
	          args = Array(length ? (length - 1) : 0);

	      while (--length > 0) {
	        args[length - 1] = arguments[length];
	      }
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = null;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function which performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function which compares the property value of `key` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} key The key of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    function matchesProperty(key, value) {
	      return baseMatchesProperty(key + '', baseClone(value, true));
	    }

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=this] object The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * // use `_.runInContext` to avoid potential conflicts (esp. in Node.js)
	     * var _ = require('lodash').runInContext();
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj && keys(source),
	            methodNames = props && props.length && baseFunctions(source, props);

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__);
	                (result.__actions__ = arrayCopy(this.__actions__)).push({
	                  'func': func,
	                  'args': arguments,
	                  'thisArg': object
	                });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              var args = [this.value()];
	              push.apply(args, arguments);
	              return func.apply(object, args);
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      context._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function which returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function which returns the property value of `key` on a given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * var getName = _.property('user');
	     *
	     * _.map(users, getName);
	     * // => ['fred', barney']
	     *
	     * _.pluck(_.sortBy(users, getName), 'user');
	     * // => ['barney', 'fred']
	     */
	    function property(key) {
	      return baseProperty(key + '');
	    }

	    /**
	     * The inverse of `_.property`; this method creates a function which returns
	     * the property value of a given key on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to inspect.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'a': 3, 'b': 1, 'c': 2 };
	     *
	     * _.map(['a', 'c'], _.propertyOf(object));
	     * // => [3, 2]
	     *
	     * _.sortBy(['a', 'b', 'c'], _.propertyOf(object));
	     * // => ['b', 'c', 'a']
	     */
	    function propertyOf(object) {
	      return function(key) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `start` is less than `end`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = null;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(ceil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2` respectively
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = +n;

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return augend + addend;
	    }

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 };
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 };
	     */
	    var max = createExtremum(arrayMax);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 };
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 };
	     */
	    var min = createExtremum(arrayMin, true);

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6, 2]);
	     * // => 12
	     *
	     * _.sum({ 'a': 4, 'b': 6, 'c': 2 });
	     * // => 12
	     */
	    function sum(collection) {
	      if (!isArray(collection)) {
	        collection = toIterable(collection);
	      }
	      var length = collection.length,
	          result = 0;

	      while (length--) {
	        result += +collection[length] || 0;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
	      var isFilter = type != LAZY_MAP_FLAG,
	          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var filtered = this.__filtered__,
	            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
	            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

	        iteratees.push({
	          'done': false,
	          'count': 0,
	          'index': 0,
	          'iteratee': getCallback(iteratee, thisArg, 1),
	          'limit': -1,
	          'type': type
	        });

	        result.__filtered__ = filtered || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      var whileName = methodName + 'While';

	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__,
	            result = (filtered && !index) ? this.dropWhile() : this.clone();

	        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
	        if (filtered) {
	          if (index) {
	            result.__takeCount__ = nativeMin(result.__takeCount__, n);
	          } else {
	            last(result.__iteratees__).limit = n;
	          }
	        } else {
	          var views = result.__views__ || (result.__views__ = []);
	          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };

	      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
	        return this.reverse()[whileName](predicate, thisArg).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : baseProperty;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

	      if (typeof end != 'undefined') {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.drop(0);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName],
	          checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments,
	            length = args.length,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // avoid lazy use if the iteratee has a `length` other than `1`
	          isLazy = useLazy = false;
	        }
	        var onlyLazy = isLazy && !isHybrid;
	        if (retUnwrapped && !chainAll) {
	          return onlyLazy
	            ? func.call(value)
	            : lodashFunc.call(lodash, this.value());
	        }
	        var interceptor = function(value) {
	          var otherArgs = [value];
	          push.apply(otherArgs, args);
	          return lodashFunc.apply(lodash, otherArgs);
	        };
	        if (useLazy) {
	          var wrapper = onlyLazy ? value : new LazyWrapper(this),
	              result = func.apply(wrapper, args);

	          if (!retUnwrapped && (isHybrid || result.__actions__)) {
	            var actions = result.__actions__ || (result.__actions__ = []);
	            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
	          }
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Narwhal or Rhino -require.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */

	/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */

	function exclude () {
	  var excludes = [].slice.call(arguments);

	  function excludeProps (res, obj) {
	    Object.keys(obj).forEach(function (key) {
	      if (!~excludes.indexOf(key)) res[key] = obj[key];
	    });
	  }

	  return function extendExclude () {
	    var args = [].slice.call(arguments)
	      , i = 0
	      , res = {};

	    for (; i < args.length; i++) {
	      excludeProps(res, args[i]);
	    }

	    return res;
	  };
	};

	/*!
	 * Primary Exports
	 */

	module.exports = AssertionError;

	/**
	 * ### AssertionError
	 *
	 * An extension of the JavaScript `Error` constructor for
	 * assertion and validation scenarios.
	 *
	 * @param {String} message
	 * @param {Object} properties to include (optional)
	 * @param {callee} start stack function (optional)
	 */

	function AssertionError (message, _props, ssf) {
	  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
	    , props = extend(_props || {});

	  // default values
	  this.message = message || 'Unspecified AssertionError';
	  this.showDiff = false;

	  // copy from properties
	  for (var key in props) {
	    this[key] = props[key];
	  }

	  // capture stack trace
	  ssf = ssf || arguments.callee;
	  if (ssf && Error.captureStackTrace) {
	    Error.captureStackTrace(this, ssf);
	  }
	}

	/*!
	 * Inherit from Error.prototype
	 */

	AssertionError.prototype = Object.create(Error.prototype);

	/*!
	 * Statically set name
	 */

	AssertionError.prototype.name = 'AssertionError';

	/*!
	 * Ensure correct constructor
	 */

	AssertionError.prototype.constructor = AssertionError;

	/**
	 * Allow errors to be converted to JSON for static transfer.
	 *
	 * @param {Boolean} include stack (default: `true`)
	 * @return {Object} object that can be `JSON.stringify`
	 */

	AssertionError.prototype.toJSON = function (stack) {
	  var extend = exclude('constructor', 'toJSON', 'stack')
	    , props = extend({ name: this.name }, this);

	  // include stack if exists and not turned off
	  if (false !== stack && this.stack) {
	    props.stack = this.stack;
	  }

	  return props;
	};


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(36);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(94);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(36);

	var CSSCore = __webpack_require__(279);
	var ReactTransitionEvents = __webpack_require__(280);

	var onlyChild = __webpack_require__(80);
	var warning = __webpack_require__(91);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(62);
	var ReactFragment = __webpack_require__(41);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(78);
	var emptyFunction = __webpack_require__(94);
	var joinClasses = __webpack_require__(281);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(98);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(78);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(282);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(218);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(283);
	var EventPluginUtils = __webpack_require__(61);

	var accumulateInto = __webpack_require__(284);
	var forEachAccumulated = __webpack_require__(285);
	var invariant = __webpack_require__(98);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPluginHub = __webpack_require__(105);

	var accumulateInto = __webpack_require__(284);
	var forEachAccumulated = __webpack_require__(285);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactInstanceMap = __webpack_require__(110);

	var invariant = __webpack_require__(98);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPluginHub = __webpack_require__(105);
	var EventPluginRegistry = __webpack_require__(283);
	var ReactEventEmitterMixin = __webpack_require__(286);
	var ViewportMetrics = __webpack_require__(287);

	var assign = __webpack_require__(78);
	var isEventSupported = __webpack_require__(288);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(289);
	var ReactContext = __webpack_require__(65);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactElement = __webpack_require__(67);
	var ReactElementValidator = __webpack_require__(68);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactLifeCycle = __webpack_require__(215);
	var ReactNativeComponent = __webpack_require__(220);
	var ReactPerf = __webpack_require__(74);
	var ReactPropTypeLocations = __webpack_require__(216);
	var ReactPropTypeLocationNames = __webpack_require__(217);
	var ReactReconciler = __webpack_require__(76);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);
	var emptyObject = __webpack_require__(219);
	var invariant = __webpack_require__(98);
	var shouldUpdateReactComponent = __webpack_require__(259);
	var warning = __webpack_require__(91);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      renderedElement = this._renderValidatedComponent();
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._processChildContext(context)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._processChildContext(context)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        context
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function() {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._processChildContext(
	      this._currentElement._context
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);

	var assign = __webpack_require__(78);
	var emptyFunction = __webpack_require__(94);
	var getEventTarget = __webpack_require__(290);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var React = _interopRequire(__webpack_require__(24));

	var _ = _interopRequire(__webpack_require__(86));

	var DebugStateRow = (function (_React$Component) {
	  function DebugStateRow() {
	    _classCallCheck(this, DebugStateRow);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(DebugStateRow, _React$Component);

	  _createClass(DebugStateRow, {
	    render: {
	      value: function render() {
	        var _props = this.props;
	        var title = _props.title;
	        var data = _props.data;

	        return React.createElement(
	          "tr",
	          null,
	          React.createElement(
	            "td",
	            null,
	            _.capitalize(title)
	          ),
	          React.createElement(
	            "td",
	            null,
	            "" + _.capitalize(data)
	          )
	        );
	      }
	    }
	  });

	  return DebugStateRow;
	})(React.Component);

	;

	DebugStateRow.propTypes = {
	  title: React.PropTypes.string,
	  data: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.bool])
	};

	DebugStateRow.defaultProps = {
	  data: "---"
	};

	module.exports = DebugStateRow;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "debugStateRow.jsx" + ": " + err.message); } }); } } })(); }

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	"use strict";

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

	var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

	var AppDispatcher = _interopRequire(__webpack_require__(31));

	var EventEmitter = __webpack_require__(276).EventEmitter;

	var _ = _interopRequire(__webpack_require__(86));

	var CHANGE_EVENT = "CHANGE";

	var Store = (function (_EventEmitter) {
	  function Store() {
	    _classCallCheck(this, Store);

	    this.dispatcherIndex = AppDispatcher.register(_.bind(this.handleAction, this));
	  }

	  _inherits(Store, _EventEmitter);

	  _createClass(Store, {
	    emitChange: {
	      value: function emitChange() {
	        this.emit(CHANGE_EVENT);
	      }
	    },
	    addChangeListener: {
	      value: function addChangeListener(callback) {
	        this.on(CHANGE_EVENT, callback);
	      }
	    },
	    removeChangeListener: {
	      value: function removeChangeListener(callback) {
	        this.removeListener(CHANGE_EVENT, callback);
	      }
	    }
	  });

	  return Store;
	})(EventEmitter);

	module.exports = Store;

	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/home/yeehaa/Documents/test_react/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "BaseStore.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : afrikaans (af)
	// author : Werner Mollentze : https://github.com/wernerm

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });
	}));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Moroccan Arabic (ar-ma)
	// author : ElFadili Yassine : https://github.com/ElFadiliY
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Arabic Saudi Arabia (ar-sa)
	// author : Suhail Alkowaileet : https://github.com/xsoh

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    return moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale  : Tunisian Arabic (ar-tn)

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'LT:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY LT',
	            LLLL: 'dddd D MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// Locale: Arabic (ar)
	// Author: Abdel Said: https://github.com/abdelsaid
	// Changes in months, weekdays: Ahmed Elkhatib
	// Native plural forms: forabi https://github.com/forabi

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];

	    return moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : azerbaijani (az)
	// author : topchiyev : https://github.com/topchiyev

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',

	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',

	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',

	        6: '-ncı',

	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',

	        60: '-ıncı',
	        90: '-ıncı'
	    };
	    return moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;

	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : belarusian (be)
	// author : Dmitry Demidov : https://github.com/demidov91
	// author: Praleska: http://praleska.pro/
	// Author : Menelion Elensúle : https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
	            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
	        },

	        nounCase = (/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/).test(format) ?
	            'accusative' :
	            'nominative';

	        return weekdays[nounCase][m.day()];
	    }

	    return moment.defineLocale('be', {
	        months : monthsCaseReplace,
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., LT',
	            LLLL : 'dddd, D MMMM YYYY г., LT'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },

	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : bulgarian (bg)
	// author : Krasen Borisov : https://github.com/kraz

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Bengali (bn)
	// author : Kaushik Gandhi : https://github.com/kaushikgandhi

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    return moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split('_'),
	        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কএক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|শকাল|দুপুর|বিকেল|রাত/,
	        isPM: function (input) {
	            return /^(দুপুর|বিকেল|রাত)$/.test(input);
	        },
	        //Bengali is a vast language its spoken
	        //in different forms in various parts of the world.
	        //I have just generalized with most common one used
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'শকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকেল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : tibetan (bo)
	// author : Thupten N. Chakrishar : https://github.com/vajradog

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };

	    return moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        isPM: function (input) {
	            return /^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : breton (br)
	// author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }

	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	        }
	    }

	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }

	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }

	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    return moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY LT',
	            LLLL : 'dddd, D [a viz] MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : bosnian (bs)
	// author : Nedim Cholich : https://github.com/frontyard
	// based on (hr) translation by Bojan Marković

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    return moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : catalan (ca)
	// author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : czech (cs)
	// author : petrbela : https://github.com/petrbela

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');

	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	        }
	    }

	    return moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : chuvash (cv)
	// author : Anatoly Mironov : https://github.com/mirontoli

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('cv', {
	        months : 'кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кĕç_эрн_шăм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кç_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]',
	            LLL : 'YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT',
	            LLLL : 'dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ĕнер] LT [сехетре]',
	            nextWeek: '[Çитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнĕ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /çул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пĕр-ик çеккунт',
	            m : 'пĕр минут',
	            mm : '%d минут',
	            h : 'пĕр сехет',
	            hh : '%d сехет',
	            d : 'пĕр кун',
	            dd : '%d кун',
	            M : 'пĕр уйăх',
	            MM : '%d уйăх',
	            y : 'пĕр çул',
	            yy : '%d çул'
	        },
	        ordinalParse: /\d{1,2}-мĕш/,
	        ordinal : '%d-мĕш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Welsh (cy)
	// author : Robert Allen

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'LT:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY LT',
	            LLLL: 'dddd, D MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];

	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }

	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : danish (da)
	// author : Ulrik Nielsen : https://github.com/mrbase

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd [d.] D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : austrian german (de-at)
	// author : lluchs : https://github.com/lluchs
	// author: Menelion Elensúle: https://github.com/Oire
	// author : Martin Groller : https://github.com/MadMG

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    return moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[Morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[Gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : german (de)
	// author : lluchs : https://github.com/lluchs
	// author: Menelion Elensúle: https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    return moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[Morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[Gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : modern greek (el)
	// author : Aggelos Karalias : https://github.com/mehiel

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();

	            if (typeof output === 'function') {
	                output = output.apply(mom);
	            }

	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : australian english (en-au)

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : canadian english (en-ca)
	// author : Jonathan Abourbih : https://github.com/jonbca

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM, YYYY',
	            LLL : 'D MMMM, YYYY LT',
	            LLLL : 'dddd, D MMMM, YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });
	}));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : great britain english (en-gb)
	// author : Chris Gedrim : https://github.com/chrisgedrim

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : esperanto (eo)
	// author : Colin Dean : https://github.com/colindean
	// komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY LT',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY LT'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : spanish (es)
	// author : Julio Napurí : https://github.com/julionc

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    return moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mi_Ju_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY LT',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY LT'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : estonian (et)
	// author : Henry Kehlmann : https://github.com/madhenry
	// improvements : Illimar Tambek : https://github.com/ragulka

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    return moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'LT:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : euskara (eu)
	// author : Eneko Illarramendi : https://github.com/eillarra

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] LT',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] LT',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] LT',
	            llll : 'ddd, YYYY[ko] MMM D[a] LT'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Persian (fa)
	// author : Ebrahim Byagowi : https://github.com/ebraminio

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    return moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : finnish (fi)
	// author : Tarmo Aidantausta : https://github.com/bleadof

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }

	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    return moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] LT',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] LT',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] LT',
	            llll : 'ddd, Do MMM YYYY, [klo] LT'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : faroese (fo)
	// author : Ragnar Johannesen : https://github.com/ragnar123

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D. MMMM, YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : canadian french (fr-ca)
	// author : Jonathan Abourbih : https://github.com/jonbca

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        }
	    });
	}));


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : french (fr)
	// author : John Fischer : https://github.com/jfroffice

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : frisian (fy)
	// author : Robin van der Vliet : https://github.com/robin0van0der0v

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	    return moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : galician (gl)
	// author : Juan G. Hurtado : https://github.com/juanghurtado

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('gl', {
	        months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
	        monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
	        weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
	        weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str === 'uns segundos') {
	                    return 'nuns segundos';
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Hebrew (he)
	// author : Tomer Cohen : https://github.com/tomer
	// author : Moshe Simantov : https://github.com/DevelopmentIL
	// author : Tal Ater : https://github.com/TalAter

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY LT',
	            LLLL : 'dddd, D [ב]MMMM YYYY LT',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY LT',
	            llll : 'ddd, D MMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        }
	    });
	}));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : hindi (hi)
	// author : Mayank Singhal : https://github.com/mayanksinghal

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : hrvatski (hr)
	// author : Bojan Marković : https://github.com/bmarkovic

	// based on (sl) translation by Robert Sedovšek

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	        }
	    }

	    return moment.defineLocale('hr', {
	        months : 'sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
	        monthsShort : 'sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : hungarian (hu)
	// author : Adam Brunner : https://github.com/adambrunner

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;

	        switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }

	        return '';
	    }

	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    return moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D., LT',
	            LLLL : 'YYYY. MMMM D., dddd LT'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Armenian (hy-am)
	// author : Armendarabyan : https://github.com/armendarabyan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
	            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');

	        return monthsShort[m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');

	        return weekdays[m.day()];
	    }

	    return moment.defineLocale('hy-am', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., LT',
	            LLLL : 'dddd, D MMMM YYYY թ., LT'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },

	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },

	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Bahasa Indonesia (id)
	// author : Mohammad Satrio Utomo : https://github.com/tyok
	// reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'LT.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] LT',
	            LLLL : 'dddd, D MMMM YYYY [pukul] LT'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : icelandic (is)
	// author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    return moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] LT',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] LT'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : italian (it)
	// author : Lorenzo : https://github.com/aliem
	// author: Mattia Larentis: https://github.com/nostalgiaz

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'D_L_Ma_Me_G_V_S'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : japanese (ja)
	// author : LI Long : https://github.com/baryon

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'LTs秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日LT',
	            LLLL : 'YYYY年M月D日LT dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });
	}));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Georgian (ka)
	// author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },

	        nounCase = (/D[oD] *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
	        },

	        nounCase = (/(წინა|შემდეგ)/).test(format) ?
	            'accusative' :
	            'nominative';

	        return weekdays[nounCase][m.day()];
	    }

	    return moment.defineLocale('ka', {
	        months : monthsCaseReplace,
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }

	            if (number === 1) {
	                return number + '-ლი';
	            }

	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }

	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });
	}));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : khmer (km)
	// author : Kruy Vanna : https://github.com/kruyvanna

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'LT:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY LT',
	            LLLL: 'dddd, D MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : korean (ko)
	//
	// authors
	//
	// - Kyungwook, Park : https://github.com/kyungw00k
	// - Jeeeyul Lee <jeeeyul@gmail.com>
	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 LT',
	            LLLL : 'YYYY년 MMMM D일 dddd LT'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한달',
	            MM : '%d달',
	            y : '일년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });
	}));


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Luxembourgish (lb)
	// author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

	// Note: Luxembourgish has a very particular phonological rule ('Eifeler Regel') that causes the
	// deletion of the final 'n' in certain contexts. That's what the 'eifelerRegelAppliesToWeekday'
	// and 'eifelerRegelAppliesToNumber' methods are meant for

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }

	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }

	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    return moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY LT',
	            LLLL: 'dddd, D. MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Lithuanian (lt)
	// author : Mindaugas Mozūras : https://github.com/mmozuras

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    },
	    weekDays = 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_');

	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }

	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }

	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }

	    function forms(key) {
	        return units[key].split('_');
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }

	    function relativeWeekDay(moment, format) {
	        var nominative = format.indexOf('dddd HH:mm') === -1,
	            weekDay = weekDays[moment.day()];

	        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + 'į';
	    }

	    return moment.defineLocale('lt', {
	        months : 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : relativeWeekDay,
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], LT [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, LT [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], LT [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, LT [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : latvian (lv)
	// author : Kristaps Karlsons : https://github.com/skakri

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var units = {
	        'mm': 'minūti_minūtes_minūte_minūtes',
	        'hh': 'stundu_stundas_stunda_stundas',
	        'dd': 'dienu_dienas_diena_dienas',
	        'MM': 'mēnesi_mēnešus_mēnesis_mēneši',
	        'yy': 'gadu_gadus_gads_gadi'
	    };

	    function format(word, number, withoutSuffix) {
	        var forms = word.split('_');
	        if (withoutSuffix) {
	            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
	        } else {
	            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
	        }
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }

	    return moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, LT',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, LT'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s vēlāk',
	            past : '%s agrāk',
	            s : 'dažas sekundes',
	            m : 'minūti',
	            mm : relativeTimeWithPlural,
	            h : 'stundu',
	            hh : relativeTimeWithPlural,
	            d : 'dienu',
	            dd : relativeTimeWithPlural,
	            M : 'mēnesi',
	            MM : relativeTimeWithPlural,
	            y : 'gadu',
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : macedonian (mk)
	// author : Borislav Mickov : https://github.com/B0k0

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : 'dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Во изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Во изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : malayalam (ml)
	// author : Floyd Pink : https://github.com/floydpink

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        isPM : function (input) {
	            return /^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });
	}));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Marathi (mr)
	// author : Harshad Kale : https://github.com/kalehv

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s नंतर',
	            past : '%s पूर्वी',
	            s : 'सेकंद',
	            m: 'एक मिनिट',
	            mm: '%d मिनिटे',
	            h : 'एक तास',
	            hh : '%d तास',
	            d : 'एक दिवस',
	            dd : '%d दिवस',
	            M : 'एक महिना',
	            MM : '%d महिने',
	            y : 'एक वर्ष',
	            yy : '%d वर्षे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower)
	        {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Bahasa Malaysia (ms-MY)
	// author : Weldan Jamili : https://github.com/weldan

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'LT.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] LT',
	            LLLL : 'dddd, D MMMM YYYY [pukul] LT'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Burmese (my)
	// author : Squar team, mysquar.com

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };
	    return moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY LT',
	            LLLL: 'dddd D MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : norwegian bokmål (nb)
	// authors : Espen Hovlandsdal : https://github.com/rexxars
	//           Sigurd Gartmann : https://github.com/sigurdga

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tirs_ons_tors_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'H.mm',
	            LTS : 'LT.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] LT',
	            LLLL : 'dddd D. MMMM YYYY [kl.] LT'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : nepali/nepalese
	// author : suvash : https://github.com/suvash

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    return moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split('_'),
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राती|बिहान|दिउँसो|बेलुका|साँझ|राती/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राती') {
	                return hour < 3 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'बेलुका' || meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राती';
	            } else if (hour < 10) {
	                return 'बिहान';
	            } else if (hour < 15) {
	                return 'दिउँसो';
	            } else if (hour < 18) {
	                return 'बेलुका';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राती';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोली] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडी',
	            s : 'केही समय',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : dutch (nl)
	// author : Joris Röling : https://github.com/jjupiter

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    return moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : norwegian nynorsk (nn)
	// author : https://github.com/mechuwind

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'for %s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : polish (pl)
	// author : Rafal Hirsz : https://github.com/evoL

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');

	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }

	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    return moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'N_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : brazilian portuguese (pt-br)
	// author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('pt-br', {
	        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays : 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),
	        weekdaysShort : 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
	        weekdaysMin : 'dom_2ª_3ª_4ª_5ª_6ª_sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] LT',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] LT'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });
	}));


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : portuguese (pt)
	// author : Jefferson : https://github.com/jalex79

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('pt', {
	        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
	        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays : 'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split('_'),
	        weekdaysShort : 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
	        weekdaysMin : 'dom_2ª_3ª_4ª_5ª_6ª_sáb'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY LT',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : romanian (ro)
	// author : Vlad Gurdiga : https://github.com/gurdiga
	// author : Valentin Agachi : https://github.com/avaly

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }

	        return number + separator + format[key];
	    }

	    return moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : russian (ru)
	// author : Viktorminator : https://github.com/Viktorminator
	// Author : Menelion Elensúle : https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function monthsShortCaseReplace(m, format) {
	        var monthsShort = {
	            'nominative': 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
	        },

	        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return monthsShort[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
	        },

	        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/).test(format) ?
	            'accusative' :
	            'nominative';

	        return weekdays[nounCase][m.day()];
	    }

	    return moment.defineLocale('ru', {
	        months : monthsCaseReplace,
	        monthsShort : monthsShortCaseReplace,
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., LT',
	            LLLL : 'dddd, D MMMM YYYY г., LT'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function () {
	                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },

	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },

	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },

	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : slovak (sk)
	// author : Martin Minka : https://github.com/k2s
	// based on work of petrbela : https://github.com/petrbela

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');

	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }

	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	        }
	    }

	    return moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : slovenian (sl)
	// author : Robert Sedovšek : https://github.com/sedovsek

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2) {
	                result += 'minuti';
	            } else if (number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minut';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += 'ura';
	            } else if (number === 2) {
	                result += 'uri';
	            } else if (number === 3 || number === 4) {
	                result += 'ure';
	            } else {
	                result += 'ur';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dni';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mesec';
	            } else if (number === 2) {
	                result += 'meseca';
	            } else if (number === 3 || number === 4) {
	                result += 'mesece';
	            } else {
	                result += 'mesecev';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'leto';
	            } else if (number === 2) {
	                result += 'leti';
	            } else if (number === 3 || number === 4) {
	                result += 'leta';
	            } else {
	                result += 'let';
	            }
	            return result;
	        }
	    }

	    return moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'LT:ss',
	            L : 'DD. MM. YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY LT',
	            LLLL : 'dddd, D. MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[prejšnja] dddd [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : '%s nazaj',
	            s      : 'nekaj sekund',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'en dan',
	            dd     : translate,
	            M      : 'en mesec',
	            MM     : translate,
	            y      : 'eno leto',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Albanian (sq)
	// author : Flakërim Ismani : https://github.com/flakerimi
	// author: Menelion Elensúle: https://github.com/Oire (tests)
	// author : Oerd Cukalla : https://github.com/oerd (fixes)

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Serbian-cyrillic (sr-cyrl)
	// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    return moment.defineLocale('sr-cyrl', {
	        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
	        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
	        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
	        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
	        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'LT:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY LT',
	            LLLL: 'dddd, D. MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Serbian-latin (sr)
	// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    return moment.defineLocale('sr', {
	        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
	        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
	        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
	        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
	        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'LT:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY LT',
	            LLLL: 'dddd, D. MMMM YYYY LT'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : swedish (sv)
	// author : Jens Alm : https://github.com/ulmus

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: 'dddd LT',
	            lastWeek: '[Förra] dddd[en] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : tamil (ta)
	// author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    /*var symbolMap = {
	            '1': '௧',
	            '2': '௨',
	            '3': '௩',
	            '4': '௪',
	            '5': '௫',
	            '6': '௬',
	            '7': '௭',
	            '8': '௮',
	            '9': '௯',
	            '0': '௦'
	        },
	        numberMap = {
	            '௧': '1',
	            '௨': '2',
	            '௩': '3',
	            '௪': '4',
	            '௫': '5',
	            '௬': '6',
	            '௭': '7',
	            '௮': '8',
	            '௯': '9',
	            '௦': '0'
	        }; */

	    return moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, LT',
	            LLLL : 'dddd, D MMMM YYYY, LT'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	/*        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },*/
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },


	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : thai (th)
	// author : Kridsada Thanabulpong : https://github.com/sirn

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        longDateFormat : {
	            LT : 'H นาฬิกา m นาที',
	            LTS : 'LT s วินาที',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา LT',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา LT'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });
	}));


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Tagalog/Filipino (tl-ph)
	// author : Dan Hagman

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY LT',
	            LLLL : 'dddd, MMMM DD, YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : turkish (tr)
	// authors : Erhan Gundogan : https://github.com/erhangundogan,
	//           Burak Yiğit Kaya: https://github.com/BYK

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',

	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',

	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',

	        6: '\'ncı',

	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',

	        60: '\'ıncı',
	        90: '\'ıncı'
	    };

	    return moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd, D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;

	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : Morocco Central Atlas Tamaziɣt (tzm)
	// author : Abdel Said : https://github.com/abdelsaid

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'dddd D MMMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : ukrainian (uk)
	// author : zemlanin : https://github.com/zemlanin
	// Author : Menelion Elensúle : https://github.com/Oire

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }

	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'хвилина_хвилини_хвилин',
	            'hh': 'година_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    function monthsCaseReplace(m, format) {
	        var months = {
	            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
	            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
	        },

	        nounCase = (/D[oD]? *MMMM?/).test(format) ?
	            'accusative' :
	            'nominative';

	        return months[nounCase][m.month()];
	    }

	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },

	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');

	        return weekdays[nounCase][m.day()];
	    }

	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    return moment.defineLocale('uk', {
	        months : monthsCaseReplace,
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., LT',
	            LLLL : 'dddd, D MMMM YYYY р., LT'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },

	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },

	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	            }
	        },

	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : uzbek (uz)
	// author : Sardor Muminov : https://github.com/muminoff

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('uz', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY LT',
	            LLLL : 'D MMMM YYYY, dddd LT'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : vietnamese (vi)
	// author : Bang Nguyen : https://github.com/bangnk

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'LT:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY LT',
	            LLLL : 'dddd, D MMMM [năm] YYYY LT',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY LT',
	            llll : 'ddd, D MMM YYYY LT'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : chinese (zh-cn)
	// author : suupic : https://github.com/suupic
	// author : Zeno Zeng : https://github.com/zenozeng

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日LT',
	            LLLL : 'YYYY年MMMD日ddddLT',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日LT',
	            llll : 'YYYY年MMMD日ddddLT'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1分钟',
	            mm : '%d分钟',
	            h : '1小时',
	            hh : '%d小时',
	            d : '1天',
	            dd : '%d天',
	            M : '1个月',
	            MM : '%d个月',
	            y : '1年',
	            yy : '%d年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });
	}));


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// moment.js locale configuration
	// locale : traditional chinese (zh-tw)
	// author : Ben : https://github.com/ben-lin

	(function (factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(37)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	    } else if (typeof exports === 'object') {
	        module.exports = factory(require('../moment')); // Node
	    } else {
	        factory((typeof global !== 'undefined' ? global : this).moment); // node or other global
	    }
	}(function (moment) {
	    return moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日LT',
	            LLLL : 'YYYY年MMMD日ddddLT',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日LT',
	            llll : 'YYYY年MMMD日ddddLT'
	        },
	        meridiemParse: /早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '一分鐘',
	            mm : '%d分鐘',
	            h : '一小時',
	            hh : '%d小時',
	            d : '一天',
	            dd : '%d天',
	            M : '一個月',
	            MM : '%d個月',
	            y : '一年',
	            yy : '%d年'
	        }
	    });
	}));


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - test utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(200);

	/**
	 * # test(object, expression)
	 *
	 * Test and object for expression.
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , expr = args[0];
	  return negate ? !expr : expr;
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - type utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Detectable javascript natives
	 */

	var natives = {
	    '[object Arguments]': 'arguments'
	  , '[object Array]': 'array'
	  , '[object Date]': 'date'
	  , '[object Function]': 'function'
	  , '[object Number]': 'number'
	  , '[object RegExp]': 'regexp'
	  , '[object String]': 'string'
	};

	/**
	 * ### type(object)
	 *
	 * Better implementation of `typeof` detection that can
	 * be used cross-browser. Handles the inconsistencies of
	 * Array, `null`, and `undefined` detection.
	 *
	 *     utils.type({}) // 'object'
	 *     utils.type(null) // `null'
	 *     utils.type(undefined) // `undefined`
	 *     utils.type([]) // `array`
	 *
	 * @param {Mixed} object to detect type of
	 * @name type
	 * @api private
	 */

	module.exports = function (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	};


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - message composition utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var flag = __webpack_require__(200)
	  , getActual = __webpack_require__(197)
	  , inspect = __webpack_require__(198)
	  , objDisplay = __webpack_require__(199);

	/**
	 * ### .getMessage(object, message, negateMessage)
	 *
	 * Construct the error message based on flags
	 * and template tags. Template tags will return
	 * a stringified inspection of the object referenced.
	 *
	 * Message template tags:
	 * - `#{this}` current asserted object
	 * - `#{act}` actual value
	 * - `#{exp}` expected value
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @name getMessage
	 * @api public
	 */

	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , val = flag(obj, 'object')
	    , expected = args[3]
	    , actual = getActual(obj, args)
	    , msg = negate ? args[2] : args[1]
	    , flagMsg = flag(obj, 'message');

	  if(typeof msg === "function") msg = msg();
	  msg = msg || '';
	  msg = msg
	    .replace(/#{this}/g, objDisplay(val))
	    .replace(/#{act}/g, objDisplay(actual))
	    .replace(/#{exp}/g, objDisplay(expected));

	  return flagMsg ? flagMsg + ': ' + msg : msg;
	};


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getActual utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getActual(object, [actual])
	 *
	 * Returns the `actual` value for an Assertion
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */

	module.exports = function (obj, args) {
	  return args.length > 4 ? args[4] : obj._obj;
	};


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// This is (almost) directly from Node.js utils
	// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

	var getName = __webpack_require__(205);
	var getProperties = __webpack_require__(291);
	var getEnumerableProperties = __webpack_require__(292);

	module.exports = inspect;

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
	 *    properties of objects.
	 * @param {Number} depth Depth in which to descend in object. Default is 2.
	 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
	 *    output. Default is false (no coloring).
	 */
	function inspect(obj, showHidden, depth, colors) {
	  var ctx = {
	    showHidden: showHidden,
	    seen: [],
	    stylize: function (str) { return str; }
	  };
	  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
	}

	// Returns true if object is a DOM element.
	var isDOMElement = function (object) {
	  if (typeof HTMLElement === 'object') {
	    return object instanceof HTMLElement;
	  } else {
	    return object &&
	      typeof object === 'object' &&
	      object.nodeType === 1 &&
	      typeof object.nodeName === 'string';
	  }
	};

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (value && typeof value.inspect === 'function' &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (typeof ret !== 'string') {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // If this is a DOM element, try to get the outer HTML.
	  if (isDOMElement(value)) {
	    if ('outerHTML' in value) {
	      return value.outerHTML;
	      // This value does not have an outerHTML attribute,
	      //   it could still be an XML element
	    } else {
	      // Attempt to serialize it
	      try {
	        if (document.xmlVersion) {
	          var xmlSerializer = new XMLSerializer();
	          return xmlSerializer.serializeToString(value);
	        } else {
	          // Firefox 11- do not support outerHTML
	          //   It does, however, support innerHTML
	          //   Use the following to render the element
	          var ns = "http://www.w3.org/1999/xhtml";
	          var container = document.createElementNS(ns, '_');

	          container.appendChild(value.cloneNode(false));
	          html = container.innerHTML
	            .replace('><', '>' + value.innerHTML + '<');
	          container.innerHTML = '';
	          return html;
	        }
	      } catch (err) {
	        // This could be a non-native DOM implementation,
	        //   continue with the normal flow:
	        //   printing the element as if it is an object.
	      }
	    }
	  }

	  // Look up the keys of the object.
	  var visibleKeys = getEnumerableProperties(value);
	  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

	  // Some type of object without properties can be shortcutted.
	  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
	  // a `stack` plus `description` property; ignore those for consistency.
	  if (keys.length === 0 || (isError(value) && (
	      (keys.length === 1 && keys[0] === 'stack') ||
	      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
	     ))) {
	    if (typeof value === 'function') {
	      var name = getName(value);
	      var nameSuffix = name ? ': ' + name : '';
	      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (typeof value === 'function') {
	    var name = getName(value);
	    var nameSuffix = name ? ': ' + name : '';
	    base = ' [Function' + nameSuffix + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    return formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  switch (typeof value) {
	    case 'undefined':
	      return ctx.stylize('undefined', 'undefined');

	    case 'string':
	      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                               .replace(/'/g, "\\'")
	                                               .replace(/\\"/g, '"') + '\'';
	      return ctx.stylize(simple, 'string');

	    case 'number':
	      if (value === 0 && (1/value) === -Infinity) {
	        return ctx.stylize('-0', 'number');
	      }
	      return ctx.stylize('' + value, 'number');

	    case 'boolean':
	      return ctx.stylize('' + value, 'boolean');
	  }
	  // For some reason typeof null is "object", so special case here.
	  if (value === null) {
	    return ctx.stylize('null', 'null');
	  }
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str;
	  if (value.__lookupGetter__) {
	    if (value.__lookupGetter__(key)) {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Getter/Setter]', 'special');
	      } else {
	        str = ctx.stylize('[Getter]', 'special');
	      }
	    } else {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Setter]', 'special');
	      }
	    }
	  }
	  if (visibleKeys.indexOf(key) < 0) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(value[key]) < 0) {
	      if (recurseTimes === null) {
	        str = formatValue(ctx, value[key], null);
	      } else {
	        str = formatValue(ctx, value[key], recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (typeof name === 'undefined') {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}

	function isArray(ar) {
	  return Array.isArray(ar) ||
	         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
	}

	function isRegExp(re) {
	  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
	}

	function isDate(d) {
	  return typeof d === 'object' && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return typeof e === 'object' && objectToString(e) === '[object Error]';
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependancies
	 */

	var inspect = __webpack_require__(198);
	var config = __webpack_require__(52);

	/**
	 * ### .objDisplay (object)
	 *
	 * Determines if an object or an array matches
	 * criteria to be inspected in-line for error
	 * messages or should be truncated.
	 *
	 * @param {Mixed} javascript object to inspect
	 * @name objDisplay
	 * @api public
	 */

	module.exports = function (obj) {
	  var str = inspect(obj)
	    , type = Object.prototype.toString.call(obj);

	  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
	    if (type === '[object Function]') {
	      return !obj.name || obj.name === ''
	        ? '[Function]'
	        : '[Function: ' + obj.name + ']';
	    } else if (type === '[object Array]') {
	      return '[ Array(' + obj.length + ') ]';
	    } else if (type === '[object Object]') {
	      var keys = Object.keys(obj)
	        , kstr = keys.length > 2
	          ? keys.splice(0, 2).join(', ') + ', ...'
	          : keys.join(', ');
	      return '{ Object (' + kstr + ') }';
	    } else {
	      return str;
	    }
	  } else {
	    return str;
	  }
	};


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### flag(object, key, [value])
	 *
	 * Get or set a flag value on an object. If a
	 * value is provided it will be set, else it will
	 * return the currently set value or `undefined` if
	 * the value is not set.
	 *
	 *     utils.flag(this, 'foo', 'bar'); // setter
	 *     utils.flag(this, 'foo'); // getter, returns `bar`
	 *
	 * @param {Object} object constructed Assertion
	 * @param {String} key
	 * @param {Mixed} value (optional)
	 * @name flag
	 * @api private
	 */

	module.exports = function (obj, key, value) {
	  var flags = obj.__flags || (obj.__flags = Object.create(null));
	  if (arguments.length === 3) {
	    flags[key] = value;
	  } else {
	    return flags[key];
	  }
	};


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - transferFlags utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### transferFlags(assertion, object, includeAll = true)
	 *
	 * Transfer all the flags for `assertion` to `object`. If
	 * `includeAll` is set to `false`, then the base Chai
	 * assertion flags (namely `object`, `ssfi`, and `message`)
	 * will not be transferred.
	 *
	 *
	 *     var newAssertion = new Assertion();
	 *     utils.transferFlags(assertion, newAssertion);
	 *
	 *     var anotherAsseriton = new Assertion(myObj);
	 *     utils.transferFlags(assertion, anotherAssertion, false);
	 *
	 * @param {Assertion} assertion the assertion to transfer the flags from
	 * @param {Object} object the object to transfer the flags to; usually a new assertion
	 * @param {Boolean} includeAll
	 * @name transferFlags
	 * @api private
	 */

	module.exports = function (assertion, object, includeAll) {
	  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

	  if (!object.__flags) {
	    object.__flags = Object.create(null);
	  }

	  includeAll = arguments.length === 3 ? includeAll : true;

	  for (var flag in flags) {
	    if (includeAll ||
	        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
	      object.__flags[flag] = flags[flag];
	    }
	  }
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathValue utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * @see https://github.com/logicalparadox/filtr
	 * MIT Licensed
	 */

	var getPathInfo = __webpack_require__(203);

	/**
	 * ### .getPathValue(path, object)
	 *
	 * This allows the retrieval of values in an
	 * object given a string path.
	 *
	 *     var obj = {
	 *         prop1: {
	 *             arr: ['a', 'b', 'c']
	 *           , str: 'Hello'
	 *         }
	 *       , prop2: {
	 *             arr: [ { nested: 'Universe' } ]
	 *           , str: 'Hello again!'
	 *         }
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     getPathValue('prop1.str', obj); // Hello
	 *     getPathValue('prop1.att[2]', obj); // b
	 *     getPathValue('prop2.arr[0].nested', obj); // Universe
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} value or `undefined`
	 * @name getPathValue
	 * @api public
	 */
	module.exports = function(path, obj) {
	  var info = getPathInfo(path, obj);
	  return info.value;
	}; 


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathInfo utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var hasProperty = __webpack_require__(204);

	/**
	 * ### .getPathInfo(path, object)
	 *
	 * This allows the retrieval of property info in an
	 * object given a string path.
	 *
	 * The path info consists of an object with the
	 * following properties:
	 *
	 * * parent - The parent object of the property referenced by `path`
	 * * name - The name of the final property, a number if it was an array indexer
	 * * value - The value of the property, if it exists, otherwise `undefined`
	 * * exists - Whether the property exists or not
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} info
	 * @name getPathInfo
	 * @api public
	 */

	module.exports = function getPathInfo(path, obj) {
	  var parsed = parsePath(path),
	      last = parsed[parsed.length - 1];

	  var info = {
	    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,
	    name: last.p || last.i,
	    value: _getPathValue(parsed, obj),
	  };
	  info.exists = hasProperty(info.name, info.parent);

	  return info;
	};


	/*!
	 * ## parsePath(path)
	 *
	 * Helper function used to parse string object
	 * paths. Use in conjunction with `_getPathValue`.
	 *
	 *      var parsed = parsePath('myobject.property.subprop');
	 *
	 * ### Paths:
	 *
	 * * Can be as near infinitely deep and nested
	 * * Arrays are also valid using the formal `myobject.document[3].property`.
	 *
	 * @param {String} path
	 * @returns {Object} parsed
	 * @api private
	 */

	function parsePath (path) {
	  var str = path.replace(/\[/g, '.[')
	    , parts = str.match(/(\\\.|[^.]+?)+/g);
	  return parts.map(function (value) {
	    var re = /\[(\d+)\]$/
	      , mArr = re.exec(value);
	    if (mArr) return { i: parseFloat(mArr[1]) };
	    else return { p: value };
	  });
	}


	/*!
	 * ## _getPathValue(parsed, obj)
	 *
	 * Helper companion function for `.parsePath` that returns
	 * the value located at the parsed address.
	 *
	 *      var value = getPathValue(parsed, obj);
	 *
	 * @param {Object} parsed definition from `parsePath`.
	 * @param {Object} object to search against
	 * @param {Number} object to search against
	 * @returns {Object|Undefined} value
	 * @api private
	 */

	function _getPathValue (parsed, obj, index) {
	  var tmp = obj
	    , res;

	  index = (index === undefined ? parsed.length : index);

	  for (var i = 0, l = index; i < l; i++) {
	    var part = parsed[i];
	    if (tmp) {
	      if ('undefined' !== typeof part.p)
	        tmp = tmp[part.p];
	      else if ('undefined' !== typeof part.i)
	        tmp = tmp[part.i];
	      if (i == (l - 1)) res = tmp;
	    } else {
	      res = undefined;
	    }
	  }
	  return res;
	}


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - hasProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var type = __webpack_require__(195);

	/**
	 * ### .hasProperty(object, name)
	 *
	 * This allows checking whether an object has
	 * named property or numeric array index.
	 *
	 * Basically does the same thing as the `in`
	 * operator but works properly with natives
	 * and null/undefined values.
	 *
	 *     var obj = {
	 *         arr: ['a', 'b', 'c']
	 *       , str: 'Hello'
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     hasProperty('str', obj);  // true
	 *     hasProperty('constructor', obj);  // true
	 *     hasProperty('bar', obj);  // false
	 *     
	 *     hasProperty('length', obj.str); // true
	 *     hasProperty(1, obj.str);  // true
	 *     hasProperty(5, obj.str);  // false
	 *
	 *     hasProperty('length', obj.arr);  // true
	 *     hasProperty(2, obj.arr);  // true
	 *     hasProperty(3, obj.arr);  // false
	 *
	 * @param {Objuect} object
	 * @param {String|Number} name
	 * @returns {Boolean} whether it exists
	 * @name getPathInfo
	 * @api public
	 */

	var literals = {
	    'number': Number
	  , 'string': String
	};

	module.exports = function hasProperty(name, obj) {
	  var ot = type(obj);

	  // Bad Object, obviously no props at all
	  if(ot === 'null' || ot === 'undefined')
	    return false;

	  // The `in` operator does not work with certain literals
	  // box these before the check
	  if(literals[ot] && typeof obj !== 'object')
	    obj = new literals[ot](obj);

	  return name in obj;
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getName utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * # getName(func)
	 *
	 * Gets the name of a function, in a cross-browser way.
	 *
	 * @param {Function} a function (usually a constructor)
	 */

	module.exports = function (func) {
	  if (func.name) return func.name;

	  var match = /^\s?function ([^(]*)\(/.exec(func);
	  return match && match[1] ? match[1] : "";
	};


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### addProperty (ctx, name, getter)
	 *
	 * Adds a property to the prototype of an object.
	 *
	 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.instanceof(Foo);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.foo;
	 *
	 * @param {Object} ctx object to which the property is added
	 * @param {String} name of property to add
	 * @param {Function} getter function to be used for name
	 * @name addProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter.call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	var config = __webpack_require__(52);

	/**
	 * ### .addMethod (ctx, name, method)
	 *
	 * Adds a method to the prototype of an object.
	 *
	 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for name
	 * @name addMethod
	 * @api public
	 */
	var flag = __webpack_require__(200);

	module.exports = function (ctx, name, method) {
	  ctx[name] = function () {
	    var old_ssfi = flag(this, 'ssfi');
	    if (old_ssfi && config.includeStack === false)
	      flag(this, 'ssfi', ctx[name]);
	    var result = method.apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteProperty (ctx, name, fn)
	 *
	 * Overwites an already existing property getter and provides
	 * access to previous value. Must return function to use as getter.
	 *
	 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
	 *       return function () {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.name).to.equal('bar');
	 *         } else {
	 *           _super.call(this);
	 *         }
	 *       }
	 *     });
	 *
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.ok;
	 *
	 * @param {Object} ctx object whose property is to be overwritten
	 * @param {String} name of property to overwrite
	 * @param {Function} getter function that returns a getter function to be used for name
	 * @name overwriteProperty
	 * @api public
	 */

	module.exports = function (ctx, name, getter) {
	  var _get = Object.getOwnPropertyDescriptor(ctx, name)
	    , _super = function () {};

	  if (_get && 'function' === typeof _get.get)
	    _super = _get.get

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter(_super).call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteMethod (ctx, name, fn)
	 *
	 * Overwites an already existing method and provides
	 * access to previous function. Must return function
	 * to be used for name.
	 *
	 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
	 *       return function (str) {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.value).to.equal(str);
	 *         } else {
	 *           _super.apply(this, arguments);
	 *         }
	 *       }
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.equal('bar');
	 *
	 * @param {Object} ctx object whose method is to be overwritten
	 * @param {String} name of method to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @name overwriteMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method) {
	  var _method = ctx[name]
	    , _super = function () { return this; };

	  if (_method && 'function' === typeof _method)
	    _super = _method;

	  ctx[name] = function () {
	    var result = method(_super).apply(this, arguments);
	    return result === undefined ? this : result;
	  }
	};


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addChainingMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var transferFlags = __webpack_require__(201);
	var flag = __webpack_require__(200);
	var config = __webpack_require__(52);

	/*!
	 * Module variables
	 */

	// Check whether `__proto__` is supported
	var hasProtoSupport = '__proto__' in Object;

	// Without `__proto__` support, this module will need to add properties to a function.
	// However, some Function.prototype methods cannot be overwritten,
	// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
	var excludeNames = /^(?:length|name|arguments|caller)$/;

	// Cache `Function` properties
	var call  = Function.prototype.call,
	    apply = Function.prototype.apply;

	/**
	 * ### addChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Adds a method to an object, such that the method can also be chained.
	 *
	 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
	 *
	 * The result can then be used as both a method assertion, executing both `method` and
	 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *     expect(fooStr).to.be.foo.equal('foo');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for `name`, when called
	 * @param {Function} chainingBehavior function to be called every time the property is accessed
	 * @name addChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  if (typeof chainingBehavior !== 'function') {
	    chainingBehavior = function () { };
	  }

	  var chainableBehavior = {
	      method: method
	    , chainingBehavior: chainingBehavior
	  };

	  // save the methods so we can overwrite them later, if we need to.
	  if (!ctx.__methods) {
	    ctx.__methods = {};
	  }
	  ctx.__methods[name] = chainableBehavior;

	  Object.defineProperty(ctx, name,
	    { get: function () {
	        chainableBehavior.chainingBehavior.call(this);

	        var assert = function assert() {
	          var old_ssfi = flag(this, 'ssfi');
	          if (old_ssfi && config.includeStack === false)
	            flag(this, 'ssfi', assert);
	          var result = chainableBehavior.method.apply(this, arguments);
	          return result === undefined ? this : result;
	        };

	        // Use `__proto__` if available
	        if (hasProtoSupport) {
	          // Inherit all properties from the object by replacing the `Function` prototype
	          var prototype = assert.__proto__ = Object.create(this);
	          // Restore the `call` and `apply` methods from `Function`
	          prototype.call = call;
	          prototype.apply = apply;
	        }
	        // Otherwise, redefine all properties (slow!)
	        else {
	          var asserterNames = Object.getOwnPropertyNames(ctx);
	          asserterNames.forEach(function (asserterName) {
	            if (!excludeNames.test(asserterName)) {
	              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
	              Object.defineProperty(assert, asserterName, pd);
	            }
	          });
	        }

	        transferFlags(this, assert);
	        return assert;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteChainableMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Overwites an already existing chainable method
	 * and provides access to the previous function or
	 * property.  Must return functions to be used for
	 * name.
	 *
	 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
	 *       function (_super) {
	 *       }
	 *     , function (_super) {
	 *       }
	 *     );
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.have.length(3);
	 *     expect(myFoo).to.have.length.above(3);
	 *
	 * @param {Object} ctx object whose method / property is to be overwritten
	 * @param {String} name of method / property to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @param {Function} chainingBehavior function that returns a function to be used for property
	 * @name overwriteChainableMethod
	 * @api public
	 */

	module.exports = function (ctx, name, method, chainingBehavior) {
	  var chainableBehavior = ctx.__methods[name];

	  var _chainingBehavior = chainableBehavior.chainingBehavior;
	  chainableBehavior.chainingBehavior = function () {
	    var result = chainingBehavior(_chainingBehavior).call(this);
	    return result === undefined ? this : result;
	  };

	  var _method = chainableBehavior.method;
	  chainableBehavior.method = function () {
	    var result = method(_method).apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(67);
	var ReactFragment = __webpack_require__(41);
	var ReactInstanceHandles = __webpack_require__(72);

	var getIteratorFn = __webpack_require__(221);
	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(215);
	var ReactCurrentOwner = __webpack_require__(66);
	var ReactElement = __webpack_require__(67);
	var ReactInstanceMap = __webpack_require__(110);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(218);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(101);

	var quoteAttributeValueForBrowser = __webpack_require__(293);
	var warning = __webpack_require__(91);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(239);
	var ReactMount = __webpack_require__(73);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(294);
	var DOMProperty = __webpack_require__(101);
	var DOMPropertyOperations = __webpack_require__(223);
	var ReactBrowserEventEmitter = __webpack_require__(108);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(224);
	var ReactMount = __webpack_require__(73);
	var ReactMultiChild = __webpack_require__(295);
	var ReactPerf = __webpack_require__(74);

	var assign = __webpack_require__(78);
	var escapeTextContentForBrowser = __webpack_require__(226);
	var invariant = __webpack_require__(98);
	var isEventSupported = __webpack_require__(288);
	var keyOf = __webpack_require__(100);
	var warning = __webpack_require__(91);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML.__html != null,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit http://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(props.dangerouslySetInnerHTML.__html != null));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPropagators = __webpack_require__(106);
	var ExecutionEnvironment = __webpack_require__(81);
	var FallbackCompositionState = __webpack_require__(297);
	var SyntheticCompositionEvent = __webpack_require__(298);
	var SyntheticInputEvent = __webpack_require__(299);

	var keyOf = __webpack_require__(100);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPluginHub = __webpack_require__(105);
	var EventPropagators = __webpack_require__(106);
	var ExecutionEnvironment = __webpack_require__(81);
	var ReactUpdates = __webpack_require__(43);
	var SyntheticEvent = __webpack_require__(111);

	var isEventSupported = __webpack_require__(288);
	var isTextInputElement = __webpack_require__(296);
	var keyOf = __webpack_require__(100);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(100);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPropagators = __webpack_require__(106);
	var SyntheticMouseEvent = __webpack_require__(300);

	var ReactMount = __webpack_require__(73);
	var keyOf = __webpack_require__(100);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(101);
	var ExecutionEnvironment = __webpack_require__(81);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);

	var emptyFunction = __webpack_require__(94);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(79);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(43);
	var Transaction = __webpack_require__(97);

	var assign = __webpack_require__(78);
	var emptyFunction = __webpack_require__(94);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(301);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var keyMirror = __webpack_require__(218);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var LocalEventTrapMixin = __webpack_require__(302);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var LocalEventTrapMixin = __webpack_require__(302);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(294);
	var DOMChildrenOperations = __webpack_require__(303);
	var DOMPropertyOperations = __webpack_require__(223);
	var ReactMount = __webpack_require__(73);
	var ReactPerf = __webpack_require__(74);

	var invariant = __webpack_require__(98);
	var setInnerHTML = __webpack_require__(258);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var LocalEventTrapMixin = __webpack_require__(302);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(301);
	var DOMPropertyOperations = __webpack_require__(223);
	var LinkedValueUtils = __webpack_require__(304);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);
	var ReactMount = __webpack_require__(73);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var warning = __webpack_require__(91);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(301);
	var LinkedValueUtils = __webpack_require__(304);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    options[0].selected = true;
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(301);
	var DOMPropertyOperations = __webpack_require__(223);
	var LinkedValueUtils = __webpack_require__(304);
	var ReactBrowserComponentMixin = __webpack_require__(234);
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);

	var warning = __webpack_require__(91);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(305);
	var ExecutionEnvironment = __webpack_require__(81);
	var PooledClass = __webpack_require__(96);
	var ReactInstanceHandles = __webpack_require__(72);
	var ReactMount = __webpack_require__(73);
	var ReactUpdates = __webpack_require__(43);

	var assign = __webpack_require__(78);
	var getEventTarget = __webpack_require__(290);
	var getUnboundedScrollPosition = __webpack_require__(306);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(101);
	var EventPluginHub = __webpack_require__(105);
	var ReactComponentEnvironment = __webpack_require__(289);
	var ReactClass = __webpack_require__(64);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactBrowserEventEmitter = __webpack_require__(108);
	var ReactNativeComponent = __webpack_require__(220);
	var ReactDOMComponent = __webpack_require__(225);
	var ReactPerf = __webpack_require__(74);
	var ReactRootIndex = __webpack_require__(253);
	var ReactUpdates = __webpack_require__(43);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(95);
	var PooledClass = __webpack_require__(96);
	var ReactBrowserEventEmitter = __webpack_require__(108);
	var ReactInputSelection = __webpack_require__(307);
	var ReactPutListenerQueue = __webpack_require__(308);
	var Transaction = __webpack_require__(97);

	var assign = __webpack_require__(78);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPropagators = __webpack_require__(106);
	var ReactInputSelection = __webpack_require__(307);
	var SyntheticEvent = __webpack_require__(111);

	var getActiveElement = __webpack_require__(309);
	var isTextInputElement = __webpack_require__(296);
	var keyOf = __webpack_require__(100);
	var shallowEqual = __webpack_require__(88);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(104);
	var EventPluginUtils = __webpack_require__(61);
	var EventPropagators = __webpack_require__(106);
	var SyntheticClipboardEvent = __webpack_require__(310);
	var SyntheticEvent = __webpack_require__(111);
	var SyntheticFocusEvent = __webpack_require__(311);
	var SyntheticKeyboardEvent = __webpack_require__(312);
	var SyntheticMouseEvent = __webpack_require__(300);
	var SyntheticDragEvent = __webpack_require__(313);
	var SyntheticTouchEvent = __webpack_require__(314);
	var SyntheticUIEvent = __webpack_require__(315);
	var SyntheticWheelEvent = __webpack_require__(316);

	var getEventCharCode = __webpack_require__(317);

	var invariant = __webpack_require__(98);
	var keyOf = __webpack_require__(100);
	var warning = __webpack_require__(91);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(101);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(64);
	var ReactElement = __webpack_require__(67);

	var invariant = __webpack_require__(98);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(318);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(319);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(109);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactNativeComponent = __webpack_require__(220);

	var assign = __webpack_require__(78);
	var invariant = __webpack_require__(98);
	var warning = __webpack_require__(91);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(91);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(320);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);
	var CallbackQueue = __webpack_require__(95);
	var ReactPutListenerQueue = __webpack_require__(308);
	var Transaction = __webpack_require__(97);

	var assign = __webpack_require__(78);
	var emptyFunction = __webpack_require__(94);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var _name = {

	    firstName: function () {
	      if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
	        // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
	        // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
	        var rand = faker.random.number(1);
	        if (rand === 0) {
	          return faker.random.array_element(faker.locales[faker.locale].name.male_first_name)
	        } else {
	          return faker.random.array_element(faker.locales[faker.locale].name.female_first_name)
	        }
	      }
	      return faker.random.array_element(faker.definitions.name.first_name)
	    },

	    lastName: function () {
	      if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.defintions.name.female_last_name !== "undefined") {
	        // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
	        // see above comment of firstName method
	        var rand = faker.random.number(1);
	        if (rand === 0) {
	          return faker.random.array_element(faker.locales[faker.locale].name.male_last_name);
	        } else {
	          return faker.random.array_element(faker.locales[faker.locale].name.female_last_name);
	        }
	      }
	      return faker.random.array_element(faker.definitions.name.last_name);
	    },

	    findName: function (firstName, lastName) {
	        var r = faker.random.number(8);
	        firstName = firstName || faker.name.firstName();
	        lastName = lastName || faker.name.lastName();
	        switch (r) {
	        case 0:
	            return faker.name.prefix() + " " + firstName + " " + lastName;
	        case 1:
	            return firstName + " " + lastName + " " + faker.name.suffix();
	        }

	        return firstName + " " + lastName;
	    },

	    prefix: function () {
	        return faker.random.array_element(faker.definitions.name.prefix);
	    },

	    suffix: function () {
	        return faker.random.array_element(faker.definitions.name.suffix);
	    },

	};

	module.exports = _name;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var Helpers = __webpack_require__(270);
	var faker = __webpack_require__(85);

	var address = {
	    zipCode: function () {
	        return Helpers.replaceSymbolWithNumber(faker.random.array_element(["#####", '#####-####']));
	    },

	    city: function () {
	        var result;
	        switch (faker.random.number(3)) {
	        case 0:
	            result = faker.address.cityPrefix() + " " + faker.name.firstName() + faker.address.citySuffix();
	            break;
	        case 1:
	            result = faker.address.cityPrefix() + " " + faker.name.firstName();
	            break;
	        case 2:
	            result = faker.name.firstName() + faker.address.citySuffix();
	            break;
	        case 3:
	            result = faker.name.lastName() + faker.address.citySuffix();
	            break;
	        }
	        return result;
	    },

	    cityPrefix: function () {
	      return faker.random.array_element(faker.definitions.address.city_prefix);
	    },

	    citySuffix: function () {
	      return faker.random.array_element(faker.definitions.address.city_suffix);
	    },

	    streetName: function () {
	        var result;
	        switch (faker.random.number(1)) {
	        case 0:
	            result = faker.name.lastName() + " " + faker.address.streetSuffix();
	            break;
	        case 1:
	            result = faker.name.firstName() + " " + faker.address.streetSuffix();
	            break;
	        }
	        return result;
	    },

	    //
	    // TODO: change all these methods that accept a boolean to instead accept an options hash.
	    //
	    streetAddress: function (useFullAddress) {
	        if (useFullAddress === undefined) { useFullAddress = false; }
	        var address = "";
	        switch (faker.random.number(2)) {
	        case 0:
	            address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
	            break;
	        case 1:
	            address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
	            break;
	        case 2:
	            address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
	            break;
	        }
	        return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
	    },

	    streetSuffix: function () {
	        return faker.random.array_element(faker.definitions.address.street_suffix);
	    },

	    secondaryAddress: function () {
	        return Helpers.replaceSymbolWithNumber(faker.random.array_element(
	            [
	                'Apt. ###',
	                'Suite ###'
	            ]
	        ));
	    },

	    county: function () {
	      return faker.random.array_element(faker.definitions.address.county);
	    },

	    country: function () {
	      return faker.random.array_element(faker.definitions.address.country);
	    },

	    state: function (useAbbr) {
	        return faker.random.array_element(faker.definitions.address.state);
	    },

	    stateAbbr: function () {
	        return faker.random.array_element(faker.definitions.address.state_abbr);
	    },

	    latitude: function () {
	        return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
	    },

	    longitude: function () {
	        return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
	    }
	};

	module.exports = address;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var phone = {
	    phoneNumber: function (format) {
	        format = format || faker.phone.phoneFormats();
	        return faker.helpers.replaceSymbolWithNumber(format);
	    },

	    // FIXME: this is strange passing in an array index.
	    phoneNumberFormat: function (phoneFormatsArrayIndex) {
	        phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
	        return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
	    },

	    phoneFormats: function () {
	      return faker.random.array_element(faker.definitions.phone_number.formats);
	    }

	};

	module.exports = phone;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85),
	    password_generator = __webpack_require__(321),
	    random_ua = __webpack_require__(322);

	var internet = {

	    avatar: function () {
	        return faker.random.array_element(faker.definitions.internet.avatar_uri);
	    },

	    email: function (firstName, lastName, provider) {
	        provider = provider || faker.random.array_element(faker.definitions.internet.free_email);
	        return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
	    },

	    userName: function (firstName, lastName) {
	        var result;
	        firstName = firstName || faker.name.firstName();
	        lastName = lastName || faker.name.lastName();
	        switch (faker.random.number(2)) {
	        case 0:
	            result = firstName + faker.random.number(99);
	            break;
	        case 1:
	            result = firstName + faker.random.array_element([".", "_"]) + lastName;
	            break;
	        case 2:
	            result = firstName + faker.random.array_element([".", "_"]) + lastName + faker.random.number(99);
	            break;
	        }
	        result = result.replace(/'/g, "");
	        result = result.replace(/ /g, "");
	        return result;
	    },

	    domainName: function () {
	        return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
	    },

	    domainSuffix: function () {
	        return faker.random.array_element(faker.definitions.internet.domain_suffix);
	    },

	    domainWord:  function () {
	        return faker.name.firstName().replace(/([^A-Z0-9._%+-])/ig, '').toLowerCase();
	    },

	    ip: function () {
	        var randNum = function () {
	            return (faker.random.number(255)).toFixed(0);
	        };

	        var result = [];
	        for (var i = 0; i < 4; i++) {
	            result[i] = randNum();
	        }

	        return result.join(".");
	    },

	    userAgent: function () {
	      return random_ua.generate();
	    },

	    color: function (baseRed255, baseGreen255, baseBlue255) {
	        baseRed255 = baseRed255 || 0;
	        baseGreen255 = baseGreen255 || 0;
	        baseBlue255 = baseBlue255 || 0;
	        // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
	        var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
	        var green = Math.floor((faker.random.number(256) + baseRed255) / 2);
	        var blue = Math.floor((faker.random.number(256) + baseRed255) / 2);
	        var redStr = red.toString(16);
	        var greenStr = green.toString(16);
	        var blueStr = blue.toString(16);
	        return '#' +
	          (redStr.length === 1 ? '0' : '') + redStr +
	          (greenStr.length === 1 ? '0' : '') + greenStr +
	          (blueStr.length === 1 ? '0': '') + blueStr;

	    },

	    password: function (len, memorable, pattern, prefix) {
	      len = len || 15;
	      if (typeof memorable === "undefined") {
	        memorable = false;
	      }
	      return password_generator(len, memorable, pattern, prefix);
	    }
	};

	module.exports = internet;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var company = {

	    suffixes: function () {
	        return ["Inc", "and Sons", "LLC", "Group", "and Daughters"];
	    },

	    companyName: function (format) {
	        switch ((format ? format : faker.random.number(2))) {
	        case 0:
	            return faker.name.lastName() + " " + faker.company.companySuffix();
	        case 1:
	            return faker.name.lastName() + "-" + faker.name.lastName();
	        case 2:
	            return faker.name.lastName() + ", " + faker.name.lastName() + " and " + faker.name.lastName();
	        }
	    },

	    companySuffix: function () {
	        return faker.random.array_element(faker.company.suffixes());
	    },

	    catchPhrase: function () {
	        return faker.company.catchPhraseAdjective() + " " +
	            faker.company.catchPhraseDescriptor() + " " +
	            faker.company.catchPhraseNoun();
	    },

	    bs: function () {
	        return faker.company.bsAdjective() + " " +
	            faker.company.bsBuzz() + " " +
	            faker.company.bsNoun();
	    },

	    catchPhraseAdjective: function () {
	        return faker.random.array_element(faker.definitions.company.adjective);
	    },

	    catchPhraseDescriptor: function () {
	        return faker.random.array_element(faker.definitions.company.descriptor);
	    },

	    catchPhraseNoun: function () {
	        return faker.random.array_element(faker.definitions.company.noun);
	    },

	    bsAdjective: function () {
	        return faker.random.array_element(faker.definitions.company.bs_adjective);
	    },

	    bsBuzz: function () {
	        return faker.random.array_element(faker.definitions.company.bs_verb);
	    },

	    bsNoun: function () {
	        return faker.random.array_element(faker.definitions.company.bs_noun);
	    }

	};

	module.exports = company;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var image = {
	  image: function () {
	    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
	    return image[faker.random.array_element(categories)]();
	  },
	  avatar: function () {
	    return faker.internet.avatar();
	  },
	  imageUrl: function (width, height, category) {
	      var width = width || 640;
	      var height = height || 480;

	      var url ='http://lorempixel.com/' + width + '/' + height;
	      if (typeof category !== 'undefined') {
	        url += '/' + category;
	      }
	      return url;
	  },
	  abstract: function (width, height) {
	    return faker.image.imageUrl(width, height, 'abstract');
	  },
	  animals: function (width, height) {
	    return faker.image.imageUrl(width, height, 'animals');
	  },
	  business: function (width, height) {
	    return faker.image.imageUrl(width, height, 'business');
	  },
	  cats: function (width, height) {
	    return faker.image.imageUrl(width, height, 'cats');
	  },
	  city: function (width, height) {
	    return faker.image.imageUrl(width, height, 'city');
	  },
	  food: function (width, height) {
	    return faker.image.imageUrl(width, height, 'food');
	  },
	  nightlife: function (width, height) {
	    return faker.image.imageUrl(width, height, 'nightlife');
	  },
	  fashion: function (width, height) {
	    return faker.image.imageUrl(width, height, 'fashion');
	  },
	  people: function (width, height) {
	    return faker.image.imageUrl(width, height, 'people');
	  },
	  nature: function (width, height) {
	    return faker.image.imageUrl(width, height, 'nature');
	  },
	  sports: function (width, height) {
	    return faker.image.imageUrl(width, height, 'sports');
	  },
	  technics: function (width, height) {
	    return faker.image.imageUrl(width, height, 'technics');
	  },
	  transport: function (width, height) {
	    return faker.image.imageUrl(width, height, 'transport');
	  }
	};

	module.exports = image;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);
	var Helpers = __webpack_require__(270);

	var lorem = {
	    words: function (num) {
	        if (typeof num == 'undefined') { num = 3; }
	        return Helpers.shuffle(faker.definitions.lorem.words).slice(0, num);
	    },

	    sentence: function (wordCount, range) {
	        if (typeof wordCount == 'undefined') { wordCount = 3; }
	        if (typeof range == 'undefined') { range = 7; }

	        // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
	        //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

	        return  faker.lorem.words(wordCount + faker.random.number(range)).join(' ');
	    },

	    sentences: function (sentenceCount) {
	        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
	        var sentences = [];
	        for (sentenceCount; sentenceCount > 0; sentenceCount--) {
	            sentences.push(faker.lorem.sentence());
	        }
	        return sentences.join("\n");
	    },

	    paragraph: function (sentenceCount) {
	        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
	        return faker.lorem.sentences(sentenceCount + faker.random.number(3));
	    },

	    paragraphs: function (paragraphCount) {
	        if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
	        var paragraphs = [];
	        for (paragraphCount; paragraphCount > 0; paragraphCount--) {
	            paragraphs.push(faker.lorem.paragraph());
	        }
	        return paragraphs.join("\n \r\t");
	    }
	};

	module.exports = lorem;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	// backword-compatibility
	exports.randomNumber = function (range) {
	    return faker.random.number(range);
	};

	// backword-compatibility
	exports.randomize = function (array) {
	    array = array || ["a", "b", "c"];
	    return faker.random.array_element(array);
	};

	// slugifies string
	exports.slugify = function (string) {
	    string = string || "";
	    return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
	};

	// parses string for a symbol and replace it with a random number from 1-10
	exports.replaceSymbolWithNumber = function (string, symbol) {
	    string = string || "";
	    // default symbol is '#'
	    if (symbol === undefined) {
	        symbol = '#';
	    }

	    var str = '';
	    for (var i = 0; i < string.length; i++) {
	        if (string.charAt(i) == symbol) {
	            str += faker.random.number(9);
	        } else {
	            str += string.charAt(i);
	        }
	    }
	    return str;
	};

	// takes an array and returns it randomized
	exports.shuffle = function (o) {
	    o = o || ["a", "b", "c"];
	    for (var j, x, i = o.length; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
	    return o;
	};

	exports.mustache = function (str, data) {
	  for(var p in data) {
	    var re = new RegExp('{{' + p + '}}', 'g')
	    str = str.replace(re, data[p]);
	  }
	  return str;
	};

	exports.createCard = function () {
	    return {
	        "name": faker.name.findName(),
	        "username": faker.internet.userName(),
	        "email": faker.internet.email(),
	        "address": {
	            "streetA": faker.address.streetName(),
	            "streetB": faker.address.streetAddress(),
	            "streetC": faker.address.streetAddress(true),
	            "streetD": faker.address.secondaryAddress(),
	            "city": faker.address.city(),
	            "state": faker.address.state(),
	            "country": faker.address.country(),
	            "zipcode": faker.address.zipCode(),
	            "geo": {
	                "lat": faker.address.latitude(),
	                "lng": faker.address.longitude()
	            }
	        },
	        "phone": faker.phone.phoneNumber(),
	        "website": faker.internet.domainName(),
	        "company": {
	            "name": faker.company.companyName(),
	            "catchPhrase": faker.company.catchPhrase(),
	            "bs": faker.company.bs()
	        },
	        "posts": [
	            {
	                "words": faker.lorem.words(),
	                "sentence": faker.lorem.sentence(),
	                "sentences": faker.lorem.sentences(),
	                "paragraph": faker.lorem.paragraph()
	            },
	            {
	                "words": faker.lorem.words(),
	                "sentence": faker.lorem.sentence(),
	                "sentences": faker.lorem.sentences(),
	                "paragraph": faker.lorem.paragraph()
	            },
	            {
	                "words": faker.lorem.words(),
	                "sentence": faker.lorem.sentence(),
	                "sentences": faker.lorem.sentences(),
	                "paragraph": faker.lorem.paragraph()
	            }
	        ],
	        "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
	    };
	};

	exports.contextualCard = function () {
	  var name = faker.name.firstName(),
	      userName = faker.internet.userName(name);
	  return {
	      "name": name,
	      "username": userName,
	      "avatar": faker.internet.avatar(),
	      "email": faker.internet.email(userName),
	      "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
	      "phone": faker.phone.phoneNumber(),
	      "address": {
	          "street": faker.address.streetName(true),
	          "suite": faker.address.secondaryAddress(),
	          "city": faker.address.city(),
	          "zipcode": faker.address.zipCode(),
	          "geo": {
	              "lat": faker.address.latitude(),
	              "lng": faker.address.longitude()
	          }
	      },
	      "website": faker.internet.domainName(),
	      "company": {
	          "name": faker.company.companyName(),
	          "catchPhrase": faker.company.catchPhrase(),
	          "bs": faker.company.bs()
	      }
	  };
	};


	exports.userCard = function () {
	    return {
	        "name": faker.name.findName(),
	        "username": faker.internet.userName(),
	        "email": faker.internet.email(),
	        "address": {
	            "street": faker.address.streetName(true),
	            "suite": faker.address.secondaryAddress(),
	            "city": faker.address.city(),
	            "zipcode": faker.address.zipCode(),
	            "geo": {
	                "lat": faker.address.latitude(),
	                "lng": faker.address.longitude()
	            }
	        },
	        "phone": faker.phone.phoneNumber(),
	        "website": faker.internet.domainName(),
	        "company": {
	            "name": faker.company.companyName(),
	            "catchPhrase": faker.company.catchPhrase(),
	            "bs": faker.company.bs()
	        }
	    };
	};

	exports.createTransaction = function(){
	  return {
	    "amount" : faker.finance.amount(),
	    "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
	    "business": faker.company.companyName(),
	    "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
	    "type" : exports.randomize(faker.definitions.finance.transaction_type),
	    "account" : faker.finance.account()
	  };
	};

	/*
	String.prototype.capitalize = function () { //v1.0
	    return this.replace(/\w+/g, function (a) {
	        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
	    });
	};
	*/



/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var date = {

	    past: function (years, refDate) {
	        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
	        var range = {
	          min: 1000,
	          max: (years || 1) * 365 * 24 * 3600 * 1000
	        };

	        var past = date.getTime();
	        past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
	        date.setTime(past);

	        return date;
	    },

	    future: function (years, refDate) {
	        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
	        var range = {
	          min: 1000,
	          max: (years || 1) * 365 * 24 * 3600 * 1000
	        };

	        var future = date.getTime();
	        future += faker.random.number(range); // some time from now to N years later, in milliseconds
	        date.setTime(future);

	        return date;
	    },

	    between: function (from, to) {
	        var fromMilli = Date.parse(from);
	        var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

	        var newDate = new Date(fromMilli + dateOffset);

	        return newDate;
	    },

	    recent: function (days) {
	        var date = new Date();
	        var range = {
	          min: 1000,
	          max: (days || 1) * 24 * 3600 * 1000
	        };

	        var future = date.getTime();
	        future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
	        date.setTime(future);

	        return date;
	    }
	};
	module.exports = date;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var mersenne = __webpack_require__(323);
	var faker = __webpack_require__(85);

	var random = {
	    // returns a single random number based on a max number or range
	    number: function (options) {

	        if (typeof options === "number") {
	          options = {
	            max: options
	          };
	        }

	        options = options || {};

	        if (typeof options.min === "undefined") {
	          options.min = 0;
	        }

	        if (typeof options.max === "undefined") {
	          options.max = 1;
	        }
	        if (typeof options.precision === "undefined") {
	          options.precision = 1;
	        }

	        // Make the range inclusive of the max value
	        var max = options.max;
	        if (max > 0) {
	          max += options.precision;
	        } 
	          
	        var randomNumber = options.precision * Math.floor(
	          mersenne.rand(max / options.precision, options.min / options.precision));

	        return randomNumber;

	    },

	    // takes an array and returns a random element of the array
	    array_element: function (array) {
	        array = array || ["a", "b", "c"];
	        var r = faker.random.number({ max: array.length - 1 });
	        return array[r];
	    },

	    // takes an object and returns the randomly key or value
	    object_element: function (object, field) {
	        object = object || {};
	        var array = Object.keys(object);
	        var key = faker.random.array_element(array);

	        return field === "key" ? key : object[key];
	    },

	    uuid : function () {
	        var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
	        var replacePlaceholders = function (placeholder) {
	            var random = Math.random()*16|0;
	            var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
	            return value.toString(16);
	        };
	        return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
	    }
	};

	module.exports = random;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var Helpers = __webpack_require__(270),
	    faker = __webpack_require__(85);

	var finance = {

	    account: function (length) {

	        length = length || 8;

	        var template = '';

	        for (var i = 0; i < length; i++) {
	            template = template + '#';
	        }
	        length = null;
	        return Helpers.replaceSymbolWithNumber(template);
	    },

	    accountName: function () {

	        return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
	    },

	    mask: function (length, parens, elipsis) {


	        //set defaults
	        length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
	        parens = (parens === null) ? true : parens;
	        elipsis = (elipsis === null) ? true : elipsis;

	        //create a template for length
	        var template = '';

	        for (var i = 0; i < length; i++) {
	            template = template + '#';
	        }

	        //prefix with elipsis
	        template = (elipsis) ? ['...', template].join('') : template;

	        template = (parens) ? ['(', template, ')'].join('') : template;

	        //generate random numbers
	        template = Helpers.replaceSymbolWithNumber(template);

	        return template;

	    },

	    //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
	    //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

	    amount: function (min, max, dec, symbol) {

	        min = min || 0;
	        max = max || 1000;
	        dec = dec || 2;
	        symbol = symbol || '';

	        return symbol + (Math.round((Math.random() * (max - min) + min) * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);

	    },

	    transactionType: function () {
	        return Helpers.randomize(faker.definitions.finance.transaction_type);
	    },

	    currencyCode: function () {
	        return faker.random.object_element(faker.definitions.finance.currency)['code'];
	    },

	    currencyName: function () {
	        return faker.random.object_element(faker.definitions.finance.currency, 'key');
	    },

	    currencySymbol: function () {
	        var symbol;

	        while (!symbol) {
	            symbol = faker.random.object_element(faker.definitions.finance.currency)['symbol'];
	        }
	        return symbol;
	    }
	};

	module.exports = finance;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);

	var hacker = {

	  abbreviation : function () {
	    return faker.random.array_element(faker.definitions.hacker.abbreviation);
	  },

	  adjective : function () {
	    return faker.random.array_element(faker.definitions.hacker.adjective);
	  },

	  noun : function () {
	    return faker.random.array_element(faker.definitions.hacker.noun);
	  },

	  verb : function () {
	    return faker.random.array_element(faker.definitions.hacker.verb);
	  },

	  ingverb : function () {
	    return faker.random.array_element(faker.definitions.hacker.ingverb);
	  },

	  phrase : function () {

	    var data = {
	      abbreviation: hacker.abbreviation(),
	      adjective: hacker.adjective(),
	      ingverb: hacker.ingverb(),
	      noun: hacker.noun(),
	      verb: hacker.verb()
	    };

	    var phrase = faker.random.array_element([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
	      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
	      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
	      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
	      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
	   ]);

	   return faker.helpers.mustache(phrase, data);

	  },


	};

	module.exports = hacker;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var faker = __webpack_require__(85);
	exports['de'] = __webpack_require__(324);
	exports['de_AT'] = __webpack_require__(325);
	exports['de_CH'] = __webpack_require__(326);
	exports['en'] = __webpack_require__(327);
	exports['en_AU'] = __webpack_require__(328);
	exports['en_BORK'] = __webpack_require__(329);
	exports['en_CA'] = __webpack_require__(330);
	exports['en_GB'] = __webpack_require__(331);
	exports['en_IND'] = __webpack_require__(332);
	exports['en_US'] = __webpack_require__(333);
	exports['en_au_ocker'] = __webpack_require__(334);
	exports['es'] = __webpack_require__(335);
	exports['fa'] = __webpack_require__(336);
	exports['fr'] = __webpack_require__(337);
	exports['it'] = __webpack_require__(338);
	exports['ja'] = __webpack_require__(339);
	exports['ko'] = __webpack_require__(340);
	exports['nb_NO'] = __webpack_require__(341);
	exports['nep'] = __webpack_require__(342);
	exports['nl'] = __webpack_require__(343);
	exports['pl'] = __webpack_require__(344);
	exports['pt_BR'] = __webpack_require__(345);
	exports['ru'] = __webpack_require__(346);
	exports['sk'] = __webpack_require__(347);
	exports['sv'] = __webpack_require__(348);
	exports['vi'] = __webpack_require__(349);
	exports['zh_CN'] = __webpack_require__(350);

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = require("events");

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(351);


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */
	(function (global, factory) {
	  true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.Immutable = factory()
	}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    return index >= 0 ? (+index) : ensureSize(iter) + (+index);
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function src_Iterator__Iterator(next) {
	      this.next = next;
	    }

	    src_Iterator__Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  src_Iterator__Iterator.KEYS = ITERATE_KEYS;
	  src_Iterator__Iterator.VALUES = ITERATE_VALUES;
	  src_Iterator__Iterator.ENTRIES = ITERATE_ENTRIES;

	  src_Iterator__Iterator.prototype.inspect =
	  src_Iterator__Iterator.prototype.toSource = function () { return this.toString(); }
	  src_Iterator__Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  // #pragma Root Sequences

	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new src_Iterator__Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new src_Iterator__Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new src_Iterator__Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new src_Iterator__Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	    }
	    return typeof valueA.equals === 'function' &&
	      typeof valueB.equals === 'function' ?
	        valueA.equals(valueB) :
	        valueA === valueB || (valueA !== valueA && valueB !== valueB);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  var src_Math__imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function src_Math__imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    return hashJSObj(o);
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash = weakMap && weakMap.get(obj);
	    if (hash) return hash;

	    hash = obj[UID_HASH_KEY];
	    if (hash) return hash;

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash) return hash;

	      hash = getIENodeHash(obj);
	      if (hash) return hash;
	    }

	    if (Object.isExtensible && !Object.isExtensible(obj)) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (weakMap) {
	      weakMap.set(obj, hash);
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var weakMap = typeof WeakMap === 'function' && new WeakMap();

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          ((ii = reverse ? resolveSize(this) : 0),
	            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new src_Iterator__Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.contains = function(value) {
	      return this._iter.contains(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.contains(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new src_Iterator__Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          return fn(entry[1], entry[0], this$0);
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new src_Iterator__Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            return type === ITERATE_ENTRIES ? step :
	              iteratorValue(type, entry[0], entry[1], step);
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.contains(key)};
	    flipSequence.contains = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    }
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new src_Iterator__Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    }
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    }
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new src_Iterator__Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    }
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.contains = function(value ) {return iterable.contains(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    }
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = src_Map__Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : src_Map__Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    var sliceSize = resolvedEnd - resolvedBegin;
	    if (sliceSize < 0) {
	      sliceSize = 0;
	    }

	    var sliceSeq = makeSequence(iterable);

	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      }
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        while (skipped++ !== resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    }

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new src_Iterator__Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    }
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new src_Iterator__Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    }
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new src_Iterator__Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new src_Iterator__Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(src_Map__Map, KeyedCollection);

	    // @pragma Construction

	    function src_Map__Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    src_Map__Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    src_Map__Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    src_Map__Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    src_Map__Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    src_Map__Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    src_Map__Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    src_Map__Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    src_Map__Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    src_Map__Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    src_Map__Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    src_Map__Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    src_Map__Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(keyPath, emptyMap(), function(m ) {return m.merge.apply(m, iters)});
	    };

	    src_Map__Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger(undefined), arguments);
	    };

	    src_Map__Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMerger(merger), iters);
	    };

	    src_Map__Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(keyPath, emptyMap(), function(m ) {return m.mergeDeep.apply(m, iters)});
	    };

	    src_Map__Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    src_Map__Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    src_Map__Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    src_Map__Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    src_Map__Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    src_Map__Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    src_Map__Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    src_Map__Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    src_Map__Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  src_Map__Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = src_Map__Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  }

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  }

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  }

	  createClass(MapIterator, src_Iterator__Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(merger) {
	    return function(existing, value) 
	      {return existing && existing.mergeDeepWith && isIterable(value) ?
	        existing.mergeDeepWith(merger, value) :
	        merger ? merger(existing, value) : value};
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        }
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index < 0 || index >= this.size) {
	        return notSetValue;
	      }
	      index += this._origin;
	      var node = listNodeFor(this, index);
	      return node && node.array[index & MASK];
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger(undefined), arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMerger(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new src_Iterator__Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }
	      var removingLast = sizeIndex === this.array.length - 1;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingLast) {
	          return this;
	        }
	      }
	      if (removingLast && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingLast) {
	        editable.array.pop();
	      }
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value)
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might require creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might require creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, src_Map__Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new src_Iterator__Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  createClass(src_Set__Set, SetCollection);

	    // @pragma Construction

	    function src_Set__Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    src_Set__Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    src_Set__Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    src_Set__Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    src_Set__Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    src_Set__Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    src_Set__Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    src_Set__Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    src_Set__Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    src_Set__Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.contains(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    src_Set__Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.contains(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    src_Set__Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    src_Set__Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    src_Set__Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    src_Set__Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    src_Set__Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    src_Set__Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    src_Set__Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    src_Set__Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  src_Set__Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = src_Set__Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, src_Set__Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var RecordType = function Record(values) {
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        this._map = src_Map__Map(values);
	      };

	      var keys = Object.keys(defaultValues);

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;
	      name && (RecordTypePrototype._name = name);
	      RecordTypePrototype._defaultValues = defaultValues;
	      RecordTypePrototype._keys = keys;
	      RecordTypePrototype.size = keys.length;

	      try {
	        keys.forEach(function(key ) {
	          Object.defineProperty(RecordType.prototype, key, {
	            get: function() {
	              return this.get(key);
	            },
	            set: function(value) {
	              invariant(this.__ownerID, 'Cannot set on an immutable record.');
	              this.set(key, value);
	            }
	          });
	        });
	      } catch (error) {
	        // Object.defineProperty failed. Probably IE8.
	      }

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var SuperRecord = Object.getPrototypeOf(this).constructor;
	      return SuperRecord._empty || (SuperRecord._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        a.cacheResult();
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step > 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.contains = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new src_Iterator__Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.contains = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new src_Iterator__Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = src_Iterator__Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return src_Map__Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return src_Set__Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    contains: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    findEntry: function(predicate, context) {
	      var found;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findLastEntry: function(predicate, context) {
	      return this.toSeq().reverse().findEntry(predicate, context);
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.contains === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.contains(value)});
	    },

	    isSuperset: function(iter) {
	      return iter.isSubset(this);
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    },


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;

	  // Temporary warning about using length
	  (function () {
	    try {
	      Object.defineProperty(IterablePrototype, 'length', {
	        get: function () {
	          if (!Iterable.noLengthWarning) {
	            var stack;
	            try {
	              throw new Error();
	            } catch (error) {
	              stack = error.stack;
	            }
	            if (stack.indexOf('_wrapObject') === -1) {
	              console && console.warn && console.warn(
	                'iterable.length has been deprecated, '+
	                'use iterable.size or iterable.count(). '+
	                'This warning will become a silent error in a future version. ' +
	                stack
	              );
	              return this.size;
	            }
	          }
	        }
	      });
	    } catch (e) {}
	  })();



	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLastKey: function(predicate, context) {
	      return this.toSeq().reverse().findKey(predicate, context);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    lastKeyOf: function(searchValue) {
	      return this.findLastKey(function(value ) {return is(value, searchValue)});
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    },

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return k + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.toKeyedSeq().keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      return this.toSeq().reverse().indexOf(searchValue);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      index = resolveBegin(index, this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var key = this.toKeyedSeq().findLastKey(predicate, context);
	      return key === undefined ? -1 : key;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    },

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    contains: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    },

	  });

	  SetIterable.prototype.has = IterablePrototype.contains;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : value;
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = src_Math__imul(h, 0xCC9E2D51);
	    h = src_Math__imul(h << 15 | h >>> -15, 0x1B873593);
	    h = src_Math__imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = src_Math__imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = src_Math__imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: src_Map__Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: src_Set__Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS,

	  };

	  return Immutable;

	}));

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(98);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(81);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(105);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getProperties(object)
	 *
	 * This allows the retrieval of property names of an object, enumerable or not,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getProperties
	 * @api public
	 */

	module.exports = function getProperties(object) {
	  var result = Object.getOwnPropertyNames(subject);

	  function addProperty(property) {
	    if (result.indexOf(property) === -1) {
	      result.push(property);
	    }
	  }

	  var proto = Object.getPrototypeOf(subject);
	  while (proto !== null) {
	    Object.getOwnPropertyNames(proto).forEach(addProperty);
	    proto = Object.getPrototypeOf(proto);
	  }

	  return result;
	};


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getEnumerableProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/**
	 * ### .getEnumerableProperties(object)
	 *
	 * This allows the retrieval of enumerable property names of an object,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getEnumerableProperties
	 * @api public
	 */

	module.exports = function getEnumerableProperties(object) {
	  var result = [];
	  for (var name in object) {
	    result.push(name);
	  }
	  return result;
	};


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(226);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(353);
	var ExecutionEnvironment = __webpack_require__(81);

	var camelizeStyleName = __webpack_require__(354);
	var dangerousStyleValue = __webpack_require__(355);
	var hyphenateStyleName = __webpack_require__(356);
	var memoizeStringOnly = __webpack_require__(357);
	var warning = __webpack_require__(91);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(289);
	var ReactMultiChildUpdateTypes = __webpack_require__(358);

	var ReactReconciler = __webpack_require__(76);
	var ReactChildReconciler = __webpack_require__(359);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);

	var assign = __webpack_require__(78);
	var getTextContentAccessor = __webpack_require__(360);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(315);
	var ViewportMetrics = __webpack_require__(287);

	var getEventModifierState = __webpack_require__(361);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(362);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(108);

	var accumulateInto = __webpack_require__(284);
	var forEachAccumulated = __webpack_require__(285);
	var invariant = __webpack_require__(98);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(363);
	var ReactMultiChildUpdateTypes = __webpack_require__(358);

	var setTextContent = __webpack_require__(364);
	var invariant = __webpack_require__(98);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(75);

	var invariant = __webpack_require__(98);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(94);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(365);

	var containsNode = __webpack_require__(255);
	var focusNode = __webpack_require__(362);
	var getActiveElement = __webpack_require__(309);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(96);
	var ReactBrowserEventEmitter = __webpack_require__(108);

	var assign = __webpack_require__(78);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(315);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(315);

	var getEventCharCode = __webpack_require__(317);
	var getEventKey = __webpack_require__(366);
	var getEventModifierState = __webpack_require__(361);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(300);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(315);

	var getEventModifierState = __webpack_require__(361);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	var getEventTarget = __webpack_require__(290);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(300);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(262);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(98);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * password-generator
	 * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
	 * MIT Licensed
	 */
	(function (root) {

	  var localName, consonant, letter, password, vowel;
	  letter = /[a-zA-Z]$/;
	  vowel = /[aeiouAEIOU]$/;
	  consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;


	  // Defines the name of the local variable the passwordGenerator library will use
	  // this is specially useful if window.passwordGenerator is already being used
	  // by your application and you want a different name. For example:
	  //    // Declare before including the passwordGenerator library
	  //    var localPasswordGeneratorLibraryName = 'pass';
	  localName = root.localPasswordGeneratorLibraryName || "generatePassword",

	  password = function (length, memorable, pattern, prefix) {
	    var char, n;
	    if (length == null) {
	      length = 10;
	    }
	    if (memorable == null) {
	      memorable = true;
	    }
	    if (pattern == null) {
	      pattern = /\w/;
	    }
	    if (prefix == null) {
	      prefix = '';
	    }
	    if (prefix.length >= length) {
	      return prefix;
	    }
	    if (memorable) {
	      if (prefix.match(consonant)) {
	        pattern = vowel;
	      } else {
	        pattern = consonant;
	      }
	    }
	    n = Math.floor(Math.random() * 94) + 33;
	    char = String.fromCharCode(n);
	    if (memorable) {
	      char = char.toLowerCase();
	    }
	    if (!char.match(pattern)) {
	      return password(length, memorable, pattern, prefix);
	    }
	    return password(length, memorable, pattern, "" + prefix + char);
	  };


	  ((true) ? exports : root)[localName] = password;
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      module.exports = password;
	    }
	  }

	  // Establish the root object, `window` in the browser, or `global` on the server.
	}(this));

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/*

	Copyright (c) 2012-2014 Jeffrey Mealo

	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
	documentation files (the "Software"), to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
	to permit persons to whom the Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
	Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	------------------------------------------------------------------------------------------------------------------------

	Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

	The license for that script is as follows:

	"THE BEER-WARE LICENSE" (Revision 42):

	<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
	If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
	*/

	function rnd(a, b) {
	    //calling rnd() with no arguments is identical to rnd(0, 100)
	    a = a || 0;
	    b = b || 100;

	    if (typeof b === 'number' && typeof a === 'number') {
	        //rnd(int min, int max) returns integer between min, max
	        return (function (min, max) {
	            if (min > max) {
	                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
	            }
	            return Math.floor(Math.random() * (max - min + 1)) + min;
	        }(a, b));
	    }

	    if (Object.prototype.toString.call(a) === "[object Array]") {
	        //returns a random element from array (a), even weighting
	        return a[Math.floor(Math.random() * a.length)];
	    }

	    if (a && typeof a === 'object') {
	        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
	        return (function (obj) {
	            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;

	            for (key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    max = obj[key] + min;
	                    return_val = key;
	                    if (rand >= min && rand <= max) {
	                        break;
	                    }
	                    min = min + obj[key];
	                }
	            }

	            return return_val;
	        }(a));
	    }

	    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
	}

	function randomLang() {
	    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
	                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
	                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
	                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
	                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
	                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
	}

	function randomBrowserAndOS() {
	    var browser = rnd({
	        chrome:    .45132810566,
	        iexplorer: .27477061836,
	        firefox:   .19384170608,
	        safari:    .06186781118,
	        opera:     .01574236955
	    }),
	    os = {
	        chrome:  {win: .89,  mac: .09 , lin: .02},
	        firefox: {win: .83,  mac: .16,  lin: .01},
	        opera:   {win: .91,  mac: .03 , lin: .06},
	        safari:  {win: .04 , mac: .96  },
	        iexplorer: ['win']
	    };

	    return [browser, rnd(os[browser])];
	}

	function randomProc(arch) {
	    var procs = {
	        lin:['i686', 'x86_64'],
	        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
	        win:['', 'WOW64', 'Win64; x64']
	    };
	    return rnd(procs[arch]);
	}

	function randomRevision(dots) {
	    var return_val = '';
	    //generate a random revision
	    //dots = 2 returns .x.y where x & y are between 0 and 9
	    for (var x = 0; x < dots; x++) {
	        return_val += '.' + rnd(0, 9);
	    }
	    return return_val;
	}

	var version_string = {
	    net: function () {
	        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
	    },
	    nt: function () {
	        return rnd(5, 6) + '.' + rnd(0, 3);
	    },
	    ie: function () {
	        return rnd(7, 11);
	    },
	    trident: function () {
	        return rnd(3, 7) + '.' + rnd(0, 1);
	    },
	    osx: function (delim) {
	        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
	    },
	    chrome: function () {
	        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
	    },
	    presto: function () {
	        return '2.9.' + rnd(160, 190);
	    },
	    presto2: function () {
	        return rnd(10, 12) + '.00';
	    },
	    safari: function () {
	        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
	    }
	};

	var browser = {
	    firefox: function firefox(arch) {
	        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
	        var firefox_ver = rnd(5, 15) + randomRevision(2),
	            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
	            proc = randomProc(arch),
	            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
	            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
	            : '(X11; Linux ' + proc;

	        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
	    },

	    iexplorer: function iexplorer() {
	        var ver = version_string.ie();

	        if (ver >= 11) {
	            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
	            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
	        }

	        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
	        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
	            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
	    },

	    opera: function opera(arch) {
	        //http://www.opera.com/docs/history/
	        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
	            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
	            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
	            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
	            version_string.presto() + ' Version/' + version_string.presto2() + ')';

	        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
	    },

	    safari: function safari(arch) {
	        var safari = version_string.safari(),
	            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
	            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
	            : '(Windows; U; Windows NT ' + version_string.nt() + ')';

	        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
	    },

	    chrome: function chrome(arch) {
	        var safari = version_string.safari(),
	            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
	            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
	            : '(X11; Linux ' + randomProc(arch);

	        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
	    }
	};

	exports.generate = function generate() {
	    var random = randomBrowserAndOS();
	    return browser[random[0]](random[1]);
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
	// an almost straight conversion from the original program, mt19937ar.c,
	// translated by y. okada on July 17, 2006.
	// and modified a little at july 20, 2006, but there are not any substantial differences.
	// in this program, procedure descriptions and comments of original source code were not removed.
	// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
	// lines commented with /* and */ are original comments.
	// lines commented with // are additional comments in this JavaScript version.
	// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
	/*
	   A C-program for MT19937, with initialization improved 2002/1/26.
	   Coded by Takuji Nishimura and Makoto Matsumoto.

	   Before using, initialize the state by using init_genrand(seed)
	   or init_by_array(init_key, key_length).

	   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
	   All rights reserved.

	   Redistribution and use in source and binary forms, with or without
	   modification, are permitted provided that the following conditions
	   are met:

	     1. Redistributions of source code must retain the above copyright
	        notice, this list of conditions and the following disclaimer.

	     2. Redistributions in binary form must reproduce the above copyright
	        notice, this list of conditions and the following disclaimer in the
	        documentation and/or other materials provided with the distribution.

	     3. The names of its contributors may not be used to endorse or promote
	        products derived from this software without specific prior written
	        permission.

	   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
	   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


	   Any feedback is very welcome.
	   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
	   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
	*/

	function MersenneTwister19937()
	{
		/* constants should be scoped inside the class */
		var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
		/* Period parameters */
		//c//#define N 624
		//c//#define M 397
		//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
		//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
		//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
		N = 624;
		M = 397;
		MATRIX_A = 0x9908b0df;   /* constant vector a */
		UPPER_MASK = 0x80000000; /* most significant w-r bits */
		LOWER_MASK = 0x7fffffff; /* least significant r bits */
		//c//static unsigned long mt[N]; /* the array for the state vector  */
		//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
		var mt = new Array(N);   /* the array for the state vector  */
		var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

		function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
		{
			return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
		}

		function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
		}

		function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			return unsigned32((n1 + n2) & 0xffffffff)
		}

		function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			var sum = 0;
			for (var i = 0; i < 32; ++i){
				if ((n1 >>> i) & 0x1){
					sum = addition32(sum, unsigned32(n2 << i));
				}
			}
			return sum;
		}

		/* initializes mt[N] with a seed */
		//c//void init_genrand(unsigned long s)
		this.init_genrand = function (s)
		{
			//c//mt[0]= s & 0xffffffff;
			mt[0]= unsigned32(s & 0xffffffff);
			for (mti=1; mti<N; mti++) {
				mt[mti] = 
				//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
				addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
				/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
				/* In the previous versions, MSBs of the seed affect   */
				/* only MSBs of the array mt[].                        */
				/* 2002/01/09 modified by Makoto Matsumoto             */
				//c//mt[mti] &= 0xffffffff;
				mt[mti] = unsigned32(mt[mti] & 0xffffffff);
				/* for >32 bit machines */
			}
		}

		/* initialize by an array with array-length */
		/* init_key is the array for initializing keys */
		/* key_length is its length */
		/* slight change for C++, 2004/2/26 */
		//c//void init_by_array(unsigned long init_key[], int key_length)
		this.init_by_array = function (init_key, key_length)
		{
			//c//int i, j, k;
			var i, j, k;
			//c//init_genrand(19650218);
			this.init_genrand(19650218);
			i=1; j=0;
			k = (N>key_length ? N : key_length);
			for (; k; k--) {
				//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
				//c//	+ init_key[j] + j; /* non linear */
				mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
				mt[i] = 
				//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
				unsigned32(mt[i] & 0xffffffff);
				i++; j++;
				if (i>=N) { mt[0] = mt[N-1]; i=1; }
				if (j>=key_length) j=0;
			}
			for (k=N-1; k; k--) {
				//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
				//c//- i; /* non linear */
				mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
				//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
				mt[i] = unsigned32(mt[i] & 0xffffffff);
				i++;
				if (i>=N) { mt[0] = mt[N-1]; i=1; }
			}
			mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
		}

	    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
	    var mag01 = [0x0, MATRIX_A];

		/* generates a random number on [0,0xffffffff]-interval */
		//c//unsigned long genrand_int32(void)
		this.genrand_int32 = function ()
		{
			//c//unsigned long y;
			//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
			var y;
			/* mag01[x] = x * MATRIX_A  for x=0,1 */

			if (mti >= N) { /* generate N words at one time */
				//c//int kk;
				var kk;

				if (mti == N+1)   /* if init_genrand() has not been called, */
					//c//init_genrand(5489); /* a default initial seed is used */
					this.init_genrand(5489); /* a default initial seed is used */

				for (kk=0;kk<N-M;kk++) {
					//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
					//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
					y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
					mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
				}
				for (;kk<N-1;kk++) {
					//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
					//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
					y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
					mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
				}
				//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
				//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
				mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
				mti = 0;
			}

			y = mt[mti++];

			/* Tempering */
			//c//y ^= (y >> 11);
			//c//y ^= (y << 7) & 0x9d2c5680;
			//c//y ^= (y << 15) & 0xefc60000;
			//c//y ^= (y >> 18);
			y = unsigned32(y ^ (y >>> 11));
			y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
			y = unsigned32(y ^ ((y << 15) & 0xefc60000));
			y = unsigned32(y ^ (y >>> 18));

			return y;
		}

		/* generates a random number on [0,0x7fffffff]-interval */
		//c//long genrand_int31(void)
		this.genrand_int31 = function ()
		{
			//c//return (genrand_int32()>>1);
			return (this.genrand_int32()>>>1);
		}

		/* generates a random number on [0,1]-real-interval */
		//c//double genrand_real1(void)
		this.genrand_real1 = function ()
		{
			//c//return genrand_int32()*(1.0/4294967295.0);
			return this.genrand_int32()*(1.0/4294967295.0);
			/* divided by 2^32-1 */
		}

		/* generates a random number on [0,1)-real-interval */
		//c//double genrand_real2(void)
		this.genrand_real2 = function ()
		{
			//c//return genrand_int32()*(1.0/4294967296.0);
			return this.genrand_int32()*(1.0/4294967296.0);
			/* divided by 2^32 */
		}

		/* generates a random number on (0,1)-real-interval */
		//c//double genrand_real3(void)
		this.genrand_real3 = function ()
		{
			//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
			return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
			/* divided by 2^32 */
		}

		/* generates a random number on [0,1) with 53-bit resolution*/
		//c//double genrand_res53(void)
		this.genrand_res53 = function ()
		{
			//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
			var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
			return(a*67108864.0+b)*(1.0/9007199254740992.0);
		}
		/* These real versions are due to Isaku Wada, 2002/01/09 added */
	}

	//  Exports: Public API

	//  Export the twister class
	exports.MersenneTwister19937 = MersenneTwister19937;

	//  Export a simplified function to generate random numbers
	var gen = new MersenneTwister19937;
	gen.init_genrand((new Date).getTime() % 1000000000);

	// Added max, min range functionality, Marak Squires Sept 11 2014
	exports.rand = function(max, min) {
	    if (!max)
	        {
	        min = 0;
	        max = 32768;
	        }
	    return Math.floor(gen.genrand_real2() * (max - min) + min);
	}
	exports.seed = function(S) {
	    if (typeof(S) != 'number')
	        {
	        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
	        }
	    gen.init_genrand(S);
	}
	exports.seed_array = function(A) {
	    if (typeof(A) != 'object')
	        {
	        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
	        }
	    gen.init_by_array(A);
	}



/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var de = {};
	module["exports"] = de;
	de.title = "German";
	de.address = {
	  "city_prefix": [
	    "Nord",
	    "Ost",
	    "West",
	    "Süd",
	    "Neu",
	    "Alt",
	    "Bad"
	  ],
	  "city_suffix": [
	    "stadt",
	    "dorf",
	    "land",
	    "scheid",
	    "burg"
	  ],
	  "country": [
	    "Ägypten",
	    "Äquatorialguinea",
	    "Äthiopien",
	    "Österreich",
	    "Afghanistan",
	    "Albanien",
	    "Algerien",
	    "Amerikanisch-Samoa",
	    "Amerikanische Jungferninseln",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antarktis",
	    "Antigua und Barbuda",
	    "Argentinien",
	    "Armenien",
	    "Aruba",
	    "Aserbaidschan",
	    "Australien",
	    "Bahamas",
	    "Bahrain",
	    "Bangladesch",
	    "Barbados",
	    "Belarus",
	    "Belgien",
	    "Belize",
	    "Benin",
	    "die Bermudas",
	    "Bhutan",
	    "Bolivien",
	    "Bosnien und Herzegowina",
	    "Botsuana",
	    "Bouvetinsel",
	    "Brasilien",
	    "Britische Jungferninseln",
	    "Britisches Territorium im Indischen Ozean",
	    "Brunei Darussalam",
	    "Bulgarien",
	    "Burkina Faso",
	    "Burundi",
	    "Chile",
	    "China",
	    "Cookinseln",
	    "Costa Rica",
	    "Dänemark",
	    "Demokratische Republik Kongo",
	    "Demokratische Volksrepublik Korea",
	    "Deutschland",
	    "Dominica",
	    "Dominikanische Republik",
	    "Dschibuti",
	    "Ecuador",
	    "El Salvador",
	    "Eritrea",
	    "Estland",
	    "Färöer",
	    "Falklandinseln",
	    "Fidschi",
	    "Finnland",
	    "Frankreich",
	    "Französisch-Guayana",
	    "Französisch-Polynesien",
	    "Französische Gebiete im südlichen Indischen Ozean",
	    "Gabun",
	    "Gambia",
	    "Georgien",
	    "Ghana",
	    "Gibraltar",
	    "Grönland",
	    "Grenada",
	    "Griechenland",
	    "Guadeloupe",
	    "Guam",
	    "Guatemala",
	    "Guinea",
	    "Guinea-Bissau",
	    "Guyana",
	    "Haiti",
	    "Heard und McDonaldinseln",
	    "Honduras",
	    "Hongkong",
	    "Indien",
	    "Indonesien",
	    "Irak",
	    "Iran",
	    "Irland",
	    "Island",
	    "Israel",
	    "Italien",
	    "Jamaika",
	    "Japan",
	    "Jemen",
	    "Jordanien",
	    "Jugoslawien",
	    "Kaimaninseln",
	    "Kambodscha",
	    "Kamerun",
	    "Kanada",
	    "Kap Verde",
	    "Kasachstan",
	    "Katar",
	    "Kenia",
	    "Kirgisistan",
	    "Kiribati",
	    "Kleinere amerikanische Überseeinseln",
	    "Kokosinseln",
	    "Kolumbien",
	    "Komoren",
	    "Kongo",
	    "Kroatien",
	    "Kuba",
	    "Kuwait",
	    "Laos",
	    "Lesotho",
	    "Lettland",
	    "Libanon",
	    "Liberia",
	    "Libyen",
	    "Liechtenstein",
	    "Litauen",
	    "Luxemburg",
	    "Macau",
	    "Madagaskar",
	    "Malawi",
	    "Malaysia",
	    "Malediven",
	    "Mali",
	    "Malta",
	    "ehemalige jugoslawische Republik Mazedonien",
	    "Marokko",
	    "Marshallinseln",
	    "Martinique",
	    "Mauretanien",
	    "Mauritius",
	    "Mayotte",
	    "Mexiko",
	    "Mikronesien",
	    "Monaco",
	    "Mongolei",
	    "Montserrat",
	    "Mosambik",
	    "Myanmar",
	    "Nördliche Marianen",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Neukaledonien",
	    "Neuseeland",
	    "Nicaragua",
	    "Niederländische Antillen",
	    "Niederlande",
	    "Niger",
	    "Nigeria",
	    "Niue",
	    "Norfolkinsel",
	    "Norwegen",
	    "Oman",
	    "Osttimor",
	    "Pakistan",
	    "Palau",
	    "Panama",
	    "Papua-Neuguinea",
	    "Paraguay",
	    "Peru",
	    "Philippinen",
	    "Pitcairninseln",
	    "Polen",
	    "Portugal",
	    "Puerto Rico",
	    "Réunion",
	    "Republik Korea",
	    "Republik Moldau",
	    "Ruanda",
	    "Rumänien",
	    "Russische Föderation",
	    "São Tomé und Príncipe",
	    "Südafrika",
	    "Südgeorgien und Südliche Sandwichinseln",
	    "Salomonen",
	    "Sambia",
	    "Samoa",
	    "San Marino",
	    "Saudi-Arabien",
	    "Schweden",
	    "Schweiz",
	    "Senegal",
	    "Seychellen",
	    "Sierra Leone",
	    "Simbabwe",
	    "Singapur",
	    "Slowakei",
	    "Slowenien",
	    "Somalien",
	    "Spanien",
	    "Sri Lanka",
	    "St. Helena",
	    "St. Kitts und Nevis",
	    "St. Lucia",
	    "St. Pierre und Miquelon",
	    "St. Vincent und die Grenadinen",
	    "Sudan",
	    "Surinam",
	    "Svalbard und Jan Mayen",
	    "Swasiland",
	    "Syrien",
	    "Türkei",
	    "Tadschikistan",
	    "Taiwan",
	    "Tansania",
	    "Thailand",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidad und Tobago",
	    "Tschad",
	    "Tschechische Republik",
	    "Tunesien",
	    "Turkmenistan",
	    "Turks- und Caicosinseln",
	    "Tuvalu",
	    "Uganda",
	    "Ukraine",
	    "Ungarn",
	    "Uruguay",
	    "Usbekistan",
	    "Vanuatu",
	    "Vatikanstadt",
	    "Venezuela",
	    "Vereinigte Arabische Emirate",
	    "Vereinigte Staaten",
	    "Vereinigtes Königreich",
	    "Vietnam",
	    "Wallis und Futuna",
	    "Weihnachtsinsel",
	    "Westsahara",
	    "Zentralafrikanische Republik",
	    "Zypern"
	  ],
	  "street_root": [
	    "Ackerweg",
	    "Adalbert-Stifter-Str.",
	    "Adalbertstr.",
	    "Adolf-Baeyer-Str.",
	    "Adolf-Kaschny-Str.",
	    "Adolf-Reichwein-Str.",
	    "Adolfsstr.",
	    "Ahornweg",
	    "Ahrstr.",
	    "Akazienweg",
	    "Albert-Einstein-Str.",
	    "Albert-Schweitzer-Str.",
	    "Albertus-Magnus-Str.",
	    "Albert-Zarthe-Weg",
	    "Albin-Edelmann-Str.",
	    "Albrecht-Haushofer-Str.",
	    "Aldegundisstr.",
	    "Alexanderstr.",
	    "Alfred-Delp-Str.",
	    "Alfred-Kubin-Str.",
	    "Alfred-Stock-Str.",
	    "Alkenrather Str.",
	    "Allensteiner Str.",
	    "Alsenstr.",
	    "Alt Steinbücheler Weg",
	    "Alte Garten",
	    "Alte Heide",
	    "Alte Landstr.",
	    "Alte Ziegelei",
	    "Altenberger Str.",
	    "Altenhof",
	    "Alter Grenzweg",
	    "Altstadtstr.",
	    "Am Alten Gaswerk",
	    "Am Alten Schafstall",
	    "Am Arenzberg",
	    "Am Benthal",
	    "Am Birkenberg",
	    "Am Blauen Berg",
	    "Am Borsberg",
	    "Am Brungen",
	    "Am Büchelter Hof",
	    "Am Buttermarkt",
	    "Am Ehrenfriedhof",
	    "Am Eselsdamm",
	    "Am Falkenberg",
	    "Am Frankenberg",
	    "Am Gesundheitspark",
	    "Am Gierlichshof",
	    "Am Graben",
	    "Am Hagelkreuz",
	    "Am Hang",
	    "Am Heidkamp",
	    "Am Hemmelrather Hof",
	    "Am Hofacker",
	    "Am Hohen Ufer",
	    "Am Höllers Eck",
	    "Am Hühnerberg",
	    "Am Jägerhof",
	    "Am Junkernkamp",
	    "Am Kemperstiegel",
	    "Am Kettnersbusch",
	    "Am Kiesberg",
	    "Am Klösterchen",
	    "Am Knechtsgraben",
	    "Am Köllerweg",
	    "Am Köttersbach",
	    "Am Kreispark",
	    "Am Kronefeld",
	    "Am Küchenhof",
	    "Am Kühnsbusch",
	    "Am Lindenfeld",
	    "Am Märchen",
	    "Am Mittelberg",
	    "Am Mönchshof",
	    "Am Mühlenbach",
	    "Am Neuenhof",
	    "Am Nonnenbruch",
	    "Am Plattenbusch",
	    "Am Quettinger Feld",
	    "Am Rosenhügel",
	    "Am Sandberg",
	    "Am Scherfenbrand",
	    "Am Schokker",
	    "Am Silbersee",
	    "Am Sonnenhang",
	    "Am Sportplatz",
	    "Am Stadtpark",
	    "Am Steinberg",
	    "Am Telegraf",
	    "Am Thelenhof",
	    "Am Vogelkreuz",
	    "Am Vogelsang",
	    "Am Vogelsfeldchen",
	    "Am Wambacher Hof",
	    "Am Wasserturm",
	    "Am Weidenbusch",
	    "Am Weiher",
	    "Am Weingarten",
	    "Am Werth",
	    "Amselweg",
	    "An den Irlen",
	    "An den Rheinauen",
	    "An der Bergerweide",
	    "An der Dingbank",
	    "An der Evangelischen Kirche",
	    "An der Evgl. Kirche",
	    "An der Feldgasse",
	    "An der Fettehenne",
	    "An der Kante",
	    "An der Laach",
	    "An der Lehmkuhle",
	    "An der Lichtenburg",
	    "An der Luisenburg",
	    "An der Robertsburg",
	    "An der Schmitten",
	    "An der Schusterinsel",
	    "An der Steinrütsch",
	    "An St. Andreas",
	    "An St. Remigius",
	    "Andreasstr.",
	    "Ankerweg",
	    "Annette-Kolb-Str.",
	    "Apenrader Str.",
	    "Arnold-Ohletz-Str.",
	    "Atzlenbacher Str.",
	    "Auerweg",
	    "Auestr.",
	    "Auf dem Acker",
	    "Auf dem Blahnenhof",
	    "Auf dem Bohnbüchel",
	    "Auf dem Bruch",
	    "Auf dem End",
	    "Auf dem Forst",
	    "Auf dem Herberg",
	    "Auf dem Lehn",
	    "Auf dem Stein",
	    "Auf dem Weierberg",
	    "Auf dem Weiherhahn",
	    "Auf den Reien",
	    "Auf der Donnen",
	    "Auf der Grieße",
	    "Auf der Ohmer",
	    "Auf der Weide",
	    "Auf'm Berg",
	    "Auf'm Kamp",
	    "Augustastr.",
	    "August-Kekulé-Str.",
	    "A.-W.-v.-Hofmann-Str.",
	    "Bahnallee",
	    "Bahnhofstr.",
	    "Baltrumstr.",
	    "Bamberger Str.",
	    "Baumberger Str.",
	    "Bebelstr.",
	    "Beckers Kämpchen",
	    "Beerenstr.",
	    "Beethovenstr.",
	    "Behringstr.",
	    "Bendenweg",
	    "Bensberger Str.",
	    "Benzstr.",
	    "Bergische Landstr.",
	    "Bergstr.",
	    "Berliner Platz",
	    "Berliner Str.",
	    "Bernhard-Letterhaus-Str.",
	    "Bernhard-Lichtenberg-Str.",
	    "Bernhard-Ridder-Str.",
	    "Bernsteinstr.",
	    "Bertha-Middelhauve-Str.",
	    "Bertha-von-Suttner-Str.",
	    "Bertolt-Brecht-Str.",
	    "Berzeliusstr.",
	    "Bielertstr.",
	    "Biesenbach",
	    "Billrothstr.",
	    "Birkenbergstr.",
	    "Birkengartenstr.",
	    "Birkenweg",
	    "Bismarckstr.",
	    "Bitterfelder Str.",
	    "Blankenburg",
	    "Blaukehlchenweg",
	    "Blütenstr.",
	    "Boberstr.",
	    "Böcklerstr.",
	    "Bodelschwinghstr.",
	    "Bodestr.",
	    "Bogenstr.",
	    "Bohnenkampsweg",
	    "Bohofsweg",
	    "Bonifatiusstr.",
	    "Bonner Str.",
	    "Borkumstr.",
	    "Bornheimer Str.",
	    "Borsigstr.",
	    "Borussiastr.",
	    "Bracknellstr.",
	    "Brahmsweg",
	    "Brandenburger Str.",
	    "Breidenbachstr.",
	    "Breslauer Str.",
	    "Bruchhauser Str.",
	    "Brückenstr.",
	    "Brucknerstr.",
	    "Brüder-Bonhoeffer-Str.",
	    "Buchenweg",
	    "Bürgerbuschweg",
	    "Burgloch",
	    "Burgplatz",
	    "Burgstr.",
	    "Burgweg",
	    "Bürriger Weg",
	    "Burscheider Str.",
	    "Buschkämpchen",
	    "Butterheider Str.",
	    "Carl-Duisberg-Platz",
	    "Carl-Duisberg-Str.",
	    "Carl-Leverkus-Str.",
	    "Carl-Maria-von-Weber-Platz",
	    "Carl-Maria-von-Weber-Str.",
	    "Carlo-Mierendorff-Str.",
	    "Carl-Rumpff-Str.",
	    "Carl-von-Ossietzky-Str.",
	    "Charlottenburger Str.",
	    "Christian-Heß-Str.",
	    "Claasbruch",
	    "Clemens-Winkler-Str.",
	    "Concordiastr.",
	    "Cranachstr.",
	    "Dahlemer Str.",
	    "Daimlerstr.",
	    "Damaschkestr.",
	    "Danziger Str.",
	    "Debengasse",
	    "Dechant-Fein-Str.",
	    "Dechant-Krey-Str.",
	    "Deichtorstr.",
	    "Dhünnberg",
	    "Dhünnstr.",
	    "Dianastr.",
	    "Diedenhofener Str.",
	    "Diepental",
	    "Diepenthaler Str.",
	    "Dieselstr.",
	    "Dillinger Str.",
	    "Distelkamp",
	    "Dohrgasse",
	    "Domblick",
	    "Dönhoffstr.",
	    "Dornierstr.",
	    "Drachenfelsstr.",
	    "Dr.-August-Blank-Str.",
	    "Dresdener Str.",
	    "Driescher Hecke",
	    "Drosselweg",
	    "Dudweilerstr.",
	    "Dünenweg",
	    "Dünfelder Str.",
	    "Dünnwalder Grenzweg",
	    "Düppeler Str.",
	    "Dürerstr.",
	    "Dürscheider Weg",
	    "Düsseldorfer Str.",
	    "Edelrather Weg",
	    "Edmund-Husserl-Str.",
	    "Eduard-Spranger-Str.",
	    "Ehrlichstr.",
	    "Eichenkamp",
	    "Eichenweg",
	    "Eidechsenweg",
	    "Eifelstr.",
	    "Eifgenstr.",
	    "Eintrachtstr.",
	    "Elbestr.",
	    "Elisabeth-Langgässer-Str.",
	    "Elisabethstr.",
	    "Elisabeth-von-Thadden-Str.",
	    "Elisenstr.",
	    "Elsa-Brändström-Str.",
	    "Elsbachstr.",
	    "Else-Lasker-Schüler-Str.",
	    "Elsterstr.",
	    "Emil-Fischer-Str.",
	    "Emil-Nolde-Str.",
	    "Engelbertstr.",
	    "Engstenberger Weg",
	    "Entenpfuhl",
	    "Erbelegasse",
	    "Erftstr.",
	    "Erfurter Str.",
	    "Erich-Heckel-Str.",
	    "Erich-Klausener-Str.",
	    "Erich-Ollenhauer-Str.",
	    "Erlenweg",
	    "Ernst-Bloch-Str.",
	    "Ernst-Ludwig-Kirchner-Str.",
	    "Erzbergerstr.",
	    "Eschenallee",
	    "Eschenweg",
	    "Esmarchstr.",
	    "Espenweg",
	    "Euckenstr.",
	    "Eulengasse",
	    "Eulenkamp",
	    "Ewald-Flamme-Str.",
	    "Ewald-Röll-Str.",
	    "Fährstr.",
	    "Farnweg",
	    "Fasanenweg",
	    "Faßbacher Hof",
	    "Felderstr.",
	    "Feldkampstr.",
	    "Feldsiefer Weg",
	    "Feldsiefer Wiesen",
	    "Feldstr.",
	    "Feldtorstr.",
	    "Felix-von-Roll-Str.",
	    "Ferdinand-Lassalle-Str.",
	    "Fester Weg",
	    "Feuerbachstr.",
	    "Feuerdornweg",
	    "Fichtenweg",
	    "Fichtestr.",
	    "Finkelsteinstr.",
	    "Finkenweg",
	    "Fixheider Str.",
	    "Flabbenhäuschen",
	    "Flensburger Str.",
	    "Fliederweg",
	    "Florastr.",
	    "Florianweg",
	    "Flotowstr.",
	    "Flurstr.",
	    "Föhrenweg",
	    "Fontanestr.",
	    "Forellental",
	    "Fortunastr.",
	    "Franz-Esser-Str.",
	    "Franz-Hitze-Str.",
	    "Franz-Kail-Str.",
	    "Franz-Marc-Str.",
	    "Freiburger Str.",
	    "Freiheitstr.",
	    "Freiherr-vom-Stein-Str.",
	    "Freudenthal",
	    "Freudenthaler Weg",
	    "Fridtjof-Nansen-Str.",
	    "Friedenberger Str.",
	    "Friedensstr.",
	    "Friedhofstr.",
	    "Friedlandstr.",
	    "Friedlieb-Ferdinand-Runge-Str.",
	    "Friedrich-Bayer-Str.",
	    "Friedrich-Bergius-Platz",
	    "Friedrich-Ebert-Platz",
	    "Friedrich-Ebert-Str.",
	    "Friedrich-Engels-Str.",
	    "Friedrich-List-Str.",
	    "Friedrich-Naumann-Str.",
	    "Friedrich-Sertürner-Str.",
	    "Friedrichstr.",
	    "Friedrich-Weskott-Str.",
	    "Friesenweg",
	    "Frischenberg",
	    "Fritz-Erler-Str.",
	    "Fritz-Henseler-Str.",
	    "Fröbelstr.",
	    "Fürstenbergplatz",
	    "Fürstenbergstr.",
	    "Gabriele-Münter-Str.",
	    "Gartenstr.",
	    "Gebhardstr.",
	    "Geibelstr.",
	    "Gellertstr.",
	    "Georg-von-Vollmar-Str.",
	    "Gerhard-Domagk-Str.",
	    "Gerhart-Hauptmann-Str.",
	    "Gerichtsstr.",
	    "Geschwister-Scholl-Str.",
	    "Gezelinallee",
	    "Gierener Weg",
	    "Ginsterweg",
	    "Gisbert-Cremer-Str.",
	    "Glücksburger Str.",
	    "Gluckstr.",
	    "Gneisenaustr.",
	    "Goetheplatz",
	    "Goethestr.",
	    "Golo-Mann-Str.",
	    "Görlitzer Str.",
	    "Görresstr.",
	    "Graebestr.",
	    "Graf-Galen-Platz",
	    "Gregor-Mendel-Str.",
	    "Greifswalder Str.",
	    "Grillenweg",
	    "Gronenborner Weg",
	    "Große Kirchstr.",
	    "Grunder Wiesen",
	    "Grundermühle",
	    "Grundermühlenhof",
	    "Grundermühlenweg",
	    "Grüner Weg",
	    "Grunewaldstr.",
	    "Grünstr.",
	    "Günther-Weisenborn-Str.",
	    "Gustav-Freytag-Str.",
	    "Gustav-Heinemann-Str.",
	    "Gustav-Radbruch-Str.",
	    "Gut Reuschenberg",
	    "Gutenbergstr.",
	    "Haberstr.",
	    "Habichtgasse",
	    "Hafenstr.",
	    "Hagenauer Str.",
	    "Hahnenblecher",
	    "Halenseestr.",
	    "Halfenleimbach",
	    "Hallesche Str.",
	    "Halligstr.",
	    "Hamberger Str.",
	    "Hammerweg",
	    "Händelstr.",
	    "Hannah-Höch-Str.",
	    "Hans-Arp-Str.",
	    "Hans-Gerhard-Str.",
	    "Hans-Sachs-Str.",
	    "Hans-Schlehahn-Str.",
	    "Hans-von-Dohnanyi-Str.",
	    "Hardenbergstr.",
	    "Haselweg",
	    "Hauptstr.",
	    "Haus-Vorster-Str.",
	    "Hauweg",
	    "Havelstr.",
	    "Havensteinstr.",
	    "Haydnstr.",
	    "Hebbelstr.",
	    "Heckenweg",
	    "Heerweg",
	    "Hegelstr.",
	    "Heidberg",
	    "Heidehöhe",
	    "Heidestr.",
	    "Heimstättenweg",
	    "Heinrich-Böll-Str.",
	    "Heinrich-Brüning-Str.",
	    "Heinrich-Claes-Str.",
	    "Heinrich-Heine-Str.",
	    "Heinrich-Hörlein-Str.",
	    "Heinrich-Lübke-Str.",
	    "Heinrich-Lützenkirchen-Weg",
	    "Heinrichstr.",
	    "Heinrich-Strerath-Str.",
	    "Heinrich-von-Kleist-Str.",
	    "Heinrich-von-Stephan-Str.",
	    "Heisterbachstr.",
	    "Helenenstr.",
	    "Helmestr.",
	    "Hemmelrather Weg",
	    "Henry-T.-v.-Böttinger-Str.",
	    "Herderstr.",
	    "Heribertstr.",
	    "Hermann-Ehlers-Str.",
	    "Hermann-Hesse-Str.",
	    "Hermann-König-Str.",
	    "Hermann-Löns-Str.",
	    "Hermann-Milde-Str.",
	    "Hermann-Nörrenberg-Str.",
	    "Hermann-von-Helmholtz-Str.",
	    "Hermann-Waibel-Str.",
	    "Herzogstr.",
	    "Heymannstr.",
	    "Hindenburgstr.",
	    "Hirzenberg",
	    "Hitdorfer Kirchweg",
	    "Hitdorfer Str.",
	    "Höfer Mühle",
	    "Höfer Weg",
	    "Hohe Str.",
	    "Höhenstr.",
	    "Höltgestal",
	    "Holunderweg",
	    "Holzer Weg",
	    "Holzer Wiesen",
	    "Hornpottweg",
	    "Hubertusweg",
	    "Hufelandstr.",
	    "Hufer Weg",
	    "Humboldtstr.",
	    "Hummelsheim",
	    "Hummelweg",
	    "Humperdinckstr.",
	    "Hüscheider Gärten",
	    "Hüscheider Str.",
	    "Hütte",
	    "Ilmstr.",
	    "Im Bergischen Heim",
	    "Im Bruch",
	    "Im Buchenhain",
	    "Im Bühl",
	    "Im Burgfeld",
	    "Im Dorf",
	    "Im Eisholz",
	    "Im Friedenstal",
	    "Im Frohental",
	    "Im Grunde",
	    "Im Hederichsfeld",
	    "Im Jücherfeld",
	    "Im Kalkfeld",
	    "Im Kirberg",
	    "Im Kirchfeld",
	    "Im Kreuzbruch",
	    "Im Mühlenfeld",
	    "Im Nesselrader Kamp",
	    "Im Oberdorf",
	    "Im Oberfeld",
	    "Im Rosengarten",
	    "Im Rottland",
	    "Im Scheffengarten",
	    "Im Staderfeld",
	    "Im Steinfeld",
	    "Im Weidenblech",
	    "Im Winkel",
	    "Im Ziegelfeld",
	    "Imbach",
	    "Imbacher Weg",
	    "Immenweg",
	    "In den Blechenhöfen",
	    "In den Dehlen",
	    "In der Birkenau",
	    "In der Dasladen",
	    "In der Felderhütten",
	    "In der Hartmannswiese",
	    "In der Höhle",
	    "In der Schaafsdellen",
	    "In der Wasserkuhl",
	    "In der Wüste",
	    "In Holzhausen",
	    "Insterstr.",
	    "Jacob-Fröhlen-Str.",
	    "Jägerstr.",
	    "Jahnstr.",
	    "Jakob-Eulenberg-Weg",
	    "Jakobistr.",
	    "Jakob-Kaiser-Str.",
	    "Jenaer Str.",
	    "Johannes-Baptist-Str.",
	    "Johannes-Dott-Str.",
	    "Johannes-Popitz-Str.",
	    "Johannes-Wislicenus-Str.",
	    "Johannisburger Str.",
	    "Johann-Janssen-Str.",
	    "Johann-Wirtz-Weg",
	    "Josefstr.",
	    "Jüch",
	    "Julius-Doms-Str.",
	    "Julius-Leber-Str.",
	    "Kaiserplatz",
	    "Kaiserstr.",
	    "Kaiser-Wilhelm-Allee",
	    "Kalkstr.",
	    "Kämpchenstr.",
	    "Kämpenwiese",
	    "Kämper Weg",
	    "Kamptalweg",
	    "Kanalstr.",
	    "Kandinskystr.",
	    "Kantstr.",
	    "Kapellenstr.",
	    "Karl-Arnold-Str.",
	    "Karl-Bosch-Str.",
	    "Karl-Bückart-Str.",
	    "Karl-Carstens-Ring",
	    "Karl-Friedrich-Goerdeler-Str.",
	    "Karl-Jaspers-Str.",
	    "Karl-König-Str.",
	    "Karl-Krekeler-Str.",
	    "Karl-Marx-Str.",
	    "Karlstr.",
	    "Karl-Ulitzka-Str.",
	    "Karl-Wichmann-Str.",
	    "Karl-Wingchen-Str.",
	    "Käsenbrod",
	    "Käthe-Kollwitz-Str.",
	    "Katzbachstr.",
	    "Kerschensteinerstr.",
	    "Kiefernweg",
	    "Kieler Str.",
	    "Kieselstr.",
	    "Kiesweg",
	    "Kinderhausen",
	    "Kleiberweg",
	    "Kleine Kirchstr.",
	    "Kleingansweg",
	    "Kleinheider Weg",
	    "Klief",
	    "Kneippstr.",
	    "Knochenbergsweg",
	    "Kochergarten",
	    "Kocherstr.",
	    "Kockelsberg",
	    "Kolberger Str.",
	    "Kolmarer Str.",
	    "Kölner Gasse",
	    "Kölner Str.",
	    "Kolpingstr.",
	    "Königsberger Platz",
	    "Konrad-Adenauer-Platz",
	    "Köpenicker Str.",
	    "Kopernikusstr.",
	    "Körnerstr.",
	    "Köschenberg",
	    "Köttershof",
	    "Kreuzbroicher Str.",
	    "Kreuzkamp",
	    "Krummer Weg",
	    "Kruppstr.",
	    "Kuhlmannweg",
	    "Kump",
	    "Kumper Weg",
	    "Kunstfeldstr.",
	    "Küppersteger Str.",
	    "Kursiefen",
	    "Kursiefer Weg",
	    "Kurtekottenweg",
	    "Kurt-Schumacher-Ring",
	    "Kyllstr.",
	    "Langenfelder Str.",
	    "Längsleimbach",
	    "Lärchenweg",
	    "Legienstr.",
	    "Lehner Mühle",
	    "Leichlinger Str.",
	    "Leimbacher Hof",
	    "Leinestr.",
	    "Leineweberstr.",
	    "Leipziger Str.",
	    "Lerchengasse",
	    "Lessingstr.",
	    "Libellenweg",
	    "Lichstr.",
	    "Liebigstr.",
	    "Lindenstr.",
	    "Lingenfeld",
	    "Linienstr.",
	    "Lippe",
	    "Löchergraben",
	    "Löfflerstr.",
	    "Loheweg",
	    "Lohrbergstr.",
	    "Lohrstr.",
	    "Löhstr.",
	    "Lortzingstr.",
	    "Lötzener Str.",
	    "Löwenburgstr.",
	    "Lucasstr.",
	    "Ludwig-Erhard-Platz",
	    "Ludwig-Girtler-Str.",
	    "Ludwig-Knorr-Str.",
	    "Luisenstr.",
	    "Lupinenweg",
	    "Lurchenweg",
	    "Lützenkirchener Str.",
	    "Lycker Str.",
	    "Maashofstr.",
	    "Manforter Str.",
	    "Marc-Chagall-Str.",
	    "Maria-Dresen-Str.",
	    "Maria-Terwiel-Str.",
	    "Marie-Curie-Str.",
	    "Marienburger Str.",
	    "Mariendorfer Str.",
	    "Marienwerderstr.",
	    "Marie-Schlei-Str.",
	    "Marktplatz",
	    "Markusweg",
	    "Martin-Buber-Str.",
	    "Martin-Heidegger-Str.",
	    "Martin-Luther-Str.",
	    "Masurenstr.",
	    "Mathildenweg",
	    "Maurinusstr.",
	    "Mauspfad",
	    "Max-Beckmann-Str.",
	    "Max-Delbrück-Str.",
	    "Max-Ernst-Str.",
	    "Max-Holthausen-Platz",
	    "Max-Horkheimer-Str.",
	    "Max-Liebermann-Str.",
	    "Max-Pechstein-Str.",
	    "Max-Planck-Str.",
	    "Max-Scheler-Str.",
	    "Max-Schönenberg-Str.",
	    "Maybachstr.",
	    "Meckhofer Feld",
	    "Meisenweg",
	    "Memelstr.",
	    "Menchendahler Str.",
	    "Mendelssohnstr.",
	    "Merziger Str.",
	    "Mettlacher Str.",
	    "Metzer Str.",
	    "Michaelsweg",
	    "Miselohestr.",
	    "Mittelstr.",
	    "Mohlenstr.",
	    "Moltkestr.",
	    "Monheimer Str.",
	    "Montanusstr.",
	    "Montessoriweg",
	    "Moosweg",
	    "Morsbroicher Str.",
	    "Moselstr.",
	    "Moskauer Str.",
	    "Mozartstr.",
	    "Mühlenweg",
	    "Muhrgasse",
	    "Muldestr.",
	    "Mülhausener Str.",
	    "Mülheimer Str.",
	    "Münsters Gäßchen",
	    "Münzstr.",
	    "Müritzstr.",
	    "Myliusstr.",
	    "Nachtigallenweg",
	    "Nauener Str.",
	    "Neißestr.",
	    "Nelly-Sachs-Str.",
	    "Netzestr.",
	    "Neuendriesch",
	    "Neuenhausgasse",
	    "Neuenkamp",
	    "Neujudenhof",
	    "Neukronenberger Str.",
	    "Neustadtstr.",
	    "Nicolai-Hartmann-Str.",
	    "Niederblecher",
	    "Niederfeldstr.",
	    "Nietzschestr.",
	    "Nikolaus-Groß-Str.",
	    "Nobelstr.",
	    "Norderneystr.",
	    "Nordstr.",
	    "Ober dem Hof",
	    "Obere Lindenstr.",
	    "Obere Str.",
	    "Oberölbach",
	    "Odenthaler Str.",
	    "Oderstr.",
	    "Okerstr.",
	    "Olof-Palme-Str.",
	    "Ophovener Str.",
	    "Opladener Platz",
	    "Opladener Str.",
	    "Ortelsburger Str.",
	    "Oskar-Moll-Str.",
	    "Oskar-Schlemmer-Str.",
	    "Oststr.",
	    "Oswald-Spengler-Str.",
	    "Otto-Dix-Str.",
	    "Otto-Grimm-Str.",
	    "Otto-Hahn-Str.",
	    "Otto-Müller-Str.",
	    "Otto-Stange-Str.",
	    "Ottostr.",
	    "Otto-Varnhagen-Str.",
	    "Otto-Wels-Str.",
	    "Ottweilerstr.",
	    "Oulustr.",
	    "Overfeldweg",
	    "Pappelweg",
	    "Paracelsusstr.",
	    "Parkstr.",
	    "Pastor-Louis-Str.",
	    "Pastor-Scheibler-Str.",
	    "Pastorskamp",
	    "Paul-Klee-Str.",
	    "Paul-Löbe-Str.",
	    "Paulstr.",
	    "Peenestr.",
	    "Pescher Busch",
	    "Peschstr.",
	    "Pestalozzistr.",
	    "Peter-Grieß-Str.",
	    "Peter-Joseph-Lenné-Str.",
	    "Peter-Neuenheuser-Str.",
	    "Petersbergstr.",
	    "Peterstr.",
	    "Pfarrer-Jekel-Str.",
	    "Pfarrer-Klein-Str.",
	    "Pfarrer-Röhr-Str.",
	    "Pfeilshofstr.",
	    "Philipp-Ott-Str.",
	    "Piet-Mondrian-Str.",
	    "Platanenweg",
	    "Pommernstr.",
	    "Porschestr.",
	    "Poststr.",
	    "Potsdamer Str.",
	    "Pregelstr.",
	    "Prießnitzstr.",
	    "Pützdelle",
	    "Quarzstr.",
	    "Quettinger Str.",
	    "Rat-Deycks-Str.",
	    "Rathenaustr.",
	    "Ratherkämp",
	    "Ratiborer Str.",
	    "Raushofstr.",
	    "Regensburger Str.",
	    "Reinickendorfer Str.",
	    "Renkgasse",
	    "Rennbaumplatz",
	    "Rennbaumstr.",
	    "Reuschenberger Str.",
	    "Reusrather Str.",
	    "Reuterstr.",
	    "Rheinallee",
	    "Rheindorfer Str.",
	    "Rheinstr.",
	    "Rhein-Wupper-Platz",
	    "Richard-Wagner-Str.",
	    "Rilkestr.",
	    "Ringstr.",
	    "Robert-Blum-Str.",
	    "Robert-Koch-Str.",
	    "Robert-Medenwald-Str.",
	    "Rolandstr.",
	    "Romberg",
	    "Röntgenstr.",
	    "Roonstr.",
	    "Ropenstall",
	    "Ropenstaller Weg",
	    "Rosenthal",
	    "Rostocker Str.",
	    "Rotdornweg",
	    "Röttgerweg",
	    "Rückertstr.",
	    "Rudolf-Breitscheid-Str.",
	    "Rudolf-Mann-Platz",
	    "Rudolf-Stracke-Str.",
	    "Ruhlachplatz",
	    "Ruhlachstr.",
	    "Rüttersweg",
	    "Saalestr.",
	    "Saarbrücker Str.",
	    "Saarlauterner Str.",
	    "Saarstr.",
	    "Salamanderweg",
	    "Samlandstr.",
	    "Sanddornstr.",
	    "Sandstr.",
	    "Sauerbruchstr.",
	    "Schäfershütte",
	    "Scharnhorststr.",
	    "Scheffershof",
	    "Scheidemannstr.",
	    "Schellingstr.",
	    "Schenkendorfstr.",
	    "Schießbergstr.",
	    "Schillerstr.",
	    "Schlangenhecke",
	    "Schlebuscher Heide",
	    "Schlebuscher Str.",
	    "Schlebuschrath",
	    "Schlehdornstr.",
	    "Schleiermacherstr.",
	    "Schloßstr.",
	    "Schmalenbruch",
	    "Schnepfenflucht",
	    "Schöffenweg",
	    "Schöllerstr.",
	    "Schöne Aussicht",
	    "Schöneberger Str.",
	    "Schopenhauerstr.",
	    "Schubertplatz",
	    "Schubertstr.",
	    "Schulberg",
	    "Schulstr.",
	    "Schumannstr.",
	    "Schwalbenweg",
	    "Schwarzastr.",
	    "Sebastianusweg",
	    "Semmelweisstr.",
	    "Siebelplatz",
	    "Siemensstr.",
	    "Solinger Str.",
	    "Sonderburger Str.",
	    "Spandauer Str.",
	    "Speestr.",
	    "Sperberweg",
	    "Sperlingsweg",
	    "Spitzwegstr.",
	    "Sporrenberger Mühle",
	    "Spreestr.",
	    "St. Ingberter Str.",
	    "Starenweg",
	    "Stauffenbergstr.",
	    "Stefan-Zweig-Str.",
	    "Stegerwaldstr.",
	    "Steglitzer Str.",
	    "Steinbücheler Feld",
	    "Steinbücheler Str.",
	    "Steinstr.",
	    "Steinweg",
	    "Stephan-Lochner-Str.",
	    "Stephanusstr.",
	    "Stettiner Str.",
	    "Stixchesstr.",
	    "Stöckenstr.",
	    "Stralsunder Str.",
	    "Straßburger Str.",
	    "Stresemannplatz",
	    "Strombergstr.",
	    "Stromstr.",
	    "Stüttekofener Str.",
	    "Sudestr.",
	    "Sürderstr.",
	    "Syltstr.",
	    "Talstr.",
	    "Tannenbergstr.",
	    "Tannenweg",
	    "Taubenweg",
	    "Teitscheider Weg",
	    "Telegrafenstr.",
	    "Teltower Str.",
	    "Tempelhofer Str.",
	    "Theodor-Adorno-Str.",
	    "Theodor-Fliedner-Str.",
	    "Theodor-Gierath-Str.",
	    "Theodor-Haubach-Str.",
	    "Theodor-Heuss-Ring",
	    "Theodor-Storm-Str.",
	    "Theodorstr.",
	    "Thomas-Dehler-Str.",
	    "Thomas-Morus-Str.",
	    "Thomas-von-Aquin-Str.",
	    "Tönges Feld",
	    "Torstr.",
	    "Treptower Str.",
	    "Treuburger Str.",
	    "Uhlandstr.",
	    "Ulmenweg",
	    "Ulmer Str.",
	    "Ulrichstr.",
	    "Ulrich-von-Hassell-Str.",
	    "Umlag",
	    "Unstrutstr.",
	    "Unter dem Schildchen",
	    "Unterölbach",
	    "Unterstr.",
	    "Uppersberg",
	    "Van\\'t-Hoff-Str.",
	    "Veit-Stoß-Str.",
	    "Vereinsstr.",
	    "Viktor-Meyer-Str.",
	    "Vincent-van-Gogh-Str.",
	    "Virchowstr.",
	    "Voigtslach",
	    "Volhardstr.",
	    "Völklinger Str.",
	    "Von-Brentano-Str.",
	    "Von-Diergardt-Str.",
	    "Von-Eichendorff-Str.",
	    "Von-Ketteler-Str.",
	    "Von-Knoeringen-Str.",
	    "Von-Pettenkofer-Str.",
	    "Von-Siebold-Str.",
	    "Wacholderweg",
	    "Waldstr.",
	    "Walter-Flex-Str.",
	    "Walter-Hempel-Str.",
	    "Walter-Hochapfel-Str.",
	    "Walter-Nernst-Str.",
	    "Wannseestr.",
	    "Warnowstr.",
	    "Warthestr.",
	    "Weddigenstr.",
	    "Weichselstr.",
	    "Weidenstr.",
	    "Weidfeldstr.",
	    "Weiherfeld",
	    "Weiherstr.",
	    "Weinhäuser Str.",
	    "Weißdornweg",
	    "Weißenseestr.",
	    "Weizkamp",
	    "Werftstr.",
	    "Werkstättenstr.",
	    "Werner-Heisenberg-Str.",
	    "Werrastr.",
	    "Weyerweg",
	    "Widdauener Str.",
	    "Wiebertshof",
	    "Wiehbachtal",
	    "Wiembachallee",
	    "Wiesdorfer Platz",
	    "Wiesenstr.",
	    "Wilhelm-Busch-Str.",
	    "Wilhelm-Hastrich-Str.",
	    "Wilhelm-Leuschner-Str.",
	    "Wilhelm-Liebknecht-Str.",
	    "Wilhelmsgasse",
	    "Wilhelmstr.",
	    "Willi-Baumeister-Str.",
	    "Willy-Brandt-Ring",
	    "Winand-Rossi-Str.",
	    "Windthorststr.",
	    "Winkelweg",
	    "Winterberg",
	    "Wittenbergstr.",
	    "Wolf-Vostell-Str.",
	    "Wolkenburgstr.",
	    "Wupperstr.",
	    "Wuppertalstr.",
	    "Wüstenhof",
	    "Yitzhak-Rabin-Str.",
	    "Zauberkuhle",
	    "Zedernweg",
	    "Zehlendorfer Str.",
	    "Zehntenweg",
	    "Zeisigweg",
	    "Zeppelinstr.",
	    "Zschopaustr.",
	    "Zum Claashäuschen",
	    "Zündhütchenweg",
	    "Zur Alten Brauerei",
	    "Zur alten Fabrik"
	  ],
	  "building_number": [
	    "###",
	    "##",
	    "#",
	    "##a",
	    "##b",
	    "##c"
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "Zimmer ###",
	    "# OG"
	  ],
	  "postcode": [
	    "#####",
	    "#####"
	  ],
	  "state": [
	    "Baden-Württemberg",
	    "Bayern",
	    "Berlin",
	    "Brandenburg",
	    "Bremen",
	    "Hamburg",
	    "Hessen",
	    "Mecklenburg-Vorpommern",
	    "Niedersachsen",
	    "Nordrhein-Westfalen",
	    "Rheinland-Pfalz",
	    "Saarland",
	    "Sachsen",
	    "Sachsen-Anhalt",
	    "Schleswig-Holstein",
	    "Thüringen"
	  ],
	  "state_abbr": [
	    "BW",
	    "BY",
	    "BE",
	    "BB",
	    "HB",
	    "HH",
	    "HE",
	    "MV",
	    "NI",
	    "NW",
	    "RP",
	    "SL",
	    "SN",
	    "ST",
	    "SH",
	    "TH"
	  ],
	  "city": [
	    "#{city_prefix} #{Name.first_name}#{city_suffix}",
	    "#{city_prefix} #{Name.first_name}",
	    "#{Name.first_name}#{city_suffix}",
	    "#{Name.last_name}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{street_root}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Deutschland"
	  ]
	};
	de.company = {
	  "suffix": [
	    "GmbH",
	    "AG",
	    "Gruppe",
	    "KG",
	    "GmbH & Co. KG",
	    "UG",
	    "OHG"
	  ],
	  "legal_form": [
	    "GmbH",
	    "AG",
	    "Gruppe",
	    "KG",
	    "GmbH & Co. KG",
	    "UG",
	    "OHG"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
	  ]
	};
	de.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "info",
	    "name",
	    "net",
	    "org",
	    "de",
	    "ch"
	  ]
	};
	de.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ]
	};
	de.name = {
	  "first_name": [
	    "Aaron",
	    "Abdul",
	    "Abdullah",
	    "Adam",
	    "Adrian",
	    "Adriano",
	    "Ahmad",
	    "Ahmed",
	    "Ahmet",
	    "Alan",
	    "Albert",
	    "Alessandro",
	    "Alessio",
	    "Alex",
	    "Alexander",
	    "Alfred",
	    "Ali",
	    "Amar",
	    "Amir",
	    "Amon",
	    "Andre",
	    "Andreas",
	    "Andrew",
	    "Angelo",
	    "Ansgar",
	    "Anthony",
	    "Anton",
	    "Antonio",
	    "Arda",
	    "Arian",
	    "Armin",
	    "Arne",
	    "Arno",
	    "Arthur",
	    "Artur",
	    "Arved",
	    "Arvid",
	    "Ayman",
	    "Baran",
	    "Baris",
	    "Bastian",
	    "Batuhan",
	    "Bela",
	    "Ben",
	    "Benedikt",
	    "Benjamin",
	    "Bennet",
	    "Bennett",
	    "Benno",
	    "Bent",
	    "Berat",
	    "Berkay",
	    "Bernd",
	    "Bilal",
	    "Bjarne",
	    "Björn",
	    "Bo",
	    "Boris",
	    "Brandon",
	    "Brian",
	    "Bruno",
	    "Bryan",
	    "Burak",
	    "Calvin",
	    "Can",
	    "Carl",
	    "Carlo",
	    "Carlos",
	    "Caspar",
	    "Cedric",
	    "Cedrik",
	    "Cem",
	    "Charlie",
	    "Chris",
	    "Christian",
	    "Christiano",
	    "Christoph",
	    "Christopher",
	    "Claas",
	    "Clemens",
	    "Colin",
	    "Collin",
	    "Conner",
	    "Connor",
	    "Constantin",
	    "Corvin",
	    "Curt",
	    "Damian",
	    "Damien",
	    "Daniel",
	    "Danilo",
	    "Danny",
	    "Darian",
	    "Dario",
	    "Darius",
	    "Darren",
	    "David",
	    "Davide",
	    "Davin",
	    "Dean",
	    "Deniz",
	    "Dennis",
	    "Denny",
	    "Devin",
	    "Diego",
	    "Dion",
	    "Domenic",
	    "Domenik",
	    "Dominic",
	    "Dominik",
	    "Dorian",
	    "Dustin",
	    "Dylan",
	    "Ecrin",
	    "Eddi",
	    "Eddy",
	    "Edgar",
	    "Edwin",
	    "Efe",
	    "Ege",
	    "Elia",
	    "Eliah",
	    "Elias",
	    "Elijah",
	    "Emanuel",
	    "Emil",
	    "Emilian",
	    "Emilio",
	    "Emir",
	    "Emirhan",
	    "Emre",
	    "Enes",
	    "Enno",
	    "Enrico",
	    "Eren",
	    "Eric",
	    "Erik",
	    "Etienne",
	    "Fabian",
	    "Fabien",
	    "Fabio",
	    "Fabrice",
	    "Falk",
	    "Felix",
	    "Ferdinand",
	    "Fiete",
	    "Filip",
	    "Finlay",
	    "Finley",
	    "Finn",
	    "Finnley",
	    "Florian",
	    "Francesco",
	    "Franz",
	    "Frederic",
	    "Frederick",
	    "Frederik",
	    "Friedrich",
	    "Fritz",
	    "Furkan",
	    "Fynn",
	    "Gabriel",
	    "Georg",
	    "Gerrit",
	    "Gian",
	    "Gianluca",
	    "Gino",
	    "Giuliano",
	    "Giuseppe",
	    "Gregor",
	    "Gustav",
	    "Hagen",
	    "Hamza",
	    "Hannes",
	    "Hanno",
	    "Hans",
	    "Hasan",
	    "Hassan",
	    "Hauke",
	    "Hendrik",
	    "Hennes",
	    "Henning",
	    "Henri",
	    "Henrick",
	    "Henrik",
	    "Henry",
	    "Hugo",
	    "Hussein",
	    "Ian",
	    "Ibrahim",
	    "Ilias",
	    "Ilja",
	    "Ilyas",
	    "Immanuel",
	    "Ismael",
	    "Ismail",
	    "Ivan",
	    "Iven",
	    "Jack",
	    "Jacob",
	    "Jaden",
	    "Jakob",
	    "Jamal",
	    "James",
	    "Jamie",
	    "Jan",
	    "Janek",
	    "Janis",
	    "Janne",
	    "Jannek",
	    "Jannes",
	    "Jannik",
	    "Jannis",
	    "Jano",
	    "Janosch",
	    "Jared",
	    "Jari",
	    "Jarne",
	    "Jarno",
	    "Jaron",
	    "Jason",
	    "Jasper",
	    "Jay",
	    "Jayden",
	    "Jayson",
	    "Jean",
	    "Jens",
	    "Jeremias",
	    "Jeremie",
	    "Jeremy",
	    "Jermaine",
	    "Jerome",
	    "Jesper",
	    "Jesse",
	    "Jim",
	    "Jimmy",
	    "Joe",
	    "Joel",
	    "Joey",
	    "Johann",
	    "Johannes",
	    "John",
	    "Johnny",
	    "Jon",
	    "Jona",
	    "Jonah",
	    "Jonas",
	    "Jonathan",
	    "Jonte",
	    "Joost",
	    "Jordan",
	    "Joris",
	    "Joscha",
	    "Joschua",
	    "Josef",
	    "Joseph",
	    "Josh",
	    "Joshua",
	    "Josua",
	    "Juan",
	    "Julian",
	    "Julien",
	    "Julius",
	    "Juri",
	    "Justin",
	    "Justus",
	    "Kaan",
	    "Kai",
	    "Kalle",
	    "Karim",
	    "Karl",
	    "Karlo",
	    "Kay",
	    "Keanu",
	    "Kenan",
	    "Kenny",
	    "Keno",
	    "Kerem",
	    "Kerim",
	    "Kevin",
	    "Kian",
	    "Kilian",
	    "Kim",
	    "Kimi",
	    "Kjell",
	    "Klaas",
	    "Klemens",
	    "Konrad",
	    "Konstantin",
	    "Koray",
	    "Korbinian",
	    "Kurt",
	    "Lars",
	    "Lasse",
	    "Laurence",
	    "Laurens",
	    "Laurenz",
	    "Laurin",
	    "Lean",
	    "Leander",
	    "Leandro",
	    "Leif",
	    "Len",
	    "Lenn",
	    "Lennard",
	    "Lennart",
	    "Lennert",
	    "Lennie",
	    "Lennox",
	    "Lenny",
	    "Leo",
	    "Leon",
	    "Leonard",
	    "Leonardo",
	    "Leonhard",
	    "Leonidas",
	    "Leopold",
	    "Leroy",
	    "Levent",
	    "Levi",
	    "Levin",
	    "Lewin",
	    "Lewis",
	    "Liam",
	    "Lian",
	    "Lias",
	    "Lino",
	    "Linus",
	    "Lio",
	    "Lion",
	    "Lionel",
	    "Logan",
	    "Lorenz",
	    "Lorenzo",
	    "Loris",
	    "Louis",
	    "Luan",
	    "Luc",
	    "Luca",
	    "Lucas",
	    "Lucian",
	    "Lucien",
	    "Ludwig",
	    "Luis",
	    "Luiz",
	    "Luk",
	    "Luka",
	    "Lukas",
	    "Luke",
	    "Lutz",
	    "Maddox",
	    "Mads",
	    "Magnus",
	    "Maik",
	    "Maksim",
	    "Malik",
	    "Malte",
	    "Manuel",
	    "Marc",
	    "Marcel",
	    "Marco",
	    "Marcus",
	    "Marek",
	    "Marian",
	    "Mario",
	    "Marius",
	    "Mark",
	    "Marko",
	    "Markus",
	    "Marlo",
	    "Marlon",
	    "Marten",
	    "Martin",
	    "Marvin",
	    "Marwin",
	    "Mateo",
	    "Mathis",
	    "Matis",
	    "Mats",
	    "Matteo",
	    "Mattes",
	    "Matthias",
	    "Matthis",
	    "Matti",
	    "Mattis",
	    "Maurice",
	    "Max",
	    "Maxim",
	    "Maximilian",
	    "Mehmet",
	    "Meik",
	    "Melvin",
	    "Merlin",
	    "Mert",
	    "Michael",
	    "Michel",
	    "Mick",
	    "Miguel",
	    "Mika",
	    "Mikail",
	    "Mike",
	    "Milan",
	    "Milo",
	    "Mio",
	    "Mirac",
	    "Mirco",
	    "Mirko",
	    "Mohamed",
	    "Mohammad",
	    "Mohammed",
	    "Moritz",
	    "Morten",
	    "Muhammed",
	    "Murat",
	    "Mustafa",
	    "Nathan",
	    "Nathanael",
	    "Nelson",
	    "Neo",
	    "Nevio",
	    "Nick",
	    "Niclas",
	    "Nico",
	    "Nicolai",
	    "Nicolas",
	    "Niels",
	    "Nikita",
	    "Niklas",
	    "Niko",
	    "Nikolai",
	    "Nikolas",
	    "Nils",
	    "Nino",
	    "Noah",
	    "Noel",
	    "Norman",
	    "Odin",
	    "Oke",
	    "Ole",
	    "Oliver",
	    "Omar",
	    "Onur",
	    "Oscar",
	    "Oskar",
	    "Pascal",
	    "Patrice",
	    "Patrick",
	    "Paul",
	    "Peer",
	    "Pepe",
	    "Peter",
	    "Phil",
	    "Philip",
	    "Philipp",
	    "Pierre",
	    "Piet",
	    "Pit",
	    "Pius",
	    "Quentin",
	    "Quirin",
	    "Rafael",
	    "Raik",
	    "Ramon",
	    "Raphael",
	    "Rasmus",
	    "Raul",
	    "Rayan",
	    "René",
	    "Ricardo",
	    "Riccardo",
	    "Richard",
	    "Rick",
	    "Rico",
	    "Robert",
	    "Robin",
	    "Rocco",
	    "Roman",
	    "Romeo",
	    "Ron",
	    "Ruben",
	    "Ryan",
	    "Said",
	    "Salih",
	    "Sam",
	    "Sami",
	    "Sammy",
	    "Samuel",
	    "Sandro",
	    "Santino",
	    "Sascha",
	    "Sean",
	    "Sebastian",
	    "Selim",
	    "Semih",
	    "Shawn",
	    "Silas",
	    "Simeon",
	    "Simon",
	    "Sinan",
	    "Sky",
	    "Stefan",
	    "Steffen",
	    "Stephan",
	    "Steve",
	    "Steven",
	    "Sven",
	    "Sönke",
	    "Sören",
	    "Taha",
	    "Tamino",
	    "Tammo",
	    "Tarik",
	    "Tayler",
	    "Taylor",
	    "Teo",
	    "Theo",
	    "Theodor",
	    "Thies",
	    "Thilo",
	    "Thomas",
	    "Thorben",
	    "Thore",
	    "Thorge",
	    "Tiago",
	    "Til",
	    "Till",
	    "Tillmann",
	    "Tim",
	    "Timm",
	    "Timo",
	    "Timon",
	    "Timothy",
	    "Tino",
	    "Titus",
	    "Tizian",
	    "Tjark",
	    "Tobias",
	    "Tom",
	    "Tommy",
	    "Toni",
	    "Tony",
	    "Torben",
	    "Tore",
	    "Tristan",
	    "Tyler",
	    "Tyron",
	    "Umut",
	    "Valentin",
	    "Valentino",
	    "Veit",
	    "Victor",
	    "Viktor",
	    "Vin",
	    "Vincent",
	    "Vito",
	    "Vitus",
	    "Wilhelm",
	    "Willi",
	    "William",
	    "Willy",
	    "Xaver",
	    "Yannic",
	    "Yannick",
	    "Yannik",
	    "Yannis",
	    "Yasin",
	    "Youssef",
	    "Yunus",
	    "Yusuf",
	    "Yven",
	    "Yves",
	    "Ömer",
	    "Aaliyah",
	    "Abby",
	    "Abigail",
	    "Ada",
	    "Adelina",
	    "Adriana",
	    "Aileen",
	    "Aimee",
	    "Alana",
	    "Alea",
	    "Alena",
	    "Alessa",
	    "Alessia",
	    "Alexa",
	    "Alexandra",
	    "Alexia",
	    "Alexis",
	    "Aleyna",
	    "Alia",
	    "Alica",
	    "Alice",
	    "Alicia",
	    "Alina",
	    "Alisa",
	    "Alisha",
	    "Alissa",
	    "Aliya",
	    "Aliyah",
	    "Allegra",
	    "Alma",
	    "Alyssa",
	    "Amalia",
	    "Amanda",
	    "Amelia",
	    "Amelie",
	    "Amina",
	    "Amira",
	    "Amy",
	    "Ana",
	    "Anabel",
	    "Anastasia",
	    "Andrea",
	    "Angela",
	    "Angelina",
	    "Angelique",
	    "Anja",
	    "Ann",
	    "Anna",
	    "Annabel",
	    "Annabell",
	    "Annabelle",
	    "Annalena",
	    "Anne",
	    "Anneke",
	    "Annelie",
	    "Annemarie",
	    "Anni",
	    "Annie",
	    "Annika",
	    "Anny",
	    "Anouk",
	    "Antonia",
	    "Arda",
	    "Ariana",
	    "Ariane",
	    "Arwen",
	    "Ashley",
	    "Asya",
	    "Aurelia",
	    "Aurora",
	    "Ava",
	    "Ayleen",
	    "Aylin",
	    "Ayse",
	    "Azra",
	    "Betty",
	    "Bianca",
	    "Bianka",
	    "Caitlin",
	    "Cara",
	    "Carina",
	    "Carla",
	    "Carlotta",
	    "Carmen",
	    "Carolin",
	    "Carolina",
	    "Caroline",
	    "Cassandra",
	    "Catharina",
	    "Catrin",
	    "Cecile",
	    "Cecilia",
	    "Celia",
	    "Celina",
	    "Celine",
	    "Ceyda",
	    "Ceylin",
	    "Chantal",
	    "Charleen",
	    "Charlotta",
	    "Charlotte",
	    "Chayenne",
	    "Cheyenne",
	    "Chiara",
	    "Christin",
	    "Christina",
	    "Cindy",
	    "Claire",
	    "Clara",
	    "Clarissa",
	    "Colleen",
	    "Collien",
	    "Cora",
	    "Corinna",
	    "Cosima",
	    "Dana",
	    "Daniela",
	    "Daria",
	    "Darleen",
	    "Defne",
	    "Delia",
	    "Denise",
	    "Diana",
	    "Dilara",
	    "Dina",
	    "Dorothea",
	    "Ecrin",
	    "Eda",
	    "Eileen",
	    "Ela",
	    "Elaine",
	    "Elanur",
	    "Elea",
	    "Elena",
	    "Eleni",
	    "Eleonora",
	    "Eliana",
	    "Elif",
	    "Elina",
	    "Elisa",
	    "Elisabeth",
	    "Ella",
	    "Ellen",
	    "Elli",
	    "Elly",
	    "Elsa",
	    "Emelie",
	    "Emely",
	    "Emilia",
	    "Emilie",
	    "Emily",
	    "Emma",
	    "Emmely",
	    "Emmi",
	    "Emmy",
	    "Enie",
	    "Enna",
	    "Enya",
	    "Esma",
	    "Estelle",
	    "Esther",
	    "Eva",
	    "Evelin",
	    "Evelina",
	    "Eveline",
	    "Evelyn",
	    "Fabienne",
	    "Fatima",
	    "Fatma",
	    "Felicia",
	    "Felicitas",
	    "Felina",
	    "Femke",
	    "Fenja",
	    "Fine",
	    "Finia",
	    "Finja",
	    "Finnja",
	    "Fiona",
	    "Flora",
	    "Florentine",
	    "Francesca",
	    "Franka",
	    "Franziska",
	    "Frederike",
	    "Freya",
	    "Frida",
	    "Frieda",
	    "Friederike",
	    "Giada",
	    "Gina",
	    "Giulia",
	    "Giuliana",
	    "Greta",
	    "Hailey",
	    "Hana",
	    "Hanna",
	    "Hannah",
	    "Heidi",
	    "Helen",
	    "Helena",
	    "Helene",
	    "Helin",
	    "Henriette",
	    "Henrike",
	    "Hermine",
	    "Ida",
	    "Ilayda",
	    "Imke",
	    "Ina",
	    "Ines",
	    "Inga",
	    "Inka",
	    "Irem",
	    "Isa",
	    "Isabel",
	    "Isabell",
	    "Isabella",
	    "Isabelle",
	    "Ivonne",
	    "Jacqueline",
	    "Jamie",
	    "Jamila",
	    "Jana",
	    "Jane",
	    "Janin",
	    "Janina",
	    "Janine",
	    "Janna",
	    "Janne",
	    "Jara",
	    "Jasmin",
	    "Jasmina",
	    "Jasmine",
	    "Jella",
	    "Jenna",
	    "Jennifer",
	    "Jenny",
	    "Jessica",
	    "Jessy",
	    "Jette",
	    "Jil",
	    "Jill",
	    "Joana",
	    "Joanna",
	    "Joelina",
	    "Joeline",
	    "Joelle",
	    "Johanna",
	    "Joleen",
	    "Jolie",
	    "Jolien",
	    "Jolin",
	    "Jolina",
	    "Joline",
	    "Jona",
	    "Jonah",
	    "Jonna",
	    "Josefin",
	    "Josefine",
	    "Josephin",
	    "Josephine",
	    "Josie",
	    "Josy",
	    "Joy",
	    "Joyce",
	    "Judith",
	    "Judy",
	    "Jule",
	    "Julia",
	    "Juliana",
	    "Juliane",
	    "Julie",
	    "Julienne",
	    "Julika",
	    "Julina",
	    "Juna",
	    "Justine",
	    "Kaja",
	    "Karina",
	    "Karla",
	    "Karlotta",
	    "Karolina",
	    "Karoline",
	    "Kassandra",
	    "Katarina",
	    "Katharina",
	    "Kathrin",
	    "Katja",
	    "Katrin",
	    "Kaya",
	    "Kayra",
	    "Kiana",
	    "Kiara",
	    "Kim",
	    "Kimberley",
	    "Kimberly",
	    "Kira",
	    "Klara",
	    "Korinna",
	    "Kristin",
	    "Kyra",
	    "Laila",
	    "Lana",
	    "Lara",
	    "Larissa",
	    "Laura",
	    "Laureen",
	    "Lavinia",
	    "Lea",
	    "Leah",
	    "Leana",
	    "Leandra",
	    "Leann",
	    "Lee",
	    "Leila",
	    "Lena",
	    "Lene",
	    "Leni",
	    "Lenia",
	    "Lenja",
	    "Lenya",
	    "Leona",
	    "Leoni",
	    "Leonie",
	    "Leonora",
	    "Leticia",
	    "Letizia",
	    "Levke",
	    "Leyla",
	    "Lia",
	    "Liah",
	    "Liana",
	    "Lili",
	    "Lilia",
	    "Lilian",
	    "Liliana",
	    "Lilith",
	    "Lilli",
	    "Lillian",
	    "Lilly",
	    "Lily",
	    "Lina",
	    "Linda",
	    "Lindsay",
	    "Line",
	    "Linn",
	    "Linnea",
	    "Lisa",
	    "Lisann",
	    "Lisanne",
	    "Liv",
	    "Livia",
	    "Liz",
	    "Lola",
	    "Loreen",
	    "Lorena",
	    "Lotta",
	    "Lotte",
	    "Louisa",
	    "Louise",
	    "Luana",
	    "Luca",
	    "Lucia",
	    "Lucie",
	    "Lucienne",
	    "Lucy",
	    "Luisa",
	    "Luise",
	    "Luka",
	    "Luna",
	    "Luzie",
	    "Lya",
	    "Lydia",
	    "Lyn",
	    "Lynn",
	    "Madeleine",
	    "Madita",
	    "Madleen",
	    "Madlen",
	    "Magdalena",
	    "Maike",
	    "Mailin",
	    "Maira",
	    "Maja",
	    "Malena",
	    "Malia",
	    "Malin",
	    "Malina",
	    "Mandy",
	    "Mara",
	    "Marah",
	    "Mareike",
	    "Maren",
	    "Maria",
	    "Mariam",
	    "Marie",
	    "Marieke",
	    "Mariella",
	    "Marika",
	    "Marina",
	    "Marisa",
	    "Marissa",
	    "Marit",
	    "Marla",
	    "Marleen",
	    "Marlen",
	    "Marlena",
	    "Marlene",
	    "Marta",
	    "Martha",
	    "Mary",
	    "Maryam",
	    "Mathilda",
	    "Mathilde",
	    "Matilda",
	    "Maxi",
	    "Maxima",
	    "Maxine",
	    "Maya",
	    "Mayra",
	    "Medina",
	    "Medine",
	    "Meike",
	    "Melanie",
	    "Melek",
	    "Melike",
	    "Melina",
	    "Melinda",
	    "Melis",
	    "Melisa",
	    "Melissa",
	    "Merle",
	    "Merve",
	    "Meryem",
	    "Mette",
	    "Mia",
	    "Michaela",
	    "Michelle",
	    "Mieke",
	    "Mila",
	    "Milana",
	    "Milena",
	    "Milla",
	    "Mina",
	    "Mira",
	    "Miray",
	    "Miriam",
	    "Mirja",
	    "Mona",
	    "Monique",
	    "Nadine",
	    "Nadja",
	    "Naemi",
	    "Nancy",
	    "Naomi",
	    "Natalia",
	    "Natalie",
	    "Nathalie",
	    "Neele",
	    "Nela",
	    "Nele",
	    "Nelli",
	    "Nelly",
	    "Nia",
	    "Nicole",
	    "Nika",
	    "Nike",
	    "Nikita",
	    "Nila",
	    "Nina",
	    "Nisa",
	    "Noemi",
	    "Nora",
	    "Olivia",
	    "Patricia",
	    "Patrizia",
	    "Paula",
	    "Paulina",
	    "Pauline",
	    "Penelope",
	    "Philine",
	    "Phoebe",
	    "Pia",
	    "Rahel",
	    "Rania",
	    "Rebecca",
	    "Rebekka",
	    "Riana",
	    "Rieke",
	    "Rike",
	    "Romina",
	    "Romy",
	    "Ronja",
	    "Rosa",
	    "Rosalie",
	    "Ruby",
	    "Sabrina",
	    "Sahra",
	    "Sally",
	    "Salome",
	    "Samantha",
	    "Samia",
	    "Samira",
	    "Sandra",
	    "Sandy",
	    "Sanja",
	    "Saphira",
	    "Sara",
	    "Sarah",
	    "Saskia",
	    "Selin",
	    "Selina",
	    "Selma",
	    "Sena",
	    "Sidney",
	    "Sienna",
	    "Silja",
	    "Sina",
	    "Sinja",
	    "Smilla",
	    "Sofia",
	    "Sofie",
	    "Sonja",
	    "Sophia",
	    "Sophie",
	    "Soraya",
	    "Stefanie",
	    "Stella",
	    "Stephanie",
	    "Stina",
	    "Sude",
	    "Summer",
	    "Susanne",
	    "Svea",
	    "Svenja",
	    "Sydney",
	    "Tabea",
	    "Talea",
	    "Talia",
	    "Tamara",
	    "Tamia",
	    "Tamina",
	    "Tanja",
	    "Tara",
	    "Tarja",
	    "Teresa",
	    "Tessa",
	    "Thalea",
	    "Thalia",
	    "Thea",
	    "Theresa",
	    "Tia",
	    "Tina",
	    "Tomke",
	    "Tuana",
	    "Valentina",
	    "Valeria",
	    "Valerie",
	    "Vanessa",
	    "Vera",
	    "Veronika",
	    "Victoria",
	    "Viktoria",
	    "Viola",
	    "Vivian",
	    "Vivien",
	    "Vivienne",
	    "Wibke",
	    "Wiebke",
	    "Xenia",
	    "Yara",
	    "Yaren",
	    "Yasmin",
	    "Ylvi",
	    "Ylvie",
	    "Yvonne",
	    "Zara",
	    "Zehra",
	    "Zeynep",
	    "Zoe",
	    "Zoey",
	    "Zoé"
	  ],
	  "last_name": [
	    "Abel",
	    "Abicht",
	    "Abraham",
	    "Abramovic",
	    "Abt",
	    "Achilles",
	    "Achkinadze",
	    "Ackermann",
	    "Adam",
	    "Adams",
	    "Ade",
	    "Agostini",
	    "Ahlke",
	    "Ahrenberg",
	    "Ahrens",
	    "Aigner",
	    "Albert",
	    "Albrecht",
	    "Alexa",
	    "Alexander",
	    "Alizadeh",
	    "Allgeyer",
	    "Amann",
	    "Amberg",
	    "Anding",
	    "Anggreny",
	    "Apitz",
	    "Arendt",
	    "Arens",
	    "Arndt",
	    "Aryee",
	    "Aschenbroich",
	    "Assmus",
	    "Astafei",
	    "Auer",
	    "Axmann",
	    "Baarck",
	    "Bachmann",
	    "Badane",
	    "Bader",
	    "Baganz",
	    "Bahl",
	    "Bak",
	    "Balcer",
	    "Balck",
	    "Balkow",
	    "Balnuweit",
	    "Balzer",
	    "Banse",
	    "Barr",
	    "Bartels",
	    "Barth",
	    "Barylla",
	    "Baseda",
	    "Battke",
	    "Bauer",
	    "Bauermeister",
	    "Baumann",
	    "Baumeister",
	    "Bauschinger",
	    "Bauschke",
	    "Bayer",
	    "Beavogui",
	    "Beck",
	    "Beckel",
	    "Becker",
	    "Beckmann",
	    "Bedewitz",
	    "Beele",
	    "Beer",
	    "Beggerow",
	    "Beh",
	    "Behr",
	    "Behrenbruch",
	    "Belz",
	    "Bender",
	    "Benecke",
	    "Benner",
	    "Benninger",
	    "Benzing",
	    "Berends",
	    "Berger",
	    "Berner",
	    "Berning",
	    "Bertenbreiter",
	    "Best",
	    "Bethke",
	    "Betz",
	    "Beushausen",
	    "Beutelspacher",
	    "Beyer",
	    "Biba",
	    "Bichler",
	    "Bickel",
	    "Biedermann",
	    "Bieler",
	    "Bielert",
	    "Bienasch",
	    "Bienias",
	    "Biesenbach",
	    "Bigdeli",
	    "Birkemeyer",
	    "Bittner",
	    "Blank",
	    "Blaschek",
	    "Blassneck",
	    "Bloch",
	    "Blochwitz",
	    "Blockhaus",
	    "Blum",
	    "Blume",
	    "Bock",
	    "Bode",
	    "Bogdashin",
	    "Bogenrieder",
	    "Bohge",
	    "Bolm",
	    "Borgschulze",
	    "Bork",
	    "Bormann",
	    "Bornscheuer",
	    "Borrmann",
	    "Borsch",
	    "Boruschewski",
	    "Bos",
	    "Bosler",
	    "Bourrouag",
	    "Bouschen",
	    "Boxhammer",
	    "Boyde",
	    "Bozsik",
	    "Brand",
	    "Brandenburg",
	    "Brandis",
	    "Brandt",
	    "Brauer",
	    "Braun",
	    "Brehmer",
	    "Breitenstein",
	    "Bremer",
	    "Bremser",
	    "Brenner",
	    "Brettschneider",
	    "Breu",
	    "Breuer",
	    "Briesenick",
	    "Bringmann",
	    "Brinkmann",
	    "Brix",
	    "Broening",
	    "Brosch",
	    "Bruckmann",
	    "Bruder",
	    "Bruhns",
	    "Brunner",
	    "Bruns",
	    "Bräutigam",
	    "Brömme",
	    "Brüggmann",
	    "Buchholz",
	    "Buchrucker",
	    "Buder",
	    "Bultmann",
	    "Bunjes",
	    "Burger",
	    "Burghagen",
	    "Burkhard",
	    "Burkhardt",
	    "Burmeister",
	    "Busch",
	    "Buschbaum",
	    "Busemann",
	    "Buss",
	    "Busse",
	    "Bussmann",
	    "Byrd",
	    "Bäcker",
	    "Böhm",
	    "Bönisch",
	    "Börgeling",
	    "Börner",
	    "Böttner",
	    "Büchele",
	    "Bühler",
	    "Büker",
	    "Büngener",
	    "Bürger",
	    "Bürklein",
	    "Büscher",
	    "Büttner",
	    "Camara",
	    "Carlowitz",
	    "Carlsohn",
	    "Caspari",
	    "Caspers",
	    "Chapron",
	    "Christ",
	    "Cierpinski",
	    "Clarius",
	    "Cleem",
	    "Cleve",
	    "Co",
	    "Conrad",
	    "Cordes",
	    "Cornelsen",
	    "Cors",
	    "Cotthardt",
	    "Crews",
	    "Cronjäger",
	    "Crosskofp",
	    "Da",
	    "Dahm",
	    "Dahmen",
	    "Daimer",
	    "Damaske",
	    "Danneberg",
	    "Danner",
	    "Daub",
	    "Daubner",
	    "Daudrich",
	    "Dauer",
	    "Daum",
	    "Dauth",
	    "Dautzenberg",
	    "De",
	    "Decker",
	    "Deckert",
	    "Deerberg",
	    "Dehmel",
	    "Deja",
	    "Delonge",
	    "Demut",
	    "Dengler",
	    "Denner",
	    "Denzinger",
	    "Derr",
	    "Dertmann",
	    "Dethloff",
	    "Deuschle",
	    "Dieckmann",
	    "Diedrich",
	    "Diekmann",
	    "Dienel",
	    "Dies",
	    "Dietrich",
	    "Dietz",
	    "Dietzsch",
	    "Diezel",
	    "Dilla",
	    "Dingelstedt",
	    "Dippl",
	    "Dittmann",
	    "Dittmar",
	    "Dittmer",
	    "Dix",
	    "Dobbrunz",
	    "Dobler",
	    "Dohring",
	    "Dolch",
	    "Dold",
	    "Dombrowski",
	    "Donie",
	    "Doskoczynski",
	    "Dragu",
	    "Drechsler",
	    "Drees",
	    "Dreher",
	    "Dreier",
	    "Dreissigacker",
	    "Dressler",
	    "Drews",
	    "Duma",
	    "Dutkiewicz",
	    "Dyett",
	    "Dylus",
	    "Dächert",
	    "Döbel",
	    "Döring",
	    "Dörner",
	    "Dörre",
	    "Dück",
	    "Eberhard",
	    "Eberhardt",
	    "Ecker",
	    "Eckhardt",
	    "Edorh",
	    "Effler",
	    "Eggenmueller",
	    "Ehm",
	    "Ehmann",
	    "Ehrig",
	    "Eich",
	    "Eichmann",
	    "Eifert",
	    "Einert",
	    "Eisenlauer",
	    "Ekpo",
	    "Elbe",
	    "Eleyth",
	    "Elss",
	    "Emert",
	    "Emmelmann",
	    "Ender",
	    "Engel",
	    "Engelen",
	    "Engelmann",
	    "Eplinius",
	    "Erdmann",
	    "Erhardt",
	    "Erlei",
	    "Erm",
	    "Ernst",
	    "Ertl",
	    "Erwes",
	    "Esenwein",
	    "Esser",
	    "Evers",
	    "Everts",
	    "Ewald",
	    "Fahner",
	    "Faller",
	    "Falter",
	    "Farber",
	    "Fassbender",
	    "Faulhaber",
	    "Fehrig",
	    "Feld",
	    "Felke",
	    "Feller",
	    "Fenner",
	    "Fenske",
	    "Feuerbach",
	    "Fietz",
	    "Figl",
	    "Figura",
	    "Filipowski",
	    "Filsinger",
	    "Fincke",
	    "Fink",
	    "Finke",
	    "Fischer",
	    "Fitschen",
	    "Fleischer",
	    "Fleischmann",
	    "Floder",
	    "Florczak",
	    "Flore",
	    "Flottmann",
	    "Forkel",
	    "Forst",
	    "Frahmeke",
	    "Frank",
	    "Franke",
	    "Franta",
	    "Frantz",
	    "Franz",
	    "Franzis",
	    "Franzmann",
	    "Frauen",
	    "Frauendorf",
	    "Freigang",
	    "Freimann",
	    "Freimuth",
	    "Freisen",
	    "Frenzel",
	    "Frey",
	    "Fricke",
	    "Fried",
	    "Friedek",
	    "Friedenberg",
	    "Friedmann",
	    "Friedrich",
	    "Friess",
	    "Frisch",
	    "Frohn",
	    "Frosch",
	    "Fuchs",
	    "Fuhlbrügge",
	    "Fusenig",
	    "Fust",
	    "Förster",
	    "Gaba",
	    "Gabius",
	    "Gabler",
	    "Gadschiew",
	    "Gakstädter",
	    "Galander",
	    "Gamlin",
	    "Gamper",
	    "Gangnus",
	    "Ganzmann",
	    "Garatva",
	    "Gast",
	    "Gastel",
	    "Gatzka",
	    "Gauder",
	    "Gebhardt",
	    "Geese",
	    "Gehre",
	    "Gehrig",
	    "Gehring",
	    "Gehrke",
	    "Geiger",
	    "Geisler",
	    "Geissler",
	    "Gelling",
	    "Gens",
	    "Gerbennow",
	    "Gerdel",
	    "Gerhardt",
	    "Gerschler",
	    "Gerson",
	    "Gesell",
	    "Geyer",
	    "Ghirmai",
	    "Ghosh",
	    "Giehl",
	    "Gierisch",
	    "Giesa",
	    "Giesche",
	    "Gilde",
	    "Glatting",
	    "Goebel",
	    "Goedicke",
	    "Goldbeck",
	    "Goldfuss",
	    "Goldkamp",
	    "Goldkühle",
	    "Goller",
	    "Golling",
	    "Gollnow",
	    "Golomski",
	    "Gombert",
	    "Gotthardt",
	    "Gottschalk",
	    "Gotz",
	    "Goy",
	    "Gradzki",
	    "Graf",
	    "Grams",
	    "Grasse",
	    "Gratzky",
	    "Grau",
	    "Greb",
	    "Green",
	    "Greger",
	    "Greithanner",
	    "Greschner",
	    "Griem",
	    "Griese",
	    "Grimm",
	    "Gromisch",
	    "Gross",
	    "Grosser",
	    "Grossheim",
	    "Grosskopf",
	    "Grothaus",
	    "Grothkopp",
	    "Grotke",
	    "Grube",
	    "Gruber",
	    "Grundmann",
	    "Gruning",
	    "Gruszecki",
	    "Gröss",
	    "Grötzinger",
	    "Grün",
	    "Grüner",
	    "Gummelt",
	    "Gunkel",
	    "Gunther",
	    "Gutjahr",
	    "Gutowicz",
	    "Gutschank",
	    "Göbel",
	    "Göckeritz",
	    "Göhler",
	    "Görlich",
	    "Görmer",
	    "Götz",
	    "Götzelmann",
	    "Güldemeister",
	    "Günther",
	    "Günz",
	    "Gürbig",
	    "Haack",
	    "Haaf",
	    "Habel",
	    "Hache",
	    "Hackbusch",
	    "Hackelbusch",
	    "Hadfield",
	    "Hadwich",
	    "Haferkamp",
	    "Hahn",
	    "Hajek",
	    "Hallmann",
	    "Hamann",
	    "Hanenberger",
	    "Hannecker",
	    "Hanniske",
	    "Hansen",
	    "Hardy",
	    "Hargasser",
	    "Harms",
	    "Harnapp",
	    "Harter",
	    "Harting",
	    "Hartlieb",
	    "Hartmann",
	    "Hartwig",
	    "Hartz",
	    "Haschke",
	    "Hasler",
	    "Hasse",
	    "Hassfeld",
	    "Haug",
	    "Hauke",
	    "Haupt",
	    "Haverney",
	    "Heberstreit",
	    "Hechler",
	    "Hecht",
	    "Heck",
	    "Hedermann",
	    "Hehl",
	    "Heidelmann",
	    "Heidler",
	    "Heinemann",
	    "Heinig",
	    "Heinke",
	    "Heinrich",
	    "Heinze",
	    "Heiser",
	    "Heist",
	    "Hellmann",
	    "Helm",
	    "Helmke",
	    "Helpling",
	    "Hengmith",
	    "Henkel",
	    "Hennes",
	    "Henry",
	    "Hense",
	    "Hensel",
	    "Hentel",
	    "Hentschel",
	    "Hentschke",
	    "Hepperle",
	    "Herberger",
	    "Herbrand",
	    "Hering",
	    "Hermann",
	    "Hermecke",
	    "Herms",
	    "Herold",
	    "Herrmann",
	    "Herschmann",
	    "Hertel",
	    "Herweg",
	    "Herwig",
	    "Herzenberg",
	    "Hess",
	    "Hesse",
	    "Hessek",
	    "Hessler",
	    "Hetzler",
	    "Heuck",
	    "Heydemüller",
	    "Hiebl",
	    "Hildebrand",
	    "Hildenbrand",
	    "Hilgendorf",
	    "Hillard",
	    "Hiller",
	    "Hingsen",
	    "Hingst",
	    "Hinrichs",
	    "Hirsch",
	    "Hirschberg",
	    "Hirt",
	    "Hodea",
	    "Hoffman",
	    "Hoffmann",
	    "Hofmann",
	    "Hohenberger",
	    "Hohl",
	    "Hohn",
	    "Hohnheiser",
	    "Hold",
	    "Holdt",
	    "Holinski",
	    "Holl",
	    "Holtfreter",
	    "Holz",
	    "Holzdeppe",
	    "Holzner",
	    "Hommel",
	    "Honz",
	    "Hooss",
	    "Hoppe",
	    "Horak",
	    "Horn",
	    "Horna",
	    "Hornung",
	    "Hort",
	    "Howard",
	    "Huber",
	    "Huckestein",
	    "Hudak",
	    "Huebel",
	    "Hugo",
	    "Huhn",
	    "Hujo",
	    "Huke",
	    "Huls",
	    "Humbert",
	    "Huneke",
	    "Huth",
	    "Häber",
	    "Häfner",
	    "Höcke",
	    "Höft",
	    "Höhne",
	    "Hönig",
	    "Hördt",
	    "Hübenbecker",
	    "Hübl",
	    "Hübner",
	    "Hügel",
	    "Hüttcher",
	    "Hütter",
	    "Ibe",
	    "Ihly",
	    "Illing",
	    "Isak",
	    "Isekenmeier",
	    "Itt",
	    "Jacob",
	    "Jacobs",
	    "Jagusch",
	    "Jahn",
	    "Jahnke",
	    "Jakobs",
	    "Jakubczyk",
	    "Jambor",
	    "Jamrozy",
	    "Jander",
	    "Janich",
	    "Janke",
	    "Jansen",
	    "Jarets",
	    "Jaros",
	    "Jasinski",
	    "Jasper",
	    "Jegorov",
	    "Jellinghaus",
	    "Jeorga",
	    "Jerschabek",
	    "Jess",
	    "John",
	    "Jonas",
	    "Jossa",
	    "Jucken",
	    "Jung",
	    "Jungbluth",
	    "Jungton",
	    "Just",
	    "Jürgens",
	    "Kaczmarek",
	    "Kaesmacher",
	    "Kahl",
	    "Kahlert",
	    "Kahles",
	    "Kahlmeyer",
	    "Kaiser",
	    "Kalinowski",
	    "Kallabis",
	    "Kallensee",
	    "Kampf",
	    "Kampschulte",
	    "Kappe",
	    "Kappler",
	    "Karhoff",
	    "Karrass",
	    "Karst",
	    "Karsten",
	    "Karus",
	    "Kass",
	    "Kasten",
	    "Kastner",
	    "Katzinski",
	    "Kaufmann",
	    "Kaul",
	    "Kausemann",
	    "Kawohl",
	    "Kazmarek",
	    "Kedzierski",
	    "Keil",
	    "Keiner",
	    "Keller",
	    "Kelm",
	    "Kempe",
	    "Kemper",
	    "Kempter",
	    "Kerl",
	    "Kern",
	    "Kesselring",
	    "Kesselschläger",
	    "Kette",
	    "Kettenis",
	    "Keutel",
	    "Kick",
	    "Kiessling",
	    "Kinadeter",
	    "Kinzel",
	    "Kinzy",
	    "Kirch",
	    "Kirst",
	    "Kisabaka",
	    "Klaas",
	    "Klabuhn",
	    "Klapper",
	    "Klauder",
	    "Klaus",
	    "Kleeberg",
	    "Kleiber",
	    "Klein",
	    "Kleinert",
	    "Kleininger",
	    "Kleinmann",
	    "Kleinsteuber",
	    "Kleiss",
	    "Klemme",
	    "Klimczak",
	    "Klinger",
	    "Klink",
	    "Klopsch",
	    "Klose",
	    "Kloss",
	    "Kluge",
	    "Kluwe",
	    "Knabe",
	    "Kneifel",
	    "Knetsch",
	    "Knies",
	    "Knippel",
	    "Knobel",
	    "Knoblich",
	    "Knoll",
	    "Knorr",
	    "Knorscheidt",
	    "Knut",
	    "Kobs",
	    "Koch",
	    "Kochan",
	    "Kock",
	    "Koczulla",
	    "Koderisch",
	    "Koehl",
	    "Koehler",
	    "Koenig",
	    "Koester",
	    "Kofferschlager",
	    "Koha",
	    "Kohle",
	    "Kohlmann",
	    "Kohnle",
	    "Kohrt",
	    "Koj",
	    "Kolb",
	    "Koleiski",
	    "Kolokas",
	    "Komoll",
	    "Konieczny",
	    "Konig",
	    "Konow",
	    "Konya",
	    "Koob",
	    "Kopf",
	    "Kosenkow",
	    "Koster",
	    "Koszewski",
	    "Koubaa",
	    "Kovacs",
	    "Kowalick",
	    "Kowalinski",
	    "Kozakiewicz",
	    "Krabbe",
	    "Kraft",
	    "Kral",
	    "Kramer",
	    "Krauel",
	    "Kraus",
	    "Krause",
	    "Krauspe",
	    "Kreb",
	    "Krebs",
	    "Kreissig",
	    "Kresse",
	    "Kreutz",
	    "Krieger",
	    "Krippner",
	    "Krodinger",
	    "Krohn",
	    "Krol",
	    "Kron",
	    "Krueger",
	    "Krug",
	    "Kruger",
	    "Krull",
	    "Kruschinski",
	    "Krämer",
	    "Kröckert",
	    "Kröger",
	    "Krüger",
	    "Kubera",
	    "Kufahl",
	    "Kuhlee",
	    "Kuhnen",
	    "Kulimann",
	    "Kulma",
	    "Kumbernuss",
	    "Kummle",
	    "Kunz",
	    "Kupfer",
	    "Kupprion",
	    "Kuprion",
	    "Kurnicki",
	    "Kurrat",
	    "Kurschilgen",
	    "Kuschewitz",
	    "Kuschmann",
	    "Kuske",
	    "Kustermann",
	    "Kutscherauer",
	    "Kutzner",
	    "Kwadwo",
	    "Kähler",
	    "Käther",
	    "Köhler",
	    "Köhrbrück",
	    "Köhre",
	    "Kölotzei",
	    "König",
	    "Köpernick",
	    "Köseoglu",
	    "Kúhn",
	    "Kúhnert",
	    "Kühn",
	    "Kühnel",
	    "Kühnemund",
	    "Kühnert",
	    "Kühnke",
	    "Küsters",
	    "Küter",
	    "Laack",
	    "Lack",
	    "Ladewig",
	    "Lakomy",
	    "Lammert",
	    "Lamos",
	    "Landmann",
	    "Lang",
	    "Lange",
	    "Langfeld",
	    "Langhirt",
	    "Lanig",
	    "Lauckner",
	    "Lauinger",
	    "Laurén",
	    "Lausecker",
	    "Laux",
	    "Laws",
	    "Lax",
	    "Leberer",
	    "Lehmann",
	    "Lehner",
	    "Leibold",
	    "Leide",
	    "Leimbach",
	    "Leipold",
	    "Leist",
	    "Leiter",
	    "Leiteritz",
	    "Leitheim",
	    "Leiwesmeier",
	    "Lenfers",
	    "Lenk",
	    "Lenz",
	    "Lenzen",
	    "Leo",
	    "Lepthin",
	    "Lesch",
	    "Leschnik",
	    "Letzelter",
	    "Lewin",
	    "Lewke",
	    "Leyckes",
	    "Lg",
	    "Lichtenfeld",
	    "Lichtenhagen",
	    "Lichtl",
	    "Liebach",
	    "Liebe",
	    "Liebich",
	    "Liebold",
	    "Lieder",
	    "Lienshöft",
	    "Linden",
	    "Lindenberg",
	    "Lindenmayer",
	    "Lindner",
	    "Linke",
	    "Linnenbaum",
	    "Lippe",
	    "Lipske",
	    "Lipus",
	    "Lischka",
	    "Lobinger",
	    "Logsch",
	    "Lohmann",
	    "Lohre",
	    "Lohse",
	    "Lokar",
	    "Loogen",
	    "Lorenz",
	    "Losch",
	    "Loska",
	    "Lott",
	    "Loy",
	    "Lubina",
	    "Ludolf",
	    "Lufft",
	    "Lukoschek",
	    "Lutje",
	    "Lutz",
	    "Löser",
	    "Löwa",
	    "Lübke",
	    "Maak",
	    "Maczey",
	    "Madetzky",
	    "Madubuko",
	    "Mai",
	    "Maier",
	    "Maisch",
	    "Malek",
	    "Malkus",
	    "Mallmann",
	    "Malucha",
	    "Manns",
	    "Manz",
	    "Marahrens",
	    "Marchewski",
	    "Margis",
	    "Markowski",
	    "Marl",
	    "Marner",
	    "Marquart",
	    "Marschek",
	    "Martel",
	    "Marten",
	    "Martin",
	    "Marx",
	    "Marxen",
	    "Mathes",
	    "Mathies",
	    "Mathiszik",
	    "Matschke",
	    "Mattern",
	    "Matthes",
	    "Matula",
	    "Mau",
	    "Maurer",
	    "Mauroff",
	    "May",
	    "Maybach",
	    "Mayer",
	    "Mebold",
	    "Mehl",
	    "Mehlhorn",
	    "Mehlorn",
	    "Meier",
	    "Meisch",
	    "Meissner",
	    "Meloni",
	    "Melzer",
	    "Menga",
	    "Menne",
	    "Mensah",
	    "Mensing",
	    "Merkel",
	    "Merseburg",
	    "Mertens",
	    "Mesloh",
	    "Metzger",
	    "Metzner",
	    "Mewes",
	    "Meyer",
	    "Michallek",
	    "Michel",
	    "Mielke",
	    "Mikitenko",
	    "Milde",
	    "Minah",
	    "Mintzlaff",
	    "Mockenhaupt",
	    "Moede",
	    "Moedl",
	    "Moeller",
	    "Moguenara",
	    "Mohr",
	    "Mohrhard",
	    "Molitor",
	    "Moll",
	    "Moller",
	    "Molzan",
	    "Montag",
	    "Moormann",
	    "Mordhorst",
	    "Morgenstern",
	    "Morhelfer",
	    "Moritz",
	    "Moser",
	    "Motchebon",
	    "Motzenbbäcker",
	    "Mrugalla",
	    "Muckenthaler",
	    "Mues",
	    "Muller",
	    "Mulrain",
	    "Mächtig",
	    "Mäder",
	    "Möcks",
	    "Mögenburg",
	    "Möhsner",
	    "Möldner",
	    "Möllenbeck",
	    "Möller",
	    "Möllinger",
	    "Mörsch",
	    "Mühleis",
	    "Müller",
	    "Münch",
	    "Nabein",
	    "Nabow",
	    "Nagel",
	    "Nannen",
	    "Nastvogel",
	    "Nau",
	    "Naubert",
	    "Naumann",
	    "Ne",
	    "Neimke",
	    "Nerius",
	    "Neubauer",
	    "Neubert",
	    "Neuendorf",
	    "Neumair",
	    "Neumann",
	    "Neupert",
	    "Neurohr",
	    "Neuschwander",
	    "Newton",
	    "Ney",
	    "Nicolay",
	    "Niedermeier",
	    "Nieklauson",
	    "Niklaus",
	    "Nitzsche",
	    "Noack",
	    "Nodler",
	    "Nolte",
	    "Normann",
	    "Norris",
	    "Northoff",
	    "Nowak",
	    "Nussbeck",
	    "Nwachukwu",
	    "Nytra",
	    "Nöh",
	    "Oberem",
	    "Obergföll",
	    "Obermaier",
	    "Ochs",
	    "Oeser",
	    "Olbrich",
	    "Onnen",
	    "Ophey",
	    "Oppong",
	    "Orth",
	    "Orthmann",
	    "Oschkenat",
	    "Osei",
	    "Osenberg",
	    "Ostendarp",
	    "Ostwald",
	    "Otte",
	    "Otto",
	    "Paesler",
	    "Pajonk",
	    "Pallentin",
	    "Panzig",
	    "Paschke",
	    "Patzwahl",
	    "Paukner",
	    "Peselman",
	    "Peter",
	    "Peters",
	    "Petzold",
	    "Pfeiffer",
	    "Pfennig",
	    "Pfersich",
	    "Pfingsten",
	    "Pflieger",
	    "Pflügner",
	    "Philipp",
	    "Pichlmaier",
	    "Piesker",
	    "Pietsch",
	    "Pingpank",
	    "Pinnock",
	    "Pippig",
	    "Pitschugin",
	    "Plank",
	    "Plass",
	    "Platzer",
	    "Plauk",
	    "Plautz",
	    "Pletsch",
	    "Plotzitzka",
	    "Poehn",
	    "Poeschl",
	    "Pogorzelski",
	    "Pohl",
	    "Pohland",
	    "Pohle",
	    "Polifka",
	    "Polizzi",
	    "Pollmächer",
	    "Pomp",
	    "Ponitzsch",
	    "Porsche",
	    "Porth",
	    "Poschmann",
	    "Poser",
	    "Pottel",
	    "Prah",
	    "Prange",
	    "Prediger",
	    "Pressler",
	    "Preuk",
	    "Preuss",
	    "Prey",
	    "Priemer",
	    "Proske",
	    "Pusch",
	    "Pöche",
	    "Pöge",
	    "Raabe",
	    "Rabenstein",
	    "Rach",
	    "Radtke",
	    "Rahn",
	    "Ranftl",
	    "Rangen",
	    "Ranz",
	    "Rapp",
	    "Rath",
	    "Rau",
	    "Raubuch",
	    "Raukuc",
	    "Rautenkranz",
	    "Rehwagen",
	    "Reiber",
	    "Reichardt",
	    "Reichel",
	    "Reichling",
	    "Reif",
	    "Reifenrath",
	    "Reimann",
	    "Reinberg",
	    "Reinelt",
	    "Reinhardt",
	    "Reinke",
	    "Reitze",
	    "Renk",
	    "Rentz",
	    "Renz",
	    "Reppin",
	    "Restle",
	    "Restorff",
	    "Retzke",
	    "Reuber",
	    "Reumann",
	    "Reus",
	    "Reuss",
	    "Reusse",
	    "Rheder",
	    "Rhoden",
	    "Richards",
	    "Richter",
	    "Riedel",
	    "Riediger",
	    "Rieger",
	    "Riekmann",
	    "Riepl",
	    "Riermeier",
	    "Riester",
	    "Riethmüller",
	    "Rietmüller",
	    "Rietscher",
	    "Ringel",
	    "Ringer",
	    "Rink",
	    "Ripken",
	    "Ritosek",
	    "Ritschel",
	    "Ritter",
	    "Rittweg",
	    "Ritz",
	    "Roba",
	    "Rockmeier",
	    "Rodehau",
	    "Rodowski",
	    "Roecker",
	    "Roggatz",
	    "Rohländer",
	    "Rohrer",
	    "Rokossa",
	    "Roleder",
	    "Roloff",
	    "Roos",
	    "Rosbach",
	    "Roschinsky",
	    "Rose",
	    "Rosenauer",
	    "Rosenbauer",
	    "Rosenthal",
	    "Rosksch",
	    "Rossberg",
	    "Rossler",
	    "Roth",
	    "Rother",
	    "Ruch",
	    "Ruckdeschel",
	    "Rumpf",
	    "Rupprecht",
	    "Ruth",
	    "Ryjikh",
	    "Ryzih",
	    "Rädler",
	    "Räntsch",
	    "Rödiger",
	    "Röse",
	    "Röttger",
	    "Rücker",
	    "Rüdiger",
	    "Rüter",
	    "Sachse",
	    "Sack",
	    "Saflanis",
	    "Sagafe",
	    "Sagonas",
	    "Sahner",
	    "Saile",
	    "Sailer",
	    "Salow",
	    "Salzer",
	    "Salzmann",
	    "Sammert",
	    "Sander",
	    "Sarvari",
	    "Sattelmaier",
	    "Sauer",
	    "Sauerland",
	    "Saumweber",
	    "Savoia",
	    "Scc",
	    "Schacht",
	    "Schaefer",
	    "Schaffarzik",
	    "Schahbasian",
	    "Scharf",
	    "Schedler",
	    "Scheer",
	    "Schelk",
	    "Schellenbeck",
	    "Schembera",
	    "Schenk",
	    "Scherbarth",
	    "Scherer",
	    "Schersing",
	    "Scherz",
	    "Scheurer",
	    "Scheuring",
	    "Scheytt",
	    "Schielke",
	    "Schieskow",
	    "Schildhauer",
	    "Schilling",
	    "Schima",
	    "Schimmer",
	    "Schindzielorz",
	    "Schirmer",
	    "Schirrmeister",
	    "Schlachter",
	    "Schlangen",
	    "Schlawitz",
	    "Schlechtweg",
	    "Schley",
	    "Schlicht",
	    "Schlitzer",
	    "Schmalzle",
	    "Schmid",
	    "Schmidt",
	    "Schmidtchen",
	    "Schmitt",
	    "Schmitz",
	    "Schmuhl",
	    "Schneider",
	    "Schnelting",
	    "Schnieder",
	    "Schniedermeier",
	    "Schnürer",
	    "Schoberg",
	    "Scholz",
	    "Schonberg",
	    "Schondelmaier",
	    "Schorr",
	    "Schott",
	    "Schottmann",
	    "Schouren",
	    "Schrader",
	    "Schramm",
	    "Schreck",
	    "Schreiber",
	    "Schreiner",
	    "Schreiter",
	    "Schroder",
	    "Schröder",
	    "Schuermann",
	    "Schuff",
	    "Schuhaj",
	    "Schuldt",
	    "Schult",
	    "Schulte",
	    "Schultz",
	    "Schultze",
	    "Schulz",
	    "Schulze",
	    "Schumacher",
	    "Schumann",
	    "Schupp",
	    "Schuri",
	    "Schuster",
	    "Schwab",
	    "Schwalm",
	    "Schwanbeck",
	    "Schwandke",
	    "Schwanitz",
	    "Schwarthoff",
	    "Schwartz",
	    "Schwarz",
	    "Schwarzer",
	    "Schwarzkopf",
	    "Schwarzmeier",
	    "Schwatlo",
	    "Schweisfurth",
	    "Schwennen",
	    "Schwerdtner",
	    "Schwidde",
	    "Schwirkschlies",
	    "Schwuchow",
	    "Schäfer",
	    "Schäffel",
	    "Schäffer",
	    "Schäning",
	    "Schöckel",
	    "Schönball",
	    "Schönbeck",
	    "Schönberg",
	    "Schönebeck",
	    "Schönenberger",
	    "Schönfeld",
	    "Schönherr",
	    "Schönlebe",
	    "Schötz",
	    "Schüler",
	    "Schüppel",
	    "Schütz",
	    "Schütze",
	    "Seeger",
	    "Seelig",
	    "Sehls",
	    "Seibold",
	    "Seidel",
	    "Seiders",
	    "Seigel",
	    "Seiler",
	    "Seitz",
	    "Semisch",
	    "Senkel",
	    "Sewald",
	    "Siebel",
	    "Siebert",
	    "Siegling",
	    "Sielemann",
	    "Siemon",
	    "Siener",
	    "Sievers",
	    "Siewert",
	    "Sihler",
	    "Sillah",
	    "Simon",
	    "Sinnhuber",
	    "Sischka",
	    "Skibicki",
	    "Sladek",
	    "Slotta",
	    "Smieja",
	    "Soboll",
	    "Sokolowski",
	    "Soller",
	    "Sollner",
	    "Sommer",
	    "Somssich",
	    "Sonn",
	    "Sonnabend",
	    "Spahn",
	    "Spank",
	    "Spelmeyer",
	    "Spiegelburg",
	    "Spielvogel",
	    "Spinner",
	    "Spitzmüller",
	    "Splinter",
	    "Sporrer",
	    "Sprenger",
	    "Spöttel",
	    "Stahl",
	    "Stang",
	    "Stanger",
	    "Stauss",
	    "Steding",
	    "Steffen",
	    "Steffny",
	    "Steidl",
	    "Steigauf",
	    "Stein",
	    "Steinecke",
	    "Steinert",
	    "Steinkamp",
	    "Steinmetz",
	    "Stelkens",
	    "Stengel",
	    "Stengl",
	    "Stenzel",
	    "Stepanov",
	    "Stephan",
	    "Stern",
	    "Steuk",
	    "Stief",
	    "Stifel",
	    "Stoll",
	    "Stolle",
	    "Stolz",
	    "Storl",
	    "Storp",
	    "Stoutjesdijk",
	    "Stratmann",
	    "Straub",
	    "Strausa",
	    "Streck",
	    "Streese",
	    "Strege",
	    "Streit",
	    "Streller",
	    "Strieder",
	    "Striezel",
	    "Strogies",
	    "Strohschank",
	    "Strunz",
	    "Strutz",
	    "Stube",
	    "Stöckert",
	    "Stöppler",
	    "Stöwer",
	    "Stürmer",
	    "Suffa",
	    "Sujew",
	    "Sussmann",
	    "Suthe",
	    "Sutschet",
	    "Swillims",
	    "Szendrei",
	    "Sören",
	    "Sürth",
	    "Tafelmeier",
	    "Tang",
	    "Tasche",
	    "Taufratshofer",
	    "Tegethof",
	    "Teichmann",
	    "Tepper",
	    "Terheiden",
	    "Terlecki",
	    "Teufel",
	    "Theele",
	    "Thieke",
	    "Thimm",
	    "Thiomas",
	    "Thomas",
	    "Thriene",
	    "Thränhardt",
	    "Thust",
	    "Thyssen",
	    "Thöne",
	    "Tidow",
	    "Tiedtke",
	    "Tietze",
	    "Tilgner",
	    "Tillack",
	    "Timmermann",
	    "Tischler",
	    "Tischmann",
	    "Tittman",
	    "Tivontschik",
	    "Tonat",
	    "Tonn",
	    "Trampeli",
	    "Trauth",
	    "Trautmann",
	    "Travan",
	    "Treff",
	    "Tremmel",
	    "Tress",
	    "Tsamonikian",
	    "Tschiers",
	    "Tschirch",
	    "Tuch",
	    "Tucholke",
	    "Tudow",
	    "Tuschmo",
	    "Tächl",
	    "Többen",
	    "Töpfer",
	    "Uhlemann",
	    "Uhlig",
	    "Uhrig",
	    "Uibel",
	    "Uliczka",
	    "Ullmann",
	    "Ullrich",
	    "Umbach",
	    "Umlauft",
	    "Umminger",
	    "Unger",
	    "Unterpaintner",
	    "Urban",
	    "Urbaniak",
	    "Urbansky",
	    "Urhig",
	    "Vahlensieck",
	    "Van",
	    "Vangermain",
	    "Vater",
	    "Venghaus",
	    "Verniest",
	    "Verzi",
	    "Vey",
	    "Viellehner",
	    "Vieweg",
	    "Voelkel",
	    "Vogel",
	    "Vogelgsang",
	    "Vogt",
	    "Voigt",
	    "Vokuhl",
	    "Volk",
	    "Volker",
	    "Volkmann",
	    "Von",
	    "Vona",
	    "Vontein",
	    "Wachenbrunner",
	    "Wachtel",
	    "Wagner",
	    "Waibel",
	    "Wakan",
	    "Waldmann",
	    "Wallner",
	    "Wallstab",
	    "Walter",
	    "Walther",
	    "Walton",
	    "Walz",
	    "Wanner",
	    "Wartenberg",
	    "Waschbüsch",
	    "Wassilew",
	    "Wassiluk",
	    "Weber",
	    "Wehrsen",
	    "Weidlich",
	    "Weidner",
	    "Weigel",
	    "Weight",
	    "Weiler",
	    "Weimer",
	    "Weis",
	    "Weiss",
	    "Weller",
	    "Welsch",
	    "Welz",
	    "Welzel",
	    "Weniger",
	    "Wenk",
	    "Werle",
	    "Werner",
	    "Werrmann",
	    "Wessel",
	    "Wessinghage",
	    "Weyel",
	    "Wezel",
	    "Wichmann",
	    "Wickert",
	    "Wiebe",
	    "Wiechmann",
	    "Wiegelmann",
	    "Wierig",
	    "Wiese",
	    "Wieser",
	    "Wilhelm",
	    "Wilky",
	    "Will",
	    "Willwacher",
	    "Wilts",
	    "Wimmer",
	    "Winkelmann",
	    "Winkler",
	    "Winter",
	    "Wischek",
	    "Wischer",
	    "Wissing",
	    "Wittich",
	    "Wittl",
	    "Wolf",
	    "Wolfarth",
	    "Wolff",
	    "Wollenberg",
	    "Wollmann",
	    "Woytkowska",
	    "Wujak",
	    "Wurm",
	    "Wyludda",
	    "Wölpert",
	    "Wöschler",
	    "Wühn",
	    "Wünsche",
	    "Zach",
	    "Zaczkiewicz",
	    "Zahn",
	    "Zaituc",
	    "Zandt",
	    "Zanner",
	    "Zapletal",
	    "Zauber",
	    "Zeidler",
	    "Zekl",
	    "Zender",
	    "Zeuch",
	    "Zeyen",
	    "Zeyhle",
	    "Ziegler",
	    "Zimanyi",
	    "Zimmer",
	    "Zimmermann",
	    "Zinser",
	    "Zintl",
	    "Zipp",
	    "Zipse",
	    "Zschunke",
	    "Zuber",
	    "Zwiener",
	    "Zümsande",
	    "Östringer",
	    "Überacker"
	  ],
	  "prefix": [
	    "Hr.",
	    "Fr.",
	    "Dr.",
	    "Prof. Dr."
	  ],
	  "nobility_title_prefix": [
	    "zu",
	    "von",
	    "vom",
	    "von der"
	  ],
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{nobility_title_prefix} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	de.phone_number = {
	  "formats": [
	    "(0###) #########",
	    "(0####) #######",
	    "+49-###-#######",
	    "+49-####-########"
	  ]
	};
	de.cell_phone = {
	  "formats": [
	    "+49-1##-#######",
	    "+49-1###-########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var de_AT = {};
	module["exports"] = de_AT;
	de_AT.title = "German (Austria)";
	de_AT.address = {
	  "country": [
	    "Ägypten",
	    "Äquatorialguinea",
	    "Äthiopien",
	    "Österreich",
	    "Afghanistan",
	    "Albanien",
	    "Algerien",
	    "Amerikanisch-Samoa",
	    "Amerikanische Jungferninseln",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antarktis",
	    "Antigua und Barbuda",
	    "Argentinien",
	    "Armenien",
	    "Aruba",
	    "Aserbaidschan",
	    "Australien",
	    "Bahamas",
	    "Bahrain",
	    "Bangladesch",
	    "Barbados",
	    "Belarus",
	    "Belgien",
	    "Belize",
	    "Benin",
	    "die Bermudas",
	    "Bhutan",
	    "Bolivien",
	    "Bosnien und Herzegowina",
	    "Botsuana",
	    "Bouvetinsel",
	    "Brasilien",
	    "Britische Jungferninseln",
	    "Britisches Territorium im Indischen Ozean",
	    "Brunei Darussalam",
	    "Bulgarien",
	    "Burkina Faso",
	    "Burundi",
	    "Chile",
	    "China",
	    "Cookinseln",
	    "Costa Rica",
	    "Dänemark",
	    "Demokratische Republik Kongo",
	    "Demokratische Volksrepublik Korea",
	    "Deutschland",
	    "Dominica",
	    "Dominikanische Republik",
	    "Dschibuti",
	    "Ecuador",
	    "El Salvador",
	    "Eritrea",
	    "Estland",
	    "Färöer",
	    "Falklandinseln",
	    "Fidschi",
	    "Finnland",
	    "Frankreich",
	    "Französisch-Guayana",
	    "Französisch-Polynesien",
	    "Französische Gebiete im südlichen Indischen Ozean",
	    "Gabun",
	    "Gambia",
	    "Georgien",
	    "Ghana",
	    "Gibraltar",
	    "Grönland",
	    "Grenada",
	    "Griechenland",
	    "Guadeloupe",
	    "Guam",
	    "Guatemala",
	    "Guinea",
	    "Guinea-Bissau",
	    "Guyana",
	    "Haiti",
	    "Heard und McDonaldinseln",
	    "Honduras",
	    "Hongkong",
	    "Indien",
	    "Indonesien",
	    "Irak",
	    "Iran",
	    "Irland",
	    "Island",
	    "Israel",
	    "Italien",
	    "Jamaika",
	    "Japan",
	    "Jemen",
	    "Jordanien",
	    "Jugoslawien",
	    "Kaimaninseln",
	    "Kambodscha",
	    "Kamerun",
	    "Kanada",
	    "Kap Verde",
	    "Kasachstan",
	    "Katar",
	    "Kenia",
	    "Kirgisistan",
	    "Kiribati",
	    "Kleinere amerikanische Überseeinseln",
	    "Kokosinseln",
	    "Kolumbien",
	    "Komoren",
	    "Kongo",
	    "Kroatien",
	    "Kuba",
	    "Kuwait",
	    "Laos",
	    "Lesotho",
	    "Lettland",
	    "Libanon",
	    "Liberia",
	    "Libyen",
	    "Liechtenstein",
	    "Litauen",
	    "Luxemburg",
	    "Macau",
	    "Madagaskar",
	    "Malawi",
	    "Malaysia",
	    "Malediven",
	    "Mali",
	    "Malta",
	    "ehemalige jugoslawische Republik Mazedonien",
	    "Marokko",
	    "Marshallinseln",
	    "Martinique",
	    "Mauretanien",
	    "Mauritius",
	    "Mayotte",
	    "Mexiko",
	    "Mikronesien",
	    "Monaco",
	    "Mongolei",
	    "Montserrat",
	    "Mosambik",
	    "Myanmar",
	    "Nördliche Marianen",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Neukaledonien",
	    "Neuseeland",
	    "Nicaragua",
	    "Niederländische Antillen",
	    "Niederlande",
	    "Niger",
	    "Nigeria",
	    "Niue",
	    "Norfolkinsel",
	    "Norwegen",
	    "Oman",
	    "Osttimor",
	    "Pakistan",
	    "Palau",
	    "Panama",
	    "Papua-Neuguinea",
	    "Paraguay",
	    "Peru",
	    "Philippinen",
	    "Pitcairninseln",
	    "Polen",
	    "Portugal",
	    "Puerto Rico",
	    "Réunion",
	    "Republik Korea",
	    "Republik Moldau",
	    "Ruanda",
	    "Rumänien",
	    "Russische Föderation",
	    "São Tomé und Príncipe",
	    "Südafrika",
	    "Südgeorgien und Südliche Sandwichinseln",
	    "Salomonen",
	    "Sambia",
	    "Samoa",
	    "San Marino",
	    "Saudi-Arabien",
	    "Schweden",
	    "Schweiz",
	    "Senegal",
	    "Seychellen",
	    "Sierra Leone",
	    "Simbabwe",
	    "Singapur",
	    "Slowakei",
	    "Slowenien",
	    "Somalien",
	    "Spanien",
	    "Sri Lanka",
	    "St. Helena",
	    "St. Kitts und Nevis",
	    "St. Lucia",
	    "St. Pierre und Miquelon",
	    "St. Vincent und die Grenadinen",
	    "Sudan",
	    "Surinam",
	    "Svalbard und Jan Mayen",
	    "Swasiland",
	    "Syrien",
	    "Türkei",
	    "Tadschikistan",
	    "Taiwan",
	    "Tansania",
	    "Thailand",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidad und Tobago",
	    "Tschad",
	    "Tschechische Republik",
	    "Tunesien",
	    "Turkmenistan",
	    "Turks- und Caicosinseln",
	    "Tuvalu",
	    "Uganda",
	    "Ukraine",
	    "Ungarn",
	    "Uruguay",
	    "Usbekistan",
	    "Vanuatu",
	    "Vatikanstadt",
	    "Venezuela",
	    "Vereinigte Arabische Emirate",
	    "Vereinigte Staaten",
	    "Vereinigtes Königreich",
	    "Vietnam",
	    "Wallis und Futuna",
	    "Weihnachtsinsel",
	    "Westsahara",
	    "Zentralafrikanische Republik",
	    "Zypern"
	  ],
	  "street_root": [
	    "Ahorn",
	    "Ahorngasse (St. Andrä)",
	    "Alleestraße (Poysbrunn)",
	    "Alpenlandstraße",
	    "Alte Poststraße",
	    "Alte Ufergasse",
	    "Am Kronawett (Hagenbrunn)",
	    "Am Mühlwasser",
	    "Am Rebenhang",
	    "Am Sternweg",
	    "Anton Wildgans-Straße",
	    "Auer-von-Welsbach-Weg",
	    "Auf der Stift",
	    "Aufeldgasse",
	    "Bahngasse",
	    "Bahnhofstraße",
	    "Bahnstraße (Gerhaus)",
	    "Basteigasse",
	    "Berggasse",
	    "Bergstraße",
	    "Birkenweg",
	    "Blasiussteig",
	    "Blattur",
	    "Bruderhofgasse",
	    "Brunnelligasse",
	    "Bühelweg",
	    "Darnautgasse",
	    "Donaugasse",
	    "Dorfplatz (Haselbach)",
	    "Dr.-Oberreiter-Straße",
	    "Dr.Karl Holoubek-Str.",
	    "Drautal Bundesstraße",
	    "Dürnrohrer Straße",
	    "Ebenthalerstraße",
	    "Eckgrabenweg",
	    "Erlenstraße",
	    "Erlenweg",
	    "Eschenweg",
	    "Etrichgasse",
	    "Fassergasse",
	    "Feichteggerwiese",
	    "Feld-Weg",
	    "Feldgasse",
	    "Feldstapfe",
	    "Fischpointweg",
	    "Flachbergstraße",
	    "Flurweg",
	    "Franz Schubert-Gasse",
	    "Franz-Schneeweiß-Weg",
	    "Franz-von-Assisi-Straße",
	    "Fritz-Pregl-Straße",
	    "Fuchsgrubenweg",
	    "Födlerweg",
	    "Föhrenweg",
	    "Fünfhaus (Paasdorf)",
	    "Gabelsbergerstraße",
	    "Gartenstraße",
	    "Geigen",
	    "Geigergasse",
	    "Gemeindeaugasse",
	    "Gemeindeplatz",
	    "Georg-Aichinger-Straße",
	    "Glanfeldbachweg",
	    "Graben (Burgauberg)",
	    "Grub",
	    "Gröretgasse",
	    "Grünbach",
	    "Gösting",
	    "Hainschwang",
	    "Hans-Mauracher-Straße",
	    "Hart",
	    "Teichstraße",
	    "Hauptplatz",
	    "Hauptstraße",
	    "Heideweg",
	    "Heinrich Landauer Gasse",
	    "Helenengasse",
	    "Hermann von Gilmweg",
	    "Hermann-Löns-Gasse",
	    "Herminengasse",
	    "Hernstorferstraße",
	    "Hirsdorf",
	    "Hochfeistritz",
	    "Hochhaus Neue Donau",
	    "Hof",
	    "Hussovits Gasse",
	    "Höggen",
	    "Hütten",
	    "Janzgasse",
	    "Jochriemgutstraße",
	    "Johann-Strauß-Gasse",
	    "Julius-Raab-Straße",
	    "Kahlenberger Straße",
	    "Karl Kraft-Straße",
	    "Kegelprielstraße",
	    "Keltenberg-Eponaweg",
	    "Kennedybrücke",
	    "Kerpelystraße",
	    "Kindergartenstraße",
	    "Kinderheimgasse",
	    "Kirchenplatz",
	    "Kirchweg",
	    "Klagenfurter Straße",
	    "Klamm",
	    "Kleinbaumgarten",
	    "Klingergasse",
	    "Koloniestraße",
	    "Konrad-Duden-Gasse",
	    "Krankenhausstraße",
	    "Kubinstraße",
	    "Köhldorfergasse",
	    "Lackenweg",
	    "Lange Mekotte",
	    "Leifling",
	    "Leopold Frank-Straße (Pellendorf)",
	    "Lerchengasse (Pirka)",
	    "Lichtensternsiedlung V",
	    "Lindenhofstraße",
	    "Lindenweg",
	    "Luegstraße",
	    "Maierhof",
	    "Malerweg",
	    "Mitterweg",
	    "Mittlere Hauptstraße",
	    "Moosbachgasse",
	    "Morettigasse",
	    "Musikpavillon Riezlern",
	    "Mühlboden",
	    "Mühle",
	    "Mühlenweg",
	    "Neustiftgasse",
	    "Niederegg",
	    "Niedergams",
	    "Nordwestbahnbrücke",
	    "Oberbödenalm",
	    "Obere Berggasse",
	    "Oedt",
	    "Am Färberberg",
	    "Ottogasse",
	    "Paul Peters-Gasse",
	    "Perspektivstraße",
	    "Poppichl",
	    "Privatweg",
	    "Prixgasse",
	    "Pyhra",
	    "Radetzkystraße",
	    "Raiden",
	    "Reichensteinstraße",
	    "Reitbauernstraße",
	    "Reiterweg",
	    "Reitschulgasse",
	    "Ringweg",
	    "Rupertistraße",
	    "Römerstraße",
	    "Römerweg",
	    "Sackgasse",
	    "Schaunbergerstraße",
	    "Schloßweg",
	    "Schulgasse (Langeck)",
	    "Schönholdsiedlung",
	    "Seeblick",
	    "Seestraße",
	    "Semriacherstraße",
	    "Simling",
	    "Sipbachzeller Straße",
	    "Sonnenweg",
	    "Spargelfeldgasse",
	    "Spiesmayrweg",
	    "Sportplatzstraße",
	    "St.Ulrich",
	    "Steilmannstraße",
	    "Steingrüneredt",
	    "Strassfeld",
	    "Straßerau",
	    "Stöpflweg",
	    "Stüra",
	    "Taferngasse",
	    "Tennweg",
	    "Thomas Koschat-Gasse",
	    "Tiroler Straße",
	    "Torrogasse",
	    "Uferstraße (Schwarzau am Steinfeld)",
	    "Unterdörfl",
	    "Unterer Sonnrainweg",
	    "Verwaltersiedlung",
	    "Waldhang",
	    "Wasen",
	    "Weidenstraße",
	    "Weiherweg",
	    "Wettsteingasse",
	    "Wiener Straße",
	    "Windisch",
	    "Zebragasse",
	    "Zellerstraße",
	    "Ziehrerstraße",
	    "Zulechnerweg",
	    "Zwergjoch",
	    "Ötzbruck"
	  ],
	  "building_number": [
	    "###",
	    "##",
	    "#",
	    "##a",
	    "##b",
	    "##c"
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "Zimmer ###",
	    "# OG"
	  ],
	  "postcode": [
	    "####"
	  ],
	  "state": [
	    "Burgenland",
	    "Kärnten",
	    "Niederösterreich",
	    "Oberösterreich",
	    "Salzburg",
	    "Steiermark",
	    "Tirol",
	    "Vorarlberg",
	    "Wien"
	  ],
	  "state_abbr": [
	    "Bgld.",
	    "Ktn.",
	    "NÖ",
	    "OÖ",
	    "Sbg.",
	    "Stmk.",
	    "T",
	    "Vbg.",
	    "W"
	  ],
	  "city_name": [
	    "Aigen im Mühlkreis",
	    "Allerheiligen bei Wildon",
	    "Altenfelden",
	    "Arriach",
	    "Axams",
	    "Baumgartenberg",
	    "Bergern im Dunkelsteinerwald",
	    "Berndorf bei Salzburg",
	    "Bregenz",
	    "Breitenbach am Inn",
	    "Deutsch-Wagram",
	    "Dienten am Hochkönig",
	    "Dietach",
	    "Dornbirn",
	    "Dürnkrut",
	    "Eben im Pongau",
	    "Ebenthal in Kärnten",
	    "Eichgraben",
	    "Eisenstadt",
	    "Ellmau",
	    "Feistritz am Wechsel",
	    "Finkenberg",
	    "Fiss",
	    "Frantschach-St. Gertraud",
	    "Fritzens",
	    "Gams bei Hieflau",
	    "Geiersberg",
	    "Graz",
	    "Großhöflein",
	    "Gößnitz",
	    "Hartl",
	    "Hausleiten",
	    "Herzogenburg",
	    "Hinterhornbach",
	    "Hochwolkersdorf",
	    "Ilz",
	    "Ilztal",
	    "Innerbraz",
	    "Innsbruck",
	    "Itter",
	    "Jagerberg",
	    "Jeging",
	    "Johnsbach",
	    "Johnsdorf-Brunn",
	    "Jungholz",
	    "Kirchdorf am Inn",
	    "Klagenfurt",
	    "Kottes-Purk",
	    "Krumau am Kamp",
	    "Krumbach",
	    "Lavamünd",
	    "Lech",
	    "Linz",
	    "Ludesch",
	    "Lödersdorf",
	    "Marbach an der Donau",
	    "Mattsee",
	    "Mautern an der Donau",
	    "Mauterndorf",
	    "Mitterbach am Erlaufsee",
	    "Neudorf bei Passail",
	    "Neudorf bei Staatz",
	    "Neukirchen an der Enknach",
	    "Neustift an der Lafnitz",
	    "Niederleis",
	    "Oberndorf in Tirol",
	    "Oberstorcha",
	    "Oberwaltersdorf",
	    "Oed-Oehling",
	    "Ort im Innkreis",
	    "Pilgersdorf",
	    "Pitschgau",
	    "Pollham",
	    "Preitenegg",
	    "Purbach am Neusiedler See",
	    "Rabenwald",
	    "Raiding",
	    "Rastenfeld",
	    "Ratten",
	    "Rettenegg",
	    "Salzburg",
	    "Sankt Johann im Saggautal",
	    "St. Peter am Kammersberg",
	    "St. Pölten",
	    "St. Veit an der Glan",
	    "Taxenbach",
	    "Tragwein",
	    "Trebesing",
	    "Trieben",
	    "Turnau",
	    "Ungerdorf",
	    "Unterauersbach",
	    "Unterstinkenbrunn",
	    "Untertilliach",
	    "Uttendorf",
	    "Vals",
	    "Velden am Wörther See",
	    "Viehhofen",
	    "Villach",
	    "Vitis",
	    "Waidhofen an der Thaya",
	    "Waldkirchen am Wesen",
	    "Weißkirchen an der Traun",
	    "Wien",
	    "Wimpassing im Schwarzatale",
	    "Ybbs an der Donau",
	    "Ybbsitz",
	    "Yspertal",
	    "Zeillern",
	    "Zell am Pettenfirst",
	    "Zell an der Pram",
	    "Zerlach",
	    "Zwölfaxing",
	    "Öblarn",
	    "Übelbach",
	    "Überackern",
	    "Übersaxen",
	    "Übersbach"
	  ],
	  "city": [
	    "#{city_name}"
	  ],
	  "street_name": [
	    "#{street_root}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Österreich"
	  ]
	};
	de_AT.company = {
	  "suffix": [
	    "GmbH",
	    "AG",
	    "Gruppe",
	    "KG",
	    "GmbH & Co. KG",
	    "UG",
	    "OHG"
	  ],
	  "legal_form": [
	    "GmbH",
	    "AG",
	    "Gruppe",
	    "KG",
	    "GmbH & Co. KG",
	    "UG",
	    "OHG"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
	  ]
	};
	de_AT.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "info",
	    "name",
	    "net",
	    "org",
	    "de",
	    "ch",
	    "at"
	  ]
	};
	de_AT.name = {
	  "first_name": [
	    "Aaron",
	    "Abdul",
	    "Abdullah",
	    "Adam",
	    "Adrian",
	    "Adriano",
	    "Ahmad",
	    "Ahmed",
	    "Ahmet",
	    "Alan",
	    "Albert",
	    "Alessandro",
	    "Alessio",
	    "Alex",
	    "Alexander",
	    "Alfred",
	    "Ali",
	    "Amar",
	    "Amir",
	    "Amon",
	    "Andre",
	    "Andreas",
	    "Andrew",
	    "Angelo",
	    "Ansgar",
	    "Anthony",
	    "Anton",
	    "Antonio",
	    "Arda",
	    "Arian",
	    "Armin",
	    "Arne",
	    "Arno",
	    "Arthur",
	    "Artur",
	    "Arved",
	    "Arvid",
	    "Ayman",
	    "Baran",
	    "Baris",
	    "Bastian",
	    "Batuhan",
	    "Bela",
	    "Ben",
	    "Benedikt",
	    "Benjamin",
	    "Bennet",
	    "Bennett",
	    "Benno",
	    "Bent",
	    "Berat",
	    "Berkay",
	    "Bernd",
	    "Bilal",
	    "Bjarne",
	    "Björn",
	    "Bo",
	    "Boris",
	    "Brandon",
	    "Brian",
	    "Bruno",
	    "Bryan",
	    "Burak",
	    "Calvin",
	    "Can",
	    "Carl",
	    "Carlo",
	    "Carlos",
	    "Caspar",
	    "Cedric",
	    "Cedrik",
	    "Cem",
	    "Charlie",
	    "Chris",
	    "Christian",
	    "Christiano",
	    "Christoph",
	    "Christopher",
	    "Claas",
	    "Clemens",
	    "Colin",
	    "Collin",
	    "Conner",
	    "Connor",
	    "Constantin",
	    "Corvin",
	    "Curt",
	    "Damian",
	    "Damien",
	    "Daniel",
	    "Danilo",
	    "Danny",
	    "Darian",
	    "Dario",
	    "Darius",
	    "Darren",
	    "David",
	    "Davide",
	    "Davin",
	    "Dean",
	    "Deniz",
	    "Dennis",
	    "Denny",
	    "Devin",
	    "Diego",
	    "Dion",
	    "Domenic",
	    "Domenik",
	    "Dominic",
	    "Dominik",
	    "Dorian",
	    "Dustin",
	    "Dylan",
	    "Ecrin",
	    "Eddi",
	    "Eddy",
	    "Edgar",
	    "Edwin",
	    "Efe",
	    "Ege",
	    "Elia",
	    "Eliah",
	    "Elias",
	    "Elijah",
	    "Emanuel",
	    "Emil",
	    "Emilian",
	    "Emilio",
	    "Emir",
	    "Emirhan",
	    "Emre",
	    "Enes",
	    "Enno",
	    "Enrico",
	    "Eren",
	    "Eric",
	    "Erik",
	    "Etienne",
	    "Fabian",
	    "Fabien",
	    "Fabio",
	    "Fabrice",
	    "Falk",
	    "Felix",
	    "Ferdinand",
	    "Fiete",
	    "Filip",
	    "Finlay",
	    "Finley",
	    "Finn",
	    "Finnley",
	    "Florian",
	    "Francesco",
	    "Franz",
	    "Frederic",
	    "Frederick",
	    "Frederik",
	    "Friedrich",
	    "Fritz",
	    "Furkan",
	    "Fynn",
	    "Gabriel",
	    "Georg",
	    "Gerrit",
	    "Gian",
	    "Gianluca",
	    "Gino",
	    "Giuliano",
	    "Giuseppe",
	    "Gregor",
	    "Gustav",
	    "Hagen",
	    "Hamza",
	    "Hannes",
	    "Hanno",
	    "Hans",
	    "Hasan",
	    "Hassan",
	    "Hauke",
	    "Hendrik",
	    "Hennes",
	    "Henning",
	    "Henri",
	    "Henrick",
	    "Henrik",
	    "Henry",
	    "Hugo",
	    "Hussein",
	    "Ian",
	    "Ibrahim",
	    "Ilias",
	    "Ilja",
	    "Ilyas",
	    "Immanuel",
	    "Ismael",
	    "Ismail",
	    "Ivan",
	    "Iven",
	    "Jack",
	    "Jacob",
	    "Jaden",
	    "Jakob",
	    "Jamal",
	    "James",
	    "Jamie",
	    "Jan",
	    "Janek",
	    "Janis",
	    "Janne",
	    "Jannek",
	    "Jannes",
	    "Jannik",
	    "Jannis",
	    "Jano",
	    "Janosch",
	    "Jared",
	    "Jari",
	    "Jarne",
	    "Jarno",
	    "Jaron",
	    "Jason",
	    "Jasper",
	    "Jay",
	    "Jayden",
	    "Jayson",
	    "Jean",
	    "Jens",
	    "Jeremias",
	    "Jeremie",
	    "Jeremy",
	    "Jermaine",
	    "Jerome",
	    "Jesper",
	    "Jesse",
	    "Jim",
	    "Jimmy",
	    "Joe",
	    "Joel",
	    "Joey",
	    "Johann",
	    "Johannes",
	    "John",
	    "Johnny",
	    "Jon",
	    "Jona",
	    "Jonah",
	    "Jonas",
	    "Jonathan",
	    "Jonte",
	    "Joost",
	    "Jordan",
	    "Joris",
	    "Joscha",
	    "Joschua",
	    "Josef",
	    "Joseph",
	    "Josh",
	    "Joshua",
	    "Josua",
	    "Juan",
	    "Julian",
	    "Julien",
	    "Julius",
	    "Juri",
	    "Justin",
	    "Justus",
	    "Kaan",
	    "Kai",
	    "Kalle",
	    "Karim",
	    "Karl",
	    "Karlo",
	    "Kay",
	    "Keanu",
	    "Kenan",
	    "Kenny",
	    "Keno",
	    "Kerem",
	    "Kerim",
	    "Kevin",
	    "Kian",
	    "Kilian",
	    "Kim",
	    "Kimi",
	    "Kjell",
	    "Klaas",
	    "Klemens",
	    "Konrad",
	    "Konstantin",
	    "Koray",
	    "Korbinian",
	    "Kurt",
	    "Lars",
	    "Lasse",
	    "Laurence",
	    "Laurens",
	    "Laurenz",
	    "Laurin",
	    "Lean",
	    "Leander",
	    "Leandro",
	    "Leif",
	    "Len",
	    "Lenn",
	    "Lennard",
	    "Lennart",
	    "Lennert",
	    "Lennie",
	    "Lennox",
	    "Lenny",
	    "Leo",
	    "Leon",
	    "Leonard",
	    "Leonardo",
	    "Leonhard",
	    "Leonidas",
	    "Leopold",
	    "Leroy",
	    "Levent",
	    "Levi",
	    "Levin",
	    "Lewin",
	    "Lewis",
	    "Liam",
	    "Lian",
	    "Lias",
	    "Lino",
	    "Linus",
	    "Lio",
	    "Lion",
	    "Lionel",
	    "Logan",
	    "Lorenz",
	    "Lorenzo",
	    "Loris",
	    "Louis",
	    "Luan",
	    "Luc",
	    "Luca",
	    "Lucas",
	    "Lucian",
	    "Lucien",
	    "Ludwig",
	    "Luis",
	    "Luiz",
	    "Luk",
	    "Luka",
	    "Lukas",
	    "Luke",
	    "Lutz",
	    "Maddox",
	    "Mads",
	    "Magnus",
	    "Maik",
	    "Maksim",
	    "Malik",
	    "Malte",
	    "Manuel",
	    "Marc",
	    "Marcel",
	    "Marco",
	    "Marcus",
	    "Marek",
	    "Marian",
	    "Mario",
	    "Marius",
	    "Mark",
	    "Marko",
	    "Markus",
	    "Marlo",
	    "Marlon",
	    "Marten",
	    "Martin",
	    "Marvin",
	    "Marwin",
	    "Mateo",
	    "Mathis",
	    "Matis",
	    "Mats",
	    "Matteo",
	    "Mattes",
	    "Matthias",
	    "Matthis",
	    "Matti",
	    "Mattis",
	    "Maurice",
	    "Max",
	    "Maxim",
	    "Maximilian",
	    "Mehmet",
	    "Meik",
	    "Melvin",
	    "Merlin",
	    "Mert",
	    "Michael",
	    "Michel",
	    "Mick",
	    "Miguel",
	    "Mika",
	    "Mikail",
	    "Mike",
	    "Milan",
	    "Milo",
	    "Mio",
	    "Mirac",
	    "Mirco",
	    "Mirko",
	    "Mohamed",
	    "Mohammad",
	    "Mohammed",
	    "Moritz",
	    "Morten",
	    "Muhammed",
	    "Murat",
	    "Mustafa",
	    "Nathan",
	    "Nathanael",
	    "Nelson",
	    "Neo",
	    "Nevio",
	    "Nick",
	    "Niclas",
	    "Nico",
	    "Nicolai",
	    "Nicolas",
	    "Niels",
	    "Nikita",
	    "Niklas",
	    "Niko",
	    "Nikolai",
	    "Nikolas",
	    "Nils",
	    "Nino",
	    "Noah",
	    "Noel",
	    "Norman",
	    "Odin",
	    "Oke",
	    "Ole",
	    "Oliver",
	    "Omar",
	    "Onur",
	    "Oscar",
	    "Oskar",
	    "Pascal",
	    "Patrice",
	    "Patrick",
	    "Paul",
	    "Peer",
	    "Pepe",
	    "Peter",
	    "Phil",
	    "Philip",
	    "Philipp",
	    "Pierre",
	    "Piet",
	    "Pit",
	    "Pius",
	    "Quentin",
	    "Quirin",
	    "Rafael",
	    "Raik",
	    "Ramon",
	    "Raphael",
	    "Rasmus",
	    "Raul",
	    "Rayan",
	    "René",
	    "Ricardo",
	    "Riccardo",
	    "Richard",
	    "Rick",
	    "Rico",
	    "Robert",
	    "Robin",
	    "Rocco",
	    "Roman",
	    "Romeo",
	    "Ron",
	    "Ruben",
	    "Ryan",
	    "Said",
	    "Salih",
	    "Sam",
	    "Sami",
	    "Sammy",
	    "Samuel",
	    "Sandro",
	    "Santino",
	    "Sascha",
	    "Sean",
	    "Sebastian",
	    "Selim",
	    "Semih",
	    "Shawn",
	    "Silas",
	    "Simeon",
	    "Simon",
	    "Sinan",
	    "Sky",
	    "Stefan",
	    "Steffen",
	    "Stephan",
	    "Steve",
	    "Steven",
	    "Sven",
	    "Sönke",
	    "Sören",
	    "Taha",
	    "Tamino",
	    "Tammo",
	    "Tarik",
	    "Tayler",
	    "Taylor",
	    "Teo",
	    "Theo",
	    "Theodor",
	    "Thies",
	    "Thilo",
	    "Thomas",
	    "Thorben",
	    "Thore",
	    "Thorge",
	    "Tiago",
	    "Til",
	    "Till",
	    "Tillmann",
	    "Tim",
	    "Timm",
	    "Timo",
	    "Timon",
	    "Timothy",
	    "Tino",
	    "Titus",
	    "Tizian",
	    "Tjark",
	    "Tobias",
	    "Tom",
	    "Tommy",
	    "Toni",
	    "Tony",
	    "Torben",
	    "Tore",
	    "Tristan",
	    "Tyler",
	    "Tyron",
	    "Umut",
	    "Valentin",
	    "Valentino",
	    "Veit",
	    "Victor",
	    "Viktor",
	    "Vin",
	    "Vincent",
	    "Vito",
	    "Vitus",
	    "Wilhelm",
	    "Willi",
	    "William",
	    "Willy",
	    "Xaver",
	    "Yannic",
	    "Yannick",
	    "Yannik",
	    "Yannis",
	    "Yasin",
	    "Youssef",
	    "Yunus",
	    "Yusuf",
	    "Yven",
	    "Yves",
	    "Ömer",
	    "Aaliyah",
	    "Abby",
	    "Abigail",
	    "Ada",
	    "Adelina",
	    "Adriana",
	    "Aileen",
	    "Aimee",
	    "Alana",
	    "Alea",
	    "Alena",
	    "Alessa",
	    "Alessia",
	    "Alexa",
	    "Alexandra",
	    "Alexia",
	    "Alexis",
	    "Aleyna",
	    "Alia",
	    "Alica",
	    "Alice",
	    "Alicia",
	    "Alina",
	    "Alisa",
	    "Alisha",
	    "Alissa",
	    "Aliya",
	    "Aliyah",
	    "Allegra",
	    "Alma",
	    "Alyssa",
	    "Amalia",
	    "Amanda",
	    "Amelia",
	    "Amelie",
	    "Amina",
	    "Amira",
	    "Amy",
	    "Ana",
	    "Anabel",
	    "Anastasia",
	    "Andrea",
	    "Angela",
	    "Angelina",
	    "Angelique",
	    "Anja",
	    "Ann",
	    "Anna",
	    "Annabel",
	    "Annabell",
	    "Annabelle",
	    "Annalena",
	    "Anne",
	    "Anneke",
	    "Annelie",
	    "Annemarie",
	    "Anni",
	    "Annie",
	    "Annika",
	    "Anny",
	    "Anouk",
	    "Antonia",
	    "Arda",
	    "Ariana",
	    "Ariane",
	    "Arwen",
	    "Ashley",
	    "Asya",
	    "Aurelia",
	    "Aurora",
	    "Ava",
	    "Ayleen",
	    "Aylin",
	    "Ayse",
	    "Azra",
	    "Betty",
	    "Bianca",
	    "Bianka",
	    "Caitlin",
	    "Cara",
	    "Carina",
	    "Carla",
	    "Carlotta",
	    "Carmen",
	    "Carolin",
	    "Carolina",
	    "Caroline",
	    "Cassandra",
	    "Catharina",
	    "Catrin",
	    "Cecile",
	    "Cecilia",
	    "Celia",
	    "Celina",
	    "Celine",
	    "Ceyda",
	    "Ceylin",
	    "Chantal",
	    "Charleen",
	    "Charlotta",
	    "Charlotte",
	    "Chayenne",
	    "Cheyenne",
	    "Chiara",
	    "Christin",
	    "Christina",
	    "Cindy",
	    "Claire",
	    "Clara",
	    "Clarissa",
	    "Colleen",
	    "Collien",
	    "Cora",
	    "Corinna",
	    "Cosima",
	    "Dana",
	    "Daniela",
	    "Daria",
	    "Darleen",
	    "Defne",
	    "Delia",
	    "Denise",
	    "Diana",
	    "Dilara",
	    "Dina",
	    "Dorothea",
	    "Ecrin",
	    "Eda",
	    "Eileen",
	    "Ela",
	    "Elaine",
	    "Elanur",
	    "Elea",
	    "Elena",
	    "Eleni",
	    "Eleonora",
	    "Eliana",
	    "Elif",
	    "Elina",
	    "Elisa",
	    "Elisabeth",
	    "Ella",
	    "Ellen",
	    "Elli",
	    "Elly",
	    "Elsa",
	    "Emelie",
	    "Emely",
	    "Emilia",
	    "Emilie",
	    "Emily",
	    "Emma",
	    "Emmely",
	    "Emmi",
	    "Emmy",
	    "Enie",
	    "Enna",
	    "Enya",
	    "Esma",
	    "Estelle",
	    "Esther",
	    "Eva",
	    "Evelin",
	    "Evelina",
	    "Eveline",
	    "Evelyn",
	    "Fabienne",
	    "Fatima",
	    "Fatma",
	    "Felicia",
	    "Felicitas",
	    "Felina",
	    "Femke",
	    "Fenja",
	    "Fine",
	    "Finia",
	    "Finja",
	    "Finnja",
	    "Fiona",
	    "Flora",
	    "Florentine",
	    "Francesca",
	    "Franka",
	    "Franziska",
	    "Frederike",
	    "Freya",
	    "Frida",
	    "Frieda",
	    "Friederike",
	    "Giada",
	    "Gina",
	    "Giulia",
	    "Giuliana",
	    "Greta",
	    "Hailey",
	    "Hana",
	    "Hanna",
	    "Hannah",
	    "Heidi",
	    "Helen",
	    "Helena",
	    "Helene",
	    "Helin",
	    "Henriette",
	    "Henrike",
	    "Hermine",
	    "Ida",
	    "Ilayda",
	    "Imke",
	    "Ina",
	    "Ines",
	    "Inga",
	    "Inka",
	    "Irem",
	    "Isa",
	    "Isabel",
	    "Isabell",
	    "Isabella",
	    "Isabelle",
	    "Ivonne",
	    "Jacqueline",
	    "Jamie",
	    "Jamila",
	    "Jana",
	    "Jane",
	    "Janin",
	    "Janina",
	    "Janine",
	    "Janna",
	    "Janne",
	    "Jara",
	    "Jasmin",
	    "Jasmina",
	    "Jasmine",
	    "Jella",
	    "Jenna",
	    "Jennifer",
	    "Jenny",
	    "Jessica",
	    "Jessy",
	    "Jette",
	    "Jil",
	    "Jill",
	    "Joana",
	    "Joanna",
	    "Joelina",
	    "Joeline",
	    "Joelle",
	    "Johanna",
	    "Joleen",
	    "Jolie",
	    "Jolien",
	    "Jolin",
	    "Jolina",
	    "Joline",
	    "Jona",
	    "Jonah",
	    "Jonna",
	    "Josefin",
	    "Josefine",
	    "Josephin",
	    "Josephine",
	    "Josie",
	    "Josy",
	    "Joy",
	    "Joyce",
	    "Judith",
	    "Judy",
	    "Jule",
	    "Julia",
	    "Juliana",
	    "Juliane",
	    "Julie",
	    "Julienne",
	    "Julika",
	    "Julina",
	    "Juna",
	    "Justine",
	    "Kaja",
	    "Karina",
	    "Karla",
	    "Karlotta",
	    "Karolina",
	    "Karoline",
	    "Kassandra",
	    "Katarina",
	    "Katharina",
	    "Kathrin",
	    "Katja",
	    "Katrin",
	    "Kaya",
	    "Kayra",
	    "Kiana",
	    "Kiara",
	    "Kim",
	    "Kimberley",
	    "Kimberly",
	    "Kira",
	    "Klara",
	    "Korinna",
	    "Kristin",
	    "Kyra",
	    "Laila",
	    "Lana",
	    "Lara",
	    "Larissa",
	    "Laura",
	    "Laureen",
	    "Lavinia",
	    "Lea",
	    "Leah",
	    "Leana",
	    "Leandra",
	    "Leann",
	    "Lee",
	    "Leila",
	    "Lena",
	    "Lene",
	    "Leni",
	    "Lenia",
	    "Lenja",
	    "Lenya",
	    "Leona",
	    "Leoni",
	    "Leonie",
	    "Leonora",
	    "Leticia",
	    "Letizia",
	    "Levke",
	    "Leyla",
	    "Lia",
	    "Liah",
	    "Liana",
	    "Lili",
	    "Lilia",
	    "Lilian",
	    "Liliana",
	    "Lilith",
	    "Lilli",
	    "Lillian",
	    "Lilly",
	    "Lily",
	    "Lina",
	    "Linda",
	    "Lindsay",
	    "Line",
	    "Linn",
	    "Linnea",
	    "Lisa",
	    "Lisann",
	    "Lisanne",
	    "Liv",
	    "Livia",
	    "Liz",
	    "Lola",
	    "Loreen",
	    "Lorena",
	    "Lotta",
	    "Lotte",
	    "Louisa",
	    "Louise",
	    "Luana",
	    "Luca",
	    "Lucia",
	    "Lucie",
	    "Lucienne",
	    "Lucy",
	    "Luisa",
	    "Luise",
	    "Luka",
	    "Luna",
	    "Luzie",
	    "Lya",
	    "Lydia",
	    "Lyn",
	    "Lynn",
	    "Madeleine",
	    "Madita",
	    "Madleen",
	    "Madlen",
	    "Magdalena",
	    "Maike",
	    "Mailin",
	    "Maira",
	    "Maja",
	    "Malena",
	    "Malia",
	    "Malin",
	    "Malina",
	    "Mandy",
	    "Mara",
	    "Marah",
	    "Mareike",
	    "Maren",
	    "Maria",
	    "Mariam",
	    "Marie",
	    "Marieke",
	    "Mariella",
	    "Marika",
	    "Marina",
	    "Marisa",
	    "Marissa",
	    "Marit",
	    "Marla",
	    "Marleen",
	    "Marlen",
	    "Marlena",
	    "Marlene",
	    "Marta",
	    "Martha",
	    "Mary",
	    "Maryam",
	    "Mathilda",
	    "Mathilde",
	    "Matilda",
	    "Maxi",
	    "Maxima",
	    "Maxine",
	    "Maya",
	    "Mayra",
	    "Medina",
	    "Medine",
	    "Meike",
	    "Melanie",
	    "Melek",
	    "Melike",
	    "Melina",
	    "Melinda",
	    "Melis",
	    "Melisa",
	    "Melissa",
	    "Merle",
	    "Merve",
	    "Meryem",
	    "Mette",
	    "Mia",
	    "Michaela",
	    "Michelle",
	    "Mieke",
	    "Mila",
	    "Milana",
	    "Milena",
	    "Milla",
	    "Mina",
	    "Mira",
	    "Miray",
	    "Miriam",
	    "Mirja",
	    "Mona",
	    "Monique",
	    "Nadine",
	    "Nadja",
	    "Naemi",
	    "Nancy",
	    "Naomi",
	    "Natalia",
	    "Natalie",
	    "Nathalie",
	    "Neele",
	    "Nela",
	    "Nele",
	    "Nelli",
	    "Nelly",
	    "Nia",
	    "Nicole",
	    "Nika",
	    "Nike",
	    "Nikita",
	    "Nila",
	    "Nina",
	    "Nisa",
	    "Noemi",
	    "Nora",
	    "Olivia",
	    "Patricia",
	    "Patrizia",
	    "Paula",
	    "Paulina",
	    "Pauline",
	    "Penelope",
	    "Philine",
	    "Phoebe",
	    "Pia",
	    "Rahel",
	    "Rania",
	    "Rebecca",
	    "Rebekka",
	    "Riana",
	    "Rieke",
	    "Rike",
	    "Romina",
	    "Romy",
	    "Ronja",
	    "Rosa",
	    "Rosalie",
	    "Ruby",
	    "Sabrina",
	    "Sahra",
	    "Sally",
	    "Salome",
	    "Samantha",
	    "Samia",
	    "Samira",
	    "Sandra",
	    "Sandy",
	    "Sanja",
	    "Saphira",
	    "Sara",
	    "Sarah",
	    "Saskia",
	    "Selin",
	    "Selina",
	    "Selma",
	    "Sena",
	    "Sidney",
	    "Sienna",
	    "Silja",
	    "Sina",
	    "Sinja",
	    "Smilla",
	    "Sofia",
	    "Sofie",
	    "Sonja",
	    "Sophia",
	    "Sophie",
	    "Soraya",
	    "Stefanie",
	    "Stella",
	    "Stephanie",
	    "Stina",
	    "Sude",
	    "Summer",
	    "Susanne",
	    "Svea",
	    "Svenja",
	    "Sydney",
	    "Tabea",
	    "Talea",
	    "Talia",
	    "Tamara",
	    "Tamia",
	    "Tamina",
	    "Tanja",
	    "Tara",
	    "Tarja",
	    "Teresa",
	    "Tessa",
	    "Thalea",
	    "Thalia",
	    "Thea",
	    "Theresa",
	    "Tia",
	    "Tina",
	    "Tomke",
	    "Tuana",
	    "Valentina",
	    "Valeria",
	    "Valerie",
	    "Vanessa",
	    "Vera",
	    "Veronika",
	    "Victoria",
	    "Viktoria",
	    "Viola",
	    "Vivian",
	    "Vivien",
	    "Vivienne",
	    "Wibke",
	    "Wiebke",
	    "Xenia",
	    "Yara",
	    "Yaren",
	    "Yasmin",
	    "Ylvi",
	    "Ylvie",
	    "Yvonne",
	    "Zara",
	    "Zehra",
	    "Zeynep",
	    "Zoe",
	    "Zoey",
	    "Zoé"
	  ],
	  "last_name": [
	    "Abel",
	    "Abicht",
	    "Abraham",
	    "Abramovic",
	    "Abt",
	    "Achilles",
	    "Achkinadze",
	    "Ackermann",
	    "Adam",
	    "Adams",
	    "Ade",
	    "Agostini",
	    "Ahlke",
	    "Ahrenberg",
	    "Ahrens",
	    "Aigner",
	    "Albert",
	    "Albrecht",
	    "Alexa",
	    "Alexander",
	    "Alizadeh",
	    "Allgeyer",
	    "Amann",
	    "Amberg",
	    "Anding",
	    "Anggreny",
	    "Apitz",
	    "Arendt",
	    "Arens",
	    "Arndt",
	    "Aryee",
	    "Aschenbroich",
	    "Assmus",
	    "Astafei",
	    "Auer",
	    "Axmann",
	    "Baarck",
	    "Bachmann",
	    "Badane",
	    "Bader",
	    "Baganz",
	    "Bahl",
	    "Bak",
	    "Balcer",
	    "Balck",
	    "Balkow",
	    "Balnuweit",
	    "Balzer",
	    "Banse",
	    "Barr",
	    "Bartels",
	    "Barth",
	    "Barylla",
	    "Baseda",
	    "Battke",
	    "Bauer",
	    "Bauermeister",
	    "Baumann",
	    "Baumeister",
	    "Bauschinger",
	    "Bauschke",
	    "Bayer",
	    "Beavogui",
	    "Beck",
	    "Beckel",
	    "Becker",
	    "Beckmann",
	    "Bedewitz",
	    "Beele",
	    "Beer",
	    "Beggerow",
	    "Beh",
	    "Behr",
	    "Behrenbruch",
	    "Belz",
	    "Bender",
	    "Benecke",
	    "Benner",
	    "Benninger",
	    "Benzing",
	    "Berends",
	    "Berger",
	    "Berner",
	    "Berning",
	    "Bertenbreiter",
	    "Best",
	    "Bethke",
	    "Betz",
	    "Beushausen",
	    "Beutelspacher",
	    "Beyer",
	    "Biba",
	    "Bichler",
	    "Bickel",
	    "Biedermann",
	    "Bieler",
	    "Bielert",
	    "Bienasch",
	    "Bienias",
	    "Biesenbach",
	    "Bigdeli",
	    "Birkemeyer",
	    "Bittner",
	    "Blank",
	    "Blaschek",
	    "Blassneck",
	    "Bloch",
	    "Blochwitz",
	    "Blockhaus",
	    "Blum",
	    "Blume",
	    "Bock",
	    "Bode",
	    "Bogdashin",
	    "Bogenrieder",
	    "Bohge",
	    "Bolm",
	    "Borgschulze",
	    "Bork",
	    "Bormann",
	    "Bornscheuer",
	    "Borrmann",
	    "Borsch",
	    "Boruschewski",
	    "Bos",
	    "Bosler",
	    "Bourrouag",
	    "Bouschen",
	    "Boxhammer",
	    "Boyde",
	    "Bozsik",
	    "Brand",
	    "Brandenburg",
	    "Brandis",
	    "Brandt",
	    "Brauer",
	    "Braun",
	    "Brehmer",
	    "Breitenstein",
	    "Bremer",
	    "Bremser",
	    "Brenner",
	    "Brettschneider",
	    "Breu",
	    "Breuer",
	    "Briesenick",
	    "Bringmann",
	    "Brinkmann",
	    "Brix",
	    "Broening",
	    "Brosch",
	    "Bruckmann",
	    "Bruder",
	    "Bruhns",
	    "Brunner",
	    "Bruns",
	    "Bräutigam",
	    "Brömme",
	    "Brüggmann",
	    "Buchholz",
	    "Buchrucker",
	    "Buder",
	    "Bultmann",
	    "Bunjes",
	    "Burger",
	    "Burghagen",
	    "Burkhard",
	    "Burkhardt",
	    "Burmeister",
	    "Busch",
	    "Buschbaum",
	    "Busemann",
	    "Buss",
	    "Busse",
	    "Bussmann",
	    "Byrd",
	    "Bäcker",
	    "Böhm",
	    "Bönisch",
	    "Börgeling",
	    "Börner",
	    "Böttner",
	    "Büchele",
	    "Bühler",
	    "Büker",
	    "Büngener",
	    "Bürger",
	    "Bürklein",
	    "Büscher",
	    "Büttner",
	    "Camara",
	    "Carlowitz",
	    "Carlsohn",
	    "Caspari",
	    "Caspers",
	    "Chapron",
	    "Christ",
	    "Cierpinski",
	    "Clarius",
	    "Cleem",
	    "Cleve",
	    "Co",
	    "Conrad",
	    "Cordes",
	    "Cornelsen",
	    "Cors",
	    "Cotthardt",
	    "Crews",
	    "Cronjäger",
	    "Crosskofp",
	    "Da",
	    "Dahm",
	    "Dahmen",
	    "Daimer",
	    "Damaske",
	    "Danneberg",
	    "Danner",
	    "Daub",
	    "Daubner",
	    "Daudrich",
	    "Dauer",
	    "Daum",
	    "Dauth",
	    "Dautzenberg",
	    "De",
	    "Decker",
	    "Deckert",
	    "Deerberg",
	    "Dehmel",
	    "Deja",
	    "Delonge",
	    "Demut",
	    "Dengler",
	    "Denner",
	    "Denzinger",
	    "Derr",
	    "Dertmann",
	    "Dethloff",
	    "Deuschle",
	    "Dieckmann",
	    "Diedrich",
	    "Diekmann",
	    "Dienel",
	    "Dies",
	    "Dietrich",
	    "Dietz",
	    "Dietzsch",
	    "Diezel",
	    "Dilla",
	    "Dingelstedt",
	    "Dippl",
	    "Dittmann",
	    "Dittmar",
	    "Dittmer",
	    "Dix",
	    "Dobbrunz",
	    "Dobler",
	    "Dohring",
	    "Dolch",
	    "Dold",
	    "Dombrowski",
	    "Donie",
	    "Doskoczynski",
	    "Dragu",
	    "Drechsler",
	    "Drees",
	    "Dreher",
	    "Dreier",
	    "Dreissigacker",
	    "Dressler",
	    "Drews",
	    "Duma",
	    "Dutkiewicz",
	    "Dyett",
	    "Dylus",
	    "Dächert",
	    "Döbel",
	    "Döring",
	    "Dörner",
	    "Dörre",
	    "Dück",
	    "Eberhard",
	    "Eberhardt",
	    "Ecker",
	    "Eckhardt",
	    "Edorh",
	    "Effler",
	    "Eggenmueller",
	    "Ehm",
	    "Ehmann",
	    "Ehrig",
	    "Eich",
	    "Eichmann",
	    "Eifert",
	    "Einert",
	    "Eisenlauer",
	    "Ekpo",
	    "Elbe",
	    "Eleyth",
	    "Elss",
	    "Emert",
	    "Emmelmann",
	    "Ender",
	    "Engel",
	    "Engelen",
	    "Engelmann",
	    "Eplinius",
	    "Erdmann",
	    "Erhardt",
	    "Erlei",
	    "Erm",
	    "Ernst",
	    "Ertl",
	    "Erwes",
	    "Esenwein",
	    "Esser",
	    "Evers",
	    "Everts",
	    "Ewald",
	    "Fahner",
	    "Faller",
	    "Falter",
	    "Farber",
	    "Fassbender",
	    "Faulhaber",
	    "Fehrig",
	    "Feld",
	    "Felke",
	    "Feller",
	    "Fenner",
	    "Fenske",
	    "Feuerbach",
	    "Fietz",
	    "Figl",
	    "Figura",
	    "Filipowski",
	    "Filsinger",
	    "Fincke",
	    "Fink",
	    "Finke",
	    "Fischer",
	    "Fitschen",
	    "Fleischer",
	    "Fleischmann",
	    "Floder",
	    "Florczak",
	    "Flore",
	    "Flottmann",
	    "Forkel",
	    "Forst",
	    "Frahmeke",
	    "Frank",
	    "Franke",
	    "Franta",
	    "Frantz",
	    "Franz",
	    "Franzis",
	    "Franzmann",
	    "Frauen",
	    "Frauendorf",
	    "Freigang",
	    "Freimann",
	    "Freimuth",
	    "Freisen",
	    "Frenzel",
	    "Frey",
	    "Fricke",
	    "Fried",
	    "Friedek",
	    "Friedenberg",
	    "Friedmann",
	    "Friedrich",
	    "Friess",
	    "Frisch",
	    "Frohn",
	    "Frosch",
	    "Fuchs",
	    "Fuhlbrügge",
	    "Fusenig",
	    "Fust",
	    "Förster",
	    "Gaba",
	    "Gabius",
	    "Gabler",
	    "Gadschiew",
	    "Gakstädter",
	    "Galander",
	    "Gamlin",
	    "Gamper",
	    "Gangnus",
	    "Ganzmann",
	    "Garatva",
	    "Gast",
	    "Gastel",
	    "Gatzka",
	    "Gauder",
	    "Gebhardt",
	    "Geese",
	    "Gehre",
	    "Gehrig",
	    "Gehring",
	    "Gehrke",
	    "Geiger",
	    "Geisler",
	    "Geissler",
	    "Gelling",
	    "Gens",
	    "Gerbennow",
	    "Gerdel",
	    "Gerhardt",
	    "Gerschler",
	    "Gerson",
	    "Gesell",
	    "Geyer",
	    "Ghirmai",
	    "Ghosh",
	    "Giehl",
	    "Gierisch",
	    "Giesa",
	    "Giesche",
	    "Gilde",
	    "Glatting",
	    "Goebel",
	    "Goedicke",
	    "Goldbeck",
	    "Goldfuss",
	    "Goldkamp",
	    "Goldkühle",
	    "Goller",
	    "Golling",
	    "Gollnow",
	    "Golomski",
	    "Gombert",
	    "Gotthardt",
	    "Gottschalk",
	    "Gotz",
	    "Goy",
	    "Gradzki",
	    "Graf",
	    "Grams",
	    "Grasse",
	    "Gratzky",
	    "Grau",
	    "Greb",
	    "Green",
	    "Greger",
	    "Greithanner",
	    "Greschner",
	    "Griem",
	    "Griese",
	    "Grimm",
	    "Gromisch",
	    "Gross",
	    "Grosser",
	    "Grossheim",
	    "Grosskopf",
	    "Grothaus",
	    "Grothkopp",
	    "Grotke",
	    "Grube",
	    "Gruber",
	    "Grundmann",
	    "Gruning",
	    "Gruszecki",
	    "Gröss",
	    "Grötzinger",
	    "Grün",
	    "Grüner",
	    "Gummelt",
	    "Gunkel",
	    "Gunther",
	    "Gutjahr",
	    "Gutowicz",
	    "Gutschank",
	    "Göbel",
	    "Göckeritz",
	    "Göhler",
	    "Görlich",
	    "Görmer",
	    "Götz",
	    "Götzelmann",
	    "Güldemeister",
	    "Günther",
	    "Günz",
	    "Gürbig",
	    "Haack",
	    "Haaf",
	    "Habel",
	    "Hache",
	    "Hackbusch",
	    "Hackelbusch",
	    "Hadfield",
	    "Hadwich",
	    "Haferkamp",
	    "Hahn",
	    "Hajek",
	    "Hallmann",
	    "Hamann",
	    "Hanenberger",
	    "Hannecker",
	    "Hanniske",
	    "Hansen",
	    "Hardy",
	    "Hargasser",
	    "Harms",
	    "Harnapp",
	    "Harter",
	    "Harting",
	    "Hartlieb",
	    "Hartmann",
	    "Hartwig",
	    "Hartz",
	    "Haschke",
	    "Hasler",
	    "Hasse",
	    "Hassfeld",
	    "Haug",
	    "Hauke",
	    "Haupt",
	    "Haverney",
	    "Heberstreit",
	    "Hechler",
	    "Hecht",
	    "Heck",
	    "Hedermann",
	    "Hehl",
	    "Heidelmann",
	    "Heidler",
	    "Heinemann",
	    "Heinig",
	    "Heinke",
	    "Heinrich",
	    "Heinze",
	    "Heiser",
	    "Heist",
	    "Hellmann",
	    "Helm",
	    "Helmke",
	    "Helpling",
	    "Hengmith",
	    "Henkel",
	    "Hennes",
	    "Henry",
	    "Hense",
	    "Hensel",
	    "Hentel",
	    "Hentschel",
	    "Hentschke",
	    "Hepperle",
	    "Herberger",
	    "Herbrand",
	    "Hering",
	    "Hermann",
	    "Hermecke",
	    "Herms",
	    "Herold",
	    "Herrmann",
	    "Herschmann",
	    "Hertel",
	    "Herweg",
	    "Herwig",
	    "Herzenberg",
	    "Hess",
	    "Hesse",
	    "Hessek",
	    "Hessler",
	    "Hetzler",
	    "Heuck",
	    "Heydemüller",
	    "Hiebl",
	    "Hildebrand",
	    "Hildenbrand",
	    "Hilgendorf",
	    "Hillard",
	    "Hiller",
	    "Hingsen",
	    "Hingst",
	    "Hinrichs",
	    "Hirsch",
	    "Hirschberg",
	    "Hirt",
	    "Hodea",
	    "Hoffman",
	    "Hoffmann",
	    "Hofmann",
	    "Hohenberger",
	    "Hohl",
	    "Hohn",
	    "Hohnheiser",
	    "Hold",
	    "Holdt",
	    "Holinski",
	    "Holl",
	    "Holtfreter",
	    "Holz",
	    "Holzdeppe",
	    "Holzner",
	    "Hommel",
	    "Honz",
	    "Hooss",
	    "Hoppe",
	    "Horak",
	    "Horn",
	    "Horna",
	    "Hornung",
	    "Hort",
	    "Howard",
	    "Huber",
	    "Huckestein",
	    "Hudak",
	    "Huebel",
	    "Hugo",
	    "Huhn",
	    "Hujo",
	    "Huke",
	    "Huls",
	    "Humbert",
	    "Huneke",
	    "Huth",
	    "Häber",
	    "Häfner",
	    "Höcke",
	    "Höft",
	    "Höhne",
	    "Hönig",
	    "Hördt",
	    "Hübenbecker",
	    "Hübl",
	    "Hübner",
	    "Hügel",
	    "Hüttcher",
	    "Hütter",
	    "Ibe",
	    "Ihly",
	    "Illing",
	    "Isak",
	    "Isekenmeier",
	    "Itt",
	    "Jacob",
	    "Jacobs",
	    "Jagusch",
	    "Jahn",
	    "Jahnke",
	    "Jakobs",
	    "Jakubczyk",
	    "Jambor",
	    "Jamrozy",
	    "Jander",
	    "Janich",
	    "Janke",
	    "Jansen",
	    "Jarets",
	    "Jaros",
	    "Jasinski",
	    "Jasper",
	    "Jegorov",
	    "Jellinghaus",
	    "Jeorga",
	    "Jerschabek",
	    "Jess",
	    "John",
	    "Jonas",
	    "Jossa",
	    "Jucken",
	    "Jung",
	    "Jungbluth",
	    "Jungton",
	    "Just",
	    "Jürgens",
	    "Kaczmarek",
	    "Kaesmacher",
	    "Kahl",
	    "Kahlert",
	    "Kahles",
	    "Kahlmeyer",
	    "Kaiser",
	    "Kalinowski",
	    "Kallabis",
	    "Kallensee",
	    "Kampf",
	    "Kampschulte",
	    "Kappe",
	    "Kappler",
	    "Karhoff",
	    "Karrass",
	    "Karst",
	    "Karsten",
	    "Karus",
	    "Kass",
	    "Kasten",
	    "Kastner",
	    "Katzinski",
	    "Kaufmann",
	    "Kaul",
	    "Kausemann",
	    "Kawohl",
	    "Kazmarek",
	    "Kedzierski",
	    "Keil",
	    "Keiner",
	    "Keller",
	    "Kelm",
	    "Kempe",
	    "Kemper",
	    "Kempter",
	    "Kerl",
	    "Kern",
	    "Kesselring",
	    "Kesselschläger",
	    "Kette",
	    "Kettenis",
	    "Keutel",
	    "Kick",
	    "Kiessling",
	    "Kinadeter",
	    "Kinzel",
	    "Kinzy",
	    "Kirch",
	    "Kirst",
	    "Kisabaka",
	    "Klaas",
	    "Klabuhn",
	    "Klapper",
	    "Klauder",
	    "Klaus",
	    "Kleeberg",
	    "Kleiber",
	    "Klein",
	    "Kleinert",
	    "Kleininger",
	    "Kleinmann",
	    "Kleinsteuber",
	    "Kleiss",
	    "Klemme",
	    "Klimczak",
	    "Klinger",
	    "Klink",
	    "Klopsch",
	    "Klose",
	    "Kloss",
	    "Kluge",
	    "Kluwe",
	    "Knabe",
	    "Kneifel",
	    "Knetsch",
	    "Knies",
	    "Knippel",
	    "Knobel",
	    "Knoblich",
	    "Knoll",
	    "Knorr",
	    "Knorscheidt",
	    "Knut",
	    "Kobs",
	    "Koch",
	    "Kochan",
	    "Kock",
	    "Koczulla",
	    "Koderisch",
	    "Koehl",
	    "Koehler",
	    "Koenig",
	    "Koester",
	    "Kofferschlager",
	    "Koha",
	    "Kohle",
	    "Kohlmann",
	    "Kohnle",
	    "Kohrt",
	    "Koj",
	    "Kolb",
	    "Koleiski",
	    "Kolokas",
	    "Komoll",
	    "Konieczny",
	    "Konig",
	    "Konow",
	    "Konya",
	    "Koob",
	    "Kopf",
	    "Kosenkow",
	    "Koster",
	    "Koszewski",
	    "Koubaa",
	    "Kovacs",
	    "Kowalick",
	    "Kowalinski",
	    "Kozakiewicz",
	    "Krabbe",
	    "Kraft",
	    "Kral",
	    "Kramer",
	    "Krauel",
	    "Kraus",
	    "Krause",
	    "Krauspe",
	    "Kreb",
	    "Krebs",
	    "Kreissig",
	    "Kresse",
	    "Kreutz",
	    "Krieger",
	    "Krippner",
	    "Krodinger",
	    "Krohn",
	    "Krol",
	    "Kron",
	    "Krueger",
	    "Krug",
	    "Kruger",
	    "Krull",
	    "Kruschinski",
	    "Krämer",
	    "Kröckert",
	    "Kröger",
	    "Krüger",
	    "Kubera",
	    "Kufahl",
	    "Kuhlee",
	    "Kuhnen",
	    "Kulimann",
	    "Kulma",
	    "Kumbernuss",
	    "Kummle",
	    "Kunz",
	    "Kupfer",
	    "Kupprion",
	    "Kuprion",
	    "Kurnicki",
	    "Kurrat",
	    "Kurschilgen",
	    "Kuschewitz",
	    "Kuschmann",
	    "Kuske",
	    "Kustermann",
	    "Kutscherauer",
	    "Kutzner",
	    "Kwadwo",
	    "Kähler",
	    "Käther",
	    "Köhler",
	    "Köhrbrück",
	    "Köhre",
	    "Kölotzei",
	    "König",
	    "Köpernick",
	    "Köseoglu",
	    "Kúhn",
	    "Kúhnert",
	    "Kühn",
	    "Kühnel",
	    "Kühnemund",
	    "Kühnert",
	    "Kühnke",
	    "Küsters",
	    "Küter",
	    "Laack",
	    "Lack",
	    "Ladewig",
	    "Lakomy",
	    "Lammert",
	    "Lamos",
	    "Landmann",
	    "Lang",
	    "Lange",
	    "Langfeld",
	    "Langhirt",
	    "Lanig",
	    "Lauckner",
	    "Lauinger",
	    "Laurén",
	    "Lausecker",
	    "Laux",
	    "Laws",
	    "Lax",
	    "Leberer",
	    "Lehmann",
	    "Lehner",
	    "Leibold",
	    "Leide",
	    "Leimbach",
	    "Leipold",
	    "Leist",
	    "Leiter",
	    "Leiteritz",
	    "Leitheim",
	    "Leiwesmeier",
	    "Lenfers",
	    "Lenk",
	    "Lenz",
	    "Lenzen",
	    "Leo",
	    "Lepthin",
	    "Lesch",
	    "Leschnik",
	    "Letzelter",
	    "Lewin",
	    "Lewke",
	    "Leyckes",
	    "Lg",
	    "Lichtenfeld",
	    "Lichtenhagen",
	    "Lichtl",
	    "Liebach",
	    "Liebe",
	    "Liebich",
	    "Liebold",
	    "Lieder",
	    "Lienshöft",
	    "Linden",
	    "Lindenberg",
	    "Lindenmayer",
	    "Lindner",
	    "Linke",
	    "Linnenbaum",
	    "Lippe",
	    "Lipske",
	    "Lipus",
	    "Lischka",
	    "Lobinger",
	    "Logsch",
	    "Lohmann",
	    "Lohre",
	    "Lohse",
	    "Lokar",
	    "Loogen",
	    "Lorenz",
	    "Losch",
	    "Loska",
	    "Lott",
	    "Loy",
	    "Lubina",
	    "Ludolf",
	    "Lufft",
	    "Lukoschek",
	    "Lutje",
	    "Lutz",
	    "Löser",
	    "Löwa",
	    "Lübke",
	    "Maak",
	    "Maczey",
	    "Madetzky",
	    "Madubuko",
	    "Mai",
	    "Maier",
	    "Maisch",
	    "Malek",
	    "Malkus",
	    "Mallmann",
	    "Malucha",
	    "Manns",
	    "Manz",
	    "Marahrens",
	    "Marchewski",
	    "Margis",
	    "Markowski",
	    "Marl",
	    "Marner",
	    "Marquart",
	    "Marschek",
	    "Martel",
	    "Marten",
	    "Martin",
	    "Marx",
	    "Marxen",
	    "Mathes",
	    "Mathies",
	    "Mathiszik",
	    "Matschke",
	    "Mattern",
	    "Matthes",
	    "Matula",
	    "Mau",
	    "Maurer",
	    "Mauroff",
	    "May",
	    "Maybach",
	    "Mayer",
	    "Mebold",
	    "Mehl",
	    "Mehlhorn",
	    "Mehlorn",
	    "Meier",
	    "Meisch",
	    "Meissner",
	    "Meloni",
	    "Melzer",
	    "Menga",
	    "Menne",
	    "Mensah",
	    "Mensing",
	    "Merkel",
	    "Merseburg",
	    "Mertens",
	    "Mesloh",
	    "Metzger",
	    "Metzner",
	    "Mewes",
	    "Meyer",
	    "Michallek",
	    "Michel",
	    "Mielke",
	    "Mikitenko",
	    "Milde",
	    "Minah",
	    "Mintzlaff",
	    "Mockenhaupt",
	    "Moede",
	    "Moedl",
	    "Moeller",
	    "Moguenara",
	    "Mohr",
	    "Mohrhard",
	    "Molitor",
	    "Moll",
	    "Moller",
	    "Molzan",
	    "Montag",
	    "Moormann",
	    "Mordhorst",
	    "Morgenstern",
	    "Morhelfer",
	    "Moritz",
	    "Moser",
	    "Motchebon",
	    "Motzenbbäcker",
	    "Mrugalla",
	    "Muckenthaler",
	    "Mues",
	    "Muller",
	    "Mulrain",
	    "Mächtig",
	    "Mäder",
	    "Möcks",
	    "Mögenburg",
	    "Möhsner",
	    "Möldner",
	    "Möllenbeck",
	    "Möller",
	    "Möllinger",
	    "Mörsch",
	    "Mühleis",
	    "Müller",
	    "Münch",
	    "Nabein",
	    "Nabow",
	    "Nagel",
	    "Nannen",
	    "Nastvogel",
	    "Nau",
	    "Naubert",
	    "Naumann",
	    "Ne",
	    "Neimke",
	    "Nerius",
	    "Neubauer",
	    "Neubert",
	    "Neuendorf",
	    "Neumair",
	    "Neumann",
	    "Neupert",
	    "Neurohr",
	    "Neuschwander",
	    "Newton",
	    "Ney",
	    "Nicolay",
	    "Niedermeier",
	    "Nieklauson",
	    "Niklaus",
	    "Nitzsche",
	    "Noack",
	    "Nodler",
	    "Nolte",
	    "Normann",
	    "Norris",
	    "Northoff",
	    "Nowak",
	    "Nussbeck",
	    "Nwachukwu",
	    "Nytra",
	    "Nöh",
	    "Oberem",
	    "Obergföll",
	    "Obermaier",
	    "Ochs",
	    "Oeser",
	    "Olbrich",
	    "Onnen",
	    "Ophey",
	    "Oppong",
	    "Orth",
	    "Orthmann",
	    "Oschkenat",
	    "Osei",
	    "Osenberg",
	    "Ostendarp",
	    "Ostwald",
	    "Otte",
	    "Otto",
	    "Paesler",
	    "Pajonk",
	    "Pallentin",
	    "Panzig",
	    "Paschke",
	    "Patzwahl",
	    "Paukner",
	    "Peselman",
	    "Peter",
	    "Peters",
	    "Petzold",
	    "Pfeiffer",
	    "Pfennig",
	    "Pfersich",
	    "Pfingsten",
	    "Pflieger",
	    "Pflügner",
	    "Philipp",
	    "Pichlmaier",
	    "Piesker",
	    "Pietsch",
	    "Pingpank",
	    "Pinnock",
	    "Pippig",
	    "Pitschugin",
	    "Plank",
	    "Plass",
	    "Platzer",
	    "Plauk",
	    "Plautz",
	    "Pletsch",
	    "Plotzitzka",
	    "Poehn",
	    "Poeschl",
	    "Pogorzelski",
	    "Pohl",
	    "Pohland",
	    "Pohle",
	    "Polifka",
	    "Polizzi",
	    "Pollmächer",
	    "Pomp",
	    "Ponitzsch",
	    "Porsche",
	    "Porth",
	    "Poschmann",
	    "Poser",
	    "Pottel",
	    "Prah",
	    "Prange",
	    "Prediger",
	    "Pressler",
	    "Preuk",
	    "Preuss",
	    "Prey",
	    "Priemer",
	    "Proske",
	    "Pusch",
	    "Pöche",
	    "Pöge",
	    "Raabe",
	    "Rabenstein",
	    "Rach",
	    "Radtke",
	    "Rahn",
	    "Ranftl",
	    "Rangen",
	    "Ranz",
	    "Rapp",
	    "Rath",
	    "Rau",
	    "Raubuch",
	    "Raukuc",
	    "Rautenkranz",
	    "Rehwagen",
	    "Reiber",
	    "Reichardt",
	    "Reichel",
	    "Reichling",
	    "Reif",
	    "Reifenrath",
	    "Reimann",
	    "Reinberg",
	    "Reinelt",
	    "Reinhardt",
	    "Reinke",
	    "Reitze",
	    "Renk",
	    "Rentz",
	    "Renz",
	    "Reppin",
	    "Restle",
	    "Restorff",
	    "Retzke",
	    "Reuber",
	    "Reumann",
	    "Reus",
	    "Reuss",
	    "Reusse",
	    "Rheder",
	    "Rhoden",
	    "Richards",
	    "Richter",
	    "Riedel",
	    "Riediger",
	    "Rieger",
	    "Riekmann",
	    "Riepl",
	    "Riermeier",
	    "Riester",
	    "Riethmüller",
	    "Rietmüller",
	    "Rietscher",
	    "Ringel",
	    "Ringer",
	    "Rink",
	    "Ripken",
	    "Ritosek",
	    "Ritschel",
	    "Ritter",
	    "Rittweg",
	    "Ritz",
	    "Roba",
	    "Rockmeier",
	    "Rodehau",
	    "Rodowski",
	    "Roecker",
	    "Roggatz",
	    "Rohländer",
	    "Rohrer",
	    "Rokossa",
	    "Roleder",
	    "Roloff",
	    "Roos",
	    "Rosbach",
	    "Roschinsky",
	    "Rose",
	    "Rosenauer",
	    "Rosenbauer",
	    "Rosenthal",
	    "Rosksch",
	    "Rossberg",
	    "Rossler",
	    "Roth",
	    "Rother",
	    "Ruch",
	    "Ruckdeschel",
	    "Rumpf",
	    "Rupprecht",
	    "Ruth",
	    "Ryjikh",
	    "Ryzih",
	    "Rädler",
	    "Räntsch",
	    "Rödiger",
	    "Röse",
	    "Röttger",
	    "Rücker",
	    "Rüdiger",
	    "Rüter",
	    "Sachse",
	    "Sack",
	    "Saflanis",
	    "Sagafe",
	    "Sagonas",
	    "Sahner",
	    "Saile",
	    "Sailer",
	    "Salow",
	    "Salzer",
	    "Salzmann",
	    "Sammert",
	    "Sander",
	    "Sarvari",
	    "Sattelmaier",
	    "Sauer",
	    "Sauerland",
	    "Saumweber",
	    "Savoia",
	    "Scc",
	    "Schacht",
	    "Schaefer",
	    "Schaffarzik",
	    "Schahbasian",
	    "Scharf",
	    "Schedler",
	    "Scheer",
	    "Schelk",
	    "Schellenbeck",
	    "Schembera",
	    "Schenk",
	    "Scherbarth",
	    "Scherer",
	    "Schersing",
	    "Scherz",
	    "Scheurer",
	    "Scheuring",
	    "Scheytt",
	    "Schielke",
	    "Schieskow",
	    "Schildhauer",
	    "Schilling",
	    "Schima",
	    "Schimmer",
	    "Schindzielorz",
	    "Schirmer",
	    "Schirrmeister",
	    "Schlachter",
	    "Schlangen",
	    "Schlawitz",
	    "Schlechtweg",
	    "Schley",
	    "Schlicht",
	    "Schlitzer",
	    "Schmalzle",
	    "Schmid",
	    "Schmidt",
	    "Schmidtchen",
	    "Schmitt",
	    "Schmitz",
	    "Schmuhl",
	    "Schneider",
	    "Schnelting",
	    "Schnieder",
	    "Schniedermeier",
	    "Schnürer",
	    "Schoberg",
	    "Scholz",
	    "Schonberg",
	    "Schondelmaier",
	    "Schorr",
	    "Schott",
	    "Schottmann",
	    "Schouren",
	    "Schrader",
	    "Schramm",
	    "Schreck",
	    "Schreiber",
	    "Schreiner",
	    "Schreiter",
	    "Schroder",
	    "Schröder",
	    "Schuermann",
	    "Schuff",
	    "Schuhaj",
	    "Schuldt",
	    "Schult",
	    "Schulte",
	    "Schultz",
	    "Schultze",
	    "Schulz",
	    "Schulze",
	    "Schumacher",
	    "Schumann",
	    "Schupp",
	    "Schuri",
	    "Schuster",
	    "Schwab",
	    "Schwalm",
	    "Schwanbeck",
	    "Schwandke",
	    "Schwanitz",
	    "Schwarthoff",
	    "Schwartz",
	    "Schwarz",
	    "Schwarzer",
	    "Schwarzkopf",
	    "Schwarzmeier",
	    "Schwatlo",
	    "Schweisfurth",
	    "Schwennen",
	    "Schwerdtner",
	    "Schwidde",
	    "Schwirkschlies",
	    "Schwuchow",
	    "Schäfer",
	    "Schäffel",
	    "Schäffer",
	    "Schäning",
	    "Schöckel",
	    "Schönball",
	    "Schönbeck",
	    "Schönberg",
	    "Schönebeck",
	    "Schönenberger",
	    "Schönfeld",
	    "Schönherr",
	    "Schönlebe",
	    "Schötz",
	    "Schüler",
	    "Schüppel",
	    "Schütz",
	    "Schütze",
	    "Seeger",
	    "Seelig",
	    "Sehls",
	    "Seibold",
	    "Seidel",
	    "Seiders",
	    "Seigel",
	    "Seiler",
	    "Seitz",
	    "Semisch",
	    "Senkel",
	    "Sewald",
	    "Siebel",
	    "Siebert",
	    "Siegling",
	    "Sielemann",
	    "Siemon",
	    "Siener",
	    "Sievers",
	    "Siewert",
	    "Sihler",
	    "Sillah",
	    "Simon",
	    "Sinnhuber",
	    "Sischka",
	    "Skibicki",
	    "Sladek",
	    "Slotta",
	    "Smieja",
	    "Soboll",
	    "Sokolowski",
	    "Soller",
	    "Sollner",
	    "Sommer",
	    "Somssich",
	    "Sonn",
	    "Sonnabend",
	    "Spahn",
	    "Spank",
	    "Spelmeyer",
	    "Spiegelburg",
	    "Spielvogel",
	    "Spinner",
	    "Spitzmüller",
	    "Splinter",
	    "Sporrer",
	    "Sprenger",
	    "Spöttel",
	    "Stahl",
	    "Stang",
	    "Stanger",
	    "Stauss",
	    "Steding",
	    "Steffen",
	    "Steffny",
	    "Steidl",
	    "Steigauf",
	    "Stein",
	    "Steinecke",
	    "Steinert",
	    "Steinkamp",
	    "Steinmetz",
	    "Stelkens",
	    "Stengel",
	    "Stengl",
	    "Stenzel",
	    "Stepanov",
	    "Stephan",
	    "Stern",
	    "Steuk",
	    "Stief",
	    "Stifel",
	    "Stoll",
	    "Stolle",
	    "Stolz",
	    "Storl",
	    "Storp",
	    "Stoutjesdijk",
	    "Stratmann",
	    "Straub",
	    "Strausa",
	    "Streck",
	    "Streese",
	    "Strege",
	    "Streit",
	    "Streller",
	    "Strieder",
	    "Striezel",
	    "Strogies",
	    "Strohschank",
	    "Strunz",
	    "Strutz",
	    "Stube",
	    "Stöckert",
	    "Stöppler",
	    "Stöwer",
	    "Stürmer",
	    "Suffa",
	    "Sujew",
	    "Sussmann",
	    "Suthe",
	    "Sutschet",
	    "Swillims",
	    "Szendrei",
	    "Sören",
	    "Sürth",
	    "Tafelmeier",
	    "Tang",
	    "Tasche",
	    "Taufratshofer",
	    "Tegethof",
	    "Teichmann",
	    "Tepper",
	    "Terheiden",
	    "Terlecki",
	    "Teufel",
	    "Theele",
	    "Thieke",
	    "Thimm",
	    "Thiomas",
	    "Thomas",
	    "Thriene",
	    "Thränhardt",
	    "Thust",
	    "Thyssen",
	    "Thöne",
	    "Tidow",
	    "Tiedtke",
	    "Tietze",
	    "Tilgner",
	    "Tillack",
	    "Timmermann",
	    "Tischler",
	    "Tischmann",
	    "Tittman",
	    "Tivontschik",
	    "Tonat",
	    "Tonn",
	    "Trampeli",
	    "Trauth",
	    "Trautmann",
	    "Travan",
	    "Treff",
	    "Tremmel",
	    "Tress",
	    "Tsamonikian",
	    "Tschiers",
	    "Tschirch",
	    "Tuch",
	    "Tucholke",
	    "Tudow",
	    "Tuschmo",
	    "Tächl",
	    "Többen",
	    "Töpfer",
	    "Uhlemann",
	    "Uhlig",
	    "Uhrig",
	    "Uibel",
	    "Uliczka",
	    "Ullmann",
	    "Ullrich",
	    "Umbach",
	    "Umlauft",
	    "Umminger",
	    "Unger",
	    "Unterpaintner",
	    "Urban",
	    "Urbaniak",
	    "Urbansky",
	    "Urhig",
	    "Vahlensieck",
	    "Van",
	    "Vangermain",
	    "Vater",
	    "Venghaus",
	    "Verniest",
	    "Verzi",
	    "Vey",
	    "Viellehner",
	    "Vieweg",
	    "Voelkel",
	    "Vogel",
	    "Vogelgsang",
	    "Vogt",
	    "Voigt",
	    "Vokuhl",
	    "Volk",
	    "Volker",
	    "Volkmann",
	    "Von",
	    "Vona",
	    "Vontein",
	    "Wachenbrunner",
	    "Wachtel",
	    "Wagner",
	    "Waibel",
	    "Wakan",
	    "Waldmann",
	    "Wallner",
	    "Wallstab",
	    "Walter",
	    "Walther",
	    "Walton",
	    "Walz",
	    "Wanner",
	    "Wartenberg",
	    "Waschbüsch",
	    "Wassilew",
	    "Wassiluk",
	    "Weber",
	    "Wehrsen",
	    "Weidlich",
	    "Weidner",
	    "Weigel",
	    "Weight",
	    "Weiler",
	    "Weimer",
	    "Weis",
	    "Weiss",
	    "Weller",
	    "Welsch",
	    "Welz",
	    "Welzel",
	    "Weniger",
	    "Wenk",
	    "Werle",
	    "Werner",
	    "Werrmann",
	    "Wessel",
	    "Wessinghage",
	    "Weyel",
	    "Wezel",
	    "Wichmann",
	    "Wickert",
	    "Wiebe",
	    "Wiechmann",
	    "Wiegelmann",
	    "Wierig",
	    "Wiese",
	    "Wieser",
	    "Wilhelm",
	    "Wilky",
	    "Will",
	    "Willwacher",
	    "Wilts",
	    "Wimmer",
	    "Winkelmann",
	    "Winkler",
	    "Winter",
	    "Wischek",
	    "Wischer",
	    "Wissing",
	    "Wittich",
	    "Wittl",
	    "Wolf",
	    "Wolfarth",
	    "Wolff",
	    "Wollenberg",
	    "Wollmann",
	    "Woytkowska",
	    "Wujak",
	    "Wurm",
	    "Wyludda",
	    "Wölpert",
	    "Wöschler",
	    "Wühn",
	    "Wünsche",
	    "Zach",
	    "Zaczkiewicz",
	    "Zahn",
	    "Zaituc",
	    "Zandt",
	    "Zanner",
	    "Zapletal",
	    "Zauber",
	    "Zeidler",
	    "Zekl",
	    "Zender",
	    "Zeuch",
	    "Zeyen",
	    "Zeyhle",
	    "Ziegler",
	    "Zimanyi",
	    "Zimmer",
	    "Zimmermann",
	    "Zinser",
	    "Zintl",
	    "Zipp",
	    "Zipse",
	    "Zschunke",
	    "Zuber",
	    "Zwiener",
	    "Zümsande",
	    "Östringer",
	    "Überacker"
	  ],
	  "prefix": [
	    "Dr.",
	    "Prof. Dr."
	  ],
	  "nobility_title_prefix": [
	    "zu",
	    "von",
	    "vom",
	    "von der"
	  ],
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{nobility_title_prefix} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	de_AT.phone_number = {
	  "formats": [
	    "01 #######",
	    "01#######",
	    "+43-1-#######",
	    "+431#######",
	    "0#### ####",
	    "0#########",
	    "+43-####-####",
	    "+43 ########"
	  ]
	};
	de_AT.cell_phone = {
	  "formats": [
	    "+43-6##-#######",
	    "06##-########",
	    "+436#########",
	    "06##########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var de_CH = {};
	module["exports"] = de_CH;
	de_CH.title = "German (Switzerland)";
	de_CH.address = {
	  "country_code": [
	    "CH",
	    "CH",
	    "CH",
	    "DE",
	    "AT",
	    "US",
	    "LI",
	    "US",
	    "HK",
	    "VN"
	  ],
	  "postcode": [
	    "1###",
	    "2###",
	    "3###",
	    "4###",
	    "5###",
	    "6###",
	    "7###",
	    "8###",
	    "9###"
	  ],
	  "default_country": [
	    "Schweiz"
	  ]
	};
	de_CH.company = {
	  "suffix": [
	    "AG",
	    "GmbH",
	    "und Söhne",
	    "und Partner",
	    "& Co.",
	    "Gruppe",
	    "LLC",
	    "Inc."
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
	  ]
	};
	de_CH.internet = {
	  "domain_suffix": [
	    "com",
	    "net",
	    "biz",
	    "ch",
	    "de",
	    "li",
	    "at",
	    "ch",
	    "ch"
	  ]
	};
	de_CH.phone_number = {
	  "formats": [
	    "0800 ### ###",
	    "0800 ## ## ##",
	    "0## ### ## ##",
	    "0## ### ## ##",
	    "+41 ## ### ## ##",
	    "0900 ### ###",
	    "076 ### ## ##",
	    "+4178 ### ## ##",
	    "0041 79 ### ## ##"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en = {};
	module["exports"] = en;
	en.title = "English";
	en.separator = " & ";
	en.address = {
	  "city_prefix": [
	    "North",
	    "East",
	    "West",
	    "South",
	    "New",
	    "Lake",
	    "Port"
	  ],
	  "city_suffix": [
	    "town",
	    "ton",
	    "land",
	    "ville",
	    "berg",
	    "burgh",
	    "borough",
	    "bury",
	    "view",
	    "port",
	    "mouth",
	    "stad",
	    "furt",
	    "chester",
	    "mouth",
	    "fort",
	    "haven",
	    "side",
	    "shire"
	  ],
	  // TODO: get common County names in America and populate here
	  "county": [
	    "Avon",
	    "Bedfordshire",
	    "Berkshire",
	    "Borders",
	    "Buckinghamshire",
	    "Cambridgeshire"
	  ],
	  "country": [
	    "Afghanistan",
	    "Albania",
	    "Algeria",
	    "American Samoa",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antarctica (the territory South of 60 deg S)",
	    "Antigua and Barbuda",
	    "Argentina",
	    "Armenia",
	    "Aruba",
	    "Australia",
	    "Austria",
	    "Azerbaijan",
	    "Bahamas",
	    "Bahrain",
	    "Bangladesh",
	    "Barbados",
	    "Belarus",
	    "Belgium",
	    "Belize",
	    "Benin",
	    "Bermuda",
	    "Bhutan",
	    "Bolivia",
	    "Bosnia and Herzegovina",
	    "Botswana",
	    "Bouvet Island (Bouvetoya)",
	    "Brazil",
	    "British Indian Ocean Territory (Chagos Archipelago)",
	    "Brunei Darussalam",
	    "Bulgaria",
	    "Burkina Faso",
	    "Burundi",
	    "Cambodia",
	    "Cameroon",
	    "Canada",
	    "Cape Verde",
	    "Cayman Islands",
	    "Central African Republic",
	    "Chad",
	    "Chile",
	    "China",
	    "Christmas Island",
	    "Cocos (Keeling) Islands",
	    "Colombia",
	    "Comoros",
	    "Congo",
	    "Congo",
	    "Cook Islands",
	    "Costa Rica",
	    "Cote d'Ivoire",
	    "Croatia",
	    "Cuba",
	    "Cyprus",
	    "Czech Republic",
	    "Denmark",
	    "Djibouti",
	    "Dominica",
	    "Dominican Republic",
	    "Ecuador",
	    "Egypt",
	    "El Salvador",
	    "Equatorial Guinea",
	    "Eritrea",
	    "Estonia",
	    "Ethiopia",
	    "Faroe Islands",
	    "Falkland Islands (Malvinas)",
	    "Fiji",
	    "Finland",
	    "France",
	    "French Guiana",
	    "French Polynesia",
	    "French Southern Territories",
	    "Gabon",
	    "Gambia",
	    "Georgia",
	    "Germany",
	    "Ghana",
	    "Gibraltar",
	    "Greece",
	    "Greenland",
	    "Grenada",
	    "Guadeloupe",
	    "Guam",
	    "Guatemala",
	    "Guernsey",
	    "Guinea",
	    "Guinea-Bissau",
	    "Guyana",
	    "Haiti",
	    "Heard Island and McDonald Islands",
	    "Holy See (Vatican City State)",
	    "Honduras",
	    "Hong Kong",
	    "Hungary",
	    "Iceland",
	    "India",
	    "Indonesia",
	    "Iran",
	    "Iraq",
	    "Ireland",
	    "Isle of Man",
	    "Israel",
	    "Italy",
	    "Jamaica",
	    "Japan",
	    "Jersey",
	    "Jordan",
	    "Kazakhstan",
	    "Kenya",
	    "Kiribati",
	    "Democratic People's Republic of Korea",
	    "Republic of Korea",
	    "Kuwait",
	    "Kyrgyz Republic",
	    "Lao People's Democratic Republic",
	    "Latvia",
	    "Lebanon",
	    "Lesotho",
	    "Liberia",
	    "Libyan Arab Jamahiriya",
	    "Liechtenstein",
	    "Lithuania",
	    "Luxembourg",
	    "Macao",
	    "Macedonia",
	    "Madagascar",
	    "Malawi",
	    "Malaysia",
	    "Maldives",
	    "Mali",
	    "Malta",
	    "Marshall Islands",
	    "Martinique",
	    "Mauritania",
	    "Mauritius",
	    "Mayotte",
	    "Mexico",
	    "Micronesia",
	    "Moldova",
	    "Monaco",
	    "Mongolia",
	    "Montenegro",
	    "Montserrat",
	    "Morocco",
	    "Mozambique",
	    "Myanmar",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Netherlands Antilles",
	    "Netherlands",
	    "New Caledonia",
	    "New Zealand",
	    "Nicaragua",
	    "Niger",
	    "Nigeria",
	    "Niue",
	    "Norfolk Island",
	    "Northern Mariana Islands",
	    "Norway",
	    "Oman",
	    "Pakistan",
	    "Palau",
	    "Palestinian Territory",
	    "Panama",
	    "Papua New Guinea",
	    "Paraguay",
	    "Peru",
	    "Philippines",
	    "Pitcairn Islands",
	    "Poland",
	    "Portugal",
	    "Puerto Rico",
	    "Qatar",
	    "Reunion",
	    "Romania",
	    "Russian Federation",
	    "Rwanda",
	    "Saint Barthelemy",
	    "Saint Helena",
	    "Saint Kitts and Nevis",
	    "Saint Lucia",
	    "Saint Martin",
	    "Saint Pierre and Miquelon",
	    "Saint Vincent and the Grenadines",
	    "Samoa",
	    "San Marino",
	    "Sao Tome and Principe",
	    "Saudi Arabia",
	    "Senegal",
	    "Serbia",
	    "Seychelles",
	    "Sierra Leone",
	    "Singapore",
	    "Slovakia (Slovak Republic)",
	    "Slovenia",
	    "Solomon Islands",
	    "Somalia",
	    "South Africa",
	    "South Georgia and the South Sandwich Islands",
	    "Spain",
	    "Sri Lanka",
	    "Sudan",
	    "Suriname",
	    "Svalbard & Jan Mayen Islands",
	    "Swaziland",
	    "Sweden",
	    "Switzerland",
	    "Syrian Arab Republic",
	    "Taiwan",
	    "Tajikistan",
	    "Tanzania",
	    "Thailand",
	    "Timor-Leste",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidad and Tobago",
	    "Tunisia",
	    "Turkey",
	    "Turkmenistan",
	    "Turks and Caicos Islands",
	    "Tuvalu",
	    "Uganda",
	    "Ukraine",
	    "United Arab Emirates",
	    "United Kingdom",
	    "United States of America",
	    "United States Minor Outlying Islands",
	    "Uruguay",
	    "Uzbekistan",
	    "Vanuatu",
	    "Venezuela",
	    "Vietnam",
	    "Virgin Islands, British",
	    "Virgin Islands, U.S.",
	    "Wallis and Futuna",
	    "Western Sahara",
	    "Yemen",
	    "Zambia",
	    "Zimbabwe"
	  ],
	  "country_code": [
	    "AD",
	    "AE",
	    "AF",
	    "AG",
	    "AI",
	    "AL",
	    "AM",
	    "AO",
	    "AQ",
	    "AR",
	    "AS",
	    "AT",
	    "AU",
	    "AW",
	    "AX",
	    "AZ",
	    "BA",
	    "BB",
	    "BD",
	    "BE",
	    "BF",
	    "BG",
	    "BH",
	    "BI",
	    "BJ",
	    "BL",
	    "BM",
	    "BN",
	    "BO",
	    "BQ",
	    "BQ",
	    "BR",
	    "BS",
	    "BT",
	    "BV",
	    "BW",
	    "BY",
	    "BZ",
	    "CA",
	    "CC",
	    "CD",
	    "CF",
	    "CG",
	    "CH",
	    "CI",
	    "CK",
	    "CL",
	    "CM",
	    "CN",
	    "CO",
	    "CR",
	    "CU",
	    "CV",
	    "CW",
	    "CX",
	    "CY",
	    "CZ",
	    "DE",
	    "DJ",
	    "DK",
	    "DM",
	    "DO",
	    "DZ",
	    "EC",
	    "EE",
	    "EG",
	    "EH",
	    "ER",
	    "ES",
	    "ET",
	    "FI",
	    "FJ",
	    "FK",
	    "FM",
	    "FO",
	    "FR",
	    "GA",
	    "GB",
	    "GD",
	    "GE",
	    "GF",
	    "GG",
	    "GH",
	    "GI",
	    "GL",
	    "GM",
	    "GN",
	    "GP",
	    "GQ",
	    "GR",
	    "GS",
	    "GT",
	    "GU",
	    "GW",
	    "GY",
	    "HK",
	    "HM",
	    "HN",
	    "HR",
	    "HT",
	    "HU",
	    "ID",
	    "IE",
	    "IL",
	    "IM",
	    "IN",
	    "IO",
	    "IQ",
	    "IR",
	    "IS",
	    "IT",
	    "JE",
	    "JM",
	    "JO",
	    "JP",
	    "KE",
	    "KG",
	    "KH",
	    "KI",
	    "KM",
	    "KN",
	    "KP",
	    "KR",
	    "KW",
	    "KY",
	    "KZ",
	    "LA",
	    "LB",
	    "LC",
	    "LI",
	    "LK",
	    "LR",
	    "LS",
	    "LT",
	    "LU",
	    "LV",
	    "LY",
	    "MA",
	    "MC",
	    "MD",
	    "ME",
	    "MF",
	    "MG",
	    "MH",
	    "MK",
	    "ML",
	    "MM",
	    "MN",
	    "MO",
	    "MP",
	    "MQ",
	    "MR",
	    "MS",
	    "MT",
	    "MU",
	    "MV",
	    "MW",
	    "MX",
	    "MY",
	    "MZ",
	    "NA",
	    "NC",
	    "NE",
	    "NF",
	    "NG",
	    "NI",
	    "NL",
	    "NO",
	    "NP",
	    "NR",
	    "NU",
	    "NZ",
	    "OM",
	    "PA",
	    "PE",
	    "PF",
	    "PG",
	    "PH",
	    "PK",
	    "PL",
	    "PM",
	    "PN",
	    "PR",
	    "PS",
	    "PT",
	    "PW",
	    "PY",
	    "QA",
	    "RE",
	    "RO",
	    "RS",
	    "RU",
	    "RW",
	    "SA",
	    "SB",
	    "SC",
	    "SD",
	    "SE",
	    "SG",
	    "SH",
	    "SI",
	    "SJ",
	    "SK",
	    "SL",
	    "SM",
	    "SN",
	    "SO",
	    "SR",
	    "SS",
	    "ST",
	    "SV",
	    "SX",
	    "SY",
	    "SZ",
	    "TC",
	    "TD",
	    "TF",
	    "TG",
	    "TH",
	    "TJ",
	    "TK",
	    "TL",
	    "TM",
	    "TN",
	    "TO",
	    "TR",
	    "TT",
	    "TV",
	    "TW",
	    "TZ",
	    "UA",
	    "UG",
	    "UM",
	    "US",
	    "UY",
	    "UZ",
	    "VA",
	    "VC",
	    "VE",
	    "VG",
	    "VI",
	    "VN",
	    "VU",
	    "WF",
	    "WS",
	    "YE",
	    "YT",
	    "ZA",
	    "ZM",
	    "ZW"
	  ],
	  "building_number": [
	    "#####",
	    "####",
	    "###"
	  ],
	  "street_suffix": [
	    "Alley",
	    "Avenue",
	    "Branch",
	    "Bridge",
	    "Brook",
	    "Brooks",
	    "Burg",
	    "Burgs",
	    "Bypass",
	    "Camp",
	    "Canyon",
	    "Cape",
	    "Causeway",
	    "Center",
	    "Centers",
	    "Circle",
	    "Circles",
	    "Cliff",
	    "Cliffs",
	    "Club",
	    "Common",
	    "Corner",
	    "Corners",
	    "Course",
	    "Court",
	    "Courts",
	    "Cove",
	    "Coves",
	    "Creek",
	    "Crescent",
	    "Crest",
	    "Crossing",
	    "Crossroad",
	    "Curve",
	    "Dale",
	    "Dam",
	    "Divide",
	    "Drive",
	    "Drive",
	    "Drives",
	    "Estate",
	    "Estates",
	    "Expressway",
	    "Extension",
	    "Extensions",
	    "Fall",
	    "Falls",
	    "Ferry",
	    "Field",
	    "Fields",
	    "Flat",
	    "Flats",
	    "Ford",
	    "Fords",
	    "Forest",
	    "Forge",
	    "Forges",
	    "Fork",
	    "Forks",
	    "Fort",
	    "Freeway",
	    "Garden",
	    "Gardens",
	    "Gateway",
	    "Glen",
	    "Glens",
	    "Green",
	    "Greens",
	    "Grove",
	    "Groves",
	    "Harbor",
	    "Harbors",
	    "Haven",
	    "Heights",
	    "Highway",
	    "Hill",
	    "Hills",
	    "Hollow",
	    "Inlet",
	    "Inlet",
	    "Island",
	    "Island",
	    "Islands",
	    "Islands",
	    "Isle",
	    "Isle",
	    "Junction",
	    "Junctions",
	    "Key",
	    "Keys",
	    "Knoll",
	    "Knolls",
	    "Lake",
	    "Lakes",
	    "Land",
	    "Landing",
	    "Lane",
	    "Light",
	    "Lights",
	    "Loaf",
	    "Lock",
	    "Locks",
	    "Locks",
	    "Lodge",
	    "Lodge",
	    "Loop",
	    "Mall",
	    "Manor",
	    "Manors",
	    "Meadow",
	    "Meadows",
	    "Mews",
	    "Mill",
	    "Mills",
	    "Mission",
	    "Mission",
	    "Motorway",
	    "Mount",
	    "Mountain",
	    "Mountain",
	    "Mountains",
	    "Mountains",
	    "Neck",
	    "Orchard",
	    "Oval",
	    "Overpass",
	    "Park",
	    "Parks",
	    "Parkway",
	    "Parkways",
	    "Pass",
	    "Passage",
	    "Path",
	    "Pike",
	    "Pine",
	    "Pines",
	    "Place",
	    "Plain",
	    "Plains",
	    "Plains",
	    "Plaza",
	    "Plaza",
	    "Point",
	    "Points",
	    "Port",
	    "Port",
	    "Ports",
	    "Ports",
	    "Prairie",
	    "Prairie",
	    "Radial",
	    "Ramp",
	    "Ranch",
	    "Rapid",
	    "Rapids",
	    "Rest",
	    "Ridge",
	    "Ridges",
	    "River",
	    "Road",
	    "Road",
	    "Roads",
	    "Roads",
	    "Route",
	    "Row",
	    "Rue",
	    "Run",
	    "Shoal",
	    "Shoals",
	    "Shore",
	    "Shores",
	    "Skyway",
	    "Spring",
	    "Springs",
	    "Springs",
	    "Spur",
	    "Spurs",
	    "Square",
	    "Square",
	    "Squares",
	    "Squares",
	    "Station",
	    "Station",
	    "Stravenue",
	    "Stravenue",
	    "Stream",
	    "Stream",
	    "Street",
	    "Street",
	    "Streets",
	    "Summit",
	    "Summit",
	    "Terrace",
	    "Throughway",
	    "Trace",
	    "Track",
	    "Trafficway",
	    "Trail",
	    "Trail",
	    "Tunnel",
	    "Tunnel",
	    "Turnpike",
	    "Turnpike",
	    "Underpass",
	    "Union",
	    "Unions",
	    "Valley",
	    "Valleys",
	    "Via",
	    "Viaduct",
	    "View",
	    "Views",
	    "Village",
	    "Village",
	    "Villages",
	    "Ville",
	    "Vista",
	    "Vista",
	    "Walk",
	    "Walks",
	    "Wall",
	    "Way",
	    "Ways",
	    "Well",
	    "Wells"
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "Suite ###"
	  ],
	  "postcode": [
	    "#####",
	    "#####-####"
	  ],
	  "postcode_by_state": [
	    "#####",
	    "#####-####"
	  ],
	  "state": [
	    "Alabama",
	    "Alaska",
	    "Arizona",
	    "Arkansas",
	    "California",
	    "Colorado",
	    "Connecticut",
	    "Delaware",
	    "Florida",
	    "Georgia",
	    "Hawaii",
	    "Idaho",
	    "Illinois",
	    "Indiana",
	    "Iowa",
	    "Kansas",
	    "Kentucky",
	    "Louisiana",
	    "Maine",
	    "Maryland",
	    "Massachusetts",
	    "Michigan",
	    "Minnesota",
	    "Mississippi",
	    "Missouri",
	    "Montana",
	    "Nebraska",
	    "Nevada",
	    "New Hampshire",
	    "New Jersey",
	    "New Mexico",
	    "New York",
	    "North Carolina",
	    "North Dakota",
	    "Ohio",
	    "Oklahoma",
	    "Oregon",
	    "Pennsylvania",
	    "Rhode Island",
	    "South Carolina",
	    "South Dakota",
	    "Tennessee",
	    "Texas",
	    "Utah",
	    "Vermont",
	    "Virginia",
	    "Washington",
	    "West Virginia",
	    "Wisconsin",
	    "Wyoming"
	  ],
	  "state_abbr": [
	    "AL",
	    "AK",
	    "AZ",
	    "AR",
	    "CA",
	    "CO",
	    "CT",
	    "DE",
	    "FL",
	    "GA",
	    "HI",
	    "ID",
	    "IL",
	    "IN",
	    "IA",
	    "KS",
	    "KY",
	    "LA",
	    "ME",
	    "MD",
	    "MA",
	    "MI",
	    "MN",
	    "MS",
	    "MO",
	    "MT",
	    "NE",
	    "NV",
	    "NH",
	    "NJ",
	    "NM",
	    "NY",
	    "NC",
	    "ND",
	    "OH",
	    "OK",
	    "OR",
	    "PA",
	    "RI",
	    "SC",
	    "SD",
	    "TN",
	    "TX",
	    "UT",
	    "VT",
	    "VA",
	    "WA",
	    "WV",
	    "WI",
	    "WY"
	  ],
	  "time_zone": [
	    "Pacific/Midway",
	    "Pacific/Pago_Pago",
	    "Pacific/Honolulu",
	    "America/Juneau",
	    "America/Los_Angeles",
	    "America/Tijuana",
	    "America/Denver",
	    "America/Phoenix",
	    "America/Chihuahua",
	    "America/Mazatlan",
	    "America/Chicago",
	    "America/Regina",
	    "America/Mexico_City",
	    "America/Mexico_City",
	    "America/Monterrey",
	    "America/Guatemala",
	    "America/New_York",
	    "America/Indiana/Indianapolis",
	    "America/Bogota",
	    "America/Lima",
	    "America/Lima",
	    "America/Halifax",
	    "America/Caracas",
	    "America/La_Paz",
	    "America/Santiago",
	    "America/St_Johns",
	    "America/Sao_Paulo",
	    "America/Argentina/Buenos_Aires",
	    "America/Guyana",
	    "America/Godthab",
	    "Atlantic/South_Georgia",
	    "Atlantic/Azores",
	    "Atlantic/Cape_Verde",
	    "Europe/Dublin",
	    "Europe/London",
	    "Europe/Lisbon",
	    "Europe/London",
	    "Africa/Casablanca",
	    "Africa/Monrovia",
	    "Etc/UTC",
	    "Europe/Belgrade",
	    "Europe/Bratislava",
	    "Europe/Budapest",
	    "Europe/Ljubljana",
	    "Europe/Prague",
	    "Europe/Sarajevo",
	    "Europe/Skopje",
	    "Europe/Warsaw",
	    "Europe/Zagreb",
	    "Europe/Brussels",
	    "Europe/Copenhagen",
	    "Europe/Madrid",
	    "Europe/Paris",
	    "Europe/Amsterdam",
	    "Europe/Berlin",
	    "Europe/Berlin",
	    "Europe/Rome",
	    "Europe/Stockholm",
	    "Europe/Vienna",
	    "Africa/Algiers",
	    "Europe/Bucharest",
	    "Africa/Cairo",
	    "Europe/Helsinki",
	    "Europe/Kiev",
	    "Europe/Riga",
	    "Europe/Sofia",
	    "Europe/Tallinn",
	    "Europe/Vilnius",
	    "Europe/Athens",
	    "Europe/Istanbul",
	    "Europe/Minsk",
	    "Asia/Jerusalem",
	    "Africa/Harare",
	    "Africa/Johannesburg",
	    "Europe/Moscow",
	    "Europe/Moscow",
	    "Europe/Moscow",
	    "Asia/Kuwait",
	    "Asia/Riyadh",
	    "Africa/Nairobi",
	    "Asia/Baghdad",
	    "Asia/Tehran",
	    "Asia/Muscat",
	    "Asia/Muscat",
	    "Asia/Baku",
	    "Asia/Tbilisi",
	    "Asia/Yerevan",
	    "Asia/Kabul",
	    "Asia/Yekaterinburg",
	    "Asia/Karachi",
	    "Asia/Karachi",
	    "Asia/Tashkent",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kathmandu",
	    "Asia/Dhaka",
	    "Asia/Dhaka",
	    "Asia/Colombo",
	    "Asia/Almaty",
	    "Asia/Novosibirsk",
	    "Asia/Rangoon",
	    "Asia/Bangkok",
	    "Asia/Bangkok",
	    "Asia/Jakarta",
	    "Asia/Krasnoyarsk",
	    "Asia/Shanghai",
	    "Asia/Chongqing",
	    "Asia/Hong_Kong",
	    "Asia/Urumqi",
	    "Asia/Kuala_Lumpur",
	    "Asia/Singapore",
	    "Asia/Taipei",
	    "Australia/Perth",
	    "Asia/Irkutsk",
	    "Asia/Ulaanbaatar",
	    "Asia/Seoul",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Yakutsk",
	    "Australia/Darwin",
	    "Australia/Adelaide",
	    "Australia/Melbourne",
	    "Australia/Melbourne",
	    "Australia/Sydney",
	    "Australia/Brisbane",
	    "Australia/Hobart",
	    "Asia/Vladivostok",
	    "Pacific/Guam",
	    "Pacific/Port_Moresby",
	    "Asia/Magadan",
	    "Asia/Magadan",
	    "Pacific/Noumea",
	    "Pacific/Fiji",
	    "Asia/Kamchatka",
	    "Pacific/Majuro",
	    "Pacific/Auckland",
	    "Pacific/Auckland",
	    "Pacific/Tongatapu",
	    "Pacific/Fakaofo",
	    "Pacific/Apia"
	  ],
	  "city": [
	    "#{city_prefix} #{Name.first_name}#{city_suffix}",
	    "#{city_prefix} #{Name.first_name}",
	    "#{Name.first_name}#{city_suffix}",
	    "#{Name.last_name}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{Name.first_name} #{street_suffix}",
	    "#{Name.last_name} #{street_suffix}"
	  ],
	  "street_address": [
	    "#{building_number} #{street_name}"
	  ],
	  "default_country": [
	    "United States of America"
	  ]
	};
	en.credit_card = {
	  "visa": [
	    "/4###########L/",
	    "/4###-####-####-###L/"
	  ],
	  "mastercard": [
	    "/5[1-5]##-####-####-###L/",
	    "/6771-89##-####-###L/"
	  ],
	  "discover": [
	    "/6011-####-####-###L/",
	    "/65##-####-####-###L/",
	    "/64[4-9]#-####-####-###L/",
	    "/6011-62##-####-####-###L/",
	    "/65##-62##-####-####-###L/",
	    "/64[4-9]#-62##-####-####-###L/"
	  ],
	  "american_express": [
	    "/34##-######-####L/",
	    "/37##-######-####L/"
	  ],
	  "diners_club": [
	    "/30[0-5]#-######-###L/",
	    "/368#-######-###L/"
	  ],
	  "jcb": [
	    "/3528-####-####-###L/",
	    "/3529-####-####-###L/",
	    "/35[3-8]#-####-####-###L/"
	  ],
	  "switch": [
	    "/6759-####-####-###L/",
	    "/6759-####-####-####-#L/",
	    "/6759-####-####-####-##L/"
	  ],
	  "solo": [
	    "/6767-####-####-###L/",
	    "/6767-####-####-####-#L/",
	    "/6767-####-####-####-##L/"
	  ],
	  "dankort": "/5019-####-####-###L/",
	  "maestro": [
	    "/50#{9,16}L/",
	    "/5[6-8]#{9,16}L/",
	    "/56##{9,16}L/"
	  ],
	  "forbrugsforeningen": "/6007-22##-####-###L/",
	  "laser": [
	    "/6304###########L/",
	    "/6706###########L/",
	    "/6771###########L/",
	    "/6709###########L/",
	    "/6304#########{5,6}L/",
	    "/6706#########{5,6}L/",
	    "/6771#########{5,6}L/",
	    "/6709#########{5,6}L/"
	  ]
	};
	en.company = {
	  "suffix": [
	    "Inc",
	    "and Sons",
	    "LLC",
	    "Group"
	  ],
	  "adjective": [
	      "Adaptive",
	      "Advanced",
	      "Ameliorated",
	      "Assimilated",
	      "Automated",
	      "Balanced",
	      "Business-focused",
	      "Centralized",
	      "Cloned",
	      "Compatible",
	      "Configurable",
	      "Cross-group",
	      "Cross-platform",
	      "Customer-focused",
	      "Customizable",
	      "Decentralized",
	      "De-engineered",
	      "Devolved",
	      "Digitized",
	      "Distributed",
	      "Diverse",
	      "Down-sized",
	      "Enhanced",
	      "Enterprise-wide",
	      "Ergonomic",
	      "Exclusive",
	      "Expanded",
	      "Extended",
	      "Face to face",
	      "Focused",
	      "Front-line",
	      "Fully-configurable",
	      "Function-based",
	      "Fundamental",
	      "Future-proofed",
	      "Grass-roots",
	      "Horizontal",
	      "Implemented",
	      "Innovative",
	      "Integrated",
	      "Intuitive",
	      "Inverse",
	      "Managed",
	      "Mandatory",
	      "Monitored",
	      "Multi-channelled",
	      "Multi-lateral",
	      "Multi-layered",
	      "Multi-tiered",
	      "Networked",
	      "Object-based",
	      "Open-architected",
	      "Open-source",
	      "Operative",
	      "Optimized",
	      "Optional",
	      "Organic",
	      "Organized",
	      "Persevering",
	      "Persistent",
	      "Phased",
	      "Polarised",
	      "Pre-emptive",
	      "Proactive",
	      "Profit-focused",
	      "Profound",
	      "Programmable",
	      "Progressive",
	      "Public-key",
	      "Quality-focused",
	      "Reactive",
	      "Realigned",
	      "Re-contextualized",
	      "Re-engineered",
	      "Reduced",
	      "Reverse-engineered",
	      "Right-sized",
	      "Robust",
	      "Seamless",
	      "Secured",
	      "Self-enabling",
	      "Sharable",
	      "Stand-alone",
	      "Streamlined",
	      "Switchable",
	      "Synchronised",
	      "Synergistic",
	      "Synergized",
	      "Team-oriented",
	      "Total",
	      "Triple-buffered",
	      "Universal",
	      "Up-sized",
	      "Upgradable",
	      "User-centric",
	      "User-friendly",
	      "Versatile",
	      "Virtual",
	      "Visionary",
	      "Vision-oriented"
	  ],
	  "descriptor": [
	      "24 hour",
	      "24/7",
	      "3rd generation",
	      "4th generation",
	      "5th generation",
	      "6th generation",
	      "actuating",
	      "analyzing",
	      "asymmetric",
	      "asynchronous",
	      "attitude-oriented",
	      "background",
	      "bandwidth-monitored",
	      "bi-directional",
	      "bifurcated",
	      "bottom-line",
	      "clear-thinking",
	      "client-driven",
	      "client-server",
	      "coherent",
	      "cohesive",
	      "composite",
	      "context-sensitive",
	      "contextually-based",
	      "content-based",
	      "dedicated",
	      "demand-driven",
	      "didactic",
	      "directional",
	      "discrete",
	      "disintermediate",
	      "dynamic",
	      "eco-centric",
	      "empowering",
	      "encompassing",
	      "even-keeled",
	      "executive",
	      "explicit",
	      "exuding",
	      "fault-tolerant",
	      "foreground",
	      "fresh-thinking",
	      "full-range",
	      "global",
	      "grid-enabled",
	      "heuristic",
	      "high-level",
	      "holistic",
	      "homogeneous",
	      "human-resource",
	      "hybrid",
	      "impactful",
	      "incremental",
	      "intangible",
	      "interactive",
	      "intermediate",
	      "leading edge",
	      "local",
	      "logistical",
	      "maximized",
	      "methodical",
	      "mission-critical",
	      "mobile",
	      "modular",
	      "motivating",
	      "multimedia",
	      "multi-state",
	      "multi-tasking",
	      "national",
	      "needs-based",
	      "neutral",
	      "next generation",
	      "non-volatile",
	      "object-oriented",
	      "optimal",
	      "optimizing",
	      "radical",
	      "real-time",
	      "reciprocal",
	      "regional",
	      "responsive",
	      "scalable",
	      "secondary",
	      "solution-oriented",
	      "stable",
	      "static",
	      "systematic",
	      "systemic",
	      "system-worthy",
	      "tangible",
	      "tertiary",
	      "transitional",
	      "uniform",
	      "upward-trending",
	      "user-facing",
	      "value-added",
	      "web-enabled",
	      "well-modulated",
	      "zero administration",
	      "zero defect",
	      "zero tolerance"
	    ],
	    "noun": [
	      "ability",
	      "access",
	      "adapter",
	      "algorithm",
	      "alliance",
	      "analyzer",
	      "application",
	      "approach",
	      "architecture",
	      "archive",
	      "artificial intelligence",
	      "array",
	      "attitude",
	      "benchmark",
	      "budgetary management",
	      "capability",
	      "capacity",
	      "challenge",
	      "circuit",
	      "collaboration",
	      "complexity",
	      "concept",
	      "conglomeration",
	      "contingency",
	      "core",
	      "customer loyalty",
	      "database",
	      "data-warehouse",
	      "definition",
	      "emulation",
	      "encoding",
	      "encryption",
	      "extranet",
	      "firmware",
	      "flexibility",
	      "focus group",
	      "forecast",
	      "frame",
	      "framework",
	      "function",
	      "functionalities",
	      "Graphic Interface",
	      "groupware",
	      "Graphical User Interface",
	      "hardware",
	      "help-desk",
	      "hierarchy",
	      "hub",
	      "implementation",
	      "info-mediaries",
	      "infrastructure",
	      "initiative",
	      "installation",
	      "instruction set",
	      "interface",
	      "internet solution",
	      "intranet",
	      "knowledge user",
	      "knowledge base",
	      "local area network",
	      "leverage",
	      "matrices",
	      "matrix",
	      "methodology",
	      "middleware",
	      "migration",
	      "model",
	      "moderator",
	      "monitoring",
	      "moratorium",
	      "neural-net",
	      "open architecture",
	      "open system",
	      "orchestration",
	      "paradigm",
	      "parallelism",
	      "policy",
	      "portal",
	      "pricing structure",
	      "process improvement",
	      "product",
	      "productivity",
	      "project",
	      "projection",
	      "protocol",
	      "secured line",
	      "service-desk",
	      "software",
	      "solution",
	      "standardization",
	      "strategy",
	      "structure",
	      "success",
	      "superstructure",
	      "support",
	      "synergy",
	      "system engine",
	      "task-force",
	      "throughput",
	      "time-frame",
	      "toolset",
	      "utilisation",
	      "website",
	      "workforce"
	   ],
	  "bs_verb": [
	      "implement",
	      "utilize",
	      "integrate",
	      "streamline",
	      "optimize",
	      "evolve",
	      "transform",
	      "embrace",
	      "enable",
	      "orchestrate",
	      "leverage",
	      "reinvent",
	      "aggregate",
	      "architect",
	      "enhance",
	      "incentivize",
	      "morph",
	      "empower",
	      "envisioneer",
	      "monetize",
	      "harness",
	      "facilitate",
	      "seize",
	      "disintermediate",
	      "synergize",
	      "strategize",
	      "deploy",
	      "brand",
	      "grow",
	      "target",
	      "syndicate",
	      "synthesize",
	      "deliver",
	      "mesh",
	      "incubate",
	      "engage",
	      "maximize",
	      "benchmark",
	      "expedite",
	      "reintermediate",
	      "whiteboard",
	      "visualize",
	      "repurpose",
	      "innovate",
	      "scale",
	      "unleash",
	      "drive",
	      "extend",
	      "engineer",
	      "revolutionize",
	      "generate",
	      "exploit",
	      "transition",
	      "e-enable",
	      "iterate",
	      "cultivate",
	      "matrix",
	      "productize",
	      "redefine",
	      "recontextualize"
	    ],
	    "bs_adjective": [
	      "clicks-and-mortar",
	      "value-added",
	      "vertical",
	      "proactive",
	      "robust",
	      "revolutionary",
	      "scalable",
	      "leading-edge",
	      "innovative",
	      "intuitive",
	      "strategic",
	      "e-business",
	      "mission-critical",
	      "sticky",
	      "one-to-one",
	      "24/7",
	      "end-to-end",
	      "global",
	      "B2B",
	      "B2C",
	      "granular",
	      "frictionless",
	      "virtual",
	      "viral",
	      "dynamic",
	      "24/365",
	      "best-of-breed",
	      "killer",
	      "magnetic",
	      "bleeding-edge",
	      "web-enabled",
	      "interactive",
	      "dot-com",
	      "sexy",
	      "back-end",
	      "real-time",
	      "efficient",
	      "front-end",
	      "distributed",
	      "seamless",
	      "extensible",
	      "turn-key",
	      "world-class",
	      "open-source",
	      "cross-platform",
	      "cross-media",
	      "synergistic",
	      "bricks-and-clicks",
	      "out-of-the-box",
	      "enterprise",
	      "integrated",
	      "impactful",
	      "wireless",
	      "transparent",
	      "next-generation",
	      "cutting-edge",
	      "user-centric",
	      "visionary",
	      "customized",
	      "ubiquitous",
	      "plug-and-play",
	      "collaborative",
	      "compelling",
	      "holistic",
	      "rich"
	    ],
	    "bs_noun": [
	      "synergies",
	      "web-readiness",
	      "paradigms",
	      "markets",
	      "partnerships",
	      "infrastructures",
	      "platforms",
	      "initiatives",
	      "channels",
	      "eyeballs",
	      "communities",
	      "ROI",
	      "solutions",
	      "e-tailers",
	      "e-services",
	      "action-items",
	      "portals",
	      "niches",
	      "technologies",
	      "content",
	      "vortals",
	      "supply-chains",
	      "convergence",
	      "relationships",
	      "architectures",
	      "interfaces",
	      "e-markets",
	      "e-commerce",
	      "systems",
	      "bandwidth",
	      "infomediaries",
	      "models",
	      "mindshare",
	      "deliverables",
	      "users",
	      "schemas",
	      "networks",
	      "applications",
	      "metrics",
	      "e-business",
	      "functionalities",
	      "experiences",
	      "web services",
	      "methodologies"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
	  ]
	};
	en.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "biz",
	    "info",
	    "name",
	    "net",
	    "org"
	  ]
	};

	//All this avatar have been authorized by its awesome users to be use on live websites (not just mockups)
	//For more information, please visit: http://uifaces.com/authorized
	var avatarUri = ["jarjan/128.jpg",
	    "mahdif/128.jpg",
	    "sprayaga/128.jpg",
	    "ruzinav/128.jpg",
	    "Skyhartman/128.jpg",
	    "moscoz/128.jpg",
	    "kurafire/128.jpg",
	    "91bilal/128.jpg",
	    "igorgarybaldi/128.jpg",
	    "calebogden/128.jpg",
	    "malykhinv/128.jpg",
	    "joelhelin/128.jpg",
	    "kushsolitary/128.jpg",
	    "coreyweb/128.jpg",
	    "snowshade/128.jpg",
	    "areus/128.jpg",
	    "holdenweb/128.jpg",
	    "heyimjuani/128.jpg",
	    "envex/128.jpg",
	    "unterdreht/128.jpg",
	    "collegeman/128.jpg",
	    "peejfancher/128.jpg",
	    "andyisonline/128.jpg",
	    "ultragex/128.jpg",
	    "fuck_you_two/128.jpg",
	    "adellecharles/128.jpg",
	    "ateneupopular/128.jpg",
	    "ahmetalpbalkan/128.jpg",
	    "Stievius/128.jpg",
	    "kerem/128.jpg",
	    "osvaldas/128.jpg",
	    "angelceballos/128.jpg",
	    "thierrykoblentz/128.jpg",
	    "peterlandt/128.jpg",
	    "catarino/128.jpg",
	    "wr/128.jpg",
	    "weglov/128.jpg",
	    "brandclay/128.jpg",
	    "flame_kaizar/128.jpg",
	    "ahmetsulek/128.jpg",
	    "nicolasfolliot/128.jpg",
	    "jayrobinson/128.jpg",
	    "victorerixon/128.jpg",
	    "kolage/128.jpg",
	    "michzen/128.jpg",
	    "markjenkins/128.jpg",
	    "nicolai_larsen/128.jpg",
	    "gt/128.jpg",
	    "noxdzine/128.jpg",
	    "alagoon/128.jpg",
	    "idiot/128.jpg",
	    "mizko/128.jpg",
	    "chadengle/128.jpg",
	    "mutlu82/128.jpg",
	    "simobenso/128.jpg",
	    "vocino/128.jpg",
	    "guiiipontes/128.jpg",
	    "soyjavi/128.jpg",
	    "joshaustin/128.jpg",
	    "tomaslau/128.jpg",
	    "VinThomas/128.jpg",
	    "ManikRathee/128.jpg",
	    "langate/128.jpg",
	    "cemshid/128.jpg",
	    "leemunroe/128.jpg",
	    "_shahedk/128.jpg",
	    "enda/128.jpg",
	    "BillSKenney/128.jpg",
	    "divya/128.jpg",
	    "joshhemsley/128.jpg",
	    "sindresorhus/128.jpg",
	    "soffes/128.jpg",
	    "9lessons/128.jpg",
	    "linux29/128.jpg",
	    "Chakintosh/128.jpg",
	    "anaami/128.jpg",
	    "joreira/128.jpg",
	    "shadeed9/128.jpg",
	    "scottkclark/128.jpg",
	    "jedbridges/128.jpg",
	    "salleedesign/128.jpg",
	    "marakasina/128.jpg",
	    "ariil/128.jpg",
	    "BrianPurkiss/128.jpg",
	    "michaelmartinho/128.jpg",
	    "bublienko/128.jpg",
	    "devankoshal/128.jpg",
	    "ZacharyZorbas/128.jpg",
	    "timmillwood/128.jpg",
	    "joshuasortino/128.jpg",
	    "damenleeturks/128.jpg",
	    "tomas_janousek/128.jpg",
	    "herrhaase/128.jpg",
	    "RussellBishop/128.jpg",
	    "brajeshwar/128.jpg",
	    "nachtmeister/128.jpg",
	    "cbracco/128.jpg",
	    "bermonpainter/128.jpg",
	    "abdullindenis/128.jpg",
	    "isacosta/128.jpg",
	    "suprb/128.jpg",
	    "yalozhkin/128.jpg",
	    "chandlervdw/128.jpg",
	    "iamgarth/128.jpg",
	    "_victa/128.jpg",
	    "commadelimited/128.jpg",
	    "roybarberuk/128.jpg",
	    "axel/128.jpg",
	    "vladarbatov/128.jpg",
	    "ffbel/128.jpg",
	    "syropian/128.jpg",
	    "ankitind/128.jpg",
	    "traneblow/128.jpg",
	    "flashmurphy/128.jpg",
	    "ChrisFarina78/128.jpg",
	    "baliomega/128.jpg",
	    "saschamt/128.jpg",
	    "jm_denis/128.jpg",
	    "anoff/128.jpg",
	    "kennyadr/128.jpg",
	    "chatyrko/128.jpg",
	    "dingyi/128.jpg",
	    "mds/128.jpg",
	    "terryxlife/128.jpg",
	    "aaroni/128.jpg",
	    "kinday/128.jpg",
	    "prrstn/128.jpg",
	    "eduardostuart/128.jpg",
	    "dhilipsiva/128.jpg",
	    "GavicoInd/128.jpg",
	    "baires/128.jpg",
	    "rohixx/128.jpg",
	    "bigmancho/128.jpg",
	    "blakesimkins/128.jpg",
	    "leeiio/128.jpg",
	    "tjrus/128.jpg",
	    "uberschizo/128.jpg",
	    "kylefoundry/128.jpg",
	    "claudioguglieri/128.jpg",
	    "ripplemdk/128.jpg",
	    "exentrich/128.jpg",
	    "jakemoore/128.jpg",
	    "joaoedumedeiros/128.jpg",
	    "poormini/128.jpg",
	    "tereshenkov/128.jpg",
	    "keryilmaz/128.jpg",
	    "haydn_woods/128.jpg",
	    "rude/128.jpg",
	    "llun/128.jpg",
	    "sgaurav_baghel/128.jpg",
	    "jamiebrittain/128.jpg",
	    "badlittleduck/128.jpg",
	    "pifagor/128.jpg",
	    "agromov/128.jpg",
	    "benefritz/128.jpg",
	    "erwanhesry/128.jpg",
	    "diesellaws/128.jpg",
	    "jeremiaha/128.jpg",
	    "koridhandy/128.jpg",
	    "chaensel/128.jpg",
	    "andrewcohen/128.jpg",
	    "smaczny/128.jpg",
	    "gonzalorobaina/128.jpg",
	    "nandini_m/128.jpg",
	    "sydlawrence/128.jpg",
	    "cdharrison/128.jpg",
	    "tgerken/128.jpg",
	    "lewisainslie/128.jpg",
	    "charliecwaite/128.jpg",
	    "robbschiller/128.jpg",
	    "flexrs/128.jpg",
	    "mattdetails/128.jpg",
	    "raquelwilson/128.jpg",
	    "karsh/128.jpg",
	    "mrmartineau/128.jpg",
	    "opnsrce/128.jpg",
	    "hgharrygo/128.jpg",
	    "maximseshuk/128.jpg",
	    "uxalex/128.jpg",
	    "samihah/128.jpg",
	    "chanpory/128.jpg",
	    "sharvin/128.jpg",
	    "josemarques/128.jpg",
	    "jefffis/128.jpg",
	    "krystalfister/128.jpg",
	    "lokesh_coder/128.jpg",
	    "thedamianhdez/128.jpg",
	    "dpmachado/128.jpg",
	    "funwatercat/128.jpg",
	    "timothycd/128.jpg",
	    "ivanfilipovbg/128.jpg",
	    "picard102/128.jpg",
	    "marcobarbosa/128.jpg",
	    "krasnoukhov/128.jpg",
	    "g3d/128.jpg",
	    "ademilter/128.jpg",
	    "rickdt/128.jpg",
	    "operatino/128.jpg",
	    "bungiwan/128.jpg",
	    "hugomano/128.jpg",
	    "logorado/128.jpg",
	    "dc_user/128.jpg",
	    "horaciobella/128.jpg",
	    "SlaapMe/128.jpg",
	    "teeragit/128.jpg",
	    "iqonicd/128.jpg",
	    "ilya_pestov/128.jpg",
	    "andrewarrow/128.jpg",
	    "ssiskind/128.jpg",
	    "stan/128.jpg",
	    "HenryHoffman/128.jpg",
	    "rdsaunders/128.jpg",
	    "adamsxu/128.jpg",
	    "curiousoffice/128.jpg",
	    "themadray/128.jpg",
	    "michigangraham/128.jpg",
	    "kohette/128.jpg",
	    "nickfratter/128.jpg",
	    "runningskull/128.jpg",
	    "madysondesigns/128.jpg",
	    "brenton_clarke/128.jpg",
	    "jennyshen/128.jpg",
	    "bradenhamm/128.jpg",
	    "kurtinc/128.jpg",
	    "amanruzaini/128.jpg",
	    "coreyhaggard/128.jpg",
	    "Karimmove/128.jpg",
	    "aaronalfred/128.jpg",
	    "wtrsld/128.jpg",
	    "jitachi/128.jpg",
	    "therealmarvin/128.jpg",
	    "pmeissner/128.jpg",
	    "ooomz/128.jpg",
	    "chacky14/128.jpg",
	    "jesseddy/128.jpg",
	    "thinmatt/128.jpg",
	    "shanehudson/128.jpg",
	    "akmur/128.jpg",
	    "IsaryAmairani/128.jpg",
	    "arthurholcombe1/128.jpg",
	    "andychipster/128.jpg",
	    "boxmodel/128.jpg",
	    "ehsandiary/128.jpg",
	    "LucasPerdidao/128.jpg",
	    "shalt0ni/128.jpg",
	    "swaplord/128.jpg",
	    "kaelifa/128.jpg",
	    "plbabin/128.jpg",
	    "guillemboti/128.jpg",
	    "arindam_/128.jpg",
	    "renbyrd/128.jpg",
	    "thiagovernetti/128.jpg",
	    "jmillspaysbills/128.jpg",
	    "mikemai2awesome/128.jpg",
	    "jervo/128.jpg",
	    "mekal/128.jpg",
	    "sta1ex/128.jpg",
	    "robergd/128.jpg",
	    "felipecsl/128.jpg",
	    "andrea211087/128.jpg",
	    "garand/128.jpg",
	    "dhooyenga/128.jpg",
	    "abovefunction/128.jpg",
	    "pcridesagain/128.jpg",
	    "randomlies/128.jpg",
	    "BryanHorsey/128.jpg",
	    "heykenneth/128.jpg",
	    "dahparra/128.jpg",
	    "allthingssmitty/128.jpg",
	    "danvernon/128.jpg",
	    "beweinreich/128.jpg",
	    "increase/128.jpg",
	    "falvarad/128.jpg",
	    "alxndrustinov/128.jpg",
	    "souuf/128.jpg",
	    "orkuncaylar/128.jpg",
	    "AM_Kn2/128.jpg",
	    "gearpixels/128.jpg",
	    "bassamology/128.jpg",
	    "vimarethomas/128.jpg",
	    "kosmar/128.jpg",
	    "SULiik/128.jpg",
	    "mrjamesnoble/128.jpg",
	    "silvanmuhlemann/128.jpg",
	    "shaneIxD/128.jpg",
	    "nacho/128.jpg",
	    "yigitpinarbasi/128.jpg",
	    "buzzusborne/128.jpg",
	    "aaronkwhite/128.jpg",
	    "rmlewisuk/128.jpg",
	    "giancarlon/128.jpg",
	    "nbirckel/128.jpg",
	    "d_nny_m_cher/128.jpg",
	    "sdidonato/128.jpg",
	    "atariboy/128.jpg",
	    "abotap/128.jpg",
	    "karalek/128.jpg",
	    "psdesignuk/128.jpg",
	    "ludwiczakpawel/128.jpg",
	    "nemanjaivanovic/128.jpg",
	    "baluli/128.jpg",
	    "ahmadajmi/128.jpg",
	    "vovkasolovev/128.jpg",
	    "samgrover/128.jpg",
	    "derienzo777/128.jpg",
	    "jonathansimmons/128.jpg",
	    "nelsonjoyce/128.jpg",
	    "S0ufi4n3/128.jpg",
	    "xtopherpaul/128.jpg",
	    "oaktreemedia/128.jpg",
	    "nateschulte/128.jpg",
	    "findingjenny/128.jpg",
	    "namankreative/128.jpg",
	    "antonyzotov/128.jpg",
	    "we_social/128.jpg",
	    "leehambley/128.jpg",
	    "solid_color/128.jpg",
	    "abelcabans/128.jpg",
	    "mbilderbach/128.jpg",
	    "kkusaa/128.jpg",
	    "jordyvdboom/128.jpg",
	    "carlosgavina/128.jpg",
	    "pechkinator/128.jpg",
	    "vc27/128.jpg",
	    "rdbannon/128.jpg",
	    "croakx/128.jpg",
	    "suribbles/128.jpg",
	    "kerihenare/128.jpg",
	    "catadeleon/128.jpg",
	    "gcmorley/128.jpg",
	    "duivvv/128.jpg",
	    "saschadroste/128.jpg",
	    "victorDubugras/128.jpg",
	    "wintopia/128.jpg",
	    "mattbilotti/128.jpg",
	    "taylorling/128.jpg",
	    "megdraws/128.jpg",
	    "meln1ks/128.jpg",
	    "mahmoudmetwally/128.jpg",
	    "Silveredge9/128.jpg",
	    "derekebradley/128.jpg",
	    "happypeter1983/128.jpg",
	    "travis_arnold/128.jpg",
	    "artem_kostenko/128.jpg",
	    "adobi/128.jpg",
	    "daykiine/128.jpg",
	    "alek_djuric/128.jpg",
	    "scips/128.jpg",
	    "miguelmendes/128.jpg",
	    "justinrhee/128.jpg",
	    "alsobrooks/128.jpg",
	    "fronx/128.jpg",
	    "mcflydesign/128.jpg",
	    "santi_urso/128.jpg",
	    "allfordesign/128.jpg",
	    "stayuber/128.jpg",
	    "bertboerland/128.jpg",
	    "marosholly/128.jpg",
	    "adamnac/128.jpg",
	    "cynthiasavard/128.jpg",
	    "muringa/128.jpg",
	    "danro/128.jpg",
	    "hiemil/128.jpg",
	    "jackiesaik/128.jpg",
	    "zacsnider/128.jpg",
	    "iduuck/128.jpg",
	    "antjanus/128.jpg",
	    "aroon_sharma/128.jpg",
	    "dshster/128.jpg",
	    "thehacker/128.jpg",
	    "michaelbrooksjr/128.jpg",
	    "ryanmclaughlin/128.jpg",
	    "clubb3rry/128.jpg",
	    "taybenlor/128.jpg",
	    "xripunov/128.jpg",
	    "myastro/128.jpg",
	    "adityasutomo/128.jpg",
	    "digitalmaverick/128.jpg",
	    "hjartstrorn/128.jpg",
	    "itolmach/128.jpg",
	    "vaughanmoffitt/128.jpg",
	    "abdots/128.jpg",
	    "isnifer/128.jpg",
	    "sergeysafonov/128.jpg",
	    "maz/128.jpg",
	    "scrapdnb/128.jpg",
	    "chrismj83/128.jpg",
	    "vitorleal/128.jpg",
	    "sokaniwaal/128.jpg",
	    "zaki3d/128.jpg",
	    "illyzoren/128.jpg",
	    "mocabyte/128.jpg",
	    "osmanince/128.jpg",
	    "djsherman/128.jpg",
	    "davidhemphill/128.jpg",
	    "waghner/128.jpg",
	    "necodymiconer/128.jpg",
	    "praveen_vijaya/128.jpg",
	    "fabbrucci/128.jpg",
	    "cliffseal/128.jpg",
	    "travishines/128.jpg",
	    "kuldarkalvik/128.jpg",
	    "Elt_n/128.jpg",
	    "phillapier/128.jpg",
	    "okseanjay/128.jpg",
	    "id835559/128.jpg",
	    "kudretkeskin/128.jpg",
	    "anjhero/128.jpg",
	    "duck4fuck/128.jpg",
	    "scott_riley/128.jpg",
	    "noufalibrahim/128.jpg",
	    "h1brd/128.jpg",
	    "borges_marcos/128.jpg",
	    "devinhalladay/128.jpg",
	    "ciaranr/128.jpg",
	    "stefooo/128.jpg",
	    "mikebeecham/128.jpg",
	    "tonymillion/128.jpg",
	    "joshuaraichur/128.jpg",
	    "irae/128.jpg",
	    "petrangr/128.jpg",
	    "dmitriychuta/128.jpg",
	    "charliegann/128.jpg",
	    "arashmanteghi/128.jpg",
	    "adhamdannaway/128.jpg",
	    "ainsleywagon/128.jpg",
	    "svenlen/128.jpg",
	    "faisalabid/128.jpg",
	    "beshur/128.jpg",
	    "carlyson/128.jpg",
	    "dutchnadia/128.jpg",
	    "teddyzetterlund/128.jpg",
	    "samuelkraft/128.jpg",
	    "aoimedia/128.jpg",
	    "toddrew/128.jpg",
	    "codepoet_ru/128.jpg",
	    "artvavs/128.jpg",
	    "benoitboucart/128.jpg",
	    "jomarmen/128.jpg",
	    "kolmarlopez/128.jpg",
	    "creartinc/128.jpg",
	    "homka/128.jpg",
	    "gaborenton/128.jpg",
	    "robinclediere/128.jpg",
	    "maximsorokin/128.jpg",
	    "plasticine/128.jpg",
	    "j2deme/128.jpg",
	    "peachananr/128.jpg",
	    "kapaluccio/128.jpg",
	    "de_ascanio/128.jpg",
	    "rikas/128.jpg",
	    "dawidwu/128.jpg",
	    "marcoramires/128.jpg",
	    "angelcreative/128.jpg",
	    "rpatey/128.jpg",
	    "popey/128.jpg",
	    "rehatkathuria/128.jpg",
	    "the_purplebunny/128.jpg",
	    "1markiz/128.jpg",
	    "ajaxy_ru/128.jpg",
	    "brenmurrell/128.jpg",
	    "dudestein/128.jpg",
	    "oskarlevinson/128.jpg",
	    "victorstuber/128.jpg",
	    "nehfy/128.jpg",
	    "vicivadeline/128.jpg",
	    "leandrovaranda/128.jpg",
	    "scottgallant/128.jpg",
	    "victor_haydin/128.jpg",
	    "sawrb/128.jpg",
	    "ryhanhassan/128.jpg",
	    "amayvs/128.jpg",
	    "a_brixen/128.jpg",
	    "karolkrakowiak_/128.jpg",
	    "herkulano/128.jpg",
	    "geran7/128.jpg",
	    "cggaurav/128.jpg",
	    "chris_witko/128.jpg",
	    "lososina/128.jpg",
	    "polarity/128.jpg",
	    "mattlat/128.jpg",
	    "brandonburke/128.jpg",
	    "constantx/128.jpg",
	    "teylorfeliz/128.jpg",
	    "craigelimeliah/128.jpg",
	    "rachelreveley/128.jpg",
	    "reabo101/128.jpg",
	    "rahmeen/128.jpg",
	    "ky/128.jpg",
	    "rickyyean/128.jpg",
	    "j04ntoh/128.jpg",
	    "spbroma/128.jpg",
	    "sebashton/128.jpg",
	    "jpenico/128.jpg",
	    "francis_vega/128.jpg",
	    "oktayelipek/128.jpg",
	    "kikillo/128.jpg",
	    "fabbianz/128.jpg",
	    "larrygerard/128.jpg",
	    "BroumiYoussef/128.jpg",
	    "0therplanet/128.jpg",
	    "mbilalsiddique1/128.jpg",
	    "ionuss/128.jpg",
	    "grrr_nl/128.jpg",
	    "liminha/128.jpg",
	    "rawdiggie/128.jpg",
	    "ryandownie/128.jpg",
	    "sethlouey/128.jpg",
	    "pixage/128.jpg",
	    "arpitnj/128.jpg",
	    "switmer777/128.jpg",
	    "josevnclch/128.jpg",
	    "kanickairaj/128.jpg",
	    "puzik/128.jpg",
	    "tbakdesigns/128.jpg",
	    "besbujupi/128.jpg",
	    "supjoey/128.jpg",
	    "lowie/128.jpg",
	    "linkibol/128.jpg",
	    "balintorosz/128.jpg",
	    "imcoding/128.jpg",
	    "agustincruiz/128.jpg",
	    "gusoto/128.jpg",
	    "thomasschrijer/128.jpg",
	    "superoutman/128.jpg",
	    "kalmerrautam/128.jpg",
	    "gabrielizalo/128.jpg",
	    "gojeanyn/128.jpg",
	    "davidbaldie/128.jpg",
	    "_vojto/128.jpg",
	    "laurengray/128.jpg",
	    "jydesign/128.jpg",
	    "mymyboy/128.jpg",
	    "nellleo/128.jpg",
	    "marciotoledo/128.jpg",
	    "ninjad3m0/128.jpg",
	    "to_soham/128.jpg",
	    "hasslunsford/128.jpg",
	    "muridrahhal/128.jpg",
	    "levisan/128.jpg",
	    "grahamkennery/128.jpg",
	    "lepetitogre/128.jpg",
	    "antongenkin/128.jpg",
	    "nessoila/128.jpg",
	    "amandabuzard/128.jpg",
	    "safrankov/128.jpg",
	    "cocolero/128.jpg",
	    "dss49/128.jpg",
	    "matt3224/128.jpg",
	    "bluesix/128.jpg",
	    "quailandquasar/128.jpg",
	    "AlbertoCococi/128.jpg",
	    "lepinski/128.jpg",
	    "sementiy/128.jpg",
	    "mhudobivnik/128.jpg",
	    "thibaut_re/128.jpg",
	    "olgary/128.jpg",
	    "shojberg/128.jpg",
	    "mtolokonnikov/128.jpg",
	    "bereto/128.jpg",
	    "naupintos/128.jpg",
	    "wegotvices/128.jpg",
	    "xadhix/128.jpg",
	    "macxim/128.jpg",
	    "rodnylobos/128.jpg",
	    "madcampos/128.jpg",
	    "madebyvadim/128.jpg",
	    "bartoszdawydzik/128.jpg",
	    "supervova/128.jpg",
	    "markretzloff/128.jpg",
	    "vonachoo/128.jpg",
	    "darylws/128.jpg",
	    "stevedesigner/128.jpg",
	    "mylesb/128.jpg",
	    "herbigt/128.jpg",
	    "depaulawagner/128.jpg",
	    "geshan/128.jpg",
	    "gizmeedevil1991/128.jpg",
	    "_scottburgess/128.jpg",
	    "lisovsky/128.jpg",
	    "davidsasda/128.jpg",
	    "artd_sign/128.jpg",
	    "YoungCutlass/128.jpg",
	    "mgonto/128.jpg",
	    "itstotallyamy/128.jpg",
	    "victorquinn/128.jpg",
	    "osmond/128.jpg",
	    "oksanafrewer/128.jpg",
	    "zauerkraut/128.jpg",
	    "iamkeithmason/128.jpg",
	    "nitinhayaran/128.jpg",
	    "lmjabreu/128.jpg",
	    "mandalareopens/128.jpg",
	    "thinkleft/128.jpg",
	    "ponchomendivil/128.jpg",
	    "juamperro/128.jpg",
	    "brunodesign1206/128.jpg",
	    "caseycavanagh/128.jpg",
	    "luxe/128.jpg",
	    "dotgridline/128.jpg",
	    "spedwig/128.jpg",
	    "madewulf/128.jpg",
	    "mattsapii/128.jpg",
	    "helderleal/128.jpg",
	    "chrisstumph/128.jpg",
	    "jayphen/128.jpg",
	    "nsamoylov/128.jpg",
	    "chrisvanderkooi/128.jpg",
	    "justme_timothyg/128.jpg",
	    "otozk/128.jpg",
	    "prinzadi/128.jpg",
	    "gu5taf/128.jpg",
	    "cyril_gaillard/128.jpg",
	    "d_kobelyatsky/128.jpg",
	    "daniloc/128.jpg",
	    "nwdsha/128.jpg",
	    "romanbulah/128.jpg",
	    "skkirilov/128.jpg",
	    "dvdwinden/128.jpg",
	    "dannol/128.jpg",
	    "thekevinjones/128.jpg",
	    "jwalter14/128.jpg",
	    "timgthomas/128.jpg",
	    "buddhasource/128.jpg",
	    "uxpiper/128.jpg",
	    "thatonetommy/128.jpg",
	    "diansigitp/128.jpg",
	    "adrienths/128.jpg",
	    "klimmka/128.jpg",
	    "gkaam/128.jpg",
	    "derekcramer/128.jpg",
	    "jennyyo/128.jpg",
	    "nerrsoft/128.jpg",
	    "xalionmalik/128.jpg",
	    "edhenderson/128.jpg",
	    "keyuri85/128.jpg",
	    "roxanejammet/128.jpg",
	    "kimcool/128.jpg",
	    "edkf/128.jpg",
	    "matkins/128.jpg",
	    "alessandroribe/128.jpg",
	    "jacksonlatka/128.jpg",
	    "lebronjennan/128.jpg",
	    "kostaspt/128.jpg",
	    "karlkanall/128.jpg",
	    "moynihan/128.jpg",
	    "danpliego/128.jpg",
	    "saulihirvi/128.jpg",
	    "wesleytrankin/128.jpg",
	    "fjaguero/128.jpg",
	    "bowbrick/128.jpg",
	    "mashaaaaal/128.jpg",
	    "yassiryahya/128.jpg",
	    "dparrelli/128.jpg",
	    "fotomagin/128.jpg",
	    "aka_james/128.jpg",
	    "denisepires/128.jpg",
	    "iqbalperkasa/128.jpg",
	    "martinansty/128.jpg",
	    "jarsen/128.jpg",
	    "r_oy/128.jpg",
	    "justinrob/128.jpg",
	    "gabrielrosser/128.jpg",
	    "malgordon/128.jpg",
	    "carlfairclough/128.jpg",
	    "michaelabehsera/128.jpg",
	    "pierrestoffe/128.jpg",
	    "enjoythetau/128.jpg",
	    "loganjlambert/128.jpg",
	    "rpeezy/128.jpg",
	    "coreyginnivan/128.jpg",
	    "michalhron/128.jpg",
	    "msveet/128.jpg",
	    "lingeswaran/128.jpg",
	    "kolsvein/128.jpg",
	    "peter576/128.jpg",
	    "reideiredale/128.jpg",
	    "joeymurdah/128.jpg",
	    "raphaelnikson/128.jpg",
	    "mvdheuvel/128.jpg",
	    "maxlinderman/128.jpg",
	    "jimmuirhead/128.jpg",
	    "begreative/128.jpg",
	    "frankiefreesbie/128.jpg",
	    "robturlinckx/128.jpg",
	    "Talbi_ConSept/128.jpg",
	    "longlivemyword/128.jpg",
	    "vanchesz/128.jpg",
	    "maiklam/128.jpg",
	    "hermanobrother/128.jpg",
	    "rez___a/128.jpg",
	    "gregsqueeb/128.jpg",
	    "greenbes/128.jpg",
	    "_ragzor/128.jpg",
	    "anthonysukow/128.jpg",
	    "fluidbrush/128.jpg",
	    "dactrtr/128.jpg",
	    "jehnglynn/128.jpg",
	    "bergmartin/128.jpg",
	    "hugocornejo/128.jpg",
	    "_kkga/128.jpg",
	    "dzantievm/128.jpg",
	    "sawalazar/128.jpg",
	    "sovesove/128.jpg",
	    "jonsgotwood/128.jpg",
	    "byryan/128.jpg",
	    "vytautas_a/128.jpg",
	    "mizhgan/128.jpg",
	    "cicerobr/128.jpg",
	    "nilshelmersson/128.jpg",
	    "d33pthought/128.jpg",
	    "davecraige/128.jpg",
	    "nckjrvs/128.jpg",
	    "alexandermayes/128.jpg",
	    "jcubic/128.jpg",
	    "craigrcoles/128.jpg",
	    "bagawarman/128.jpg",
	    "rob_thomas10/128.jpg",
	    "cofla/128.jpg",
	    "maikelk/128.jpg",
	    "rtgibbons/128.jpg",
	    "russell_baylis/128.jpg",
	    "mhesslow/128.jpg",
	    "codysanfilippo/128.jpg",
	    "webtanya/128.jpg",
	    "madebybrenton/128.jpg",
	    "dcalonaci/128.jpg",
	    "perfectflow/128.jpg",
	    "jjsiii/128.jpg",
	    "saarabpreet/128.jpg",
	    "kumarrajan12123/128.jpg",
	    "iamsteffen/128.jpg",
	    "themikenagle/128.jpg",
	    "ceekaytweet/128.jpg",
	    "larrybolt/128.jpg",
	    "conspirator/128.jpg",
	    "dallasbpeters/128.jpg",
	    "n3dmax/128.jpg",
	    "terpimost/128.jpg",
	    "kirillz/128.jpg",
	    "byrnecore/128.jpg",
	    "j_drake_/128.jpg",
	    "calebjoyce/128.jpg",
	    "russoedu/128.jpg",
	    "hoangloi/128.jpg",
	    "tobysaxon/128.jpg",
	    "gofrasdesign/128.jpg",
	    "dimaposnyy/128.jpg",
	    "tjisousa/128.jpg",
	    "okandungel/128.jpg",
	    "billyroshan/128.jpg",
	    "oskamaya/128.jpg",
	    "motionthinks/128.jpg",
	    "knilob/128.jpg",
	    "ashocka18/128.jpg",
	    "marrimo/128.jpg",
	    "bartjo/128.jpg",
	    "omnizya/128.jpg",
	    "ernestsemerda/128.jpg",
	    "andreas_pr/128.jpg",
	    "edgarchris99/128.jpg",
	    "thomasgeisen/128.jpg",
	    "gseguin/128.jpg",
	    "joannefournier/128.jpg",
	    "demersdesigns/128.jpg",
	    "adammarsbar/128.jpg",
	    "nasirwd/128.jpg",
	    "n_tassone/128.jpg",
	    "javorszky/128.jpg",
	    "themrdave/128.jpg",
	    "yecidsm/128.jpg",
	    "nicollerich/128.jpg",
	    "canapud/128.jpg",
	    "nicoleglynn/128.jpg",
	    "judzhin_miles/128.jpg",
	    "designervzm/128.jpg",
	    "kianoshp/128.jpg",
	    "evandrix/128.jpg",
	    "alterchuca/128.jpg",
	    "dhrubo/128.jpg",
	    "ma_tiax/128.jpg",
	    "ssbb_me/128.jpg",
	    "dorphern/128.jpg",
	    "mauriolg/128.jpg",
	    "bruno_mart/128.jpg",
	    "mactopus/128.jpg",
	    "the_winslet/128.jpg",
	    "joemdesign/128.jpg",
	    "Shriiiiimp/128.jpg",
	    "jacobbennett/128.jpg",
	    "nfedoroff/128.jpg",
	    "iamglimy/128.jpg",
	    "allagringaus/128.jpg",
	    "aiiaiiaii/128.jpg",
	    "olaolusoga/128.jpg",
	    "buryaknick/128.jpg",
	    "wim1k/128.jpg",
	    "nicklacke/128.jpg",
	    "a1chapone/128.jpg",
	    "steynviljoen/128.jpg",
	    "strikewan/128.jpg",
	    "ryankirkman/128.jpg",
	    "andrewabogado/128.jpg",
	    "doooon/128.jpg",
	    "jagan123/128.jpg",
	    "ariffsetiawan/128.jpg",
	    "elenadissi/128.jpg",
	    "mwarkentin/128.jpg",
	    "thierrymeier_/128.jpg",
	    "r_garcia/128.jpg",
	    "dmackerman/128.jpg",
	    "borantula/128.jpg",
	    "konus/128.jpg",
	    "spacewood_/128.jpg",
	    "ryuchi311/128.jpg",
	    "evanshajed/128.jpg",
	    "tristanlegros/128.jpg",
	    "shoaib253/128.jpg",
	    "aislinnkelly/128.jpg",
	    "okcoker/128.jpg",
	    "timpetricola/128.jpg",
	    "sunshinedgirl/128.jpg",
	    "chadami/128.jpg",
	    "aleclarsoniv/128.jpg",
	    "nomidesigns/128.jpg",
	    "petebernardo/128.jpg",
	    "scottiedude/128.jpg",
	    "millinet/128.jpg",
	    "imsoper/128.jpg",
	    "imammuht/128.jpg",
	    "benjamin_knight/128.jpg",
	    "nepdud/128.jpg",
	    "joki4/128.jpg",
	    "lanceguyatt/128.jpg",
	    "bboy1895/128.jpg",
	    "amywebbb/128.jpg",
	    "rweve/128.jpg",
	    "haruintesettden/128.jpg",
	    "ricburton/128.jpg",
	    "nelshd/128.jpg",
	    "batsirai/128.jpg",
	    "primozcigler/128.jpg",
	    "jffgrdnr/128.jpg",
	    "8d3k/128.jpg",
	    "geneseleznev/128.jpg",
	    "al_li/128.jpg",
	    "souperphly/128.jpg",
	    "mslarkina/128.jpg",
	    "2fockus/128.jpg",
	    "cdavis565/128.jpg",
	    "xiel/128.jpg",
	    "turkutuuli/128.jpg",
	    "uxward/128.jpg",
	    "lebinoclard/128.jpg",
	    "gauravjassal/128.jpg",
	    "davidmerrique/128.jpg",
	    "mdsisto/128.jpg",
	    "andrewofficer/128.jpg",
	    "kojourin/128.jpg",
	    "dnirmal/128.jpg",
	    "kevka/128.jpg",
	    "mr_shiznit/128.jpg",
	    "aluisio_azevedo/128.jpg",
	    "cloudstudio/128.jpg",
	    "danvierich/128.jpg",
	    "alexivanichkin/128.jpg",
	    "fran_mchamy/128.jpg",
	    "perretmagali/128.jpg",
	    "betraydan/128.jpg",
	    "cadikkara/128.jpg",
	    "matbeedotcom/128.jpg",
	    "jeremyworboys/128.jpg",
	    "bpartridge/128.jpg",
	    "michaelkoper/128.jpg",
	    "silv3rgvn/128.jpg",
	    "alevizio/128.jpg",
	    "johnsmithagency/128.jpg",
	    "lawlbwoy/128.jpg",
	    "vitor376/128.jpg",
	    "desastrozo/128.jpg",
	    "thimo_cz/128.jpg",
	    "jasonmarkjones/128.jpg",
	    "lhausermann/128.jpg",
	    "xravil/128.jpg",
	    "guischmitt/128.jpg",
	    "vigobronx/128.jpg",
	    "panghal0/128.jpg",
	    "miguelkooreman/128.jpg",
	    "surgeonist/128.jpg",
	    "christianoliff/128.jpg",
	    "caspergrl/128.jpg",
	    "iamkarna/128.jpg",
	    "ipavelek/128.jpg",
	    "pierre_nel/128.jpg",
	    "y2graphic/128.jpg",
	    "sterlingrules/128.jpg",
	    "elbuscainfo/128.jpg",
	    "bennyjien/128.jpg",
	    "stushona/128.jpg",
	    "estebanuribe/128.jpg",
	    "embrcecreations/128.jpg",
	    "danillos/128.jpg",
	    "elliotlewis/128.jpg",
	    "charlesrpratt/128.jpg",
	    "vladyn/128.jpg",
	    "emmeffess/128.jpg",
	    "carlosblanco_eu/128.jpg",
	    "leonfedotov/128.jpg",
	    "rangafangs/128.jpg",
	    "chris_frees/128.jpg",
	    "tgormtx/128.jpg",
	    "bryan_topham/128.jpg",
	    "jpscribbles/128.jpg",
	    "mighty55/128.jpg",
	    "carbontwelve/128.jpg",
	    "isaacfifth/128.jpg",
	    "iamjdeleon/128.jpg",
	    "snowwrite/128.jpg",
	    "barputro/128.jpg",
	    "drewbyreese/128.jpg",
	    "sachacorazzi/128.jpg",
	    "bistrianiosip/128.jpg",
	    "magoo04/128.jpg",
	    "pehamondello/128.jpg",
	    "yayteejay/128.jpg",
	    "a_harris88/128.jpg",
	    "algunsanabria/128.jpg",
	    "zforrester/128.jpg",
	    "ovall/128.jpg",
	    "carlosjgsousa/128.jpg",
	    "geobikas/128.jpg",
	    "ah_lice/128.jpg",
	    "looneydoodle/128.jpg",
	    "nerdgr8/128.jpg",
	    "ddggccaa/128.jpg",
	    "zackeeler/128.jpg",
	    "normanbox/128.jpg",
	    "el_fuertisimo/128.jpg",
	    "ismail_biltagi/128.jpg",
	    "juangomezw/128.jpg",
	    "jnmnrd/128.jpg",
	    "patrickcoombe/128.jpg",
	    "ryanjohnson_me/128.jpg",
	    "markolschesky/128.jpg",
	    "jeffgolenski/128.jpg",
	    "kvasnic/128.jpg",
	    "lindseyzilla/128.jpg",
	    "gauchomatt/128.jpg",
	    "afusinatto/128.jpg",
	    "kevinoh/128.jpg",
	    "okansurreel/128.jpg",
	    "adamawesomeface/128.jpg",
	    "emileboudeling/128.jpg",
	    "arishi_/128.jpg",
	    "juanmamartinez/128.jpg",
	    "wikiziner/128.jpg",
	    "danthms/128.jpg",
	    "mkginfo/128.jpg",
	    "terrorpixel/128.jpg",
	    "curiousonaut/128.jpg",
	    "prheemo/128.jpg",
	    "michaelcolenso/128.jpg",
	    "foczzi/128.jpg",
	    "martip07/128.jpg",
	    "thaodang17/128.jpg",
	    "johncafazza/128.jpg",
	    "robinlayfield/128.jpg",
	    "franciscoamk/128.jpg",
	    "abdulhyeuk/128.jpg",
	    "marklamb/128.jpg",
	    "edobene/128.jpg",
	    "andresenfredrik/128.jpg",
	    "mikaeljorhult/128.jpg",
	    "chrisslowik/128.jpg",
	    "vinciarts/128.jpg",
	    "meelford/128.jpg",
	    "elliotnolten/128.jpg",
	    "yehudab/128.jpg",
	    "vijaykarthik/128.jpg",
	    "bfrohs/128.jpg",
	    "josep_martins/128.jpg",
	    "attacks/128.jpg",
	    "sur4dye/128.jpg",
	    "tumski/128.jpg",
	    "instalox/128.jpg",
	    "mangosango/128.jpg",
	    "paulfarino/128.jpg",
	    "kazaky999/128.jpg",
	    "kiwiupover/128.jpg",
	    "nvkznemo/128.jpg",
	    "tom_even/128.jpg",
	    "ratbus/128.jpg",
	    "woodsman001/128.jpg",
	    "joshmedeski/128.jpg",
	    "thewillbeard/128.jpg",
	    "psaikali/128.jpg",
	    "joe_black/128.jpg",
	    "aleinadsays/128.jpg",
	    "marcusgorillius/128.jpg",
	    "hota_v/128.jpg",
	    "jghyllebert/128.jpg",
	    "shinze/128.jpg",
	    "janpalounek/128.jpg",
	    "jeremiespoken/128.jpg",
	    "her_ruu/128.jpg",
	    "dansowter/128.jpg",
	    "felipeapiress/128.jpg",
	    "magugzbrand2d/128.jpg",
	    "posterjob/128.jpg",
	    "nathalie_fs/128.jpg",
	    "bobbytwoshoes/128.jpg",
	    "dreizle/128.jpg",
	    "jeremymouton/128.jpg",
	    "elisabethkjaer/128.jpg",
	    "notbadart/128.jpg",
	    "mohanrohith/128.jpg",
	    "jlsolerdeltoro/128.jpg",
	    "itskawsar/128.jpg",
	    "slowspock/128.jpg",
	    "zvchkelly/128.jpg",
	    "wiljanslofstra/128.jpg",
	    "craighenneberry/128.jpg",
	    "trubeatto/128.jpg",
	    "juaumlol/128.jpg",
	    "samscouto/128.jpg",
	    "BenouarradeM/128.jpg",
	    "gipsy_raf/128.jpg",
	    "netonet_il/128.jpg",
	    "arkokoley/128.jpg",
	    "itsajimithing/128.jpg",
	    "smalonso/128.jpg",
	    "victordeanda/128.jpg",
	    "_dwite_/128.jpg",
	    "richardgarretts/128.jpg",
	    "gregrwilkinson/128.jpg",
	    "anatolinicolae/128.jpg",
	    "lu4sh1i/128.jpg",
	    "stefanotirloni/128.jpg",
	    "ostirbu/128.jpg",
	    "darcystonge/128.jpg",
	    "naitanamoreno/128.jpg",
	    "michaelcomiskey/128.jpg",
	    "adhiardana/128.jpg",
	    "marcomano_/128.jpg",
	    "davidcazalis/128.jpg",
	    "falconerie/128.jpg",
	    "gregkilian/128.jpg",
	    "bcrad/128.jpg",
	    "bolzanmarco/128.jpg",
	    "low_res/128.jpg",
	    "vlajki/128.jpg",
	    "petar_prog/128.jpg",
	    "jonkspr/128.jpg",
	    "akmalfikri/128.jpg",
	    "mfacchinello/128.jpg",
	    "atanism/128.jpg",
	    "harry_sistalam/128.jpg",
	    "murrayswift/128.jpg",
	    "bobwassermann/128.jpg",
	    "gavr1l0/128.jpg",
	    "madshensel/128.jpg",
	    "mr_subtle/128.jpg",
	    "deviljho_/128.jpg",
	    "salimianoff/128.jpg",
	    "joetruesdell/128.jpg",
	    "twittypork/128.jpg",
	    "airskylar/128.jpg",
	    "dnezkumar/128.jpg",
	    "dgajjar/128.jpg",
	    "cherif_b/128.jpg",
	    "salvafc/128.jpg",
	    "louis_currie/128.jpg",
	    "deeenright/128.jpg",
	    "cybind/128.jpg",
	    "eyronn/128.jpg",
	    "vickyshits/128.jpg",
	    "sweetdelisa/128.jpg",
	    "cboller1/128.jpg",
	    "andresdjasso/128.jpg",
	    "melvindidit/128.jpg",
	    "andysolomon/128.jpg",
	    "thaisselenator_/128.jpg",
	    "lvovenok/128.jpg",
	    "giuliusa/128.jpg",
	    "belyaev_rs/128.jpg",
	    "overcloacked/128.jpg",
	    "kamal_chaneman/128.jpg",
	    "incubo82/128.jpg",
	    "hellofeverrrr/128.jpg",
	    "mhaligowski/128.jpg",
	    "sunlandictwin/128.jpg",
	    "bu7921/128.jpg",
	    "andytlaw/128.jpg",
	    "jeremery/128.jpg",
	    "finchjke/128.jpg",
	    "manigm/128.jpg",
	    "umurgdk/128.jpg",
	    "scottfeltham/128.jpg",
	    "ganserene/128.jpg",
	    "mutu_krish/128.jpg",
	    "jodytaggart/128.jpg",
	    "ntfblog/128.jpg",
	    "tanveerrao/128.jpg",
	    "hfalucas/128.jpg",
	    "alxleroydeval/128.jpg",
	    "kucingbelang4/128.jpg",
	    "bargaorobalo/128.jpg",
	    "colgruv/128.jpg",
	    "stalewine/128.jpg",
	    "kylefrost/128.jpg",
	    "baumannzone/128.jpg",
	    "angelcolberg/128.jpg",
	    "sachingawas/128.jpg",
	    "jjshaw14/128.jpg",
	    "ramanathan_pdy/128.jpg",
	    "johndezember/128.jpg",
	    "nilshoenson/128.jpg",
	    "brandonmorreale/128.jpg",
	    "nutzumi/128.jpg",
	    "brandonflatsoda/128.jpg",
	    "sergeyalmone/128.jpg",
	    "klefue/128.jpg",
	    "kirangopal/128.jpg",
	    "baumann_alex/128.jpg",
	    "matthewkay_/128.jpg",
	    "jay_wilburn/128.jpg",
	    "shesgared/128.jpg",
	    "apriendeau/128.jpg",
	    "johnriordan/128.jpg",
	    "wake_gs/128.jpg",
	    "aleksitappura/128.jpg",
	    "emsgulam/128.jpg",
	    "xilantra/128.jpg",
	    "imomenui/128.jpg",
	    "sircalebgrove/128.jpg",
	    "newbrushes/128.jpg",
	    "hsinyo23/128.jpg",
	    "m4rio/128.jpg",
	    "katiemdaly/128.jpg",
	    "s4f1/128.jpg",
	    "ecommerceil/128.jpg",
	    "marlinjayakody/128.jpg",
	    "swooshycueb/128.jpg",
	    "sangdth/128.jpg",
	    "coderdiaz/128.jpg",
	    "bluefx_/128.jpg",
	    "vivekprvr/128.jpg",
	    "sasha_shestakov/128.jpg",
	    "eugeneeweb/128.jpg",
	    "dgclegg/128.jpg",
	    "n1ght_coder/128.jpg",
	    "dixchen/128.jpg",
	    "blakehawksworth/128.jpg",
	    "trueblood_33/128.jpg",
	    "hai_ninh_nguyen/128.jpg",
	    "marclgonzales/128.jpg",
	    "yesmeck/128.jpg",
	    "stephcoue/128.jpg",
	    "doronmalki/128.jpg",
	    "ruehldesign/128.jpg",
	    "anasnakawa/128.jpg",
	    "kijanmaharjan/128.jpg",
	    "wearesavas/128.jpg",
	    "stefvdham/128.jpg",
	    "tweetubhai/128.jpg",
	    "alecarpentier/128.jpg",
	    "fiterik/128.jpg",
	    "antonyryndya/128.jpg",
	    "d00maz/128.jpg",
	    "theonlyzeke/128.jpg",
	    "missaaamy/128.jpg",
	    "carlosm/128.jpg",
	    "manekenthe/128.jpg",
	    "reetajayendra/128.jpg",
	    "jeremyshimko/128.jpg",
	    "justinrgraham/128.jpg",
	    "stefanozoffoli/128.jpg",
	    "overra/128.jpg",
	    "mrebay007/128.jpg",
	    "shvelo96/128.jpg",
	    "pyronite/128.jpg",
	    "thedjpetersen/128.jpg",
	    "rtyukmaev/128.jpg",
	    "_williamguerra/128.jpg",
	    "albertaugustin/128.jpg",
	    "vikashpathak18/128.jpg",
	    "kevinjohndayy/128.jpg",
	    "vj_demien/128.jpg",
	    "colirpixoil/128.jpg",
	    "goddardlewis/128.jpg",
	    "laasli/128.jpg",
	    "jqiuss/128.jpg",
	    "heycamtaylor/128.jpg",
	    "nastya_mane/128.jpg",
	    "mastermindesign/128.jpg",
	    "ccinojasso1/128.jpg",
	    "nyancecom/128.jpg",
	    "sandywoodruff/128.jpg",
	    "bighanddesign/128.jpg",
	    "sbtransparent/128.jpg",
	    "aviddayentonbay/128.jpg",
	    "richwild/128.jpg",
	    "kaysix_dizzy/128.jpg",
	    "tur8le/128.jpg",
	    "seyedhossein1/128.jpg",
	    "privetwagner/128.jpg",
	    "emmandenn/128.jpg",
	    "dev_essentials/128.jpg",
	    "jmfsocial/128.jpg",
	    "_yardenoon/128.jpg",
	    "mateaodviteza/128.jpg",
	    "weavermedia/128.jpg",
	    "mufaddal_mw/128.jpg",
	    "hafeeskhan/128.jpg",
	    "ashernatali/128.jpg",
	    "sulaqo/128.jpg",
	    "eddiechen/128.jpg",
	    "josecarlospsh/128.jpg",
	    "vm_f/128.jpg",
	    "enricocicconi/128.jpg",
	    "danmartin70/128.jpg",
	    "gmourier/128.jpg",
	    "donjain/128.jpg",
	    "mrxloka/128.jpg",
	    "_pedropinho/128.jpg",
	    "eitarafa/128.jpg",
	    "oscarowusu/128.jpg",
	    "ralph_lam/128.jpg",
	    "panchajanyag/128.jpg",
	    "woodydotmx/128.jpg",
	    "jerrybai1907/128.jpg",
	    "marshallchen_/128.jpg",
	    "xamorep/128.jpg",
	    "aio___/128.jpg",
	    "chaabane_wail/128.jpg",
	    "txcx/128.jpg",
	    "akashsharma39/128.jpg",
	    "falling_soul/128.jpg",
	    "sainraja/128.jpg",
	    "mugukamil/128.jpg",
	    "johannesneu/128.jpg",
	    "markwienands/128.jpg",
	    "karthipanraj/128.jpg",
	    "balakayuriy/128.jpg",
	    "alan_zhang_/128.jpg",
	    "layerssss/128.jpg",
	    "kaspernordkvist/128.jpg",
	    "mirfanqureshi/128.jpg",
	    "hanna_smi/128.jpg",
	    "VMilescu/128.jpg",
	    "aeon56/128.jpg",
	    "m_kalibry/128.jpg",
	    "sreejithexp/128.jpg",
	    "dicesales/128.jpg",
	    "dhoot_amit/128.jpg",
	    "smenov/128.jpg",
	    "lonesomelemon/128.jpg",
	    "vladimirdevic/128.jpg",
	    "joelcipriano/128.jpg",
	    "haligaliharun/128.jpg",
	    "buleswapnil/128.jpg",
	    "serefka/128.jpg",
	    "ifarafonow/128.jpg",
	    "vikasvinfotech/128.jpg",
	    "urrutimeoli/128.jpg",
	    "areandacom/128.jpg"
	];

	en.internet.avatar_uri = [];

	for (var i = 0; i < avatarUri.length; i++) {
	  en.internet.avatar_uri.push("https://s3.amazonaws.com/uifaces/faces/twitter/" + avatarUri[i]);
	};

	en.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ],
	  "supplemental": [
	    "abbas",
	    "abduco",
	    "abeo",
	    "abscido",
	    "absconditus",
	    "absens",
	    "absorbeo",
	    "absque",
	    "abstergo",
	    "absum",
	    "abundans",
	    "abutor",
	    "accedo",
	    "accendo",
	    "acceptus",
	    "accipio",
	    "accommodo",
	    "accusator",
	    "acer",
	    "acerbitas",
	    "acervus",
	    "acidus",
	    "acies",
	    "acquiro",
	    "acsi",
	    "adamo",
	    "adaugeo",
	    "addo",
	    "adduco",
	    "ademptio",
	    "adeo",
	    "adeptio",
	    "adfectus",
	    "adfero",
	    "adficio",
	    "adflicto",
	    "adhaero",
	    "adhuc",
	    "adicio",
	    "adimpleo",
	    "adinventitias",
	    "adipiscor",
	    "adiuvo",
	    "administratio",
	    "admiratio",
	    "admitto",
	    "admoneo",
	    "admoveo",
	    "adnuo",
	    "adopto",
	    "adsidue",
	    "adstringo",
	    "adsuesco",
	    "adsum",
	    "adulatio",
	    "adulescens",
	    "adultus",
	    "aduro",
	    "advenio",
	    "adversus",
	    "advoco",
	    "aedificium",
	    "aeger",
	    "aegre",
	    "aegrotatio",
	    "aegrus",
	    "aeneus",
	    "aequitas",
	    "aequus",
	    "aer",
	    "aestas",
	    "aestivus",
	    "aestus",
	    "aetas",
	    "aeternus",
	    "ager",
	    "aggero",
	    "aggredior",
	    "agnitio",
	    "agnosco",
	    "ago",
	    "ait",
	    "aiunt",
	    "alienus",
	    "alii",
	    "alioqui",
	    "aliqua",
	    "alius",
	    "allatus",
	    "alo",
	    "alter",
	    "altus",
	    "alveus",
	    "amaritudo",
	    "ambitus",
	    "ambulo",
	    "amicitia",
	    "amiculum",
	    "amissio",
	    "amita",
	    "amitto",
	    "amo",
	    "amor",
	    "amoveo",
	    "amplexus",
	    "amplitudo",
	    "amplus",
	    "ancilla",
	    "angelus",
	    "angulus",
	    "angustus",
	    "animadverto",
	    "animi",
	    "animus",
	    "annus",
	    "anser",
	    "ante",
	    "antea",
	    "antepono",
	    "antiquus",
	    "aperio",
	    "aperte",
	    "apostolus",
	    "apparatus",
	    "appello",
	    "appono",
	    "appositus",
	    "approbo",
	    "apto",
	    "aptus",
	    "apud",
	    "aqua",
	    "ara",
	    "aranea",
	    "arbitro",
	    "arbor",
	    "arbustum",
	    "arca",
	    "arceo",
	    "arcesso",
	    "arcus",
	    "argentum",
	    "argumentum",
	    "arguo",
	    "arma",
	    "armarium",
	    "armo",
	    "aro",
	    "ars",
	    "articulus",
	    "artificiose",
	    "arto",
	    "arx",
	    "ascisco",
	    "ascit",
	    "asper",
	    "aspicio",
	    "asporto",
	    "assentator",
	    "astrum",
	    "atavus",
	    "ater",
	    "atqui",
	    "atrocitas",
	    "atrox",
	    "attero",
	    "attollo",
	    "attonbitus",
	    "auctor",
	    "auctus",
	    "audacia",
	    "audax",
	    "audentia",
	    "audeo",
	    "audio",
	    "auditor",
	    "aufero",
	    "aureus",
	    "auris",
	    "aurum",
	    "aut",
	    "autem",
	    "autus",
	    "auxilium",
	    "avaritia",
	    "avarus",
	    "aveho",
	    "averto",
	    "avoco",
	    "baiulus",
	    "balbus",
	    "barba",
	    "bardus",
	    "basium",
	    "beatus",
	    "bellicus",
	    "bellum",
	    "bene",
	    "beneficium",
	    "benevolentia",
	    "benigne",
	    "bestia",
	    "bibo",
	    "bis",
	    "blandior",
	    "bonus",
	    "bos",
	    "brevis",
	    "cado",
	    "caecus",
	    "caelestis",
	    "caelum",
	    "calamitas",
	    "calcar",
	    "calco",
	    "calculus",
	    "callide",
	    "campana",
	    "candidus",
	    "canis",
	    "canonicus",
	    "canto",
	    "capillus",
	    "capio",
	    "capitulus",
	    "capto",
	    "caput",
	    "carbo",
	    "carcer",
	    "careo",
	    "caries",
	    "cariosus",
	    "caritas",
	    "carmen",
	    "carpo",
	    "carus",
	    "casso",
	    "caste",
	    "casus",
	    "catena",
	    "caterva",
	    "cattus",
	    "cauda",
	    "causa",
	    "caute",
	    "caveo",
	    "cavus",
	    "cedo",
	    "celebrer",
	    "celer",
	    "celo",
	    "cena",
	    "cenaculum",
	    "ceno",
	    "censura",
	    "centum",
	    "cerno",
	    "cernuus",
	    "certe",
	    "certo",
	    "certus",
	    "cervus",
	    "cetera",
	    "charisma",
	    "chirographum",
	    "cibo",
	    "cibus",
	    "cicuta",
	    "cilicium",
	    "cimentarius",
	    "ciminatio",
	    "cinis",
	    "circumvenio",
	    "cito",
	    "civis",
	    "civitas",
	    "clam",
	    "clamo",
	    "claro",
	    "clarus",
	    "claudeo",
	    "claustrum",
	    "clementia",
	    "clibanus",
	    "coadunatio",
	    "coaegresco",
	    "coepi",
	    "coerceo",
	    "cogito",
	    "cognatus",
	    "cognomen",
	    "cogo",
	    "cohaero",
	    "cohibeo",
	    "cohors",
	    "colligo",
	    "colloco",
	    "collum",
	    "colo",
	    "color",
	    "coma",
	    "combibo",
	    "comburo",
	    "comedo",
	    "comes",
	    "cometes",
	    "comis",
	    "comitatus",
	    "commemoro",
	    "comminor",
	    "commodo",
	    "communis",
	    "comparo",
	    "compello",
	    "complectus",
	    "compono",
	    "comprehendo",
	    "comptus",
	    "conatus",
	    "concedo",
	    "concido",
	    "conculco",
	    "condico",
	    "conduco",
	    "confero",
	    "confido",
	    "conforto",
	    "confugo",
	    "congregatio",
	    "conicio",
	    "coniecto",
	    "conitor",
	    "coniuratio",
	    "conor",
	    "conqueror",
	    "conscendo",
	    "conservo",
	    "considero",
	    "conspergo",
	    "constans",
	    "consuasor",
	    "contabesco",
	    "contego",
	    "contigo",
	    "contra",
	    "conturbo",
	    "conventus",
	    "convoco",
	    "copia",
	    "copiose",
	    "cornu",
	    "corona",
	    "corpus",
	    "correptius",
	    "corrigo",
	    "corroboro",
	    "corrumpo",
	    "coruscus",
	    "cotidie",
	    "crapula",
	    "cras",
	    "crastinus",
	    "creator",
	    "creber",
	    "crebro",
	    "credo",
	    "creo",
	    "creptio",
	    "crepusculum",
	    "cresco",
	    "creta",
	    "cribro",
	    "crinis",
	    "cruciamentum",
	    "crudelis",
	    "cruentus",
	    "crur",
	    "crustulum",
	    "crux",
	    "cubicularis",
	    "cubitum",
	    "cubo",
	    "cui",
	    "cuius",
	    "culpa",
	    "culpo",
	    "cultellus",
	    "cultura",
	    "cum",
	    "cunabula",
	    "cunae",
	    "cunctatio",
	    "cupiditas",
	    "cupio",
	    "cuppedia",
	    "cupressus",
	    "cur",
	    "cura",
	    "curatio",
	    "curia",
	    "curiositas",
	    "curis",
	    "curo",
	    "curriculum",
	    "currus",
	    "cursim",
	    "curso",
	    "cursus",
	    "curto",
	    "curtus",
	    "curvo",
	    "curvus",
	    "custodia",
	    "damnatio",
	    "damno",
	    "dapifer",
	    "debeo",
	    "debilito",
	    "decens",
	    "decerno",
	    "decet",
	    "decimus",
	    "decipio",
	    "decor",
	    "decretum",
	    "decumbo",
	    "dedecor",
	    "dedico",
	    "deduco",
	    "defaeco",
	    "defendo",
	    "defero",
	    "defessus",
	    "defetiscor",
	    "deficio",
	    "defigo",
	    "defleo",
	    "defluo",
	    "defungo",
	    "degenero",
	    "degero",
	    "degusto",
	    "deinde",
	    "delectatio",
	    "delego",
	    "deleo",
	    "delibero",
	    "delicate",
	    "delinquo",
	    "deludo",
	    "demens",
	    "demergo",
	    "demitto",
	    "demo",
	    "demonstro",
	    "demoror",
	    "demulceo",
	    "demum",
	    "denego",
	    "denique",
	    "dens",
	    "denuncio",
	    "denuo",
	    "deorsum",
	    "depereo",
	    "depono",
	    "depopulo",
	    "deporto",
	    "depraedor",
	    "deprecator",
	    "deprimo",
	    "depromo",
	    "depulso",
	    "deputo",
	    "derelinquo",
	    "derideo",
	    "deripio",
	    "desidero",
	    "desino",
	    "desipio",
	    "desolo",
	    "desparatus",
	    "despecto",
	    "despirmatio",
	    "infit",
	    "inflammatio",
	    "paens",
	    "patior",
	    "patria",
	    "patrocinor",
	    "patruus",
	    "pauci",
	    "paulatim",
	    "pauper",
	    "pax",
	    "peccatus",
	    "pecco",
	    "pecto",
	    "pectus",
	    "pecunia",
	    "pecus",
	    "peior",
	    "pel",
	    "ocer",
	    "socius",
	    "sodalitas",
	    "sol",
	    "soleo",
	    "solio",
	    "solitudo",
	    "solium",
	    "sollers",
	    "sollicito",
	    "solum",
	    "solus",
	    "solutio",
	    "solvo",
	    "somniculosus",
	    "somnus",
	    "sonitus",
	    "sono",
	    "sophismata",
	    "sopor",
	    "sordeo",
	    "sortitus",
	    "spargo",
	    "speciosus",
	    "spectaculum",
	    "speculum",
	    "sperno",
	    "spero",
	    "spes",
	    "spiculum",
	    "spiritus",
	    "spoliatio",
	    "sponte",
	    "stabilis",
	    "statim",
	    "statua",
	    "stella",
	    "stillicidium",
	    "stipes",
	    "stips",
	    "sto",
	    "strenuus",
	    "strues",
	    "studio",
	    "stultus",
	    "suadeo",
	    "suasoria",
	    "sub",
	    "subito",
	    "subiungo",
	    "sublime",
	    "subnecto",
	    "subseco",
	    "substantia",
	    "subvenio",
	    "succedo",
	    "succurro",
	    "sufficio",
	    "suffoco",
	    "suffragium",
	    "suggero",
	    "sui",
	    "sulum",
	    "sum",
	    "summa",
	    "summisse",
	    "summopere",
	    "sumo",
	    "sumptus",
	    "supellex",
	    "super",
	    "suppellex",
	    "supplanto",
	    "suppono",
	    "supra",
	    "surculus",
	    "surgo",
	    "sursum",
	    "suscipio",
	    "suspendo",
	    "sustineo",
	    "suus",
	    "synagoga",
	    "tabella",
	    "tabernus",
	    "tabesco",
	    "tabgo",
	    "tabula",
	    "taceo",
	    "tactus",
	    "taedium",
	    "talio",
	    "talis",
	    "talus",
	    "tam",
	    "tamdiu",
	    "tamen",
	    "tametsi",
	    "tamisium",
	    "tamquam",
	    "tandem",
	    "tantillus",
	    "tantum",
	    "tardus",
	    "tego",
	    "temeritas",
	    "temperantia",
	    "templum",
	    "temptatio",
	    "tempus",
	    "tenax",
	    "tendo",
	    "teneo",
	    "tener",
	    "tenuis",
	    "tenus",
	    "tepesco",
	    "tepidus",
	    "ter",
	    "terebro",
	    "teres",
	    "terga",
	    "tergeo",
	    "tergiversatio",
	    "tergo",
	    "tergum",
	    "termes",
	    "terminatio",
	    "tero",
	    "terra",
	    "terreo",
	    "territo",
	    "terror",
	    "tersus",
	    "tertius",
	    "testimonium",
	    "texo",
	    "textilis",
	    "textor",
	    "textus",
	    "thalassinus",
	    "theatrum",
	    "theca",
	    "thema",
	    "theologus",
	    "thermae",
	    "thesaurus",
	    "thesis",
	    "thorax",
	    "thymbra",
	    "thymum",
	    "tibi",
	    "timidus",
	    "timor",
	    "titulus",
	    "tolero",
	    "tollo",
	    "tondeo",
	    "tonsor",
	    "torqueo",
	    "torrens",
	    "tot",
	    "totidem",
	    "toties",
	    "totus",
	    "tracto",
	    "trado",
	    "traho",
	    "trans",
	    "tredecim",
	    "tremo",
	    "trepide",
	    "tres",
	    "tribuo",
	    "tricesimus",
	    "triduana",
	    "triginta",
	    "tripudio",
	    "tristis",
	    "triumphus",
	    "trucido",
	    "truculenter",
	    "tubineus",
	    "tui",
	    "tum",
	    "tumultus",
	    "tunc",
	    "turba",
	    "turbo",
	    "turpe",
	    "turpis",
	    "tutamen",
	    "tutis",
	    "tyrannus",
	    "uberrime",
	    "ubi",
	    "ulciscor",
	    "ullus",
	    "ulterius",
	    "ultio",
	    "ultra",
	    "umbra",
	    "umerus",
	    "umquam",
	    "una",
	    "unde",
	    "undique",
	    "universe",
	    "unus",
	    "urbanus",
	    "urbs",
	    "uredo",
	    "usitas",
	    "usque",
	    "ustilo",
	    "ustulo",
	    "usus",
	    "uter",
	    "uterque",
	    "utilis",
	    "utique",
	    "utor",
	    "utpote",
	    "utrimque",
	    "utroque",
	    "utrum",
	    "uxor",
	    "vaco",
	    "vacuus",
	    "vado",
	    "vae",
	    "valde",
	    "valens",
	    "valeo",
	    "valetudo",
	    "validus",
	    "vallum",
	    "vapulus",
	    "varietas",
	    "varius",
	    "vehemens",
	    "vel",
	    "velociter",
	    "velum",
	    "velut",
	    "venia",
	    "venio",
	    "ventito",
	    "ventosus",
	    "ventus",
	    "venustas",
	    "ver",
	    "verbera",
	    "verbum",
	    "vere",
	    "verecundia",
	    "vereor",
	    "vergo",
	    "veritas",
	    "vero",
	    "versus",
	    "verto",
	    "verumtamen",
	    "verus",
	    "vesco",
	    "vesica",
	    "vesper",
	    "vespillo",
	    "vester",
	    "vestigium",
	    "vestrum",
	    "vetus",
	    "via",
	    "vicinus",
	    "vicissitudo",
	    "victoria",
	    "victus",
	    "videlicet",
	    "video",
	    "viduata",
	    "viduo",
	    "vigilo",
	    "vigor",
	    "vilicus",
	    "vilis",
	    "vilitas",
	    "villa",
	    "vinco",
	    "vinculum",
	    "vindico",
	    "vinitor",
	    "vinum",
	    "vir",
	    "virga",
	    "virgo",
	    "viridis",
	    "viriliter",
	    "virtus",
	    "vis",
	    "viscus",
	    "vita",
	    "vitiosus",
	    "vitium",
	    "vito",
	    "vivo",
	    "vix",
	    "vobis",
	    "vociferor",
	    "voco",
	    "volaticus",
	    "volo",
	    "volubilis",
	    "voluntarius",
	    "volup",
	    "volutabrum",
	    "volva",
	    "vomer",
	    "vomica",
	    "vomito",
	    "vorago",
	    "vorax",
	    "voro",
	    "vos",
	    "votum",
	    "voveo",
	    "vox",
	    "vulariter",
	    "vulgaris",
	    "vulgivagus",
	    "vulgo",
	    "vulgus",
	    "vulnero",
	    "vulnus",
	    "vulpes",
	    "vulticulus",
	    "vultuosus",
	    "xiphias"
	  ]
	};
	en.name = {
	  "first_name": [
	    "Aaliyah",
	    "Aaron",
	    "Abagail",
	    "Abbey",
	    "Abbie",
	    "Abbigail",
	    "Abby",
	    "Abdiel",
	    "Abdul",
	    "Abdullah",
	    "Abe",
	    "Abel",
	    "Abelardo",
	    "Abigail",
	    "Abigale",
	    "Abigayle",
	    "Abner",
	    "Abraham",
	    "Ada",
	    "Adah",
	    "Adalberto",
	    "Adaline",
	    "Adam",
	    "Adan",
	    "Addie",
	    "Addison",
	    "Adela",
	    "Adelbert",
	    "Adele",
	    "Adelia",
	    "Adeline",
	    "Adell",
	    "Adella",
	    "Adelle",
	    "Aditya",
	    "Adolf",
	    "Adolfo",
	    "Adolph",
	    "Adolphus",
	    "Adonis",
	    "Adrain",
	    "Adrian",
	    "Adriana",
	    "Adrianna",
	    "Adriel",
	    "Adrien",
	    "Adrienne",
	    "Afton",
	    "Aglae",
	    "Agnes",
	    "Agustin",
	    "Agustina",
	    "Ahmad",
	    "Ahmed",
	    "Aida",
	    "Aidan",
	    "Aiden",
	    "Aileen",
	    "Aimee",
	    "Aisha",
	    "Aiyana",
	    "Akeem",
	    "Al",
	    "Alaina",
	    "Alan",
	    "Alana",
	    "Alanis",
	    "Alanna",
	    "Alayna",
	    "Alba",
	    "Albert",
	    "Alberta",
	    "Albertha",
	    "Alberto",
	    "Albin",
	    "Albina",
	    "Alda",
	    "Alden",
	    "Alec",
	    "Aleen",
	    "Alejandra",
	    "Alejandrin",
	    "Alek",
	    "Alena",
	    "Alene",
	    "Alessandra",
	    "Alessandro",
	    "Alessia",
	    "Aletha",
	    "Alex",
	    "Alexa",
	    "Alexander",
	    "Alexandra",
	    "Alexandre",
	    "Alexandrea",
	    "Alexandria",
	    "Alexandrine",
	    "Alexandro",
	    "Alexane",
	    "Alexanne",
	    "Alexie",
	    "Alexis",
	    "Alexys",
	    "Alexzander",
	    "Alf",
	    "Alfonso",
	    "Alfonzo",
	    "Alford",
	    "Alfred",
	    "Alfreda",
	    "Alfredo",
	    "Ali",
	    "Alia",
	    "Alice",
	    "Alicia",
	    "Alisa",
	    "Alisha",
	    "Alison",
	    "Alivia",
	    "Aliya",
	    "Aliyah",
	    "Aliza",
	    "Alize",
	    "Allan",
	    "Allen",
	    "Allene",
	    "Allie",
	    "Allison",
	    "Ally",
	    "Alphonso",
	    "Alta",
	    "Althea",
	    "Alva",
	    "Alvah",
	    "Alvena",
	    "Alvera",
	    "Alverta",
	    "Alvina",
	    "Alvis",
	    "Alyce",
	    "Alycia",
	    "Alysa",
	    "Alysha",
	    "Alyson",
	    "Alysson",
	    "Amalia",
	    "Amanda",
	    "Amani",
	    "Amara",
	    "Amari",
	    "Amaya",
	    "Amber",
	    "Ambrose",
	    "Amelia",
	    "Amelie",
	    "Amely",
	    "America",
	    "Americo",
	    "Amie",
	    "Amina",
	    "Amir",
	    "Amira",
	    "Amiya",
	    "Amos",
	    "Amparo",
	    "Amy",
	    "Amya",
	    "Ana",
	    "Anabel",
	    "Anabelle",
	    "Anahi",
	    "Anais",
	    "Anastacio",
	    "Anastasia",
	    "Anderson",
	    "Andre",
	    "Andreane",
	    "Andreanne",
	    "Andres",
	    "Andrew",
	    "Andy",
	    "Angel",
	    "Angela",
	    "Angelica",
	    "Angelina",
	    "Angeline",
	    "Angelita",
	    "Angelo",
	    "Angie",
	    "Angus",
	    "Anibal",
	    "Anika",
	    "Anissa",
	    "Anita",
	    "Aniya",
	    "Aniyah",
	    "Anjali",
	    "Anna",
	    "Annabel",
	    "Annabell",
	    "Annabelle",
	    "Annalise",
	    "Annamae",
	    "Annamarie",
	    "Anne",
	    "Annetta",
	    "Annette",
	    "Annie",
	    "Ansel",
	    "Ansley",
	    "Anthony",
	    "Antoinette",
	    "Antone",
	    "Antonetta",
	    "Antonette",
	    "Antonia",
	    "Antonietta",
	    "Antonina",
	    "Antonio",
	    "Antwan",
	    "Antwon",
	    "Anya",
	    "April",
	    "Ara",
	    "Araceli",
	    "Aracely",
	    "Arch",
	    "Archibald",
	    "Ardella",
	    "Arden",
	    "Ardith",
	    "Arely",
	    "Ari",
	    "Ariane",
	    "Arianna",
	    "Aric",
	    "Ariel",
	    "Arielle",
	    "Arjun",
	    "Arlene",
	    "Arlie",
	    "Arlo",
	    "Armand",
	    "Armando",
	    "Armani",
	    "Arnaldo",
	    "Arne",
	    "Arno",
	    "Arnold",
	    "Arnoldo",
	    "Arnulfo",
	    "Aron",
	    "Art",
	    "Arthur",
	    "Arturo",
	    "Arvel",
	    "Arvid",
	    "Arvilla",
	    "Aryanna",
	    "Asa",
	    "Asha",
	    "Ashlee",
	    "Ashleigh",
	    "Ashley",
	    "Ashly",
	    "Ashlynn",
	    "Ashton",
	    "Ashtyn",
	    "Asia",
	    "Assunta",
	    "Astrid",
	    "Athena",
	    "Aubree",
	    "Aubrey",
	    "Audie",
	    "Audra",
	    "Audreanne",
	    "Audrey",
	    "August",
	    "Augusta",
	    "Augustine",
	    "Augustus",
	    "Aurelia",
	    "Aurelie",
	    "Aurelio",
	    "Aurore",
	    "Austen",
	    "Austin",
	    "Austyn",
	    "Autumn",
	    "Ava",
	    "Avery",
	    "Avis",
	    "Axel",
	    "Ayana",
	    "Ayden",
	    "Ayla",
	    "Aylin",
	    "Baby",
	    "Bailee",
	    "Bailey",
	    "Barbara",
	    "Barney",
	    "Baron",
	    "Barrett",
	    "Barry",
	    "Bart",
	    "Bartholome",
	    "Barton",
	    "Baylee",
	    "Beatrice",
	    "Beau",
	    "Beaulah",
	    "Bell",
	    "Bella",
	    "Belle",
	    "Ben",
	    "Benedict",
	    "Benjamin",
	    "Bennett",
	    "Bennie",
	    "Benny",
	    "Benton",
	    "Berenice",
	    "Bernadette",
	    "Bernadine",
	    "Bernard",
	    "Bernardo",
	    "Berneice",
	    "Bernhard",
	    "Bernice",
	    "Bernie",
	    "Berniece",
	    "Bernita",
	    "Berry",
	    "Bert",
	    "Berta",
	    "Bertha",
	    "Bertram",
	    "Bertrand",
	    "Beryl",
	    "Bessie",
	    "Beth",
	    "Bethany",
	    "Bethel",
	    "Betsy",
	    "Bette",
	    "Bettie",
	    "Betty",
	    "Bettye",
	    "Beulah",
	    "Beverly",
	    "Bianka",
	    "Bill",
	    "Billie",
	    "Billy",
	    "Birdie",
	    "Blair",
	    "Blaise",
	    "Blake",
	    "Blanca",
	    "Blanche",
	    "Blaze",
	    "Bo",
	    "Bobbie",
	    "Bobby",
	    "Bonita",
	    "Bonnie",
	    "Boris",
	    "Boyd",
	    "Brad",
	    "Braden",
	    "Bradford",
	    "Bradley",
	    "Bradly",
	    "Brady",
	    "Braeden",
	    "Brain",
	    "Brandi",
	    "Brando",
	    "Brandon",
	    "Brandt",
	    "Brandy",
	    "Brandyn",
	    "Brannon",
	    "Branson",
	    "Brant",
	    "Braulio",
	    "Braxton",
	    "Brayan",
	    "Breana",
	    "Breanna",
	    "Breanne",
	    "Brenda",
	    "Brendan",
	    "Brenden",
	    "Brendon",
	    "Brenna",
	    "Brennan",
	    "Brennon",
	    "Brent",
	    "Bret",
	    "Brett",
	    "Bria",
	    "Brian",
	    "Briana",
	    "Brianne",
	    "Brice",
	    "Bridget",
	    "Bridgette",
	    "Bridie",
	    "Brielle",
	    "Brigitte",
	    "Brionna",
	    "Brisa",
	    "Britney",
	    "Brittany",
	    "Brock",
	    "Broderick",
	    "Brody",
	    "Brook",
	    "Brooke",
	    "Brooklyn",
	    "Brooks",
	    "Brown",
	    "Bruce",
	    "Bryana",
	    "Bryce",
	    "Brycen",
	    "Bryon",
	    "Buck",
	    "Bud",
	    "Buddy",
	    "Buford",
	    "Bulah",
	    "Burdette",
	    "Burley",
	    "Burnice",
	    "Buster",
	    "Cade",
	    "Caden",
	    "Caesar",
	    "Caitlyn",
	    "Cale",
	    "Caleb",
	    "Caleigh",
	    "Cali",
	    "Calista",
	    "Callie",
	    "Camden",
	    "Cameron",
	    "Camila",
	    "Camilla",
	    "Camille",
	    "Camren",
	    "Camron",
	    "Camryn",
	    "Camylle",
	    "Candace",
	    "Candelario",
	    "Candice",
	    "Candida",
	    "Candido",
	    "Cara",
	    "Carey",
	    "Carissa",
	    "Carlee",
	    "Carleton",
	    "Carley",
	    "Carli",
	    "Carlie",
	    "Carlo",
	    "Carlos",
	    "Carlotta",
	    "Carmel",
	    "Carmela",
	    "Carmella",
	    "Carmelo",
	    "Carmen",
	    "Carmine",
	    "Carol",
	    "Carolanne",
	    "Carole",
	    "Carolina",
	    "Caroline",
	    "Carolyn",
	    "Carolyne",
	    "Carrie",
	    "Carroll",
	    "Carson",
	    "Carter",
	    "Cary",
	    "Casandra",
	    "Casey",
	    "Casimer",
	    "Casimir",
	    "Casper",
	    "Cassandra",
	    "Cassandre",
	    "Cassidy",
	    "Cassie",
	    "Catalina",
	    "Caterina",
	    "Catharine",
	    "Catherine",
	    "Cathrine",
	    "Cathryn",
	    "Cathy",
	    "Cayla",
	    "Ceasar",
	    "Cecelia",
	    "Cecil",
	    "Cecile",
	    "Cecilia",
	    "Cedrick",
	    "Celestine",
	    "Celestino",
	    "Celia",
	    "Celine",
	    "Cesar",
	    "Chad",
	    "Chadd",
	    "Chadrick",
	    "Chaim",
	    "Chance",
	    "Chandler",
	    "Chanel",
	    "Chanelle",
	    "Charity",
	    "Charlene",
	    "Charles",
	    "Charley",
	    "Charlie",
	    "Charlotte",
	    "Chase",
	    "Chasity",
	    "Chauncey",
	    "Chaya",
	    "Chaz",
	    "Chelsea",
	    "Chelsey",
	    "Chelsie",
	    "Chesley",
	    "Chester",
	    "Chet",
	    "Cheyanne",
	    "Cheyenne",
	    "Chloe",
	    "Chris",
	    "Christ",
	    "Christa",
	    "Christelle",
	    "Christian",
	    "Christiana",
	    "Christina",
	    "Christine",
	    "Christop",
	    "Christophe",
	    "Christopher",
	    "Christy",
	    "Chyna",
	    "Ciara",
	    "Cicero",
	    "Cielo",
	    "Cierra",
	    "Cindy",
	    "Citlalli",
	    "Clair",
	    "Claire",
	    "Clara",
	    "Clarabelle",
	    "Clare",
	    "Clarissa",
	    "Clark",
	    "Claud",
	    "Claude",
	    "Claudia",
	    "Claudie",
	    "Claudine",
	    "Clay",
	    "Clemens",
	    "Clement",
	    "Clementina",
	    "Clementine",
	    "Clemmie",
	    "Cleo",
	    "Cleora",
	    "Cleta",
	    "Cletus",
	    "Cleve",
	    "Cleveland",
	    "Clifford",
	    "Clifton",
	    "Clint",
	    "Clinton",
	    "Clotilde",
	    "Clovis",
	    "Cloyd",
	    "Clyde",
	    "Coby",
	    "Cody",
	    "Colby",
	    "Cole",
	    "Coleman",
	    "Colin",
	    "Colleen",
	    "Collin",
	    "Colt",
	    "Colten",
	    "Colton",
	    "Columbus",
	    "Concepcion",
	    "Conner",
	    "Connie",
	    "Connor",
	    "Conor",
	    "Conrad",
	    "Constance",
	    "Constantin",
	    "Consuelo",
	    "Cooper",
	    "Cora",
	    "Coralie",
	    "Corbin",
	    "Cordelia",
	    "Cordell",
	    "Cordia",
	    "Cordie",
	    "Corene",
	    "Corine",
	    "Cornelius",
	    "Cornell",
	    "Corrine",
	    "Cortez",
	    "Cortney",
	    "Cory",
	    "Coty",
	    "Courtney",
	    "Coy",
	    "Craig",
	    "Crawford",
	    "Creola",
	    "Cristal",
	    "Cristian",
	    "Cristina",
	    "Cristobal",
	    "Cristopher",
	    "Cruz",
	    "Crystal",
	    "Crystel",
	    "Cullen",
	    "Curt",
	    "Curtis",
	    "Cydney",
	    "Cynthia",
	    "Cyril",
	    "Cyrus",
	    "Dagmar",
	    "Dahlia",
	    "Daija",
	    "Daisha",
	    "Daisy",
	    "Dakota",
	    "Dale",
	    "Dallas",
	    "Dallin",
	    "Dalton",
	    "Damaris",
	    "Dameon",
	    "Damian",
	    "Damien",
	    "Damion",
	    "Damon",
	    "Dan",
	    "Dana",
	    "Dandre",
	    "Dane",
	    "D'angelo",
	    "Dangelo",
	    "Danial",
	    "Daniela",
	    "Daniella",
	    "Danielle",
	    "Danika",
	    "Dannie",
	    "Danny",
	    "Dante",
	    "Danyka",
	    "Daphne",
	    "Daphnee",
	    "Daphney",
	    "Darby",
	    "Daren",
	    "Darian",
	    "Dariana",
	    "Darien",
	    "Dario",
	    "Darion",
	    "Darius",
	    "Darlene",
	    "Daron",
	    "Darrel",
	    "Darrell",
	    "Darren",
	    "Darrick",
	    "Darrin",
	    "Darrion",
	    "Darron",
	    "Darryl",
	    "Darwin",
	    "Daryl",
	    "Dashawn",
	    "Dasia",
	    "Dave",
	    "David",
	    "Davin",
	    "Davion",
	    "Davon",
	    "Davonte",
	    "Dawn",
	    "Dawson",
	    "Dax",
	    "Dayana",
	    "Dayna",
	    "Dayne",
	    "Dayton",
	    "Dean",
	    "Deangelo",
	    "Deanna",
	    "Deborah",
	    "Declan",
	    "Dedric",
	    "Dedrick",
	    "Dee",
	    "Deion",
	    "Deja",
	    "Dejah",
	    "Dejon",
	    "Dejuan",
	    "Delaney",
	    "Delbert",
	    "Delfina",
	    "Delia",
	    "Delilah",
	    "Dell",
	    "Della",
	    "Delmer",
	    "Delores",
	    "Delpha",
	    "Delphia",
	    "Delphine",
	    "Delta",
	    "Demarco",
	    "Demarcus",
	    "Demario",
	    "Demetris",
	    "Demetrius",
	    "Demond",
	    "Dena",
	    "Denis",
	    "Dennis",
	    "Deon",
	    "Deondre",
	    "Deontae",
	    "Deonte",
	    "Dereck",
	    "Derek",
	    "Derick",
	    "Deron",
	    "Derrick",
	    "Deshaun",
	    "Deshawn",
	    "Desiree",
	    "Desmond",
	    "Dessie",
	    "Destany",
	    "Destin",
	    "Destinee",
	    "Destiney",
	    "Destini",
	    "Destiny",
	    "Devan",
	    "Devante",
	    "Deven",
	    "Devin",
	    "Devon",
	    "Devonte",
	    "Devyn",
	    "Dewayne",
	    "Dewitt",
	    "Dexter",
	    "Diamond",
	    "Diana",
	    "Dianna",
	    "Diego",
	    "Dillan",
	    "Dillon",
	    "Dimitri",
	    "Dina",
	    "Dino",
	    "Dion",
	    "Dixie",
	    "Dock",
	    "Dolly",
	    "Dolores",
	    "Domenic",
	    "Domenica",
	    "Domenick",
	    "Domenico",
	    "Domingo",
	    "Dominic",
	    "Dominique",
	    "Don",
	    "Donald",
	    "Donato",
	    "Donavon",
	    "Donna",
	    "Donnell",
	    "Donnie",
	    "Donny",
	    "Dora",
	    "Dorcas",
	    "Dorian",
	    "Doris",
	    "Dorothea",
	    "Dorothy",
	    "Dorris",
	    "Dortha",
	    "Dorthy",
	    "Doug",
	    "Douglas",
	    "Dovie",
	    "Doyle",
	    "Drake",
	    "Drew",
	    "Duane",
	    "Dudley",
	    "Dulce",
	    "Duncan",
	    "Durward",
	    "Dustin",
	    "Dusty",
	    "Dwight",
	    "Dylan",
	    "Earl",
	    "Earlene",
	    "Earline",
	    "Earnest",
	    "Earnestine",
	    "Easter",
	    "Easton",
	    "Ebba",
	    "Ebony",
	    "Ed",
	    "Eda",
	    "Edd",
	    "Eddie",
	    "Eden",
	    "Edgar",
	    "Edgardo",
	    "Edison",
	    "Edmond",
	    "Edmund",
	    "Edna",
	    "Eduardo",
	    "Edward",
	    "Edwardo",
	    "Edwin",
	    "Edwina",
	    "Edyth",
	    "Edythe",
	    "Effie",
	    "Efrain",
	    "Efren",
	    "Eileen",
	    "Einar",
	    "Eino",
	    "Eladio",
	    "Elaina",
	    "Elbert",
	    "Elda",
	    "Eldon",
	    "Eldora",
	    "Eldred",
	    "Eldridge",
	    "Eleanora",
	    "Eleanore",
	    "Eleazar",
	    "Electa",
	    "Elena",
	    "Elenor",
	    "Elenora",
	    "Eleonore",
	    "Elfrieda",
	    "Eli",
	    "Elian",
	    "Eliane",
	    "Elias",
	    "Eliezer",
	    "Elijah",
	    "Elinor",
	    "Elinore",
	    "Elisa",
	    "Elisabeth",
	    "Elise",
	    "Eliseo",
	    "Elisha",
	    "Elissa",
	    "Eliza",
	    "Elizabeth",
	    "Ella",
	    "Ellen",
	    "Ellie",
	    "Elliot",
	    "Elliott",
	    "Ellis",
	    "Ellsworth",
	    "Elmer",
	    "Elmira",
	    "Elmo",
	    "Elmore",
	    "Elna",
	    "Elnora",
	    "Elody",
	    "Eloisa",
	    "Eloise",
	    "Elouise",
	    "Eloy",
	    "Elroy",
	    "Elsa",
	    "Else",
	    "Elsie",
	    "Elta",
	    "Elton",
	    "Elva",
	    "Elvera",
	    "Elvie",
	    "Elvis",
	    "Elwin",
	    "Elwyn",
	    "Elyse",
	    "Elyssa",
	    "Elza",
	    "Emanuel",
	    "Emelia",
	    "Emelie",
	    "Emely",
	    "Emerald",
	    "Emerson",
	    "Emery",
	    "Emie",
	    "Emil",
	    "Emile",
	    "Emilia",
	    "Emiliano",
	    "Emilie",
	    "Emilio",
	    "Emily",
	    "Emma",
	    "Emmalee",
	    "Emmanuel",
	    "Emmanuelle",
	    "Emmet",
	    "Emmett",
	    "Emmie",
	    "Emmitt",
	    "Emmy",
	    "Emory",
	    "Ena",
	    "Enid",
	    "Enoch",
	    "Enola",
	    "Enos",
	    "Enrico",
	    "Enrique",
	    "Ephraim",
	    "Era",
	    "Eriberto",
	    "Eric",
	    "Erica",
	    "Erich",
	    "Erick",
	    "Ericka",
	    "Erik",
	    "Erika",
	    "Erin",
	    "Erling",
	    "Erna",
	    "Ernest",
	    "Ernestina",
	    "Ernestine",
	    "Ernesto",
	    "Ernie",
	    "Ervin",
	    "Erwin",
	    "Eryn",
	    "Esmeralda",
	    "Esperanza",
	    "Esta",
	    "Esteban",
	    "Estefania",
	    "Estel",
	    "Estell",
	    "Estella",
	    "Estelle",
	    "Estevan",
	    "Esther",
	    "Estrella",
	    "Etha",
	    "Ethan",
	    "Ethel",
	    "Ethelyn",
	    "Ethyl",
	    "Ettie",
	    "Eudora",
	    "Eugene",
	    "Eugenia",
	    "Eula",
	    "Eulah",
	    "Eulalia",
	    "Euna",
	    "Eunice",
	    "Eusebio",
	    "Eva",
	    "Evalyn",
	    "Evan",
	    "Evangeline",
	    "Evans",
	    "Eve",
	    "Eveline",
	    "Evelyn",
	    "Everardo",
	    "Everett",
	    "Everette",
	    "Evert",
	    "Evie",
	    "Ewald",
	    "Ewell",
	    "Ezekiel",
	    "Ezequiel",
	    "Ezra",
	    "Fabian",
	    "Fabiola",
	    "Fae",
	    "Fannie",
	    "Fanny",
	    "Fatima",
	    "Faustino",
	    "Fausto",
	    "Favian",
	    "Fay",
	    "Faye",
	    "Federico",
	    "Felicia",
	    "Felicita",
	    "Felicity",
	    "Felipa",
	    "Felipe",
	    "Felix",
	    "Felton",
	    "Fermin",
	    "Fern",
	    "Fernando",
	    "Ferne",
	    "Fidel",
	    "Filiberto",
	    "Filomena",
	    "Finn",
	    "Fiona",
	    "Flavie",
	    "Flavio",
	    "Fleta",
	    "Fletcher",
	    "Flo",
	    "Florence",
	    "Florencio",
	    "Florian",
	    "Florida",
	    "Florine",
	    "Flossie",
	    "Floy",
	    "Floyd",
	    "Ford",
	    "Forest",
	    "Forrest",
	    "Foster",
	    "Frances",
	    "Francesca",
	    "Francesco",
	    "Francis",
	    "Francisca",
	    "Francisco",
	    "Franco",
	    "Frank",
	    "Frankie",
	    "Franz",
	    "Fred",
	    "Freda",
	    "Freddie",
	    "Freddy",
	    "Frederic",
	    "Frederick",
	    "Frederik",
	    "Frederique",
	    "Fredrick",
	    "Fredy",
	    "Freeda",
	    "Freeman",
	    "Freida",
	    "Frida",
	    "Frieda",
	    "Friedrich",
	    "Fritz",
	    "Furman",
	    "Gabe",
	    "Gabriel",
	    "Gabriella",
	    "Gabrielle",
	    "Gaetano",
	    "Gage",
	    "Gail",
	    "Gardner",
	    "Garett",
	    "Garfield",
	    "Garland",
	    "Garnet",
	    "Garnett",
	    "Garret",
	    "Garrett",
	    "Garrick",
	    "Garrison",
	    "Garry",
	    "Garth",
	    "Gaston",
	    "Gavin",
	    "Gay",
	    "Gayle",
	    "Gaylord",
	    "Gene",
	    "General",
	    "Genesis",
	    "Genevieve",
	    "Gennaro",
	    "Genoveva",
	    "Geo",
	    "Geoffrey",
	    "George",
	    "Georgette",
	    "Georgiana",
	    "Georgianna",
	    "Geovanni",
	    "Geovanny",
	    "Geovany",
	    "Gerald",
	    "Geraldine",
	    "Gerard",
	    "Gerardo",
	    "Gerda",
	    "Gerhard",
	    "Germaine",
	    "German",
	    "Gerry",
	    "Gerson",
	    "Gertrude",
	    "Gia",
	    "Gianni",
	    "Gideon",
	    "Gilbert",
	    "Gilberto",
	    "Gilda",
	    "Giles",
	    "Gillian",
	    "Gina",
	    "Gino",
	    "Giovani",
	    "Giovanna",
	    "Giovanni",
	    "Giovanny",
	    "Gisselle",
	    "Giuseppe",
	    "Gladyce",
	    "Gladys",
	    "Glen",
	    "Glenda",
	    "Glenna",
	    "Glennie",
	    "Gloria",
	    "Godfrey",
	    "Golda",
	    "Golden",
	    "Gonzalo",
	    "Gordon",
	    "Grace",
	    "Gracie",
	    "Graciela",
	    "Grady",
	    "Graham",
	    "Grant",
	    "Granville",
	    "Grayce",
	    "Grayson",
	    "Green",
	    "Greg",
	    "Gregg",
	    "Gregoria",
	    "Gregorio",
	    "Gregory",
	    "Greta",
	    "Gretchen",
	    "Greyson",
	    "Griffin",
	    "Grover",
	    "Guadalupe",
	    "Gudrun",
	    "Guido",
	    "Guillermo",
	    "Guiseppe",
	    "Gunnar",
	    "Gunner",
	    "Gus",
	    "Gussie",
	    "Gust",
	    "Gustave",
	    "Guy",
	    "Gwen",
	    "Gwendolyn",
	    "Hadley",
	    "Hailee",
	    "Hailey",
	    "Hailie",
	    "Hal",
	    "Haleigh",
	    "Haley",
	    "Halie",
	    "Halle",
	    "Hallie",
	    "Hank",
	    "Hanna",
	    "Hannah",
	    "Hans",
	    "Hardy",
	    "Harley",
	    "Harmon",
	    "Harmony",
	    "Harold",
	    "Harrison",
	    "Harry",
	    "Harvey",
	    "Haskell",
	    "Hassan",
	    "Hassie",
	    "Hattie",
	    "Haven",
	    "Hayden",
	    "Haylee",
	    "Hayley",
	    "Haylie",
	    "Hazel",
	    "Hazle",
	    "Heath",
	    "Heather",
	    "Heaven",
	    "Heber",
	    "Hector",
	    "Heidi",
	    "Helen",
	    "Helena",
	    "Helene",
	    "Helga",
	    "Hellen",
	    "Helmer",
	    "Heloise",
	    "Henderson",
	    "Henri",
	    "Henriette",
	    "Henry",
	    "Herbert",
	    "Herman",
	    "Hermann",
	    "Hermina",
	    "Herminia",
	    "Herminio",
	    "Hershel",
	    "Herta",
	    "Hertha",
	    "Hester",
	    "Hettie",
	    "Hilario",
	    "Hilbert",
	    "Hilda",
	    "Hildegard",
	    "Hillard",
	    "Hillary",
	    "Hilma",
	    "Hilton",
	    "Hipolito",
	    "Hiram",
	    "Hobart",
	    "Holden",
	    "Hollie",
	    "Hollis",
	    "Holly",
	    "Hope",
	    "Horace",
	    "Horacio",
	    "Hortense",
	    "Hosea",
	    "Houston",
	    "Howard",
	    "Howell",
	    "Hoyt",
	    "Hubert",
	    "Hudson",
	    "Hugh",
	    "Hulda",
	    "Humberto",
	    "Hunter",
	    "Hyman",
	    "Ian",
	    "Ibrahim",
	    "Icie",
	    "Ida",
	    "Idell",
	    "Idella",
	    "Ignacio",
	    "Ignatius",
	    "Ike",
	    "Ila",
	    "Ilene",
	    "Iliana",
	    "Ima",
	    "Imani",
	    "Imelda",
	    "Immanuel",
	    "Imogene",
	    "Ines",
	    "Irma",
	    "Irving",
	    "Irwin",
	    "Isaac",
	    "Isabel",
	    "Isabell",
	    "Isabella",
	    "Isabelle",
	    "Isac",
	    "Isadore",
	    "Isai",
	    "Isaiah",
	    "Isaias",
	    "Isidro",
	    "Ismael",
	    "Isobel",
	    "Isom",
	    "Israel",
	    "Issac",
	    "Itzel",
	    "Iva",
	    "Ivah",
	    "Ivory",
	    "Ivy",
	    "Izabella",
	    "Izaiah",
	    "Jabari",
	    "Jace",
	    "Jacey",
	    "Jacinthe",
	    "Jacinto",
	    "Jack",
	    "Jackeline",
	    "Jackie",
	    "Jacklyn",
	    "Jackson",
	    "Jacky",
	    "Jaclyn",
	    "Jacquelyn",
	    "Jacques",
	    "Jacynthe",
	    "Jada",
	    "Jade",
	    "Jaden",
	    "Jadon",
	    "Jadyn",
	    "Jaeden",
	    "Jaida",
	    "Jaiden",
	    "Jailyn",
	    "Jaime",
	    "Jairo",
	    "Jakayla",
	    "Jake",
	    "Jakob",
	    "Jaleel",
	    "Jalen",
	    "Jalon",
	    "Jalyn",
	    "Jamaal",
	    "Jamal",
	    "Jamar",
	    "Jamarcus",
	    "Jamel",
	    "Jameson",
	    "Jamey",
	    "Jamie",
	    "Jamil",
	    "Jamir",
	    "Jamison",
	    "Jammie",
	    "Jan",
	    "Jana",
	    "Janae",
	    "Jane",
	    "Janelle",
	    "Janessa",
	    "Janet",
	    "Janice",
	    "Janick",
	    "Janie",
	    "Janis",
	    "Janiya",
	    "Jannie",
	    "Jany",
	    "Jaquan",
	    "Jaquelin",
	    "Jaqueline",
	    "Jared",
	    "Jaren",
	    "Jarod",
	    "Jaron",
	    "Jarred",
	    "Jarrell",
	    "Jarret",
	    "Jarrett",
	    "Jarrod",
	    "Jarvis",
	    "Jasen",
	    "Jasmin",
	    "Jason",
	    "Jasper",
	    "Jaunita",
	    "Javier",
	    "Javon",
	    "Javonte",
	    "Jay",
	    "Jayce",
	    "Jaycee",
	    "Jayda",
	    "Jayde",
	    "Jayden",
	    "Jaydon",
	    "Jaylan",
	    "Jaylen",
	    "Jaylin",
	    "Jaylon",
	    "Jayme",
	    "Jayne",
	    "Jayson",
	    "Jazlyn",
	    "Jazmin",
	    "Jazmyn",
	    "Jazmyne",
	    "Jean",
	    "Jeanette",
	    "Jeanie",
	    "Jeanne",
	    "Jed",
	    "Jedediah",
	    "Jedidiah",
	    "Jeff",
	    "Jefferey",
	    "Jeffery",
	    "Jeffrey",
	    "Jeffry",
	    "Jena",
	    "Jenifer",
	    "Jennie",
	    "Jennifer",
	    "Jennings",
	    "Jennyfer",
	    "Jensen",
	    "Jerad",
	    "Jerald",
	    "Jeramie",
	    "Jeramy",
	    "Jerel",
	    "Jeremie",
	    "Jeremy",
	    "Jermain",
	    "Jermaine",
	    "Jermey",
	    "Jerod",
	    "Jerome",
	    "Jeromy",
	    "Jerrell",
	    "Jerrod",
	    "Jerrold",
	    "Jerry",
	    "Jess",
	    "Jesse",
	    "Jessica",
	    "Jessie",
	    "Jessika",
	    "Jessy",
	    "Jessyca",
	    "Jesus",
	    "Jett",
	    "Jettie",
	    "Jevon",
	    "Jewel",
	    "Jewell",
	    "Jillian",
	    "Jimmie",
	    "Jimmy",
	    "Jo",
	    "Joan",
	    "Joana",
	    "Joanie",
	    "Joanne",
	    "Joannie",
	    "Joanny",
	    "Joany",
	    "Joaquin",
	    "Jocelyn",
	    "Jodie",
	    "Jody",
	    "Joe",
	    "Joel",
	    "Joelle",
	    "Joesph",
	    "Joey",
	    "Johan",
	    "Johann",
	    "Johanna",
	    "Johathan",
	    "John",
	    "Johnathan",
	    "Johnathon",
	    "Johnnie",
	    "Johnny",
	    "Johnpaul",
	    "Johnson",
	    "Jolie",
	    "Jon",
	    "Jonas",
	    "Jonatan",
	    "Jonathan",
	    "Jonathon",
	    "Jordan",
	    "Jordane",
	    "Jordi",
	    "Jordon",
	    "Jordy",
	    "Jordyn",
	    "Jorge",
	    "Jose",
	    "Josefa",
	    "Josefina",
	    "Joseph",
	    "Josephine",
	    "Josh",
	    "Joshua",
	    "Joshuah",
	    "Josiah",
	    "Josiane",
	    "Josianne",
	    "Josie",
	    "Josue",
	    "Jovan",
	    "Jovani",
	    "Jovanny",
	    "Jovany",
	    "Joy",
	    "Joyce",
	    "Juana",
	    "Juanita",
	    "Judah",
	    "Judd",
	    "Jude",
	    "Judge",
	    "Judson",
	    "Judy",
	    "Jules",
	    "Julia",
	    "Julian",
	    "Juliana",
	    "Julianne",
	    "Julie",
	    "Julien",
	    "Juliet",
	    "Julio",
	    "Julius",
	    "June",
	    "Junior",
	    "Junius",
	    "Justen",
	    "Justice",
	    "Justina",
	    "Justine",
	    "Juston",
	    "Justus",
	    "Justyn",
	    "Juvenal",
	    "Juwan",
	    "Kacey",
	    "Kaci",
	    "Kacie",
	    "Kade",
	    "Kaden",
	    "Kadin",
	    "Kaela",
	    "Kaelyn",
	    "Kaia",
	    "Kailee",
	    "Kailey",
	    "Kailyn",
	    "Kaitlin",
	    "Kaitlyn",
	    "Kale",
	    "Kaleb",
	    "Kaleigh",
	    "Kaley",
	    "Kali",
	    "Kallie",
	    "Kameron",
	    "Kamille",
	    "Kamren",
	    "Kamron",
	    "Kamryn",
	    "Kane",
	    "Kara",
	    "Kareem",
	    "Karelle",
	    "Karen",
	    "Kari",
	    "Kariane",
	    "Karianne",
	    "Karina",
	    "Karine",
	    "Karl",
	    "Karlee",
	    "Karley",
	    "Karli",
	    "Karlie",
	    "Karolann",
	    "Karson",
	    "Kasandra",
	    "Kasey",
	    "Kassandra",
	    "Katarina",
	    "Katelin",
	    "Katelyn",
	    "Katelynn",
	    "Katharina",
	    "Katherine",
	    "Katheryn",
	    "Kathleen",
	    "Kathlyn",
	    "Kathryn",
	    "Kathryne",
	    "Katlyn",
	    "Katlynn",
	    "Katrina",
	    "Katrine",
	    "Kattie",
	    "Kavon",
	    "Kay",
	    "Kaya",
	    "Kaycee",
	    "Kayden",
	    "Kayla",
	    "Kaylah",
	    "Kaylee",
	    "Kayleigh",
	    "Kayley",
	    "Kayli",
	    "Kaylie",
	    "Kaylin",
	    "Keagan",
	    "Keanu",
	    "Keara",
	    "Keaton",
	    "Keegan",
	    "Keeley",
	    "Keely",
	    "Keenan",
	    "Keira",
	    "Keith",
	    "Kellen",
	    "Kelley",
	    "Kelli",
	    "Kellie",
	    "Kelly",
	    "Kelsi",
	    "Kelsie",
	    "Kelton",
	    "Kelvin",
	    "Ken",
	    "Kendall",
	    "Kendra",
	    "Kendrick",
	    "Kenna",
	    "Kennedi",
	    "Kennedy",
	    "Kenneth",
	    "Kennith",
	    "Kenny",
	    "Kenton",
	    "Kenya",
	    "Kenyatta",
	    "Kenyon",
	    "Keon",
	    "Keshaun",
	    "Keshawn",
	    "Keven",
	    "Kevin",
	    "Kevon",
	    "Keyon",
	    "Keyshawn",
	    "Khalid",
	    "Khalil",
	    "Kian",
	    "Kiana",
	    "Kianna",
	    "Kiara",
	    "Kiarra",
	    "Kiel",
	    "Kiera",
	    "Kieran",
	    "Kiley",
	    "Kim",
	    "Kimberly",
	    "King",
	    "Kip",
	    "Kira",
	    "Kirk",
	    "Kirsten",
	    "Kirstin",
	    "Kitty",
	    "Kobe",
	    "Koby",
	    "Kody",
	    "Kolby",
	    "Kole",
	    "Korbin",
	    "Korey",
	    "Kory",
	    "Kraig",
	    "Kris",
	    "Krista",
	    "Kristian",
	    "Kristin",
	    "Kristina",
	    "Kristofer",
	    "Kristoffer",
	    "Kristopher",
	    "Kristy",
	    "Krystal",
	    "Krystel",
	    "Krystina",
	    "Kurt",
	    "Kurtis",
	    "Kyla",
	    "Kyle",
	    "Kylee",
	    "Kyleigh",
	    "Kyler",
	    "Kylie",
	    "Kyra",
	    "Lacey",
	    "Lacy",
	    "Ladarius",
	    "Lafayette",
	    "Laila",
	    "Laisha",
	    "Lamar",
	    "Lambert",
	    "Lamont",
	    "Lance",
	    "Landen",
	    "Lane",
	    "Laney",
	    "Larissa",
	    "Laron",
	    "Larry",
	    "Larue",
	    "Laura",
	    "Laurel",
	    "Lauren",
	    "Laurence",
	    "Lauretta",
	    "Lauriane",
	    "Laurianne",
	    "Laurie",
	    "Laurine",
	    "Laury",
	    "Lauryn",
	    "Lavada",
	    "Lavern",
	    "Laverna",
	    "Laverne",
	    "Lavina",
	    "Lavinia",
	    "Lavon",
	    "Lavonne",
	    "Lawrence",
	    "Lawson",
	    "Layla",
	    "Layne",
	    "Lazaro",
	    "Lea",
	    "Leann",
	    "Leanna",
	    "Leanne",
	    "Leatha",
	    "Leda",
	    "Lee",
	    "Leif",
	    "Leila",
	    "Leilani",
	    "Lela",
	    "Lelah",
	    "Leland",
	    "Lelia",
	    "Lempi",
	    "Lemuel",
	    "Lenna",
	    "Lennie",
	    "Lenny",
	    "Lenora",
	    "Lenore",
	    "Leo",
	    "Leola",
	    "Leon",
	    "Leonard",
	    "Leonardo",
	    "Leone",
	    "Leonel",
	    "Leonie",
	    "Leonor",
	    "Leonora",
	    "Leopold",
	    "Leopoldo",
	    "Leora",
	    "Lera",
	    "Lesley",
	    "Leslie",
	    "Lesly",
	    "Lessie",
	    "Lester",
	    "Leta",
	    "Letha",
	    "Letitia",
	    "Levi",
	    "Lew",
	    "Lewis",
	    "Lexi",
	    "Lexie",
	    "Lexus",
	    "Lia",
	    "Liam",
	    "Liana",
	    "Libbie",
	    "Libby",
	    "Lila",
	    "Lilian",
	    "Liliana",
	    "Liliane",
	    "Lilla",
	    "Lillian",
	    "Lilliana",
	    "Lillie",
	    "Lilly",
	    "Lily",
	    "Lilyan",
	    "Lina",
	    "Lincoln",
	    "Linda",
	    "Lindsay",
	    "Lindsey",
	    "Linnea",
	    "Linnie",
	    "Linwood",
	    "Lionel",
	    "Lisa",
	    "Lisandro",
	    "Lisette",
	    "Litzy",
	    "Liza",
	    "Lizeth",
	    "Lizzie",
	    "Llewellyn",
	    "Lloyd",
	    "Logan",
	    "Lois",
	    "Lola",
	    "Lolita",
	    "Loma",
	    "Lon",
	    "London",
	    "Lonie",
	    "Lonnie",
	    "Lonny",
	    "Lonzo",
	    "Lora",
	    "Loraine",
	    "Loren",
	    "Lorena",
	    "Lorenz",
	    "Lorenza",
	    "Lorenzo",
	    "Lori",
	    "Lorine",
	    "Lorna",
	    "Lottie",
	    "Lou",
	    "Louie",
	    "Louisa",
	    "Lourdes",
	    "Louvenia",
	    "Lowell",
	    "Loy",
	    "Loyal",
	    "Loyce",
	    "Lucas",
	    "Luciano",
	    "Lucie",
	    "Lucienne",
	    "Lucile",
	    "Lucinda",
	    "Lucio",
	    "Lucious",
	    "Lucius",
	    "Lucy",
	    "Ludie",
	    "Ludwig",
	    "Lue",
	    "Luella",
	    "Luigi",
	    "Luis",
	    "Luisa",
	    "Lukas",
	    "Lula",
	    "Lulu",
	    "Luna",
	    "Lupe",
	    "Lura",
	    "Lurline",
	    "Luther",
	    "Luz",
	    "Lyda",
	    "Lydia",
	    "Lyla",
	    "Lynn",
	    "Lyric",
	    "Lysanne",
	    "Mabel",
	    "Mabelle",
	    "Mable",
	    "Mac",
	    "Macey",
	    "Maci",
	    "Macie",
	    "Mack",
	    "Mackenzie",
	    "Macy",
	    "Madaline",
	    "Madalyn",
	    "Maddison",
	    "Madeline",
	    "Madelyn",
	    "Madelynn",
	    "Madge",
	    "Madie",
	    "Madilyn",
	    "Madisen",
	    "Madison",
	    "Madisyn",
	    "Madonna",
	    "Madyson",
	    "Mae",
	    "Maegan",
	    "Maeve",
	    "Mafalda",
	    "Magali",
	    "Magdalen",
	    "Magdalena",
	    "Maggie",
	    "Magnolia",
	    "Magnus",
	    "Maia",
	    "Maida",
	    "Maiya",
	    "Major",
	    "Makayla",
	    "Makenna",
	    "Makenzie",
	    "Malachi",
	    "Malcolm",
	    "Malika",
	    "Malinda",
	    "Mallie",
	    "Mallory",
	    "Malvina",
	    "Mandy",
	    "Manley",
	    "Manuel",
	    "Manuela",
	    "Mara",
	    "Marc",
	    "Marcel",
	    "Marcelina",
	    "Marcelino",
	    "Marcella",
	    "Marcelle",
	    "Marcellus",
	    "Marcelo",
	    "Marcia",
	    "Marco",
	    "Marcos",
	    "Marcus",
	    "Margaret",
	    "Margarete",
	    "Margarett",
	    "Margaretta",
	    "Margarette",
	    "Margarita",
	    "Marge",
	    "Margie",
	    "Margot",
	    "Margret",
	    "Marguerite",
	    "Maria",
	    "Mariah",
	    "Mariam",
	    "Marian",
	    "Mariana",
	    "Mariane",
	    "Marianna",
	    "Marianne",
	    "Mariano",
	    "Maribel",
	    "Marie",
	    "Mariela",
	    "Marielle",
	    "Marietta",
	    "Marilie",
	    "Marilou",
	    "Marilyne",
	    "Marina",
	    "Mario",
	    "Marion",
	    "Marisa",
	    "Marisol",
	    "Maritza",
	    "Marjolaine",
	    "Marjorie",
	    "Marjory",
	    "Mark",
	    "Markus",
	    "Marlee",
	    "Marlen",
	    "Marlene",
	    "Marley",
	    "Marlin",
	    "Marlon",
	    "Marques",
	    "Marquis",
	    "Marquise",
	    "Marshall",
	    "Marta",
	    "Martin",
	    "Martina",
	    "Martine",
	    "Marty",
	    "Marvin",
	    "Mary",
	    "Maryam",
	    "Maryjane",
	    "Maryse",
	    "Mason",
	    "Mateo",
	    "Mathew",
	    "Mathias",
	    "Mathilde",
	    "Matilda",
	    "Matilde",
	    "Matt",
	    "Matteo",
	    "Mattie",
	    "Maud",
	    "Maude",
	    "Maudie",
	    "Maureen",
	    "Maurice",
	    "Mauricio",
	    "Maurine",
	    "Maverick",
	    "Mavis",
	    "Max",
	    "Maxie",
	    "Maxime",
	    "Maximilian",
	    "Maximillia",
	    "Maximillian",
	    "Maximo",
	    "Maximus",
	    "Maxine",
	    "Maxwell",
	    "May",
	    "Maya",
	    "Maybell",
	    "Maybelle",
	    "Maye",
	    "Maymie",
	    "Maynard",
	    "Mayra",
	    "Mazie",
	    "Mckayla",
	    "Mckenna",
	    "Mckenzie",
	    "Meagan",
	    "Meaghan",
	    "Meda",
	    "Megane",
	    "Meggie",
	    "Meghan",
	    "Mekhi",
	    "Melany",
	    "Melba",
	    "Melisa",
	    "Melissa",
	    "Mellie",
	    "Melody",
	    "Melvin",
	    "Melvina",
	    "Melyna",
	    "Melyssa",
	    "Mercedes",
	    "Meredith",
	    "Merl",
	    "Merle",
	    "Merlin",
	    "Merritt",
	    "Mertie",
	    "Mervin",
	    "Meta",
	    "Mia",
	    "Micaela",
	    "Micah",
	    "Michael",
	    "Michaela",
	    "Michale",
	    "Micheal",
	    "Michel",
	    "Michele",
	    "Michelle",
	    "Miguel",
	    "Mikayla",
	    "Mike",
	    "Mikel",
	    "Milan",
	    "Miles",
	    "Milford",
	    "Miller",
	    "Millie",
	    "Milo",
	    "Milton",
	    "Mina",
	    "Minerva",
	    "Minnie",
	    "Miracle",
	    "Mireille",
	    "Mireya",
	    "Misael",
	    "Missouri",
	    "Misty",
	    "Mitchel",
	    "Mitchell",
	    "Mittie",
	    "Modesta",
	    "Modesto",
	    "Mohamed",
	    "Mohammad",
	    "Mohammed",
	    "Moises",
	    "Mollie",
	    "Molly",
	    "Mona",
	    "Monica",
	    "Monique",
	    "Monroe",
	    "Monserrat",
	    "Monserrate",
	    "Montana",
	    "Monte",
	    "Monty",
	    "Morgan",
	    "Moriah",
	    "Morris",
	    "Mortimer",
	    "Morton",
	    "Mose",
	    "Moses",
	    "Moshe",
	    "Mossie",
	    "Mozell",
	    "Mozelle",
	    "Muhammad",
	    "Muriel",
	    "Murl",
	    "Murphy",
	    "Murray",
	    "Mustafa",
	    "Mya",
	    "Myah",
	    "Mylene",
	    "Myles",
	    "Myra",
	    "Myriam",
	    "Myrl",
	    "Myrna",
	    "Myron",
	    "Myrtice",
	    "Myrtie",
	    "Myrtis",
	    "Myrtle",
	    "Nadia",
	    "Nakia",
	    "Name",
	    "Nannie",
	    "Naomi",
	    "Naomie",
	    "Napoleon",
	    "Narciso",
	    "Nash",
	    "Nasir",
	    "Nat",
	    "Natalia",
	    "Natalie",
	    "Natasha",
	    "Nathan",
	    "Nathanael",
	    "Nathanial",
	    "Nathaniel",
	    "Nathen",
	    "Nayeli",
	    "Neal",
	    "Ned",
	    "Nedra",
	    "Neha",
	    "Neil",
	    "Nelda",
	    "Nella",
	    "Nelle",
	    "Nellie",
	    "Nels",
	    "Nelson",
	    "Neoma",
	    "Nestor",
	    "Nettie",
	    "Neva",
	    "Newell",
	    "Newton",
	    "Nia",
	    "Nicholas",
	    "Nicholaus",
	    "Nichole",
	    "Nick",
	    "Nicklaus",
	    "Nickolas",
	    "Nico",
	    "Nicola",
	    "Nicolas",
	    "Nicole",
	    "Nicolette",
	    "Nigel",
	    "Nikita",
	    "Nikki",
	    "Nikko",
	    "Niko",
	    "Nikolas",
	    "Nils",
	    "Nina",
	    "Noah",
	    "Noble",
	    "Noe",
	    "Noel",
	    "Noelia",
	    "Noemi",
	    "Noemie",
	    "Noemy",
	    "Nola",
	    "Nolan",
	    "Nona",
	    "Nora",
	    "Norbert",
	    "Norberto",
	    "Norene",
	    "Norma",
	    "Norris",
	    "Norval",
	    "Norwood",
	    "Nova",
	    "Novella",
	    "Nya",
	    "Nyah",
	    "Nyasia",
	    "Obie",
	    "Oceane",
	    "Ocie",
	    "Octavia",
	    "Oda",
	    "Odell",
	    "Odessa",
	    "Odie",
	    "Ofelia",
	    "Okey",
	    "Ola",
	    "Olaf",
	    "Ole",
	    "Olen",
	    "Oleta",
	    "Olga",
	    "Olin",
	    "Oliver",
	    "Ollie",
	    "Oma",
	    "Omari",
	    "Omer",
	    "Ona",
	    "Onie",
	    "Opal",
	    "Ophelia",
	    "Ora",
	    "Oral",
	    "Oran",
	    "Oren",
	    "Orie",
	    "Orin",
	    "Orion",
	    "Orland",
	    "Orlando",
	    "Orlo",
	    "Orpha",
	    "Orrin",
	    "Orval",
	    "Orville",
	    "Osbaldo",
	    "Osborne",
	    "Oscar",
	    "Osvaldo",
	    "Oswald",
	    "Oswaldo",
	    "Otha",
	    "Otho",
	    "Otilia",
	    "Otis",
	    "Ottilie",
	    "Ottis",
	    "Otto",
	    "Ova",
	    "Owen",
	    "Ozella",
	    "Pablo",
	    "Paige",
	    "Palma",
	    "Pamela",
	    "Pansy",
	    "Paolo",
	    "Paris",
	    "Parker",
	    "Pascale",
	    "Pasquale",
	    "Pat",
	    "Patience",
	    "Patricia",
	    "Patrick",
	    "Patsy",
	    "Pattie",
	    "Paul",
	    "Paula",
	    "Pauline",
	    "Paxton",
	    "Payton",
	    "Pearl",
	    "Pearlie",
	    "Pearline",
	    "Pedro",
	    "Peggie",
	    "Penelope",
	    "Percival",
	    "Percy",
	    "Perry",
	    "Pete",
	    "Peter",
	    "Petra",
	    "Peyton",
	    "Philip",
	    "Phoebe",
	    "Phyllis",
	    "Pierce",
	    "Pierre",
	    "Pietro",
	    "Pink",
	    "Pinkie",
	    "Piper",
	    "Polly",
	    "Porter",
	    "Precious",
	    "Presley",
	    "Preston",
	    "Price",
	    "Prince",
	    "Princess",
	    "Priscilla",
	    "Providenci",
	    "Prudence",
	    "Queen",
	    "Queenie",
	    "Quentin",
	    "Quincy",
	    "Quinn",
	    "Quinten",
	    "Quinton",
	    "Rachael",
	    "Rachel",
	    "Rachelle",
	    "Rae",
	    "Raegan",
	    "Rafael",
	    "Rafaela",
	    "Raheem",
	    "Rahsaan",
	    "Rahul",
	    "Raina",
	    "Raleigh",
	    "Ralph",
	    "Ramiro",
	    "Ramon",
	    "Ramona",
	    "Randal",
	    "Randall",
	    "Randi",
	    "Randy",
	    "Ransom",
	    "Raoul",
	    "Raphael",
	    "Raphaelle",
	    "Raquel",
	    "Rashad",
	    "Rashawn",
	    "Rasheed",
	    "Raul",
	    "Raven",
	    "Ray",
	    "Raymond",
	    "Raymundo",
	    "Reagan",
	    "Reanna",
	    "Reba",
	    "Rebeca",
	    "Rebecca",
	    "Rebeka",
	    "Rebekah",
	    "Reece",
	    "Reed",
	    "Reese",
	    "Regan",
	    "Reggie",
	    "Reginald",
	    "Reid",
	    "Reilly",
	    "Reina",
	    "Reinhold",
	    "Remington",
	    "Rene",
	    "Renee",
	    "Ressie",
	    "Reta",
	    "Retha",
	    "Retta",
	    "Reuben",
	    "Reva",
	    "Rex",
	    "Rey",
	    "Reyes",
	    "Reymundo",
	    "Reyna",
	    "Reynold",
	    "Rhea",
	    "Rhett",
	    "Rhianna",
	    "Rhiannon",
	    "Rhoda",
	    "Ricardo",
	    "Richard",
	    "Richie",
	    "Richmond",
	    "Rick",
	    "Rickey",
	    "Rickie",
	    "Ricky",
	    "Rico",
	    "Rigoberto",
	    "Riley",
	    "Rita",
	    "River",
	    "Robb",
	    "Robbie",
	    "Robert",
	    "Roberta",
	    "Roberto",
	    "Robin",
	    "Robyn",
	    "Rocio",
	    "Rocky",
	    "Rod",
	    "Roderick",
	    "Rodger",
	    "Rodolfo",
	    "Rodrick",
	    "Rodrigo",
	    "Roel",
	    "Rogelio",
	    "Roger",
	    "Rogers",
	    "Rolando",
	    "Rollin",
	    "Roma",
	    "Romaine",
	    "Roman",
	    "Ron",
	    "Ronaldo",
	    "Ronny",
	    "Roosevelt",
	    "Rory",
	    "Rosa",
	    "Rosalee",
	    "Rosalia",
	    "Rosalind",
	    "Rosalinda",
	    "Rosalyn",
	    "Rosamond",
	    "Rosanna",
	    "Rosario",
	    "Roscoe",
	    "Rose",
	    "Rosella",
	    "Roselyn",
	    "Rosemarie",
	    "Rosemary",
	    "Rosendo",
	    "Rosetta",
	    "Rosie",
	    "Rosina",
	    "Roslyn",
	    "Ross",
	    "Rossie",
	    "Rowan",
	    "Rowena",
	    "Rowland",
	    "Roxane",
	    "Roxanne",
	    "Roy",
	    "Royal",
	    "Royce",
	    "Rozella",
	    "Ruben",
	    "Rubie",
	    "Ruby",
	    "Rubye",
	    "Rudolph",
	    "Rudy",
	    "Rupert",
	    "Russ",
	    "Russel",
	    "Russell",
	    "Rusty",
	    "Ruth",
	    "Ruthe",
	    "Ruthie",
	    "Ryan",
	    "Ryann",
	    "Ryder",
	    "Rylan",
	    "Rylee",
	    "Ryleigh",
	    "Ryley",
	    "Sabina",
	    "Sabrina",
	    "Sabryna",
	    "Sadie",
	    "Sadye",
	    "Sage",
	    "Saige",
	    "Sallie",
	    "Sally",
	    "Salma",
	    "Salvador",
	    "Salvatore",
	    "Sam",
	    "Samanta",
	    "Samantha",
	    "Samara",
	    "Samir",
	    "Sammie",
	    "Sammy",
	    "Samson",
	    "Sandra",
	    "Sandrine",
	    "Sandy",
	    "Sanford",
	    "Santa",
	    "Santiago",
	    "Santina",
	    "Santino",
	    "Santos",
	    "Sarah",
	    "Sarai",
	    "Sarina",
	    "Sasha",
	    "Saul",
	    "Savanah",
	    "Savanna",
	    "Savannah",
	    "Savion",
	    "Scarlett",
	    "Schuyler",
	    "Scot",
	    "Scottie",
	    "Scotty",
	    "Seamus",
	    "Sean",
	    "Sebastian",
	    "Sedrick",
	    "Selena",
	    "Selina",
	    "Selmer",
	    "Serena",
	    "Serenity",
	    "Seth",
	    "Shad",
	    "Shaina",
	    "Shakira",
	    "Shana",
	    "Shane",
	    "Shanel",
	    "Shanelle",
	    "Shania",
	    "Shanie",
	    "Shaniya",
	    "Shanna",
	    "Shannon",
	    "Shanny",
	    "Shanon",
	    "Shany",
	    "Sharon",
	    "Shaun",
	    "Shawn",
	    "Shawna",
	    "Shaylee",
	    "Shayna",
	    "Shayne",
	    "Shea",
	    "Sheila",
	    "Sheldon",
	    "Shemar",
	    "Sheridan",
	    "Sherman",
	    "Sherwood",
	    "Shirley",
	    "Shyann",
	    "Shyanne",
	    "Sibyl",
	    "Sid",
	    "Sidney",
	    "Sienna",
	    "Sierra",
	    "Sigmund",
	    "Sigrid",
	    "Sigurd",
	    "Silas",
	    "Sim",
	    "Simeon",
	    "Simone",
	    "Sincere",
	    "Sister",
	    "Skye",
	    "Skyla",
	    "Skylar",
	    "Sofia",
	    "Soledad",
	    "Solon",
	    "Sonia",
	    "Sonny",
	    "Sonya",
	    "Sophia",
	    "Sophie",
	    "Spencer",
	    "Stacey",
	    "Stacy",
	    "Stan",
	    "Stanford",
	    "Stanley",
	    "Stanton",
	    "Stefan",
	    "Stefanie",
	    "Stella",
	    "Stephan",
	    "Stephania",
	    "Stephanie",
	    "Stephany",
	    "Stephen",
	    "Stephon",
	    "Sterling",
	    "Steve",
	    "Stevie",
	    "Stewart",
	    "Stone",
	    "Stuart",
	    "Summer",
	    "Sunny",
	    "Susan",
	    "Susana",
	    "Susanna",
	    "Susie",
	    "Suzanne",
	    "Sven",
	    "Syble",
	    "Sydnee",
	    "Sydney",
	    "Sydni",
	    "Sydnie",
	    "Sylvan",
	    "Sylvester",
	    "Sylvia",
	    "Tabitha",
	    "Tad",
	    "Talia",
	    "Talon",
	    "Tamara",
	    "Tamia",
	    "Tania",
	    "Tanner",
	    "Tanya",
	    "Tara",
	    "Taryn",
	    "Tate",
	    "Tatum",
	    "Tatyana",
	    "Taurean",
	    "Tavares",
	    "Taya",
	    "Taylor",
	    "Teagan",
	    "Ted",
	    "Telly",
	    "Terence",
	    "Teresa",
	    "Terrance",
	    "Terrell",
	    "Terrence",
	    "Terrill",
	    "Terry",
	    "Tess",
	    "Tessie",
	    "Tevin",
	    "Thad",
	    "Thaddeus",
	    "Thalia",
	    "Thea",
	    "Thelma",
	    "Theo",
	    "Theodora",
	    "Theodore",
	    "Theresa",
	    "Therese",
	    "Theresia",
	    "Theron",
	    "Thomas",
	    "Thora",
	    "Thurman",
	    "Tia",
	    "Tiana",
	    "Tianna",
	    "Tiara",
	    "Tierra",
	    "Tiffany",
	    "Tillman",
	    "Timmothy",
	    "Timmy",
	    "Timothy",
	    "Tina",
	    "Tito",
	    "Titus",
	    "Tobin",
	    "Toby",
	    "Tod",
	    "Tom",
	    "Tomas",
	    "Tomasa",
	    "Tommie",
	    "Toney",
	    "Toni",
	    "Tony",
	    "Torey",
	    "Torrance",
	    "Torrey",
	    "Toy",
	    "Trace",
	    "Tracey",
	    "Tracy",
	    "Travis",
	    "Travon",
	    "Tre",
	    "Tremaine",
	    "Tremayne",
	    "Trent",
	    "Trenton",
	    "Tressa",
	    "Tressie",
	    "Treva",
	    "Trever",
	    "Trevion",
	    "Trevor",
	    "Trey",
	    "Trinity",
	    "Trisha",
	    "Tristian",
	    "Tristin",
	    "Triston",
	    "Troy",
	    "Trudie",
	    "Trycia",
	    "Trystan",
	    "Turner",
	    "Twila",
	    "Tyler",
	    "Tyra",
	    "Tyree",
	    "Tyreek",
	    "Tyrel",
	    "Tyrell",
	    "Tyrese",
	    "Tyrique",
	    "Tyshawn",
	    "Tyson",
	    "Ubaldo",
	    "Ulices",
	    "Ulises",
	    "Una",
	    "Unique",
	    "Urban",
	    "Uriah",
	    "Uriel",
	    "Ursula",
	    "Vada",
	    "Valentin",
	    "Valentina",
	    "Valentine",
	    "Valerie",
	    "Vallie",
	    "Van",
	    "Vance",
	    "Vanessa",
	    "Vaughn",
	    "Veda",
	    "Velda",
	    "Vella",
	    "Velma",
	    "Velva",
	    "Vena",
	    "Verda",
	    "Verdie",
	    "Vergie",
	    "Verla",
	    "Verlie",
	    "Vern",
	    "Verna",
	    "Verner",
	    "Vernice",
	    "Vernie",
	    "Vernon",
	    "Verona",
	    "Veronica",
	    "Vesta",
	    "Vicenta",
	    "Vicente",
	    "Vickie",
	    "Vicky",
	    "Victor",
	    "Victoria",
	    "Vida",
	    "Vidal",
	    "Vilma",
	    "Vince",
	    "Vincent",
	    "Vincenza",
	    "Vincenzo",
	    "Vinnie",
	    "Viola",
	    "Violet",
	    "Violette",
	    "Virgie",
	    "Virgil",
	    "Virginia",
	    "Virginie",
	    "Vita",
	    "Vito",
	    "Viva",
	    "Vivian",
	    "Viviane",
	    "Vivianne",
	    "Vivien",
	    "Vivienne",
	    "Vladimir",
	    "Wade",
	    "Waino",
	    "Waldo",
	    "Walker",
	    "Wallace",
	    "Walter",
	    "Walton",
	    "Wanda",
	    "Ward",
	    "Warren",
	    "Watson",
	    "Wava",
	    "Waylon",
	    "Wayne",
	    "Webster",
	    "Weldon",
	    "Wellington",
	    "Wendell",
	    "Wendy",
	    "Werner",
	    "Westley",
	    "Weston",
	    "Whitney",
	    "Wilber",
	    "Wilbert",
	    "Wilburn",
	    "Wiley",
	    "Wilford",
	    "Wilfred",
	    "Wilfredo",
	    "Wilfrid",
	    "Wilhelm",
	    "Wilhelmine",
	    "Will",
	    "Willa",
	    "Willard",
	    "William",
	    "Willie",
	    "Willis",
	    "Willow",
	    "Willy",
	    "Wilma",
	    "Wilmer",
	    "Wilson",
	    "Wilton",
	    "Winfield",
	    "Winifred",
	    "Winnifred",
	    "Winona",
	    "Winston",
	    "Woodrow",
	    "Wyatt",
	    "Wyman",
	    "Xander",
	    "Xavier",
	    "Xzavier",
	    "Yadira",
	    "Yasmeen",
	    "Yasmin",
	    "Yasmine",
	    "Yazmin",
	    "Yesenia",
	    "Yessenia",
	    "Yolanda",
	    "Yoshiko",
	    "Yvette",
	    "Yvonne",
	    "Zachariah",
	    "Zachary",
	    "Zachery",
	    "Zack",
	    "Zackary",
	    "Zackery",
	    "Zakary",
	    "Zander",
	    "Zane",
	    "Zaria",
	    "Zechariah",
	    "Zelda",
	    "Zella",
	    "Zelma",
	    "Zena",
	    "Zetta",
	    "Zion",
	    "Zita",
	    "Zoe",
	    "Zoey",
	    "Zoie",
	    "Zoila",
	    "Zola",
	    "Zora",
	    "Zula"
	  ],
	  "last_name": [
	    "Abbott",
	    "Abernathy",
	    "Abshire",
	    "Adams",
	    "Altenwerth",
	    "Anderson",
	    "Ankunding",
	    "Armstrong",
	    "Auer",
	    "Aufderhar",
	    "Bahringer",
	    "Bailey",
	    "Balistreri",
	    "Barrows",
	    "Bartell",
	    "Bartoletti",
	    "Barton",
	    "Bashirian",
	    "Batz",
	    "Bauch",
	    "Baumbach",
	    "Bayer",
	    "Beahan",
	    "Beatty",
	    "Bechtelar",
	    "Becker",
	    "Bednar",
	    "Beer",
	    "Beier",
	    "Berge",
	    "Bergnaum",
	    "Bergstrom",
	    "Bernhard",
	    "Bernier",
	    "Bins",
	    "Blanda",
	    "Blick",
	    "Block",
	    "Bode",
	    "Boehm",
	    "Bogan",
	    "Bogisich",
	    "Borer",
	    "Bosco",
	    "Botsford",
	    "Boyer",
	    "Boyle",
	    "Bradtke",
	    "Brakus",
	    "Braun",
	    "Breitenberg",
	    "Brekke",
	    "Brown",
	    "Bruen",
	    "Buckridge",
	    "Carroll",
	    "Carter",
	    "Cartwright",
	    "Casper",
	    "Cassin",
	    "Champlin",
	    "Christiansen",
	    "Cole",
	    "Collier",
	    "Collins",
	    "Conn",
	    "Connelly",
	    "Conroy",
	    "Considine",
	    "Corkery",
	    "Cormier",
	    "Corwin",
	    "Cremin",
	    "Crist",
	    "Crona",
	    "Cronin",
	    "Crooks",
	    "Cruickshank",
	    "Cummerata",
	    "Cummings",
	    "Dach",
	    "D'Amore",
	    "Daniel",
	    "Dare",
	    "Daugherty",
	    "Davis",
	    "Deckow",
	    "Denesik",
	    "Dibbert",
	    "Dickens",
	    "Dicki",
	    "Dickinson",
	    "Dietrich",
	    "Donnelly",
	    "Dooley",
	    "Douglas",
	    "Doyle",
	    "DuBuque",
	    "Durgan",
	    "Ebert",
	    "Effertz",
	    "Eichmann",
	    "Emard",
	    "Emmerich",
	    "Erdman",
	    "Ernser",
	    "Fadel",
	    "Fahey",
	    "Farrell",
	    "Fay",
	    "Feeney",
	    "Feest",
	    "Feil",
	    "Ferry",
	    "Fisher",
	    "Flatley",
	    "Frami",
	    "Franecki",
	    "Friesen",
	    "Fritsch",
	    "Funk",
	    "Gaylord",
	    "Gerhold",
	    "Gerlach",
	    "Gibson",
	    "Gislason",
	    "Gleason",
	    "Gleichner",
	    "Glover",
	    "Goldner",
	    "Goodwin",
	    "Gorczany",
	    "Gottlieb",
	    "Goyette",
	    "Grady",
	    "Graham",
	    "Grant",
	    "Green",
	    "Greenfelder",
	    "Greenholt",
	    "Grimes",
	    "Gulgowski",
	    "Gusikowski",
	    "Gutkowski",
	    "Gutmann",
	    "Haag",
	    "Hackett",
	    "Hagenes",
	    "Hahn",
	    "Haley",
	    "Halvorson",
	    "Hamill",
	    "Hammes",
	    "Hand",
	    "Hane",
	    "Hansen",
	    "Harber",
	    "Harris",
	    "Hartmann",
	    "Harvey",
	    "Hauck",
	    "Hayes",
	    "Heaney",
	    "Heathcote",
	    "Hegmann",
	    "Heidenreich",
	    "Heller",
	    "Herman",
	    "Hermann",
	    "Hermiston",
	    "Herzog",
	    "Hessel",
	    "Hettinger",
	    "Hickle",
	    "Hilll",
	    "Hills",
	    "Hilpert",
	    "Hintz",
	    "Hirthe",
	    "Hodkiewicz",
	    "Hoeger",
	    "Homenick",
	    "Hoppe",
	    "Howe",
	    "Howell",
	    "Hudson",
	    "Huel",
	    "Huels",
	    "Hyatt",
	    "Jacobi",
	    "Jacobs",
	    "Jacobson",
	    "Jakubowski",
	    "Jaskolski",
	    "Jast",
	    "Jenkins",
	    "Jerde",
	    "Johns",
	    "Johnson",
	    "Johnston",
	    "Jones",
	    "Kassulke",
	    "Kautzer",
	    "Keebler",
	    "Keeling",
	    "Kemmer",
	    "Kerluke",
	    "Kertzmann",
	    "Kessler",
	    "Kiehn",
	    "Kihn",
	    "Kilback",
	    "King",
	    "Kirlin",
	    "Klein",
	    "Kling",
	    "Klocko",
	    "Koch",
	    "Koelpin",
	    "Koepp",
	    "Kohler",
	    "Konopelski",
	    "Koss",
	    "Kovacek",
	    "Kozey",
	    "Krajcik",
	    "Kreiger",
	    "Kris",
	    "Kshlerin",
	    "Kub",
	    "Kuhic",
	    "Kuhlman",
	    "Kuhn",
	    "Kulas",
	    "Kunde",
	    "Kunze",
	    "Kuphal",
	    "Kutch",
	    "Kuvalis",
	    "Labadie",
	    "Lakin",
	    "Lang",
	    "Langosh",
	    "Langworth",
	    "Larkin",
	    "Larson",
	    "Leannon",
	    "Lebsack",
	    "Ledner",
	    "Leffler",
	    "Legros",
	    "Lehner",
	    "Lemke",
	    "Lesch",
	    "Leuschke",
	    "Lind",
	    "Lindgren",
	    "Littel",
	    "Little",
	    "Lockman",
	    "Lowe",
	    "Lubowitz",
	    "Lueilwitz",
	    "Luettgen",
	    "Lynch",
	    "Macejkovic",
	    "MacGyver",
	    "Maggio",
	    "Mann",
	    "Mante",
	    "Marks",
	    "Marquardt",
	    "Marvin",
	    "Mayer",
	    "Mayert",
	    "McClure",
	    "McCullough",
	    "McDermott",
	    "McGlynn",
	    "McKenzie",
	    "McLaughlin",
	    "Medhurst",
	    "Mertz",
	    "Metz",
	    "Miller",
	    "Mills",
	    "Mitchell",
	    "Moen",
	    "Mohr",
	    "Monahan",
	    "Moore",
	    "Morar",
	    "Morissette",
	    "Mosciski",
	    "Mraz",
	    "Mueller",
	    "Muller",
	    "Murazik",
	    "Murphy",
	    "Murray",
	    "Nader",
	    "Nicolas",
	    "Nienow",
	    "Nikolaus",
	    "Nitzsche",
	    "Nolan",
	    "Oberbrunner",
	    "O'Connell",
	    "O'Conner",
	    "O'Hara",
	    "O'Keefe",
	    "O'Kon",
	    "Okuneva",
	    "Olson",
	    "Ondricka",
	    "O'Reilly",
	    "Orn",
	    "Ortiz",
	    "Osinski",
	    "Pacocha",
	    "Padberg",
	    "Pagac",
	    "Parisian",
	    "Parker",
	    "Paucek",
	    "Pfannerstill",
	    "Pfeffer",
	    "Pollich",
	    "Pouros",
	    "Powlowski",
	    "Predovic",
	    "Price",
	    "Prohaska",
	    "Prosacco",
	    "Purdy",
	    "Quigley",
	    "Quitzon",
	    "Rath",
	    "Ratke",
	    "Rau",
	    "Raynor",
	    "Reichel",
	    "Reichert",
	    "Reilly",
	    "Reinger",
	    "Rempel",
	    "Renner",
	    "Reynolds",
	    "Rice",
	    "Rippin",
	    "Ritchie",
	    "Robel",
	    "Roberts",
	    "Rodriguez",
	    "Rogahn",
	    "Rohan",
	    "Rolfson",
	    "Romaguera",
	    "Roob",
	    "Rosenbaum",
	    "Rowe",
	    "Ruecker",
	    "Runolfsdottir",
	    "Runolfsson",
	    "Runte",
	    "Russel",
	    "Rutherford",
	    "Ryan",
	    "Sanford",
	    "Satterfield",
	    "Sauer",
	    "Sawayn",
	    "Schaden",
	    "Schaefer",
	    "Schamberger",
	    "Schiller",
	    "Schimmel",
	    "Schinner",
	    "Schmeler",
	    "Schmidt",
	    "Schmitt",
	    "Schneider",
	    "Schoen",
	    "Schowalter",
	    "Schroeder",
	    "Schulist",
	    "Schultz",
	    "Schumm",
	    "Schuppe",
	    "Schuster",
	    "Senger",
	    "Shanahan",
	    "Shields",
	    "Simonis",
	    "Sipes",
	    "Skiles",
	    "Smith",
	    "Smitham",
	    "Spencer",
	    "Spinka",
	    "Sporer",
	    "Stamm",
	    "Stanton",
	    "Stark",
	    "Stehr",
	    "Steuber",
	    "Stiedemann",
	    "Stokes",
	    "Stoltenberg",
	    "Stracke",
	    "Streich",
	    "Stroman",
	    "Strosin",
	    "Swaniawski",
	    "Swift",
	    "Terry",
	    "Thiel",
	    "Thompson",
	    "Tillman",
	    "Torp",
	    "Torphy",
	    "Towne",
	    "Toy",
	    "Trantow",
	    "Tremblay",
	    "Treutel",
	    "Tromp",
	    "Turcotte",
	    "Turner",
	    "Ullrich",
	    "Upton",
	    "Vandervort",
	    "Veum",
	    "Volkman",
	    "Von",
	    "VonRueden",
	    "Waelchi",
	    "Walker",
	    "Walsh",
	    "Walter",
	    "Ward",
	    "Waters",
	    "Watsica",
	    "Weber",
	    "Wehner",
	    "Weimann",
	    "Weissnat",
	    "Welch",
	    "West",
	    "White",
	    "Wiegand",
	    "Wilderman",
	    "Wilkinson",
	    "Will",
	    "Williamson",
	    "Willms",
	    "Windler",
	    "Wintheiser",
	    "Wisoky",
	    "Wisozk",
	    "Witting",
	    "Wiza",
	    "Wolf",
	    "Wolff",
	    "Wuckert",
	    "Wunsch",
	    "Wyman",
	    "Yost",
	    "Yundt",
	    "Zboncak",
	    "Zemlak",
	    "Ziemann",
	    "Zieme",
	    "Zulauf"
	  ],
	  "prefix": [
	    "Mr.",
	    "Mrs.",
	    "Ms.",
	    "Miss",
	    "Dr."
	  ],
	  "suffix": [
	    "Jr.",
	    "Sr.",
	    "I",
	    "II",
	    "III",
	    "IV",
	    "V",
	    "MD",
	    "DDS",
	    "PhD",
	    "DVM"
	  ],
	  "title": {
	    "descriptor": [
	      "Lead",
	      "Senior",
	      "Direct",
	      "Corporate",
	      "Dynamic",
	      "Future",
	      "Product",
	      "National",
	      "Regional",
	      "District",
	      "Central",
	      "Global",
	      "Customer",
	      "Investor",
	      "Dynamic",
	      "International",
	      "Legacy",
	      "Forward",
	      "Internal",
	      "Human",
	      "Chief",
	      "Principal"
	    ],
	    "level": [
	      "Solutions",
	      "Program",
	      "Brand",
	      "Security",
	      "Research",
	      "Marketing",
	      "Directives",
	      "Implementation",
	      "Integration",
	      "Functionality",
	      "Response",
	      "Paradigm",
	      "Tactics",
	      "Identity",
	      "Markets",
	      "Group",
	      "Division",
	      "Applications",
	      "Optimization",
	      "Operations",
	      "Infrastructure",
	      "Intranet",
	      "Communications",
	      "Web",
	      "Branding",
	      "Quality",
	      "Assurance",
	      "Mobility",
	      "Accounts",
	      "Data",
	      "Creative",
	      "Configuration",
	      "Accountability",
	      "Interactions",
	      "Factors",
	      "Usability",
	      "Metrics"
	    ],
	    "job": [
	      "Supervisor",
	      "Associate",
	      "Executive",
	      "Liason",
	      "Officer",
	      "Manager",
	      "Engineer",
	      "Specialist",
	      "Director",
	      "Coordinator",
	      "Administrator",
	      "Architect",
	      "Analyst",
	      "Designer",
	      "Planner",
	      "Orchestrator",
	      "Technician",
	      "Developer",
	      "Producer",
	      "Consultant",
	      "Assistant",
	      "Facilitator",
	      "Agent",
	      "Representative",
	      "Strategist"
	    ]
	  },
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name} #{suffix}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	en.phone_number = {
	  "formats": [
	    "###-###-####",
	    "(###) ###-####",
	    "1-###-###-####",
	    "###.###.####",
	    "###-###-####",
	    "(###) ###-####",
	    "1-###-###-####",
	    "###.###.####",
	    "###-###-#### x###",
	    "(###) ###-#### x###",
	    "1-###-###-#### x###",
	    "###.###.#### x###",
	    "###-###-#### x####",
	    "(###) ###-#### x####",
	    "1-###-###-#### x####",
	    "###.###.#### x####",
	    "###-###-#### x#####",
	    "(###) ###-#### x#####",
	    "1-###-###-#### x#####",
	    "###.###.#### x#####"
	  ]
	};
	en.cell_phone = {
	  "formats": [
	    "###-###-####",
	    "(###) ###-####",
	    "1-###-###-####",
	    "###.###.####"
	  ]
	};
	en.business = {
	  "credit_card_numbers": [
	    "1234-2121-1221-1211",
	    "1212-1221-1121-1234",
	    "1211-1221-1234-2201",
	    "1228-1221-1221-1431"
	  ],
	  "credit_card_expiry_dates": [
	    "2011-10-12",
	    "2012-11-12",
	    "2015-11-11",
	    "2013-9-12"
	  ],
	  "credit_card_types": [
	    "visa",
	    "mastercard",
	    "americanexpress",
	    "discover"
	  ]
	};
	en.commerce = {
	  "color": [
	    "red",
	    "green",
	    "blue",
	    "yellow",
	    "purple",
	    "mint green",
	    "teal",
	    "white",
	    "black",
	    "orange",
	    "pink",
	    "grey",
	    "maroon",
	    "violet",
	    "turquoise",
	    "tan",
	    "sky blue",
	    "salmon",
	    "plum",
	    "orchid",
	    "olive",
	    "magenta",
	    "lime",
	    "ivory",
	    "indigo",
	    "gold",
	    "fuchsia",
	    "cyan",
	    "azure",
	    "lavender",
	    "silver"
	  ],
	  "department": [
	    "Books",
	    "Movies",
	    "Music",
	    "Games",
	    "Electronics",
	    "Computers",
	    "Home",
	    "Garden",
	    "Tools",
	    "Grocery",
	    "Health",
	    "Beauty",
	    "Toys",
	    "Kids",
	    "Baby",
	    "Clothing",
	    "Shoes",
	    "Jewelery",
	    "Sports",
	    "Outdoors",
	    "Automotive",
	    "Industrial"
	  ],
	  "product_name": {
	    "adjective": [
	      "Small",
	      "Ergonomic",
	      "Rustic",
	      "Intelligent",
	      "Gorgeous",
	      "Incredible",
	      "Fantastic",
	      "Practical",
	      "Sleek",
	      "Awesome"
	    ],
	    "material": [
	      "Steel",
	      "Wooden",
	      "Concrete",
	      "Plastic",
	      "Cotton",
	      "Granite",
	      "Rubber"
	    ],
	    "product": [
	      "Chair",
	      "Car",
	      "Computer",
	      "Gloves",
	      "Pants",
	      "Shirt",
	      "Table",
	      "Shoes",
	      "Hat"
	    ]
	  }
	};
	en.team = {
	  "creature": [
	    "ants",
	    "bats",
	    "bears",
	    "bees",
	    "birds",
	    "buffalo",
	    "cats",
	    "chickens",
	    "cattle",
	    "dogs",
	    "dolphins",
	    "ducks",
	    "elephants",
	    "fishes",
	    "foxes",
	    "frogs",
	    "geese",
	    "goats",
	    "horses",
	    "kangaroos",
	    "lions",
	    "monkeys",
	    "owls",
	    "oxen",
	    "penguins",
	    "people",
	    "pigs",
	    "rabbits",
	    "sheep",
	    "tigers",
	    "whales",
	    "wolves",
	    "zebras",
	    "banshees",
	    "crows",
	    "black cats",
	    "chimeras",
	    "ghosts",
	    "conspirators",
	    "dragons",
	    "dwarves",
	    "elves",
	    "enchanters",
	    "exorcists",
	    "sons",
	    "foes",
	    "giants",
	    "gnomes",
	    "goblins",
	    "gooses",
	    "griffins",
	    "lycanthropes",
	    "nemesis",
	    "ogres",
	    "oracles",
	    "prophets",
	    "sorcerors",
	    "spiders",
	    "spirits",
	    "vampires",
	    "warlocks",
	    "vixens",
	    "werewolves",
	    "witches",
	    "worshipers",
	    "zombies",
	    "druids"
	  ],
	  "name": [
	    "#{Address.state} #{creature}"
	  ]
	};
	en.hacker = {
	  "abbreviation": [
	    "TCP",
	    "HTTP",
	    "SDD",
	    "RAM",
	    "GB",
	    "CSS",
	    "SSL",
	    "AGP",
	    "SQL",
	    "FTP",
	    "PCI",
	    "AI",
	    "ADP",
	    "RSS",
	    "XML",
	    "EXE",
	    "COM",
	    "HDD",
	    "THX",
	    "SMTP",
	    "SMS",
	    "USB",
	    "PNG",
	    "SAS",
	    "IB",
	    "SCSI",
	    "JSON",
	    "XSS",
	    "JBOD"
	  ],
	  "adjective": [
	    "auxiliary",
	    "primary",
	    "back-end",
	    "digital",
	    "open-source",
	    "virtual",
	    "cross-platform",
	    "redundant",
	    "online",
	    "haptic",
	    "multi-byte",
	    "bluetooth",
	    "wireless",
	    "1080p",
	    "neural",
	    "optical",
	    "solid state",
	    "mobile"
	  ],
	  "noun": [
	    "driver",
	    "protocol",
	    "bandwidth",
	    "panel",
	    "microchip",
	    "program",
	    "port",
	    "card",
	    "array",
	    "interface",
	    "system",
	    "sensor",
	    "firewall",
	    "hard drive",
	    "pixel",
	    "alarm",
	    "feed",
	    "monitor",
	    "application",
	    "transmitter",
	    "bus",
	    "circuit",
	    "capacitor",
	    "matrix"
	  ],
	  "verb": [
	    "back up",
	    "bypass",
	    "hack",
	    "override",
	    "compress",
	    "copy",
	    "navigate",
	    "index",
	    "connect",
	    "generate",
	    "quantify",
	    "calculate",
	    "synthesize",
	    "input",
	    "transmit",
	    "program",
	    "reboot",
	    "parse"
	  ],
	  "ingverb": [
	    "backing up",
	    "bypassing",
	    "hacking",
	    "overriding",
	    "compressing",
	    "copying",
	    "navigating",
	    "indexing",
	    "connecting",
	    "generating",
	    "quantifying",
	    "calculating",
	    "synthesizing",
	    "transmitting",
	    "programming",
	    "parsing"
	  ]
	};
	en.app = {
	  "name": [
	    "Redhold",
	    "Treeflex",
	    "Trippledex",
	    "Kanlam",
	    "Bigtax",
	    "Daltfresh",
	    "Toughjoyfax",
	    "Mat Lam Tam",
	    "Otcom",
	    "Tres-Zap",
	    "Y-Solowarm",
	    "Tresom",
	    "Voltsillam",
	    "Biodex",
	    "Greenlam",
	    "Viva",
	    "Matsoft",
	    "Temp",
	    "Zoolab",
	    "Subin",
	    "Rank",
	    "Job",
	    "Stringtough",
	    "Tin",
	    "It",
	    "Home Ing",
	    "Zamit",
	    "Sonsing",
	    "Konklab",
	    "Alpha",
	    "Latlux",
	    "Voyatouch",
	    "Alphazap",
	    "Holdlamis",
	    "Zaam-Dox",
	    "Sub-Ex",
	    "Quo Lux",
	    "Bamity",
	    "Ventosanzap",
	    "Lotstring",
	    "Hatity",
	    "Tempsoft",
	    "Overhold",
	    "Fixflex",
	    "Konklux",
	    "Zontrax",
	    "Tampflex",
	    "Span",
	    "Namfix",
	    "Transcof",
	    "Stim",
	    "Fix San",
	    "Sonair",
	    "Stronghold",
	    "Fintone",
	    "Y-find",
	    "Opela",
	    "Lotlux",
	    "Ronstring",
	    "Zathin",
	    "Duobam",
	    "Keylex"
	  ],
	  "version": [
	    "0.#.#",
	    "0.##",
	    "#.##",
	    "#.#",
	    "#.#.#"
	  ],
	  "author": [
	    "#{Name.name}",
	    "#{Company.name}"
	  ]
	};

	en.finance = {};
	en.finance.account_type = ["Checking","Savings","Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan"];
	en.finance.transaction_type = ["deposit", "withdrawal", "payment", "invoice"];

	en.finance.currency = {
	  "UAE Dirham": {
	    "code": "AED",
	    "symbol": ""
	  },
	  "Afghani": {
	    "code": "AFN",
	    "symbol": "؋"
	  },
	  "Lek": {
	    "code": "ALL",
	    "symbol": "Lek"
	  },
	  "Armenian Dram": {
	    "code": "AMD",
	    "symbol": ""
	  },
	  "Netherlands Antillian Guilder": {
	    "code": "ANG",
	    "symbol": "ƒ"
	  },
	  "Kwanza": {
	    "code": "AOA",
	    "symbol": ""
	  },
	  "Argentine Peso": {
	    "code": "ARS",
	    "symbol": "$"
	  },
	  "Australian Dollar": {
	    "code": "AUD",
	    "symbol": "$"
	  },
	  "Aruban Guilder": {
	    "code": "AWG",
	    "symbol": "ƒ"
	  },
	  "Azerbaijanian Manat": {
	    "code": "AZN",
	    "symbol": "ман"
	  },
	  "Convertible Marks": {
	    "code": "BAM",
	    "symbol": "KM"
	  },
	  "Barbados Dollar": {
	    "code": "BBD",
	    "symbol": "$"
	  },
	  "Taka": {
	    "code": "BDT",
	    "symbol": ""
	  },
	  "Bulgarian Lev": {
	    "code": "BGN",
	    "symbol": "лв"
	  },
	  "Bahraini Dinar": {
	    "code": "BHD",
	    "symbol": ""
	  },
	  "Burundi Franc": {
	    "code": "BIF",
	    "symbol": ""
	  },
	  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
	    "code": "BMD",
	    "symbol": "$"
	  },
	  "Brunei Dollar": {
	    "code": "BND",
	    "symbol": "$"
	  },
	  "Boliviano Mvdol": {
	    "code": "BOB BOV",
	    "symbol": "$b"
	  },
	  "Brazilian Real": {
	    "code": "BRL",
	    "symbol": "R$"
	  },
	  "Bahamian Dollar": {
	    "code": "BSD",
	    "symbol": "$"
	  },
	  "Pula": {
	    "code": "BWP",
	    "symbol": "P"
	  },
	  "Belarussian Ruble": {
	    "code": "BYR",
	    "symbol": "p."
	  },
	  "Belize Dollar": {
	    "code": "BZD",
	    "symbol": "BZ$"
	  },
	  "Canadian Dollar": {
	    "code": "CAD",
	    "symbol": "$"
	  },
	  "Congolese Franc": {
	    "code": "CDF",
	    "symbol": ""
	  },
	  "Swiss Franc": {
	    "code": "CHF",
	    "symbol": "CHF"
	  },
	  "Chilean Peso Unidades de fomento": {
	    "code": "CLP CLF",
	    "symbol": "$"
	  },
	  "Yuan Renminbi": {
	    "code": "CNY",
	    "symbol": "¥"
	  },
	  "Colombian Peso Unidad de Valor Real": {
	    "code": "COP COU",
	    "symbol": "$"
	  },
	  "Costa Rican Colon": {
	    "code": "CRC",
	    "symbol": "₡"
	  },
	  "Cuban Peso Peso Convertible": {
	    "code": "CUP CUC",
	    "symbol": "₱"
	  },
	  "Cape Verde Escudo": {
	    "code": "CVE",
	    "symbol": ""
	  },
	  "Czech Koruna": {
	    "code": "CZK",
	    "symbol": "Kč"
	  },
	  "Djibouti Franc": {
	    "code": "DJF",
	    "symbol": ""
	  },
	  "Danish Krone": {
	    "code": "DKK",
	    "symbol": "kr"
	  },
	  "Dominican Peso": {
	    "code": "DOP",
	    "symbol": "RD$"
	  },
	  "Algerian Dinar": {
	    "code": "DZD",
	    "symbol": ""
	  },
	  "Kroon": {
	    "code": "EEK",
	    "symbol": ""
	  },
	  "Egyptian Pound": {
	    "code": "EGP",
	    "symbol": "£"
	  },
	  "Nakfa": {
	    "code": "ERN",
	    "symbol": ""
	  },
	  "Ethiopian Birr": {
	    "code": "ETB",
	    "symbol": ""
	  },
	  "Euro": {
	    "code": "EUR",
	    "symbol": "€"
	  },
	  "Fiji Dollar": {
	    "code": "FJD",
	    "symbol": "$"
	  },
	  "Falkland Islands Pound": {
	    "code": "FKP",
	    "symbol": "£"
	  },
	  "Pound Sterling": {
	    "code": "GBP",
	    "symbol": "£"
	  },
	  "Lari": {
	    "code": "GEL",
	    "symbol": ""
	  },
	  "Cedi": {
	    "code": "GHS",
	    "symbol": ""
	  },
	  "Gibraltar Pound": {
	    "code": "GIP",
	    "symbol": "£"
	  },
	  "Dalasi": {
	    "code": "GMD",
	    "symbol": ""
	  },
	  "Guinea Franc": {
	    "code": "GNF",
	    "symbol": ""
	  },
	  "Quetzal": {
	    "code": "GTQ",
	    "symbol": "Q"
	  },
	  "Guyana Dollar": {
	    "code": "GYD",
	    "symbol": "$"
	  },
	  "Hong Kong Dollar": {
	    "code": "HKD",
	    "symbol": "$"
	  },
	  "Lempira": {
	    "code": "HNL",
	    "symbol": "L"
	  },
	  "Croatian Kuna": {
	    "code": "HRK",
	    "symbol": "kn"
	  },
	  "Gourde US Dollar": {
	    "code": "HTG USD",
	    "symbol": ""
	  },
	  "Forint": {
	    "code": "HUF",
	    "symbol": "Ft"
	  },
	  "Rupiah": {
	    "code": "IDR",
	    "symbol": "Rp"
	  },
	  "New Israeli Sheqel": {
	    "code": "ILS",
	    "symbol": "₪"
	  },
	  "Indian Rupee": {
	    "code": "INR",
	    "symbol": ""
	  },
	  "Indian Rupee Ngultrum": {
	    "code": "INR BTN",
	    "symbol": ""
	  },
	  "Iraqi Dinar": {
	    "code": "IQD",
	    "symbol": ""
	  },
	  "Iranian Rial": {
	    "code": "IRR",
	    "symbol": "﷼"
	  },
	  "Iceland Krona": {
	    "code": "ISK",
	    "symbol": "kr"
	  },
	  "Jamaican Dollar": {
	    "code": "JMD",
	    "symbol": "J$"
	  },
	  "Jordanian Dinar": {
	    "code": "JOD",
	    "symbol": ""
	  },
	  "Yen": {
	    "code": "JPY",
	    "symbol": "¥"
	  },
	  "Kenyan Shilling": {
	    "code": "KES",
	    "symbol": ""
	  },
	  "Som": {
	    "code": "KGS",
	    "symbol": "лв"
	  },
	  "Riel": {
	    "code": "KHR",
	    "symbol": "៛"
	  },
	  "Comoro Franc": {
	    "code": "KMF",
	    "symbol": ""
	  },
	  "North Korean Won": {
	    "code": "KPW",
	    "symbol": "₩"
	  },
	  "Won": {
	    "code": "KRW",
	    "symbol": "₩"
	  },
	  "Kuwaiti Dinar": {
	    "code": "KWD",
	    "symbol": ""
	  },
	  "Cayman Islands Dollar": {
	    "code": "KYD",
	    "symbol": "$"
	  },
	  "Tenge": {
	    "code": "KZT",
	    "symbol": "лв"
	  },
	  "Kip": {
	    "code": "LAK",
	    "symbol": "₭"
	  },
	  "Lebanese Pound": {
	    "code": "LBP",
	    "symbol": "£"
	  },
	  "Sri Lanka Rupee": {
	    "code": "LKR",
	    "symbol": "₨"
	  },
	  "Liberian Dollar": {
	    "code": "LRD",
	    "symbol": "$"
	  },
	  "Lithuanian Litas": {
	    "code": "LTL",
	    "symbol": "Lt"
	  },
	  "Latvian Lats": {
	    "code": "LVL",
	    "symbol": "Ls"
	  },
	  "Libyan Dinar": {
	    "code": "LYD",
	    "symbol": ""
	  },
	  "Moroccan Dirham": {
	    "code": "MAD",
	    "symbol": ""
	  },
	  "Moldovan Leu": {
	    "code": "MDL",
	    "symbol": ""
	  },
	  "Malagasy Ariary": {
	    "code": "MGA",
	    "symbol": ""
	  },
	  "Denar": {
	    "code": "MKD",
	    "symbol": "ден"
	  },
	  "Kyat": {
	    "code": "MMK",
	    "symbol": ""
	  },
	  "Tugrik": {
	    "code": "MNT",
	    "symbol": "₮"
	  },
	  "Pataca": {
	    "code": "MOP",
	    "symbol": ""
	  },
	  "Ouguiya": {
	    "code": "MRO",
	    "symbol": ""
	  },
	  "Mauritius Rupee": {
	    "code": "MUR",
	    "symbol": "₨"
	  },
	  "Rufiyaa": {
	    "code": "MVR",
	    "symbol": ""
	  },
	  "Kwacha": {
	    "code": "MWK",
	    "symbol": ""
	  },
	  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
	    "code": "MXN MXV",
	    "symbol": "$"
	  },
	  "Malaysian Ringgit": {
	    "code": "MYR",
	    "symbol": "RM"
	  },
	  "Metical": {
	    "code": "MZN",
	    "symbol": "MT"
	  },
	  "Naira": {
	    "code": "NGN",
	    "symbol": "₦"
	  },
	  "Cordoba Oro": {
	    "code": "NIO",
	    "symbol": "C$"
	  },
	  "Norwegian Krone": {
	    "code": "NOK",
	    "symbol": "kr"
	  },
	  "Nepalese Rupee": {
	    "code": "NPR",
	    "symbol": "₨"
	  },
	  "New Zealand Dollar": {
	    "code": "NZD",
	    "symbol": "$"
	  },
	  "Rial Omani": {
	    "code": "OMR",
	    "symbol": "﷼"
	  },
	  "Balboa US Dollar": {
	    "code": "PAB USD",
	    "symbol": "B/."
	  },
	  "Nuevo Sol": {
	    "code": "PEN",
	    "symbol": "S/."
	  },
	  "Kina": {
	    "code": "PGK",
	    "symbol": ""
	  },
	  "Philippine Peso": {
	    "code": "PHP",
	    "symbol": "Php"
	  },
	  "Pakistan Rupee": {
	    "code": "PKR",
	    "symbol": "₨"
	  },
	  "Zloty": {
	    "code": "PLN",
	    "symbol": "zł"
	  },
	  "Guarani": {
	    "code": "PYG",
	    "symbol": "Gs"
	  },
	  "Qatari Rial": {
	    "code": "QAR",
	    "symbol": "﷼"
	  },
	  "New Leu": {
	    "code": "RON",
	    "symbol": "lei"
	  },
	  "Serbian Dinar": {
	    "code": "RSD",
	    "symbol": "Дин."
	  },
	  "Russian Ruble": {
	    "code": "RUB",
	    "symbol": "руб"
	  },
	  "Rwanda Franc": {
	    "code": "RWF",
	    "symbol": ""
	  },
	  "Saudi Riyal": {
	    "code": "SAR",
	    "symbol": "﷼"
	  },
	  "Solomon Islands Dollar": {
	    "code": "SBD",
	    "symbol": "$"
	  },
	  "Seychelles Rupee": {
	    "code": "SCR",
	    "symbol": "₨"
	  },
	  "Sudanese Pound": {
	    "code": "SDG",
	    "symbol": ""
	  },
	  "Swedish Krona": {
	    "code": "SEK",
	    "symbol": "kr"
	  },
	  "Singapore Dollar": {
	    "code": "SGD",
	    "symbol": "$"
	  },
	  "Saint Helena Pound": {
	    "code": "SHP",
	    "symbol": "£"
	  },
	  "Leone": {
	    "code": "SLL",
	    "symbol": ""
	  },
	  "Somali Shilling": {
	    "code": "SOS",
	    "symbol": "S"
	  },
	  "Surinam Dollar": {
	    "code": "SRD",
	    "symbol": "$"
	  },
	  "Dobra": {
	    "code": "STD",
	    "symbol": ""
	  },
	  "El Salvador Colon US Dollar": {
	    "code": "SVC USD",
	    "symbol": "$"
	  },
	  "Syrian Pound": {
	    "code": "SYP",
	    "symbol": "£"
	  },
	  "Lilangeni": {
	    "code": "SZL",
	    "symbol": ""
	  },
	  "Baht": {
	    "code": "THB",
	    "symbol": "฿"
	  },
	  "Somoni": {
	    "code": "TJS",
	    "symbol": ""
	  },
	  "Manat": {
	    "code": "TMT",
	    "symbol": ""
	  },
	  "Tunisian Dinar": {
	    "code": "TND",
	    "symbol": ""
	  },
	  "Pa'anga": {
	    "code": "TOP",
	    "symbol": ""
	  },
	  "Turkish Lira": {
	    "code": "TRY",
	    "symbol": "TL"
	  },
	  "Trinidad and Tobago Dollar": {
	    "code": "TTD",
	    "symbol": "TT$"
	  },
	  "New Taiwan Dollar": {
	    "code": "TWD",
	    "symbol": "NT$"
	  },
	  "Tanzanian Shilling": {
	    "code": "TZS",
	    "symbol": ""
	  },
	  "Hryvnia": {
	    "code": "UAH",
	    "symbol": "₴"
	  },
	  "Uganda Shilling": {
	    "code": "UGX",
	    "symbol": ""
	  },
	  "US Dollar": {
	    "code": "USD",
	    "symbol": "$"
	  },
	  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
	    "code": "UYU UYI",
	    "symbol": "$U"
	  },
	  "Uzbekistan Sum": {
	    "code": "UZS",
	    "symbol": "лв"
	  },
	  "Bolivar Fuerte": {
	    "code": "VEF",
	    "symbol": "Bs"
	  },
	  "Dong": {
	    "code": "VND",
	    "symbol": "₫"
	  },
	  "Vatu": {
	    "code": "VUV",
	    "symbol": ""
	  },
	  "Tala": {
	    "code": "WST",
	    "symbol": ""
	  },
	  "CFA Franc BEAC": {
	    "code": "XAF",
	    "symbol": ""
	  },
	  "Silver": {
	    "code": "XAG",
	    "symbol": ""
	  },
	  "Gold": {
	    "code": "XAU",
	    "symbol": ""
	  },
	  "Bond Markets Units European Composite Unit (EURCO)": {
	    "code": "XBA",
	    "symbol": ""
	  },
	  "European Monetary Unit (E.M.U.-6)": {
	    "code": "XBB",
	    "symbol": ""
	  },
	  "European Unit of Account 9(E.U.A.-9)": {
	    "code": "XBC",
	    "symbol": ""
	  },
	  "European Unit of Account 17(E.U.A.-17)": {
	    "code": "XBD",
	    "symbol": ""
	  },
	  "East Caribbean Dollar": {
	    "code": "XCD",
	    "symbol": "$"
	  },
	  "SDR": {
	    "code": "XDR",
	    "symbol": ""
	  },
	  "UIC-Franc": {
	    "code": "XFU",
	    "symbol": ""
	  },
	  "CFA Franc BCEAO": {
	    "code": "XOF",
	    "symbol": ""
	  },
	  "Palladium": {
	    "code": "XPD",
	    "symbol": ""
	  },
	  "CFP Franc": {
	    "code": "XPF",
	    "symbol": ""
	  },
	  "Platinum": {
	    "code": "XPT",
	    "symbol": ""
	  },
	  "Codes specifically reserved for testing purposes": {
	    "code": "XTS",
	    "symbol": ""
	  },
	  "Yemeni Rial": {
	    "code": "YER",
	    "symbol": "﷼"
	  },
	  "Rand": {
	    "code": "ZAR",
	    "symbol": "R"
	  },
	  "Rand Loti": {
	    "code": "ZAR LSL",
	    "symbol": ""
	  },
	  "Rand Namibia Dollar": {
	    "code": "ZAR NAD",
	    "symbol": ""
	  },
	  "Zambian Kwacha": {
	    "code": "ZMK",
	    "symbol": ""
	  },
	  "Zimbabwe Dollar": {
	    "code": "ZWL",
	    "symbol": ""
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_AU = {};
	module["exports"] = en_AU;
	en_AU.title = "Australia (English)";
	en_AU.name = {
	  "first_name": [
	    "William",
	    "Jack",
	    "Oliver",
	    "Joshua",
	    "Thomas",
	    "Lachlan",
	    "Cooper",
	    "Noah",
	    "Ethan",
	    "Lucas",
	    "James",
	    "Samuel",
	    "Jacob",
	    "Liam",
	    "Alexander",
	    "Benjamin",
	    "Max",
	    "Isaac",
	    "Daniel",
	    "Riley",
	    "Ryan",
	    "Charlie",
	    "Tyler",
	    "Jake",
	    "Matthew",
	    "Xavier",
	    "Harry",
	    "Jayden",
	    "Nicholas",
	    "Harrison",
	    "Levi",
	    "Luke",
	    "Adam",
	    "Henry",
	    "Aiden",
	    "Dylan",
	    "Oscar",
	    "Michael",
	    "Jackson",
	    "Logan",
	    "Joseph",
	    "Blake",
	    "Nathan",
	    "Connor",
	    "Elijah",
	    "Nate",
	    "Archie",
	    "Bailey",
	    "Marcus",
	    "Cameron",
	    "Jordan",
	    "Zachary",
	    "Caleb",
	    "Hunter",
	    "Ashton",
	    "Toby",
	    "Aidan",
	    "Hayden",
	    "Mason",
	    "Hamish",
	    "Edward",
	    "Angus",
	    "Eli",
	    "Sebastian",
	    "Christian",
	    "Patrick",
	    "Andrew",
	    "Anthony",
	    "Luca",
	    "Kai",
	    "Beau",
	    "Alex",
	    "George",
	    "Callum",
	    "Finn",
	    "Zac",
	    "Mitchell",
	    "Jett",
	    "Jesse",
	    "Gabriel",
	    "Leo",
	    "Declan",
	    "Charles",
	    "Jasper",
	    "Jonathan",
	    "Aaron",
	    "Hugo",
	    "David",
	    "Christopher",
	    "Chase",
	    "Owen",
	    "Justin",
	    "Ali",
	    "Darcy",
	    "Lincoln",
	    "Cody",
	    "Phoenix",
	    "Sam",
	    "John",
	    "Joel",
	    "Isabella",
	    "Ruby",
	    "Chloe",
	    "Olivia",
	    "Charlotte",
	    "Mia",
	    "Lily",
	    "Emily",
	    "Ella",
	    "Sienna",
	    "Sophie",
	    "Amelia",
	    "Grace",
	    "Ava",
	    "Zoe",
	    "Emma",
	    "Sophia",
	    "Matilda",
	    "Hannah",
	    "Jessica",
	    "Lucy",
	    "Georgia",
	    "Sarah",
	    "Abigail",
	    "Zara",
	    "Eva",
	    "Scarlett",
	    "Jasmine",
	    "Chelsea",
	    "Lilly",
	    "Ivy",
	    "Isla",
	    "Evie",
	    "Isabelle",
	    "Maddison",
	    "Layla",
	    "Summer",
	    "Annabelle",
	    "Alexis",
	    "Elizabeth",
	    "Bella",
	    "Holly",
	    "Lara",
	    "Madison",
	    "Alyssa",
	    "Maya",
	    "Tahlia",
	    "Claire",
	    "Hayley",
	    "Imogen",
	    "Jade",
	    "Ellie",
	    "Sofia",
	    "Addison",
	    "Molly",
	    "Phoebe",
	    "Alice",
	    "Savannah",
	    "Gabriella",
	    "Kayla",
	    "Mikayla",
	    "Abbey",
	    "Eliza",
	    "Willow",
	    "Alexandra",
	    "Poppy",
	    "Samantha",
	    "Stella",
	    "Amy",
	    "Amelie",
	    "Anna",
	    "Piper",
	    "Gemma",
	    "Isabel",
	    "Victoria",
	    "Stephanie",
	    "Caitlin",
	    "Heidi",
	    "Paige",
	    "Rose",
	    "Amber",
	    "Audrey",
	    "Claudia",
	    "Taylor",
	    "Madeline",
	    "Angelina",
	    "Natalie",
	    "Charli",
	    "Lauren",
	    "Ashley",
	    "Violet",
	    "Mackenzie",
	    "Abby",
	    "Skye",
	    "Lillian",
	    "Alana",
	    "Lola",
	    "Leah",
	    "Eve",
	    "Kiara"
	  ],
	  "last_name": [
	    "Smith",
	    "Jones",
	    "Williams",
	    "Brown",
	    "Wilson",
	    "Taylor",
	    "Johnson",
	    "White",
	    "Martin",
	    "Anderson",
	    "Thompson",
	    "Nguyen",
	    "Thomas",
	    "Walker",
	    "Harris",
	    "Lee",
	    "Ryan",
	    "Robinson",
	    "Kelly",
	    "King",
	    "Davis",
	    "Wright",
	    "Evans",
	    "Roberts",
	    "Green",
	    "Hall",
	    "Wood",
	    "Jackson",
	    "Clarke",
	    "Patel",
	    "Khan",
	    "Lewis",
	    "James",
	    "Phillips",
	    "Mason",
	    "Mitchell",
	    "Rose",
	    "Davies",
	    "Rodriguez",
	    "Cox",
	    "Alexander",
	    "Garden",
	    "Campbell",
	    "Johnston",
	    "Moore",
	    "Smyth",
	    "O'neill",
	    "Doherty",
	    "Stewart",
	    "Quinn",
	    "Murphy",
	    "Graham",
	    "Mclaughlin",
	    "Hamilton",
	    "Murray",
	    "Hughes",
	    "Robertson",
	    "Thomson",
	    "Scott",
	    "Macdonald",
	    "Reid",
	    "Clark",
	    "Ross",
	    "Young",
	    "Watson",
	    "Paterson",
	    "Morrison",
	    "Morgan",
	    "Griffiths",
	    "Edwards",
	    "Rees",
	    "Jenkins",
	    "Owen",
	    "Price",
	    "Moss",
	    "Richards",
	    "Abbott",
	    "Adams",
	    "Armstrong",
	    "Bahringer",
	    "Bailey",
	    "Barrows",
	    "Bartell",
	    "Bartoletti",
	    "Barton",
	    "Bauch",
	    "Baumbach",
	    "Bayer",
	    "Beahan",
	    "Beatty",
	    "Becker",
	    "Beier",
	    "Berge",
	    "Bergstrom",
	    "Bode",
	    "Bogan",
	    "Borer",
	    "Bosco",
	    "Botsford",
	    "Boyer",
	    "Boyle",
	    "Braun",
	    "Bruen",
	    "Carroll",
	    "Carter",
	    "Cartwright",
	    "Casper",
	    "Cassin",
	    "Champlin",
	    "Christiansen",
	    "Cole",
	    "Collier",
	    "Collins",
	    "Connelly",
	    "Conroy",
	    "Corkery",
	    "Cormier",
	    "Corwin",
	    "Cronin",
	    "Crooks",
	    "Cruickshank",
	    "Cummings",
	    "D'amore",
	    "Daniel",
	    "Dare",
	    "Daugherty",
	    "Dickens",
	    "Dickinson",
	    "Dietrich",
	    "Donnelly",
	    "Dooley",
	    "Douglas",
	    "Doyle",
	    "Durgan",
	    "Ebert",
	    "Emard",
	    "Emmerich",
	    "Erdman",
	    "Ernser",
	    "Fadel",
	    "Fahey",
	    "Farrell",
	    "Fay",
	    "Feeney",
	    "Feil",
	    "Ferry",
	    "Fisher",
	    "Flatley",
	    "Gibson",
	    "Gleason",
	    "Glover",
	    "Goldner",
	    "Goodwin",
	    "Grady",
	    "Grant",
	    "Greenfelder",
	    "Greenholt",
	    "Grimes",
	    "Gutmann",
	    "Hackett",
	    "Hahn",
	    "Haley",
	    "Hammes",
	    "Hand",
	    "Hane",
	    "Hansen",
	    "Harber",
	    "Hartmann",
	    "Harvey",
	    "Hayes",
	    "Heaney",
	    "Heathcote",
	    "Heller",
	    "Hermann",
	    "Hermiston",
	    "Hessel",
	    "Hettinger",
	    "Hickle",
	    "Hill",
	    "Hills",
	    "Hoppe",
	    "Howe",
	    "Howell",
	    "Hudson",
	    "Huel",
	    "Hyatt",
	    "Jacobi",
	    "Jacobs",
	    "Jacobson",
	    "Jerde",
	    "Johns",
	    "Keeling",
	    "Kemmer",
	    "Kessler",
	    "Kiehn",
	    "Kirlin",
	    "Klein",
	    "Koch",
	    "Koelpin",
	    "Kohler",
	    "Koss",
	    "Kovacek",
	    "Kreiger",
	    "Kris",
	    "Kuhlman",
	    "Kuhn",
	    "Kulas",
	    "Kunde",
	    "Kutch",
	    "Lakin",
	    "Lang",
	    "Langworth",
	    "Larkin",
	    "Larson",
	    "Leannon",
	    "Leffler",
	    "Little",
	    "Lockman",
	    "Lowe",
	    "Lynch",
	    "Mann",
	    "Marks",
	    "Marvin",
	    "Mayer",
	    "Mccullough",
	    "Mcdermott",
	    "Mckenzie",
	    "Miller",
	    "Mills",
	    "Monahan",
	    "Morissette",
	    "Mueller",
	    "Muller",
	    "Nader",
	    "Nicolas",
	    "Nolan",
	    "O'connell",
	    "O'conner",
	    "O'hara",
	    "O'keefe",
	    "Olson",
	    "O'reilly",
	    "Parisian",
	    "Parker",
	    "Quigley",
	    "Reilly",
	    "Reynolds",
	    "Rice",
	    "Ritchie",
	    "Rohan",
	    "Rolfson",
	    "Rowe",
	    "Russel",
	    "Rutherford",
	    "Sanford",
	    "Sauer",
	    "Schmidt",
	    "Schmitt",
	    "Schneider",
	    "Schroeder",
	    "Schultz",
	    "Shields",
	    "Smitham",
	    "Spencer",
	    "Stanton",
	    "Stark",
	    "Stokes",
	    "Swift",
	    "Tillman",
	    "Towne",
	    "Tremblay",
	    "Tromp",
	    "Turcotte",
	    "Turner",
	    "Walsh",
	    "Walter",
	    "Ward",
	    "Waters",
	    "Weber",
	    "Welch",
	    "West",
	    "Wilderman",
	    "Wilkinson",
	    "Williamson",
	    "Windler",
	    "Wolf"
	  ]
	};
	en_AU.company = {
	  "suffix": [
	    "Pty Ltd",
	    "and Sons",
	    "Corp",
	    "Group",
	    "Brothers",
	    "Partners"
	  ]
	};
	en_AU.internet = {
	  "domain_suffix": [
	    "com.au",
	    "com",
	    "net.au",
	    "net",
	    "org.au",
	    "org"
	  ]
	};
	en_AU.address = {
	  "state_abbr": [
	    "NSW",
	    "QLD",
	    "NT",
	    "SA",
	    "WA",
	    "TAS",
	    "ACT",
	    "VIC"
	  ],
	  "state": [
	    "New South Wales",
	    "Queensland",
	    "Northern Territory",
	    "South Australia",
	    "Western Australia",
	    "Tasmania",
	    "Australian Capital Territory",
	    "Victoria"
	  ],
	  "postcode": [
	    "0###",
	    "2###",
	    "3###",
	    "4###",
	    "5###",
	    "6###",
	    "7###"
	  ],
	  "building_number": [
	    "####",
	    "###",
	    "##"
	  ],
	  "street_suffix": [
	    "Avenue",
	    "Boulevard",
	    "Circle",
	    "Circuit",
	    "Court",
	    "Crescent",
	    "Crest",
	    "Drive",
	    "Estate Dr",
	    "Grove",
	    "Hill",
	    "Island",
	    "Junction",
	    "Knoll",
	    "Lane",
	    "Loop",
	    "Mall",
	    "Manor",
	    "Meadow",
	    "Mews",
	    "Parade",
	    "Parkway",
	    "Pass",
	    "Place",
	    "Plaza",
	    "Ridge",
	    "Road",
	    "Run",
	    "Square",
	    "Station St",
	    "Street",
	    "Summit",
	    "Terrace",
	    "Track",
	    "Trail",
	    "View Rd",
	    "Way"
	  ],
	  "default_country": [
	    "Australia"
	  ]
	};
	en_AU.phone_number = {
	  "formats": [
	    "0# #### ####",
	    "+61 # #### ####",
	    "04## ### ###",
	    "+61 4## ### ###"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_BORK = {};
	module["exports"] = en_BORK;
	en_BORK.title = "Bork (English)";
	en_BORK.lorem = {
	  "words": [
	    "Boot",
	    "I",
	    "Nu",
	    "Nur",
	    "Tu",
	    "Um",
	    "a",
	    "becoose-a",
	    "boot",
	    "bork",
	    "burn",
	    "chuuses",
	    "cumplete-a",
	    "cun",
	    "cunseqooences",
	    "curcoomstunces",
	    "dee",
	    "deeslikes",
	    "denuoonceeng",
	    "desures",
	    "du",
	    "eccuoont",
	    "ectooel",
	    "edfuntege-a",
	    "efueeds",
	    "egeeen",
	    "ell",
	    "ere-a",
	    "feend",
	    "foolt",
	    "frum",
	    "geefe-a",
	    "gesh",
	    "greet",
	    "heem",
	    "heppeeness",
	    "hes",
	    "hoo",
	    "hoomun",
	    "idea",
	    "ifer",
	    "in",
	    "incuoonter",
	    "injuy",
	    "itselff",
	    "ixcept",
	    "ixemple-a",
	    "ixerceese-a",
	    "ixpleeen",
	    "ixplurer",
	    "ixpuoond",
	    "ixtremely",
	    "knoo",
	    "lebureeuoos",
	    "lufes",
	    "meestekee",
	    "mester-booeelder",
	    "moost",
	    "mun",
	    "nu",
	    "nut",
	    "oobteeen",
	    "oocceseeunelly",
	    "ooccoor",
	    "ooff",
	    "oone-a",
	    "oor",
	    "peeen",
	    "peeenffool",
	    "physeecel",
	    "pleesoore-a",
	    "poorsooe-a",
	    "poorsooes",
	    "preeesing",
	    "prucoore-a",
	    "prudooces",
	    "reeght",
	    "reshunelly",
	    "resooltunt",
	    "sume-a",
	    "teecheengs",
	    "teke-a",
	    "thees",
	    "thet",
	    "thuse-a",
	    "treefiel",
	    "troot",
	    "tu",
	    "tueel",
	    "und",
	    "undertekes",
	    "unnuyeeng",
	    "uny",
	    "unyune-a",
	    "us",
	    "veell",
	    "veet",
	    "ves",
	    "vheech",
	    "vhu",
	    "yuoo",
	    "zee",
	    "zeere-a"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_CA = {};
	module["exports"] = en_CA;
	en_CA.title = "Canada (English)";
	en_CA.address = {
	  "postcode": [
	    "?#? #?#",
	    "?#?#?#"
	  ],
	  "state": [
	    "Alberta",
	    "British Columbia",
	    "Manitoba",
	    "New Brunswick",
	    "Newfoundland and Labrador",
	    "Nova Scotia",
	    "Northwest Territories",
	    "Nunavut",
	    "Ontario",
	    "Prince Edward Island",
	    "Quebec",
	    "Saskatchewan",
	    "Yukon"
	  ],
	  "state_abbr": [
	    "AB",
	    "BC",
	    "MB",
	    "NB",
	    "NL",
	    "NS",
	    "NU",
	    "NT",
	    "ON",
	    "PE",
	    "QC",
	    "SK",
	    "YK"
	  ],
	  "default_country": [
	    "Canada"
	  ]
	};
	en_CA.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.ca",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "ca",
	    "com",
	    "biz",
	    "info",
	    "name",
	    "net",
	    "org"
	  ]
	};
	en_CA.phone_number = {
	  "formats": [
	    "###-###-####",
	    "(###)###-####",
	    "###.###.####",
	    "1-###-###-####",
	    "###-###-#### x###",
	    "(###)###-#### x###",
	    "1-###-###-#### x###",
	    "###.###.#### x###",
	    "###-###-#### x####",
	    "(###)###-#### x####",
	    "1-###-###-#### x####",
	    "###.###.#### x####",
	    "###-###-#### x#####",
	    "(###)###-#### x#####",
	    "1-###-###-#### x#####",
	    "###.###.#### x#####"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_GB = {};
	module["exports"] = en_GB;
	en_GB.title = "Great Britain (English)";
	en_GB.address = {
	  "postcode": "/[A-PR-UWYZ][A-HK-Y]?[0-9][ABEHMNPRVWXY0-9]? [0-9][ABD-HJLN-UW-Z]{2}/",
	  "county": [
	    "Avon",
	    "Bedfordshire",
	    "Berkshire",
	    "Borders",
	    "Buckinghamshire",
	    "Cambridgeshire",
	    "Central",
	    "Cheshire",
	    "Cleveland",
	    "Clwyd",
	    "Cornwall",
	    "County Antrim",
	    "County Armagh",
	    "County Down",
	    "County Fermanagh",
	    "County Londonderry",
	    "County Tyrone",
	    "Cumbria",
	    "Derbyshire",
	    "Devon",
	    "Dorset",
	    "Dumfries and Galloway",
	    "Durham",
	    "Dyfed",
	    "East Sussex",
	    "Essex",
	    "Fife",
	    "Gloucestershire",
	    "Grampian",
	    "Greater Manchester",
	    "Gwent",
	    "Gwynedd County",
	    "Hampshire",
	    "Herefordshire",
	    "Hertfordshire",
	    "Highlands and Islands",
	    "Humberside",
	    "Isle of Wight",
	    "Kent",
	    "Lancashire",
	    "Leicestershire",
	    "Lincolnshire",
	    "Lothian",
	    "Merseyside",
	    "Mid Glamorgan",
	    "Norfolk",
	    "North Yorkshire",
	    "Northamptonshire",
	    "Northumberland",
	    "Nottinghamshire",
	    "Oxfordshire",
	    "Powys",
	    "Rutland",
	    "Shropshire",
	    "Somerset",
	    "South Glamorgan",
	    "South Yorkshire",
	    "Staffordshire",
	    "Strathclyde",
	    "Suffolk",
	    "Surrey",
	    "Tayside",
	    "Tyne and Wear",
	    "Warwickshire",
	    "West Glamorgan",
	    "West Midlands",
	    "West Sussex",
	    "West Yorkshire",
	    "Wiltshire",
	    "Worcestershire"
	  ],
	  "uk_country": [
	    "England",
	    "Scotland",
	    "Wales",
	    "Northern Ireland"
	  ],
	  "default_country": [
	    "England",
	    "Scotland",
	    "Wales",
	    "Northern Ireland"
	  ]
	};
	en_GB.internet = {
	  "domain_suffix": [
	    "co.uk",
	    "com",
	    "biz",
	    "info",
	    "name"
	  ]
	};
	en_GB.phone_number = {
	  "formats": [
	    "01#### #####",
	    "01### ######",
	    "01#1 ### ####",
	    "011# ### ####",
	    "02# #### ####",
	    "03## ### ####",
	    "055 #### ####",
	    "056 #### ####",
	    "0800 ### ####",
	    "08## ### ####",
	    "09## ### ####",
	    "016977 ####",
	    "01### #####",
	    "0500 ######",
	    "0800 ######"
	  ]
	};
	en_GB.cell_phone = {
	  "formats": [
	    "074## ######",
	    "075## ######",
	    "076## ######",
	    "077## ######",
	    "078## ######",
	    "079## ######"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_IND = {};
	module["exports"] = en_IND;
	en_IND.title = "India (English)";
	en_IND.name = {
	  "first_name": [
	    "Aadrika",
	    "Aanandinii",
	    "Aaratrika",
	    "Aarya",
	    "Arya",
	    "Aashritha",
	    "Aatmaja",
	    "Atmaja",
	    "Abhaya",
	    "Adwitiya",
	    "Agrata",
	    "Ahilya",
	    "Ahalya",
	    "Aishani",
	    "Akshainie",
	    "Akshata",
	    "Akshita",
	    "Akula",
	    "Ambar",
	    "Amodini",
	    "Amrita",
	    "Amritambu",
	    "Anala",
	    "Anamika",
	    "Ananda",
	    "Anandamayi",
	    "Ananta",
	    "Anila",
	    "Anjali",
	    "Anjushri",
	    "Anjushree",
	    "Annapurna",
	    "Anshula",
	    "Anuja",
	    "Anusuya",
	    "Anasuya",
	    "Anasooya",
	    "Anwesha",
	    "Apsara",
	    "Aruna",
	    "Asha",
	    "Aasa",
	    "Aasha",
	    "Aslesha",
	    "Atreyi",
	    "Atreyee",
	    "Avani",
	    "Abani",
	    "Avantika",
	    "Ayushmati",
	    "Baidehi",
	    "Vaidehi",
	    "Bala",
	    "Baala",
	    "Balamani",
	    "Basanti",
	    "Vasanti",
	    "Bela",
	    "Bhadra",
	    "Bhagirathi",
	    "Bhagwanti",
	    "Bhagwati",
	    "Bhamini",
	    "Bhanumati",
	    "Bhaanumati",
	    "Bhargavi",
	    "Bhavani",
	    "Bhilangana",
	    "Bilwa",
	    "Bilva",
	    "Buddhana",
	    "Chakrika",
	    "Chanda",
	    "Chandi",
	    "Chandni",
	    "Chandini",
	    "Chandani",
	    "Chandra",
	    "Chandira",
	    "Chandrabhaga",
	    "Chandrakala",
	    "Chandrakin",
	    "Chandramani",
	    "Chandrani",
	    "Chandraprabha",
	    "Chandraswaroopa",
	    "Chandravati",
	    "Chapala",
	    "Charumati",
	    "Charvi",
	    "Chatura",
	    "Chitrali",
	    "Chitramala",
	    "Chitrangada",
	    "Daksha",
	    "Dakshayani",
	    "Damayanti",
	    "Darshwana",
	    "Deepali",
	    "Dipali",
	    "Deeptimoyee",
	    "Deeptimayee",
	    "Devangana",
	    "Devani",
	    "Devasree",
	    "Devi",
	    "Daevi",
	    "Devika",
	    "Daevika",
	    "Dhaanyalakshmi",
	    "Dhanalakshmi",
	    "Dhana",
	    "Dhanadeepa",
	    "Dhara",
	    "Dharani",
	    "Dharitri",
	    "Dhatri",
	    "Diksha",
	    "Deeksha",
	    "Divya",
	    "Draupadi",
	    "Dulari",
	    "Durga",
	    "Durgeshwari",
	    "Ekaparnika",
	    "Elakshi",
	    "Enakshi",
	    "Esha",
	    "Eshana",
	    "Eshita",
	    "Gautami",
	    "Gayatri",
	    "Geeta",
	    "Geetanjali",
	    "Gitanjali",
	    "Gemine",
	    "Gemini",
	    "Girja",
	    "Girija",
	    "Gita",
	    "Hamsini",
	    "Harinakshi",
	    "Harita",
	    "Heema",
	    "Himadri",
	    "Himani",
	    "Hiranya",
	    "Indira",
	    "Jaimini",
	    "Jaya",
	    "Jyoti",
	    "Jyotsana",
	    "Kali",
	    "Kalinda",
	    "Kalpana",
	    "Kalyani",
	    "Kama",
	    "Kamala",
	    "Kamla",
	    "Kanchan",
	    "Kanishka",
	    "Kanti",
	    "Kashyapi",
	    "Kumari",
	    "Kumuda",
	    "Lakshmi",
	    "Laxmi",
	    "Lalita",
	    "Lavanya",
	    "Leela",
	    "Lila",
	    "Leela",
	    "Madhuri",
	    "Malti",
	    "Malati",
	    "Mandakini",
	    "Mandaakin",
	    "Mangala",
	    "Mangalya",
	    "Mani",
	    "Manisha",
	    "Manjusha",
	    "Meena",
	    "Mina",
	    "Meenakshi",
	    "Minakshi",
	    "Menka",
	    "Menaka",
	    "Mohana",
	    "Mohini",
	    "Nalini",
	    "Nikita",
	    "Ojaswini",
	    "Omana",
	    "Oormila",
	    "Urmila",
	    "Opalina",
	    "Opaline",
	    "Padma",
	    "Parvati",
	    "Poornima",
	    "Purnima",
	    "Pramila",
	    "Prasanna",
	    "Preity",
	    "Prema",
	    "Priya",
	    "Priyala",
	    "Pushti",
	    "Radha",
	    "Rageswari",
	    "Rageshwari",
	    "Rajinder",
	    "Ramaa",
	    "Rati",
	    "Rita",
	    "Rohana",
	    "Rukhmani",
	    "Rukmin",
	    "Rupinder",
	    "Sanya",
	    "Sarada",
	    "Sharda",
	    "Sarala",
	    "Sarla",
	    "Saraswati",
	    "Sarisha",
	    "Saroja",
	    "Shakti",
	    "Shakuntala",
	    "Shanti",
	    "Sharmila",
	    "Shashi",
	    "Shashikala",
	    "Sheela",
	    "Shivakari",
	    "Shobhana",
	    "Shresth",
	    "Shresthi",
	    "Shreya",
	    "Shreyashi",
	    "Shridevi",
	    "Shrishti",
	    "Shubha",
	    "Shubhaprada",
	    "Siddhi",
	    "Sitara",
	    "Sloka",
	    "Smita",
	    "Smriti",
	    "Soma",
	    "Subhashini",
	    "Subhasini",
	    "Sucheta",
	    "Sudeva",
	    "Sujata",
	    "Sukanya",
	    "Suma",
	    "Suma",
	    "Sumitra",
	    "Sunita",
	    "Suryakantam",
	    "Sushma",
	    "Swara",
	    "Swarnalata",
	    "Sweta",
	    "Shwet",
	    "Tanirika",
	    "Tanushree",
	    "Tanushri",
	    "Tanushri",
	    "Tanya",
	    "Tara",
	    "Trisha",
	    "Uma",
	    "Usha",
	    "Vaijayanti",
	    "Vaijayanthi",
	    "Baijayanti",
	    "Vaishvi",
	    "Vaishnavi",
	    "Vaishno",
	    "Varalakshmi",
	    "Vasudha",
	    "Vasundhara",
	    "Veda",
	    "Vedanshi",
	    "Vidya",
	    "Vimala",
	    "Vrinda",
	    "Vrund",
	    "Aadi",
	    "Aadidev",
	    "Aadinath",
	    "Aaditya",
	    "Aagam",
	    "Aagney",
	    "Aamod",
	    "Aanandaswarup",
	    "Anand Swarup",
	    "Aanjaneya",
	    "Anjaneya",
	    "Aaryan",
	    "Aryan",
	    "Aatmaj",
	    "Aatreya",
	    "Aayushmaan",
	    "Aayushman",
	    "Abhaidev",
	    "Abhaya",
	    "Abhirath",
	    "Abhisyanta",
	    "Acaryatanaya",
	    "Achalesvara",
	    "Acharyanandana",
	    "Acharyasuta",
	    "Achintya",
	    "Achyut",
	    "Adheesh",
	    "Adhiraj",
	    "Adhrit",
	    "Adikavi",
	    "Adinath",
	    "Aditeya",
	    "Aditya",
	    "Adityanandan",
	    "Adityanandana",
	    "Adripathi",
	    "Advaya",
	    "Agasti",
	    "Agastya",
	    "Agneya",
	    "Aagneya",
	    "Agnimitra",
	    "Agniprava",
	    "Agnivesh",
	    "Agrata",
	    "Ajit",
	    "Ajeet",
	    "Akroor",
	    "Akshaj",
	    "Akshat",
	    "Akshayakeerti",
	    "Alok",
	    "Aalok",
	    "Amaranaath",
	    "Amarnath",
	    "Amaresh",
	    "Ambar",
	    "Ameyatma",
	    "Amish",
	    "Amogh",
	    "Amrit",
	    "Anaadi",
	    "Anagh",
	    "Anal",
	    "Anand",
	    "Aanand",
	    "Anang",
	    "Anil",
	    "Anilaabh",
	    "Anilabh",
	    "Anish",
	    "Ankal",
	    "Anunay",
	    "Anurag",
	    "Anuraag",
	    "Archan",
	    "Arindam",
	    "Arjun",
	    "Arnesh",
	    "Arun",
	    "Ashlesh",
	    "Ashok",
	    "Atmanand",
	    "Atmananda",
	    "Avadhesh",
	    "Baalaaditya",
	    "Baladitya",
	    "Baalagopaal",
	    "Balgopal",
	    "Balagopal",
	    "Bahula",
	    "Bakula",
	    "Bala",
	    "Balaaditya",
	    "Balachandra",
	    "Balagovind",
	    "Bandhu",
	    "Bandhul",
	    "Bankim",
	    "Bankimchandra",
	    "Bhadrak",
	    "Bhadraksh",
	    "Bhadran",
	    "Bhagavaan",
	    "Bhagvan",
	    "Bharadwaj",
	    "Bhardwaj",
	    "Bharat",
	    "Bhargava",
	    "Bhasvan",
	    "Bhaasvan",
	    "Bhaswar",
	    "Bhaaswar",
	    "Bhaumik",
	    "Bhaves",
	    "Bheeshma",
	    "Bhisham",
	    "Bhishma",
	    "Bhima",
	    "Bhoj",
	    "Bhramar",
	    "Bhudev",
	    "Bhudeva",
	    "Bhupati",
	    "Bhoopati",
	    "Bhoopat",
	    "Bhupen",
	    "Bhushan",
	    "Bhooshan",
	    "Bhushit",
	    "Bhooshit",
	    "Bhuvanesh",
	    "Bhuvaneshwar",
	    "Bilva",
	    "Bodhan",
	    "Brahma",
	    "Brahmabrata",
	    "Brahmanandam",
	    "Brahmaanand",
	    "Brahmdev",
	    "Brajendra",
	    "Brajesh",
	    "Brijesh",
	    "Birjesh",
	    "Budhil",
	    "Chakor",
	    "Chakradhar",
	    "Chakravartee",
	    "Chakravarti",
	    "Chanakya",
	    "Chaanakya",
	    "Chandak",
	    "Chandan",
	    "Chandra",
	    "Chandraayan",
	    "Chandrabhan",
	    "Chandradev",
	    "Chandraketu",
	    "Chandramauli",
	    "Chandramohan",
	    "Chandran",
	    "Chandranath",
	    "Chapal",
	    "Charak",
	    "Charuchandra",
	    "Chaaruchandra",
	    "Charuvrat",
	    "Chatur",
	    "Chaturaanan",
	    "Chaturbhuj",
	    "Chetan",
	    "Chaten",
	    "Chaitan",
	    "Chetanaanand",
	    "Chidaakaash",
	    "Chidaatma",
	    "Chidambar",
	    "Chidambaram",
	    "Chidananda",
	    "Chinmayanand",
	    "Chinmayananda",
	    "Chiranjeev",
	    "Chiranjeeve",
	    "Chitraksh",
	    "Daiwik",
	    "Daksha",
	    "Damodara",
	    "Dandak",
	    "Dandapaani",
	    "Darshan",
	    "Datta",
	    "Dayaamay",
	    "Dayamayee",
	    "Dayaananda",
	    "Dayaanidhi",
	    "Kin",
	    "Deenabandhu",
	    "Deepan",
	    "Deepankar",
	    "Dipankar",
	    "Deependra",
	    "Dipendra",
	    "Deepesh",
	    "Dipesh",
	    "Deeptanshu",
	    "Deeptendu",
	    "Diptendu",
	    "Deeptiman",
	    "Deeptimoy",
	    "Deeptimay",
	    "Dev",
	    "Deb",
	    "Devadatt",
	    "Devagya",
	    "Devajyoti",
	    "Devak",
	    "Devdan",
	    "Deven",
	    "Devesh",
	    "Deveshwar",
	    "Devi",
	    "Devvrat",
	    "Dhananjay",
	    "Dhanapati",
	    "Dhanpati",
	    "Dhanesh",
	    "Dhanu",
	    "Dhanvin",
	    "Dharmaketu",
	    "Dhruv",
	    "Dhyanesh",
	    "Dhyaneshwar",
	    "Digambar",
	    "Digambara",
	    "Dinakar",
	    "Dinkar",
	    "Dinesh",
	    "Divaakar",
	    "Divakar",
	    "Deevakar",
	    "Divjot",
	    "Dron",
	    "Drona",
	    "Dwaipayan",
	    "Dwaipayana",
	    "Eekalabya",
	    "Ekalavya",
	    "Ekaksh",
	    "Ekaaksh",
	    "Ekaling",
	    "Ekdant",
	    "Ekadant",
	    "Gajaadhar",
	    "Gajadhar",
	    "Gajbaahu",
	    "Gajabahu",
	    "Ganak",
	    "Ganaka",
	    "Ganapati",
	    "Gandharv",
	    "Gandharva",
	    "Ganesh",
	    "Gangesh",
	    "Garud",
	    "Garuda",
	    "Gati",
	    "Gatik",
	    "Gaurang",
	    "Gauraang",
	    "Gauranga",
	    "Gouranga",
	    "Gautam",
	    "Gautama",
	    "Goutam",
	    "Ghanaanand",
	    "Ghanshyam",
	    "Ghanashyam",
	    "Giri",
	    "Girik",
	    "Girika",
	    "Girindra",
	    "Giriraaj",
	    "Giriraj",
	    "Girish",
	    "Gopal",
	    "Gopaal",
	    "Gopi",
	    "Gopee",
	    "Gorakhnath",
	    "Gorakhanatha",
	    "Goswamee",
	    "Goswami",
	    "Gotum",
	    "Gautam",
	    "Govinda",
	    "Gobinda",
	    "Gudakesha",
	    "Gudakesa",
	    "Gurdev",
	    "Guru",
	    "Hari",
	    "Harinarayan",
	    "Harit",
	    "Himadri",
	    "Hiranmay",
	    "Hiranmaya",
	    "Hiranya",
	    "Inder",
	    "Indra",
	    "Indra",
	    "Jagadish",
	    "Jagadisha",
	    "Jagathi",
	    "Jagdeep",
	    "Jagdish",
	    "Jagmeet",
	    "Jahnu",
	    "Jai",
	    "Javas",
	    "Jay",
	    "Jitendra",
	    "Jitender",
	    "Jyotis",
	    "Kailash",
	    "Kama",
	    "Kamalesh",
	    "Kamlesh",
	    "Kanak",
	    "Kanaka",
	    "Kannan",
	    "Kannen",
	    "Karan",
	    "Karthik",
	    "Kartik",
	    "Karunanidhi",
	    "Kashyap",
	    "Kiran",
	    "Kirti",
	    "Keerti",
	    "Krishna",
	    "Krishnadas",
	    "Krishnadasa",
	    "Kumar",
	    "Lai",
	    "Lakshman",
	    "Laxman",
	    "Lakshmidhar",
	    "Lakshminath",
	    "Lal",
	    "Laal",
	    "Mahendra",
	    "Mohinder",
	    "Mahesh",
	    "Maheswar",
	    "Mani",
	    "Manik",
	    "Manikya",
	    "Manoj",
	    "Marut",
	    "Mayoor",
	    "Meghnad",
	    "Meghnath",
	    "Mohan",
	    "Mukesh",
	    "Mukul",
	    "Nagabhushanam",
	    "Nanda",
	    "Narayan",
	    "Narendra",
	    "Narinder",
	    "Naveen",
	    "Navin",
	    "Nawal",
	    "Naval",
	    "Nimit",
	    "Niranjan",
	    "Nirbhay",
	    "Niro",
	    "Param",
	    "Paramartha",
	    "Pran",
	    "Pranay",
	    "Prasad",
	    "Prathamesh",
	    "Prayag",
	    "Prem",
	    "Puneet",
	    "Purushottam",
	    "Rahul",
	    "Raj",
	    "Rajan",
	    "Rajendra",
	    "Rajinder",
	    "Rajiv",
	    "Rakesh",
	    "Ramesh",
	    "Rameshwar",
	    "Ranjit",
	    "Ranjeet",
	    "Ravi",
	    "Ritesh",
	    "Rohan",
	    "Rohit",
	    "Rudra",
	    "Sachin",
	    "Sameer",
	    "Samir",
	    "Sanjay",
	    "Sanka",
	    "Sarvin",
	    "Satish",
	    "Satyen",
	    "Shankar",
	    "Shantanu",
	    "Shashi",
	    "Sher",
	    "Shiv",
	    "Siddarth",
	    "Siddhran",
	    "Som",
	    "Somu",
	    "Somnath",
	    "Subhash",
	    "Subodh",
	    "Suman",
	    "Suresh",
	    "Surya",
	    "Suryakant",
	    "Suryakanta",
	    "Sushil",
	    "Susheel",
	    "Swami",
	    "Swapnil",
	    "Tapan",
	    "Tara",
	    "Tarun",
	    "Tej",
	    "Tejas",
	    "Trilochan",
	    "Trilochana",
	    "Trilok",
	    "Trilokesh",
	    "Triloki",
	    "Triloki Nath",
	    "Trilokanath",
	    "Tushar",
	    "Udai",
	    "Udit",
	    "Ujjawal",
	    "Ujjwal",
	    "Umang",
	    "Upendra",
	    "Uttam",
	    "Vasudev",
	    "Vasudeva",
	    "Vedang",
	    "Vedanga",
	    "Vidhya",
	    "Vidur",
	    "Vidhur",
	    "Vijay",
	    "Vimal",
	    "Vinay",
	    "Vishnu",
	    "Bishnu",
	    "Vishwamitra",
	    "Vyas",
	    "Yogendra",
	    "Yoginder",
	    "Yogesh"
	  ],
	  "last_name": [
	    "Abbott",
	    "Achari",
	    "Acharya",
	    "Adiga",
	    "Agarwal",
	    "Ahluwalia",
	    "Ahuja",
	    "Arora",
	    "Asan",
	    "Bandopadhyay",
	    "Banerjee",
	    "Bharadwaj",
	    "Bhat",
	    "Butt",
	    "Bhattacharya",
	    "Bhattathiri",
	    "Chaturvedi",
	    "Chattopadhyay",
	    "Chopra",
	    "Desai",
	    "Deshpande",
	    "Devar",
	    "Dhawan",
	    "Dubashi",
	    "Dutta",
	    "Dwivedi",
	    "Embranthiri",
	    "Ganaka",
	    "Gandhi",
	    "Gill",
	    "Gowda",
	    "Guha",
	    "Guneta",
	    "Gupta",
	    "Iyer",
	    "Iyengar",
	    "Jain",
	    "Jha",
	    "Johar",
	    "Joshi",
	    "Kakkar",
	    "Kaniyar",
	    "Kapoor",
	    "Kaul",
	    "Kaur",
	    "Khan",
	    "Khanna",
	    "Khatri",
	    "Kocchar",
	    "Mahajan",
	    "Malik",
	    "Marar",
	    "Menon",
	    "Mehra",
	    "Mehrotra",
	    "Mishra",
	    "Mukhopadhyay",
	    "Nayar",
	    "Naik",
	    "Nair",
	    "Nambeesan",
	    "Namboothiri",
	    "Nehru",
	    "Pandey",
	    "Panicker",
	    "Patel",
	    "Patil",
	    "Pilla",
	    "Pillai",
	    "Pothuvaal",
	    "Prajapat",
	    "Rana",
	    "Reddy",
	    "Saini",
	    "Sethi",
	    "Shah",
	    "Sharma",
	    "Shukla",
	    "Singh",
	    "Sinha",
	    "Somayaji",
	    "Tagore",
	    "Talwar",
	    "Tandon",
	    "Trivedi",
	    "Varrier",
	    "Varma",
	    "Varman",
	    "Verma"
	  ]
	};
	en_IND.address = {
	  "postcode": [
	    "?#? #?#"
	  ],
	  "state": [
	    "Andra Pradesh",
	    "Arunachal Pradesh",
	    "Assam",
	    "Bihar",
	    "Chhattisgarh",
	    "Goa",
	    "Gujarat",
	    "Haryana",
	    "Himachal Pradesh",
	    "Jammu and Kashmir",
	    "Jharkhand",
	    "Karnataka",
	    "Kerala",
	    "Madya Pradesh",
	    "Maharashtra",
	    "Manipur",
	    "Meghalaya",
	    "Mizoram",
	    "Nagaland",
	    "Orissa",
	    "Punjab",
	    "Rajasthan",
	    "Sikkim",
	    "Tamil Nadu",
	    "Tripura",
	    "Uttaranchal",
	    "Uttar Pradesh",
	    "West Bengal",
	    "Andaman and Nicobar Islands",
	    "Chandigarh",
	    "Dadar and Nagar Haveli",
	    "Daman and Diu",
	    "Delhi",
	    "Lakshadweep",
	    "Pondicherry"
	  ],
	  "state_abbr": [
	    "AP",
	    "AR",
	    "AS",
	    "BR",
	    "CG",
	    "DL",
	    "GA",
	    "GJ",
	    "HR",
	    "HP",
	    "JK",
	    "JS",
	    "KA",
	    "KL",
	    "MP",
	    "MH",
	    "MN",
	    "ML",
	    "MZ",
	    "NL",
	    "OR",
	    "PB",
	    "RJ",
	    "SK",
	    "TN",
	    "TR",
	    "UK",
	    "UP",
	    "WB",
	    "AN",
	    "CH",
	    "DN",
	    "DD",
	    "LD",
	    "PY"
	  ],
	  "default_country": [
	    "India",
	    "Indian Republic",
	    "Bharat",
	    "Hindustan"
	  ]
	};
	en_IND.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.co.in",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "in",
	    "com",
	    "biz",
	    "info",
	    "name",
	    "net",
	    "org",
	    "co.in"
	  ]
	};
	en_IND.company = {
	  "suffix": [
	    "Pvt Ltd",
	    "Limited",
	    "Ltd",
	    "and Sons",
	    "Corp",
	    "Group",
	    "Brothers"
	  ]
	};
	en_IND.phone_number = {
	  "formats": [
	    "+91###-###-####",
	    "+91##########",
	    "+91-###-#######"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_US = {};
	module["exports"] = en_US;
	en_US.title = "United States (English)";
	en_US.internet = {
	  "domain_suffix": [
	    "com",
	    "us",
	    "biz",
	    "info",
	    "name",
	    "net",
	    "org"
	  ]
	};
	en_US.address = {
	  "default_country": [
	    "United States",
	    "United States of America",
	    "USA"
	  ],
	  "postcode_by_state": {
	    "AL": "350##",
	    "AK": "995##",
	    "AS": "967##",
	    "AZ": "850##",
	    "AR": "717##",
	    "CA": "900##",
	    "CO": "800##",
	    "CT": "061##",
	    "DC": "204##",
	    "DE": "198##",
	    "FL": "322##",
	    "GA": "301##",
	    "HI": "967##",
	    "ID": "832##",
	    "IL": "600##",
	    "IN": "463##",
	    "IA": "510##",
	    "KS": "666##",
	    "KY": "404##",
	    "LA": "701##",
	    "ME": "042##",
	    "MD": "210##",
	    "MA": "026##",
	    "MI": "480##",
	    "MN": "555##",
	    "MS": "387##",
	    "MO": "650##",
	    "MT": "590##",
	    "NE": "688##",
	    "NV": "898##",
	    "NH": "036##",
	    "NJ": "076##",
	    "NM": "880##",
	    "NY": "122##",
	    "NC": "288##",
	    "ND": "586##",
	    "OH": "444##",
	    "OK": "730##",
	    "OR": "979##",
	    "PA": "186##",
	    "RI": "029##",
	    "SC": "299##",
	    "SD": "577##",
	    "TN": "383##",
	    "TX": "798##",
	    "UT": "847##",
	    "VT": "050##",
	    "VA": "222##",
	    "WA": "990##",
	    "WV": "247##",
	    "WI": "549##",
	    "WY": "831##"
	  }
	};
	en_US.phone_number = {
	  "area_code": [
	    "201",
	    "202",
	    "203",
	    "205",
	    "206",
	    "207",
	    "208",
	    "209",
	    "210",
	    "212",
	    "213",
	    "214",
	    "215",
	    "216",
	    "217",
	    "218",
	    "219",
	    "224",
	    "225",
	    "227",
	    "228",
	    "229",
	    "231",
	    "234",
	    "239",
	    "240",
	    "248",
	    "251",
	    "252",
	    "253",
	    "254",
	    "256",
	    "260",
	    "262",
	    "267",
	    "269",
	    "270",
	    "276",
	    "281",
	    "283",
	    "301",
	    "302",
	    "303",
	    "304",
	    "305",
	    "307",
	    "308",
	    "309",
	    "310",
	    "312",
	    "313",
	    "314",
	    "315",
	    "316",
	    "317",
	    "318",
	    "319",
	    "320",
	    "321",
	    "323",
	    "330",
	    "331",
	    "334",
	    "336",
	    "337",
	    "339",
	    "347",
	    "351",
	    "352",
	    "360",
	    "361",
	    "386",
	    "401",
	    "402",
	    "404",
	    "405",
	    "406",
	    "407",
	    "408",
	    "409",
	    "410",
	    "412",
	    "413",
	    "414",
	    "415",
	    "417",
	    "419",
	    "423",
	    "424",
	    "425",
	    "434",
	    "435",
	    "440",
	    "443",
	    "445",
	    "464",
	    "469",
	    "470",
	    "475",
	    "478",
	    "479",
	    "480",
	    "484",
	    "501",
	    "502",
	    "503",
	    "504",
	    "505",
	    "507",
	    "508",
	    "509",
	    "510",
	    "512",
	    "513",
	    "515",
	    "516",
	    "517",
	    "518",
	    "520",
	    "530",
	    "540",
	    "541",
	    "551",
	    "557",
	    "559",
	    "561",
	    "562",
	    "563",
	    "564",
	    "567",
	    "570",
	    "571",
	    "573",
	    "574",
	    "580",
	    "585",
	    "586",
	    "601",
	    "602",
	    "603",
	    "605",
	    "606",
	    "607",
	    "608",
	    "609",
	    "610",
	    "612",
	    "614",
	    "615",
	    "616",
	    "617",
	    "618",
	    "619",
	    "620",
	    "623",
	    "626",
	    "630",
	    "631",
	    "636",
	    "641",
	    "646",
	    "650",
	    "651",
	    "660",
	    "661",
	    "662",
	    "667",
	    "678",
	    "682",
	    "701",
	    "702",
	    "703",
	    "704",
	    "706",
	    "707",
	    "708",
	    "712",
	    "713",
	    "714",
	    "715",
	    "716",
	    "717",
	    "718",
	    "719",
	    "720",
	    "724",
	    "727",
	    "731",
	    "732",
	    "734",
	    "737",
	    "740",
	    "754",
	    "757",
	    "760",
	    "763",
	    "765",
	    "770",
	    "772",
	    "773",
	    "774",
	    "775",
	    "781",
	    "785",
	    "786",
	    "801",
	    "802",
	    "803",
	    "804",
	    "805",
	    "806",
	    "808",
	    "810",
	    "812",
	    "813",
	    "814",
	    "815",
	    "816",
	    "817",
	    "818",
	    "828",
	    "830",
	    "831",
	    "832",
	    "835",
	    "843",
	    "845",
	    "847",
	    "848",
	    "850",
	    "856",
	    "857",
	    "858",
	    "859",
	    "860",
	    "862",
	    "863",
	    "864",
	    "865",
	    "870",
	    "872",
	    "878",
	    "901",
	    "903",
	    "904",
	    "906",
	    "907",
	    "908",
	    "909",
	    "910",
	    "912",
	    "913",
	    "914",
	    "915",
	    "916",
	    "917",
	    "918",
	    "919",
	    "920",
	    "925",
	    "928",
	    "931",
	    "936",
	    "937",
	    "940",
	    "941",
	    "947",
	    "949",
	    "952",
	    "954",
	    "956",
	    "959",
	    "970",
	    "971",
	    "972",
	    "973",
	    "975",
	    "978",
	    "979",
	    "980",
	    "984",
	    "985",
	    "989"
	  ],
	  "exchange_code": [
	    "201",
	    "202",
	    "203",
	    "205",
	    "206",
	    "207",
	    "208",
	    "209",
	    "210",
	    "212",
	    "213",
	    "214",
	    "215",
	    "216",
	    "217",
	    "218",
	    "219",
	    "224",
	    "225",
	    "227",
	    "228",
	    "229",
	    "231",
	    "234",
	    "239",
	    "240",
	    "248",
	    "251",
	    "252",
	    "253",
	    "254",
	    "256",
	    "260",
	    "262",
	    "267",
	    "269",
	    "270",
	    "276",
	    "281",
	    "283",
	    "301",
	    "302",
	    "303",
	    "304",
	    "305",
	    "307",
	    "308",
	    "309",
	    "310",
	    "312",
	    "313",
	    "314",
	    "315",
	    "316",
	    "317",
	    "318",
	    "319",
	    "320",
	    "321",
	    "323",
	    "330",
	    "331",
	    "334",
	    "336",
	    "337",
	    "339",
	    "347",
	    "351",
	    "352",
	    "360",
	    "361",
	    "386",
	    "401",
	    "402",
	    "404",
	    "405",
	    "406",
	    "407",
	    "408",
	    "409",
	    "410",
	    "412",
	    "413",
	    "414",
	    "415",
	    "417",
	    "419",
	    "423",
	    "424",
	    "425",
	    "434",
	    "435",
	    "440",
	    "443",
	    "445",
	    "464",
	    "469",
	    "470",
	    "475",
	    "478",
	    "479",
	    "480",
	    "484",
	    "501",
	    "502",
	    "503",
	    "504",
	    "505",
	    "507",
	    "508",
	    "509",
	    "510",
	    "512",
	    "513",
	    "515",
	    "516",
	    "517",
	    "518",
	    "520",
	    "530",
	    "540",
	    "541",
	    "551",
	    "557",
	    "559",
	    "561",
	    "562",
	    "563",
	    "564",
	    "567",
	    "570",
	    "571",
	    "573",
	    "574",
	    "580",
	    "585",
	    "586",
	    "601",
	    "602",
	    "603",
	    "605",
	    "606",
	    "607",
	    "608",
	    "609",
	    "610",
	    "612",
	    "614",
	    "615",
	    "616",
	    "617",
	    "618",
	    "619",
	    "620",
	    "623",
	    "626",
	    "630",
	    "631",
	    "636",
	    "641",
	    "646",
	    "650",
	    "651",
	    "660",
	    "661",
	    "662",
	    "667",
	    "678",
	    "682",
	    "701",
	    "702",
	    "703",
	    "704",
	    "706",
	    "707",
	    "708",
	    "712",
	    "713",
	    "714",
	    "715",
	    "716",
	    "717",
	    "718",
	    "719",
	    "720",
	    "724",
	    "727",
	    "731",
	    "732",
	    "734",
	    "737",
	    "740",
	    "754",
	    "757",
	    "760",
	    "763",
	    "765",
	    "770",
	    "772",
	    "773",
	    "774",
	    "775",
	    "781",
	    "785",
	    "786",
	    "801",
	    "802",
	    "803",
	    "804",
	    "805",
	    "806",
	    "808",
	    "810",
	    "812",
	    "813",
	    "814",
	    "815",
	    "816",
	    "817",
	    "818",
	    "828",
	    "830",
	    "831",
	    "832",
	    "835",
	    "843",
	    "845",
	    "847",
	    "848",
	    "850",
	    "856",
	    "857",
	    "858",
	    "859",
	    "860",
	    "862",
	    "863",
	    "864",
	    "865",
	    "870",
	    "872",
	    "878",
	    "901",
	    "903",
	    "904",
	    "906",
	    "907",
	    "908",
	    "909",
	    "910",
	    "912",
	    "913",
	    "914",
	    "915",
	    "916",
	    "917",
	    "918",
	    "919",
	    "920",
	    "925",
	    "928",
	    "931",
	    "936",
	    "937",
	    "940",
	    "941",
	    "947",
	    "949",
	    "952",
	    "954",
	    "956",
	    "959",
	    "970",
	    "971",
	    "972",
	    "973",
	    "975",
	    "978",
	    "979",
	    "980",
	    "984",
	    "985",
	    "989"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_au_ocker = {};
	module["exports"] = en_au_ocker;
	en_au_ocker.title = "Australia Ocker (English)";
	en_au_ocker.name = {
	  "first_name": [
	    "Charlotte",
	    "Ava",
	    "Chloe",
	    "Emily",
	    "Olivia",
	    "Zoe",
	    "Lily",
	    "Sophie",
	    "Amelia",
	    "Sofia",
	    "Ella",
	    "Isabella",
	    "Ruby",
	    "Sienna",
	    "Mia+3",
	    "Grace",
	    "Emma",
	    "Ivy",
	    "Layla",
	    "Abigail",
	    "Isla",
	    "Hannah",
	    "Zara",
	    "Lucy",
	    "Evie",
	    "Annabelle",
	    "Madison",
	    "Alice",
	    "Georgia",
	    "Maya",
	    "Madeline",
	    "Audrey",
	    "Scarlett",
	    "Isabelle",
	    "Chelsea",
	    "Mila",
	    "Holly",
	    "Indiana",
	    "Poppy",
	    "Harper",
	    "Sarah",
	    "Alyssa",
	    "Jasmine",
	    "Imogen",
	    "Hayley",
	    "Pheobe",
	    "Eva",
	    "Evelyn",
	    "Mackenzie",
	    "Ayla",
	    "Oliver",
	    "Jack",
	    "Jackson",
	    "William",
	    "Ethan",
	    "Charlie",
	    "Lucas",
	    "Cooper",
	    "Lachlan",
	    "Noah",
	    "Liam",
	    "Alexander",
	    "Max",
	    "Isaac",
	    "Thomas",
	    "Xavier",
	    "Oscar",
	    "Benjamin",
	    "Aiden",
	    "Mason",
	    "Samuel",
	    "James",
	    "Levi",
	    "Riley",
	    "Harrison",
	    "Ryan",
	    "Henry",
	    "Jacob",
	    "Joshua",
	    "Leo",
	    "Zach",
	    "Harry",
	    "Hunter",
	    "Flynn",
	    "Archie",
	    "Tyler",
	    "Elijah",
	    "Hayden",
	    "Jayden",
	    "Blake",
	    "Archer",
	    "Ashton",
	    "Sebastian",
	    "Zachery",
	    "Lincoln",
	    "Mitchell",
	    "Luca",
	    "Nathan",
	    "Kai",
	    "Connor",
	    "Tom",
	    "Nigel",
	    "Matt",
	    "Sean"
	  ],
	  "last_name": [
	    "Smith",
	    "Jones",
	    "Williams",
	    "Brown",
	    "Wilson",
	    "Taylor",
	    "Morton",
	    "White",
	    "Martin",
	    "Anderson",
	    "Thompson",
	    "Nguyen",
	    "Thomas",
	    "Walker",
	    "Harris",
	    "Lee",
	    "Ryan",
	    "Robinson",
	    "Kelly",
	    "King",
	    "Rausch",
	    "Ridge",
	    "Connolly",
	    "LeQuesne"
	  ],
	  "ocker_first_name": [
	    "Bazza",
	    "Bluey",
	    "Davo",
	    "Johno",
	    "Shano",
	    "Shazza"
	  ]
	};
	en_au_ocker.company = {
	  "suffix": [
	    "Pty Ltd",
	    "and Sons",
	    "Corp",
	    "Group",
	    "Brothers",
	    "Partners"
	  ]
	};
	en_au_ocker.internet = {
	  "domain_suffix": [
	    "com.au",
	    "com",
	    "net.au",
	    "net",
	    "org.au",
	    "org"
	  ]
	};
	en_au_ocker.address = {
	  "street_root": [
	    "Ramsay Street",
	    "Bonnie Doon",
	    "Cavill Avenue",
	    "Queen Street"
	  ],
	  "street_name": [
	    "#{street_root}"
	  ],
	  "city_prefix": [
	    "Bondi",
	    "Burleigh Heads",
	    "Carlton",
	    "Fitzroy",
	    "Fremantle",
	    "Glenelg",
	    "Manly",
	    "Noosa",
	    "Stones Corner",
	    "St Kilda",
	    "Surry Hills",
	    "Yarra Valley"
	  ],
	  "city": [
	    "#{city_prefix}"
	  ],
	  "state_abbr": [
	    "NSW",
	    "QLD",
	    "NT",
	    "SA",
	    "WA",
	    "TAS",
	    "ACT",
	    "VIC"
	  ],
	  "region": [
	    "South East Queensland",
	    "Wide Bay Burnett",
	    "Margaret River",
	    "Port Pirie",
	    "Gippsland",
	    "Elizabeth",
	    "Barossa"
	  ],
	  "state": [
	    "New South Wales",
	    "Queensland",
	    "Northern Territory",
	    "South Australia",
	    "Western Australia",
	    "Tasmania",
	    "Australian Capital Territory",
	    "Victoria"
	  ],
	  "postcode": [
	    "0###",
	    "2###",
	    "3###",
	    "4###",
	    "5###",
	    "6###",
	    "7###"
	  ],
	  "building_number": [
	    "####",
	    "###",
	    "##"
	  ],
	  "street_suffix": [
	    "Avenue",
	    "Boulevard",
	    "Circle",
	    "Circuit",
	    "Court",
	    "Crescent",
	    "Crest",
	    "Drive",
	    "Estate Dr",
	    "Grove",
	    "Hill",
	    "Island",
	    "Junction",
	    "Knoll",
	    "Lane",
	    "Loop",
	    "Mall",
	    "Manor",
	    "Meadow",
	    "Mews",
	    "Parade",
	    "Parkway",
	    "Pass",
	    "Place",
	    "Plaza",
	    "Ridge",
	    "Road",
	    "Run",
	    "Square",
	    "Station St",
	    "Street",
	    "Summit",
	    "Terrace",
	    "Track",
	    "Trail",
	    "View Rd",
	    "Way"
	  ],
	  "default_country": [
	    "Australia"
	  ]
	};
	en_au_ocker.phone_number = {
	  "formats": [
	    "0# #### ####",
	    "+61 # #### ####",
	    "04## ### ###",
	    "+61 4## ### ###"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var es = {};
	module["exports"] = es;
	es.title = "Spanish";
	es.address = {
	  "city_prefix": [
	    "Parla",
	    "Telde",
	    "Baracaldo",
	    "San Fernando",
	    "Torrevieja",
	    "Lugo",
	    "Santiago de Compostela",
	    "Gerona",
	    "Cáceres",
	    "Lorca",
	    "Coslada",
	    "Talavera de la Reina",
	    "El Puerto de Santa María",
	    "Cornellá de Llobregat",
	    "Avilés",
	    "Palencia",
	    "Gecho",
	    "Orihuela",
	    "Pontevedra",
	    "Pozuelo de Alarcón",
	    "Toledo",
	    "El Ejido",
	    "Guadalajara",
	    "Gandía",
	    "Ceuta",
	    "Ferrol",
	    "Chiclana de la Frontera",
	    "Manresa",
	    "Roquetas de Mar",
	    "Ciudad Real",
	    "Rubí",
	    "Benidorm",
	    "San Sebastían de los Reyes",
	    "Ponferrada",
	    "Zamora",
	    "Alcalá de Guadaira",
	    "Fuengirola",
	    "Mijas",
	    "Sanlúcar de Barrameda",
	    "La Línea de la Concepción",
	    "Majadahonda",
	    "Sagunto",
	    "El Prat de LLobregat",
	    "Viladecans",
	    "Linares",
	    "Alcoy",
	    "Irún",
	    "Estepona",
	    "Torremolinos",
	    "Rivas-Vaciamadrid",
	    "Molina de Segura",
	    "Paterna",
	    "Granollers",
	    "Santa Lucía de Tirajana",
	    "Motril",
	    "Cerdañola del Vallés",
	    "Arrecife",
	    "Segovia",
	    "Torrelavega",
	    "Elda",
	    "Mérida",
	    "Ávila",
	    "Valdemoro",
	    "Cuenta",
	    "Collado Villalba",
	    "Benalmádena",
	    "Mollet del Vallés",
	    "Puertollano",
	    "Madrid",
	    "Barcelona",
	    "Valencia",
	    "Sevilla",
	    "Zaragoza",
	    "Málaga",
	    "Murcia",
	    "Palma de Mallorca",
	    "Las Palmas de Gran Canaria",
	    "Bilbao",
	    "Córdoba",
	    "Alicante",
	    "Valladolid",
	    "Vigo",
	    "Gijón",
	    "Hospitalet de LLobregat",
	    "La Coruña",
	    "Granada",
	    "Vitoria",
	    "Elche",
	    "Santa Cruz de Tenerife",
	    "Oviedo",
	    "Badalona",
	    "Cartagena",
	    "Móstoles",
	    "Jerez de la Frontera",
	    "Tarrasa",
	    "Sabadell",
	    "Alcalá de Henares",
	    "Pamplona",
	    "Fuenlabrada",
	    "Almería",
	    "San Sebastián",
	    "Leganés",
	    "Santander",
	    "Burgos",
	    "Castellón de la Plana",
	    "Alcorcón",
	    "Albacete",
	    "Getafe",
	    "Salamanca",
	    "Huelva",
	    "Logroño",
	    "Badajoz",
	    "San Cristróbal de la Laguna",
	    "León",
	    "Tarragona",
	    "Cádiz",
	    "Lérida",
	    "Marbella",
	    "Mataró",
	    "Dos Hermanas",
	    "Santa Coloma de Gramanet",
	    "Jaén",
	    "Algeciras",
	    "Torrejón de Ardoz",
	    "Orense",
	    "Alcobendas",
	    "Reus",
	    "Calahorra",
	    "Inca"
	  ],
	  "country": [
	    "Afganistán",
	    "Albania",
	    "Argelia",
	    "Andorra",
	    "Angola",
	    "Argentina",
	    "Armenia",
	    "Aruba",
	    "Australia",
	    "Austria",
	    "Azerbayán",
	    "Bahamas",
	    "Barein",
	    "Bangladesh",
	    "Barbados",
	    "Bielorusia",
	    "Bélgica",
	    "Belice",
	    "Bermuda",
	    "Bután",
	    "Bolivia",
	    "Bosnia Herzegovina",
	    "Botswana",
	    "Brasil",
	    "Bulgaria",
	    "Burkina Faso",
	    "Burundi",
	    "Camboya",
	    "Camerún",
	    "Canada",
	    "Cabo Verde",
	    "Islas Caimán",
	    "Chad",
	    "Chile",
	    "China",
	    "Isla de Navidad",
	    "Colombia",
	    "Comodos",
	    "Congo",
	    "Costa Rica",
	    "Costa de Marfil",
	    "Croacia",
	    "Cuba",
	    "Chipre",
	    "República Checa",
	    "Dinamarca",
	    "Dominica",
	    "República Dominicana",
	    "Ecuador",
	    "Egipto",
	    "El Salvador",
	    "Guinea Ecuatorial",
	    "Eritrea",
	    "Estonia",
	    "Etiopía",
	    "Islas Faro",
	    "Fiji",
	    "Finlandia",
	    "Francia",
	    "Gabón",
	    "Gambia",
	    "Georgia",
	    "Alemania",
	    "Ghana",
	    "Grecia",
	    "Groenlandia",
	    "Granada",
	    "Guadalupe",
	    "Guam",
	    "Guatemala",
	    "Guinea",
	    "Guinea-Bisau",
	    "Guayana",
	    "Haiti",
	    "Honduras",
	    "Hong Kong",
	    "Hungria",
	    "Islandia",
	    "India",
	    "Indonesia",
	    "Iran",
	    "Irak",
	    "Irlanda",
	    "Italia",
	    "Jamaica",
	    "Japón",
	    "Jordania",
	    "Kazajistan",
	    "Kenia",
	    "Kiribati",
	    "Corea",
	    "Kuwait",
	    "Letonia",
	    "Líbano",
	    "Liberia",
	    "Liechtenstein",
	    "Lituania",
	    "Luxemburgo",
	    "Macao",
	    "Macedonia",
	    "Madagascar",
	    "Malawi",
	    "Malasia",
	    "Maldivas",
	    "Mali",
	    "Malta",
	    "Martinica",
	    "Mauritania",
	    "Méjico",
	    "Micronesia",
	    "Moldavia",
	    "Mónaco",
	    "Mongolia",
	    "Montenegro",
	    "Montserrat",
	    "Marruecos",
	    "Mozambique",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Holanda",
	    "Nueva Zelanda",
	    "Nicaragua",
	    "Niger",
	    "Nigeria",
	    "Noruega",
	    "Omán",
	    "Pakistan",
	    "Panamá",
	    "Papúa Nueva Guinea",
	    "Paraguay",
	    "Perú",
	    "Filipinas",
	    "Poland",
	    "Portugal",
	    "Puerto Rico",
	    "Rusia",
	    "Ruanda",
	    "Samoa",
	    "San Marino",
	    "Santo Tomé y Principe",
	    "Arabia Saudí",
	    "Senegal",
	    "Serbia",
	    "Seychelles",
	    "Sierra Leona",
	    "Singapur",
	    "Eslovaquia",
	    "Eslovenia",
	    "Somalia",
	    "España",
	    "Sri Lanka",
	    "Sudán",
	    "Suriname",
	    "Suecia",
	    "Suiza",
	    "Siria",
	    "Taiwan",
	    "Tajikistan",
	    "Tanzania",
	    "Tailandia",
	    "Timor-Leste",
	    "Togo",
	    "Tonga",
	    "Trinidad y Tobago",
	    "Tunez",
	    "Turquia",
	    "Uganda",
	    "Ucrania",
	    "Emiratos Árabes Unidos",
	    "Reino Unido",
	    "Estados Unidos de América",
	    "Uruguay",
	    "Uzbekistan",
	    "Vanuatu",
	    "Venezuela",
	    "Vietnam",
	    "Yemen",
	    "Zambia",
	    "Zimbabwe"
	  ],
	  "building_number": [
	    " s/n.",
	    ", #",
	    ", ##",
	    " #",
	    " ##"
	  ],
	  "street_suffix": [
	    "Aldea",
	    "Apartamento",
	    "Arrabal",
	    "Arroyo",
	    "Avenida",
	    "Bajada",
	    "Barranco",
	    "Barrio",
	    "Bloque",
	    "Calle",
	    "Calleja",
	    "Camino",
	    "Carretera",
	    "Caserio",
	    "Colegio",
	    "Colonia",
	    "Conjunto",
	    "Cuesta",
	    "Chalet",
	    "Edificio",
	    "Entrada",
	    "Escalinata",
	    "Explanada",
	    "Extramuros",
	    "Extrarradio",
	    "Ferrocarril",
	    "Glorieta",
	    "Gran Subida",
	    "Grupo",
	    "Huerta",
	    "Jardines",
	    "Lado",
	    "Lugar",
	    "Manzana",
	    "Masía",
	    "Mercado",
	    "Monte",
	    "Muelle",
	    "Municipio",
	    "Parcela",
	    "Parque",
	    "Partida",
	    "Pasaje",
	    "Paseo",
	    "Plaza",
	    "Poblado",
	    "Polígono",
	    "Prolongación",
	    "Puente",
	    "Puerta",
	    "Quinta",
	    "Ramal",
	    "Rambla",
	    "Rampa",
	    "Riera",
	    "Rincón",
	    "Ronda",
	    "Rua",
	    "Salida",
	    "Sector",
	    "Sección",
	    "Senda",
	    "Solar",
	    "Subida",
	    "Terrenos",
	    "Torrente",
	    "Travesía",
	    "Urbanización",
	    "Vía",
	    "Vía Pública"
	  ],
	  "secondary_address": [
	    "Esc. ###",
	    "Puerta ###"
	  ],
	  "postcode": [
	    "#####"
	  ],
	  "province": [
	    "Álava",
	    "Albacete",
	    "Alicante",
	    "Almería",
	    "Asturias",
	    "Ávila",
	    "Badajoz",
	    "Barcelona",
	    "Burgos",
	    "Cantabria",
	    "Castellón",
	    "Ciudad Real",
	    "Cuenca",
	    "Cáceres",
	    "Cádiz",
	    "Córdoba",
	    "Gerona",
	    "Granada",
	    "Guadalajara",
	    "Guipúzcoa",
	    "Huelva",
	    "Huesca",
	    "Islas Baleares",
	    "Jaén",
	    "La Coruña",
	    "La Rioja",
	    "Las Palmas",
	    "León",
	    "Lugo",
	    "lérida",
	    "Madrid",
	    "Murcia",
	    "Málaga",
	    "Navarra",
	    "Orense",
	    "Palencia",
	    "Pontevedra",
	    "Salamanca",
	    "Santa Cruz de Tenerife",
	    "Segovia",
	    "Sevilla",
	    "Soria",
	    "Tarragona",
	    "Teruel",
	    "Toledo",
	    "Valencia",
	    "Valladolid",
	    "Vizcaya",
	    "Zamora",
	    "Zaragoza"
	  ],
	  "state": [
	    "Andalucía",
	    "Aragón",
	    "Principado de Asturias",
	    "Baleares",
	    "Canarias",
	    "Cantabria",
	    "Castilla-La Mancha",
	    "Castilla y León",
	    "Cataluña",
	    "Comunidad Valenciana",
	    "Extremadura",
	    "Galicia",
	    "La Rioja",
	    "Comunidad de Madrid",
	    "Navarra",
	    "País Vasco",
	    "Región de Murcia"
	  ],
	  "state_abbr": [
	    "And",
	    "Ara",
	    "Ast",
	    "Bal",
	    "Can",
	    "Cbr",
	    "Man",
	    "Leo",
	    "Cat",
	    "Com",
	    "Ext",
	    "Gal",
	    "Rio",
	    "Mad",
	    "Nav",
	    "Vas",
	    "Mur"
	  ],
	  "time_zone": [
	    "Pacífico/Midway",
	    "Pacífico/Pago_Pago",
	    "Pacífico/Honolulu",
	    "America/Juneau",
	    "America/Los_Angeles",
	    "America/Tijuana",
	    "America/Denver",
	    "America/Phoenix",
	    "America/Chihuahua",
	    "America/Mazatlan",
	    "America/Chicago",
	    "America/Regina",
	    "America/Mexico_City",
	    "America/Mexico_City",
	    "America/Monterrey",
	    "America/Guatemala",
	    "America/New_York",
	    "America/Indiana/Indianapolis",
	    "America/Bogota",
	    "America/Lima",
	    "America/Lima",
	    "America/Halifax",
	    "America/Caracas",
	    "America/La_Paz",
	    "America/Santiago",
	    "America/St_Johns",
	    "America/Sao_Paulo",
	    "America/Argentina/Buenos_Aires",
	    "America/Guyana",
	    "America/Godthab",
	    "Atlantic/South_Georgia",
	    "Atlantic/Azores",
	    "Atlantic/Cape_Verde",
	    "Europa/Dublin",
	    "Europa/London",
	    "Europa/Lisbon",
	    "Europa/London",
	    "Africa/Casablanca",
	    "Africa/Monrovia",
	    "Etc/UTC",
	    "Europa/Belgrade",
	    "Europa/Bratislava",
	    "Europa/Budapest",
	    "Europa/Ljubljana",
	    "Europa/Prague",
	    "Europa/Sarajevo",
	    "Europa/Skopje",
	    "Europa/Warsaw",
	    "Europa/Zagreb",
	    "Europa/Brussels",
	    "Europa/Copenhagen",
	    "Europa/Madrid",
	    "Europa/Paris",
	    "Europa/Amsterdam",
	    "Europa/Berlin",
	    "Europa/Berlin",
	    "Europa/Rome",
	    "Europa/Stockholm",
	    "Europa/Vienna",
	    "Africa/Algiers",
	    "Europa/Bucharest",
	    "Africa/Cairo",
	    "Europa/Helsinki",
	    "Europa/Kiev",
	    "Europa/Riga",
	    "Europa/Sofia",
	    "Europa/Tallinn",
	    "Europa/Vilnius",
	    "Europa/Athens",
	    "Europa/Istanbul",
	    "Europa/Minsk",
	    "Asia/Jerusalen",
	    "Africa/Harare",
	    "Africa/Johannesburg",
	    "Europa/Moscú",
	    "Europa/Moscú",
	    "Europa/Moscú",
	    "Asia/Kuwait",
	    "Asia/Riyadh",
	    "Africa/Nairobi",
	    "Asia/Baghdad",
	    "Asia/Tehran",
	    "Asia/Muscat",
	    "Asia/Muscat",
	    "Asia/Baku",
	    "Asia/Tbilisi",
	    "Asia/Yerevan",
	    "Asia/Kabul",
	    "Asia/Yekaterinburg",
	    "Asia/Karachi",
	    "Asia/Karachi",
	    "Asia/Tashkent",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kathmandu",
	    "Asia/Dhaka",
	    "Asia/Dhaka",
	    "Asia/Colombo",
	    "Asia/Almaty",
	    "Asia/Novosibirsk",
	    "Asia/Rangoon",
	    "Asia/Bangkok",
	    "Asia/Bangkok",
	    "Asia/Jakarta",
	    "Asia/Krasnoyarsk",
	    "Asia/Shanghai",
	    "Asia/Chongqing",
	    "Asia/Hong_Kong",
	    "Asia/Urumqi",
	    "Asia/Kuala_Lumpur",
	    "Asia/Singapore",
	    "Asia/Taipei",
	    "Australia/Perth",
	    "Asia/Irkutsk",
	    "Asia/Ulaanbaatar",
	    "Asia/Seoul",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Yakutsk",
	    "Australia/Darwin",
	    "Australia/Adelaide",
	    "Australia/Melbourne",
	    "Australia/Melbourne",
	    "Australia/Sydney",
	    "Australia/Brisbane",
	    "Australia/Hobart",
	    "Asia/Vladivostok",
	    "Pacífico/Guam",
	    "Pacífico/Port_Moresby",
	    "Asia/Magadan",
	    "Asia/Magadan",
	    "Pacífico/Noumea",
	    "Pacífico/Fiji",
	    "Asia/Kamchatka",
	    "Pacífico/Majuro",
	    "Pacífico/Auckland",
	    "Pacífico/Auckland",
	    "Pacífico/Tongatapu",
	    "Pacífico/Fakaofo",
	    "Pacífico/Apia"
	  ],
	  "city": [
	    "#{city_prefix}"
	  ],
	  "street_name": [
	    "#{street_suffix} #{Name.first_name}",
	    "#{street_suffix} #{Name.first_name} #{Name.last_name}"
	  ],
	  "street_address": [
	    "#{street_name}#{building_number}",
	    "#{street_name}#{building_number} #{secondary_address}"
	  ],
	  "default_country": [
	    "España"
	  ]
	};
	es.company = {
	  "suffix": [
	    "S.L.",
	    "e Hijos",
	    "S.A.",
	    "Hermanos"
	  ],
	  "noun": [
	      "habilidad",
	      "acceso",
	      "adaptador",
	      "algoritmo",
	      "alianza",
	      "analista",
	      "aplicación",
	      "enfoque",
	      "arquitectura",
	      "archivo",
	      "inteligencia artificial",
	      "array",
	      "actitud",
	      "medición",
	      "gestión presupuestaria",
	      "capacidad",
	      "desafío",
	      "circuito",
	      "colaboración",
	      "complejidad",
	      "concepto",
	      "conglomeración",
	      "contingencia",
	      "núcleo",
	      "fidelidad",
	      "base de datos",
	      "data-warehouse",
	      "definición",
	      "emulación",
	      "codificar",
	      "encriptar",
	      "extranet",
	      "firmware",
	      "flexibilidad",
	      "focus group",
	      "previsión",
	      "base de trabajo",
	      "función",
	      "funcionalidad",
	      "Interfaz Gráfica",
	      "groupware",
	      "Interfaz gráfico de usuario",
	      "hardware",
	      "Soporte",
	      "jerarquía",
	      "conjunto",
	      "implementación",
	      "infraestructura",
	      "iniciativa",
	      "instalación",
	      "conjunto de instrucciones",
	      "interfaz",
	      "intranet",
	      "base del conocimiento",
	      "red de area local",
	      "aprovechar",
	      "matrices",
	      "metodologías",
	      "middleware",
	      "migración",
	      "modelo",
	      "moderador",
	      "monitorizar",
	      "arquitectura abierta",
	      "sistema abierto",
	      "orquestar",
	      "paradigma",
	      "paralelismo",
	      "política",
	      "portal",
	      "estructura de precios",
	      "proceso de mejora",
	      "producto",
	      "productividad",
	      "proyecto",
	      "proyección",
	      "protocolo",
	      "línea segura",
	      "software",
	      "solución",
	      "estandardización",
	      "estrategia",
	      "estructura",
	      "éxito",
	      "superestructura",
	      "soporte",
	      "sinergia",
	      "mediante",
	      "marco de tiempo",
	      "caja de herramientas",
	      "utilización",
	      "website",
	      "fuerza de trabajo"
	    ],
	    "descriptor": [
	      "24 horas",
	      "24/7",
	      "3rd generación",
	      "4th generación",
	      "5th generación",
	      "6th generación",
	      "analizada",
	      "asimétrica",
	      "asíncrona",
	      "monitorizada por red",
	      "bidireccional",
	      "bifurcada",
	      "generada por el cliente",
	      "cliente servidor",
	      "coherente",
	      "cohesiva",
	      "compuesto",
	      "sensible al contexto",
	      "basado en el contexto",
	      "basado en contenido",
	      "dedicada",
	      "generado por la demanda",
	      "didactica",
	      "direccional",
	      "discreta",
	      "dinámica",
	      "potenciada",
	      "acompasada",
	      "ejecutiva",
	      "explícita",
	      "tolerante a fallos",
	      "innovadora",
	      "amplio ábanico",
	      "global",
	      "heurística",
	      "alto nivel",
	      "holística",
	      "homogénea",
	      "hibrida",
	      "incremental",
	      "intangible",
	      "interactiva",
	      "intermedia",
	      "local",
	      "logística",
	      "maximizada",
	      "metódica",
	      "misión crítica",
	      "móbil",
	      "modular",
	      "motivadora",
	      "multimedia",
	      "multiestado",
	      "multitarea",
	      "nacional",
	      "basado en necesidades",
	      "neutral",
	      "nueva generación",
	      "no-volátil",
	      "orientado a objetos",
	      "óptima",
	      "optimizada",
	      "radical",
	      "tiempo real",
	      "recíproca",
	      "regional",
	      "escalable",
	      "secundaria",
	      "orientada a soluciones",
	      "estable",
	      "estatica",
	      "sistemática",
	      "sistémica",
	      "tangible",
	      "terciaria",
	      "transicional",
	      "uniforme",
	      "valor añadido",
	      "vía web",
	      "defectos cero",
	      "tolerancia cero"
	    ],
	    "adjective": [
	      "Adaptativo",
	      "Avanzado",
	      "Asimilado",
	      "Automatizado",
	      "Equilibrado",
	      "Centrado en el negocio",
	      "Centralizado",
	      "Clonado",
	      "Compatible",
	      "Configurable",
	      "Multi grupo",
	      "Multi plataforma",
	      "Centrado en el usuario",
	      "Configurable",
	      "Descentralizado",
	      "Digitalizado",
	      "Distribuido",
	      "Diverso",
	      "Reducido",
	      "Mejorado",
	      "Para toda la empresa",
	      "Ergonomico",
	      "Exclusivo",
	      "Expandido",
	      "Extendido",
	      "Cara a cara",
	      "Enfocado",
	      "Totalmente configurable",
	      "Fundamental",
	      "Orígenes",
	      "Horizontal",
	      "Implementado",
	      "Innovador",
	      "Integrado",
	      "Intuitivo",
	      "Inverso",
	      "Gestionado",
	      "Obligatorio",
	      "Monitorizado",
	      "Multi canal",
	      "Multi lateral",
	      "Multi capa",
	      "En red",
	      "Orientado a objetos",
	      "Open-source",
	      "Operativo",
	      "Optimizado",
	      "Opcional",
	      "Organico",
	      "Organizado",
	      "Perseverando",
	      "Persistente",
	      "en fases",
	      "Polarizado",
	      "Pre-emptivo",
	      "Proactivo",
	      "Enfocado a benficios",
	      "Profundo",
	      "Programable",
	      "Progresivo",
	      "Public-key",
	      "Enfocado en la calidad",
	      "Reactivo",
	      "Realineado",
	      "Re-contextualizado",
	      "Re-implementado",
	      "Reducido",
	      "Ingenieria inversa",
	      "Robusto",
	      "Fácil",
	      "Seguro",
	      "Auto proporciona",
	      "Compartible",
	      "Intercambiable",
	      "Sincronizado",
	      "Orientado a equipos",
	      "Total",
	      "Universal",
	      "Mejorado",
	      "Actualizable",
	      "Centrado en el usuario",
	      "Amigable",
	      "Versatil",
	      "Virtual",
	      "Visionario"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name} y #{Name.last_name}",
	    "#{Name.last_name} #{Name.last_name} #{suffix}",
	    "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
	  ]
	};
	es.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "es",
	    "info",
	    "com.es",
	    "org"
	  ]
	};
	es.name = {
	  "first_name": [
	    "Adán",
	    "Agustín",
	    "Alberto",
	    "Alejandro",
	    "Alfonso",
	    "Alfredo",
	    "Andrés",
	    "Antonio",
	    "Armando",
	    "Arturo",
	    "Benito",
	    "Benjamín",
	    "Bernardo",
	    "Carlos",
	    "César",
	    "Claudio",
	    "Clemente",
	    "Cristian",
	    "Cristobal",
	    "Daniel",
	    "David",
	    "Diego",
	    "Eduardo",
	    "Emilio",
	    "Enrique",
	    "Ernesto",
	    "Esteban",
	    "Federico",
	    "Felipe",
	    "Fernando",
	    "Francisco",
	    "Gabriel",
	    "Gerardo",
	    "Germán",
	    "Gilberto",
	    "Gonzalo",
	    "Gregorio",
	    "Guillermo",
	    "Gustavo",
	    "Hernán",
	    "Homero",
	    "Horacio",
	    "Hugo",
	    "Ignacio",
	    "Jacobo",
	    "Jaime",
	    "Javier",
	    "Jerónimo",
	    "Jesús",
	    "Joaquín",
	    "Jorge",
	    "Jorge Luis",
	    "José",
	    "José Eduardo",
	    "José Emilio",
	    "José Luis",
	    "José María",
	    "Juan",
	    "Juan Carlos",
	    "Julio",
	    "Julio César",
	    "Lorenzo",
	    "Lucas",
	    "Luis",
	    "Luis Miguel",
	    "Manuel",
	    "Marco Antonio",
	    "Marcos",
	    "Mariano",
	    "Mario",
	    "Martín",
	    "Mateo",
	    "Miguel",
	    "Miguel Ángel",
	    "Nicolás",
	    "Octavio",
	    "Óscar",
	    "Pablo",
	    "Patricio",
	    "Pedro",
	    "Rafael",
	    "Ramiro",
	    "Ramón",
	    "Raúl",
	    "Ricardo",
	    "Roberto",
	    "Rodrigo",
	    "Rubén",
	    "Salvador",
	    "Samuel",
	    "Sancho",
	    "Santiago",
	    "Sergio",
	    "Teodoro",
	    "Timoteo",
	    "Tomás",
	    "Vicente",
	    "Víctor",
	    "Adela",
	    "Adriana",
	    "Alejandra",
	    "Alicia",
	    "Amalia",
	    "Ana",
	    "Ana Luisa",
	    "Ana María",
	    "Andrea",
	    "Anita",
	    "Ángela",
	    "Antonia",
	    "Ariadna",
	    "Barbara",
	    "Beatriz",
	    "Berta",
	    "Blanca",
	    "Caridad",
	    "Carla",
	    "Carlota",
	    "Carmen",
	    "Carolina",
	    "Catalina",
	    "Cecilia",
	    "Clara",
	    "Claudia",
	    "Concepción",
	    "Conchita",
	    "Cristina",
	    "Daniela",
	    "Débora",
	    "Diana",
	    "Dolores",
	    "Lola",
	    "Dorotea",
	    "Elena",
	    "Elisa",
	    "Eloisa",
	    "Elsa",
	    "Elvira",
	    "Emilia",
	    "Esperanza",
	    "Estela",
	    "Ester",
	    "Eva",
	    "Florencia",
	    "Francisca",
	    "Gabriela",
	    "Gloria",
	    "Graciela",
	    "Guadalupe",
	    "Guillermina",
	    "Inés",
	    "Irene",
	    "Isabel",
	    "Isabela",
	    "Josefina",
	    "Juana",
	    "Julia",
	    "Laura",
	    "Leonor",
	    "Leticia",
	    "Lilia",
	    "Lorena",
	    "Lourdes",
	    "Lucia",
	    "Luisa",
	    "Luz",
	    "Magdalena",
	    "Manuela",
	    "Marcela",
	    "Margarita",
	    "María",
	    "María del Carmen",
	    "María Cristina",
	    "María Elena",
	    "María Eugenia",
	    "María José",
	    "María Luisa",
	    "María Soledad",
	    "María Teresa",
	    "Mariana",
	    "Maricarmen",
	    "Marilu",
	    "Marisol",
	    "Marta",
	    "Mayte",
	    "Mercedes",
	    "Micaela",
	    "Mónica",
	    "Natalia",
	    "Norma",
	    "Olivia",
	    "Patricia",
	    "Pilar",
	    "Ramona",
	    "Raquel",
	    "Rebeca",
	    "Reina",
	    "Rocio",
	    "Rosa",
	    "Rosalia",
	    "Rosario",
	    "Sara",
	    "Silvia",
	    "Sofia",
	    "Soledad",
	    "Sonia",
	    "Susana",
	    "Teresa",
	    "Verónica",
	    "Victoria",
	    "Virginia",
	    "Yolanda"
	  ],
	  "last_name": [
	    "Abeyta",
	    "Abrego",
	    "Abreu",
	    "Acevedo",
	    "Acosta",
	    "Acuña",
	    "Adame",
	    "Adorno",
	    "Agosto",
	    "Aguayo",
	    "Águilar",
	    "Aguilera",
	    "Aguirre",
	    "Alanis",
	    "Alaniz",
	    "Alarcón",
	    "Alba",
	    "Alcala",
	    "Alcántar",
	    "Alcaraz",
	    "Alejandro",
	    "Alemán",
	    "Alfaro",
	    "Alicea",
	    "Almanza",
	    "Almaraz",
	    "Almonte",
	    "Alonso",
	    "Alonzo",
	    "Altamirano",
	    "Alva",
	    "Alvarado",
	    "Alvarez",
	    "Amador",
	    "Amaya",
	    "Anaya",
	    "Anguiano",
	    "Angulo",
	    "Aparicio",
	    "Apodaca",
	    "Aponte",
	    "Aragón",
	    "Araña",
	    "Aranda",
	    "Arce",
	    "Archuleta",
	    "Arellano",
	    "Arenas",
	    "Arevalo",
	    "Arguello",
	    "Arias",
	    "Armas",
	    "Armendáriz",
	    "Armenta",
	    "Armijo",
	    "Arredondo",
	    "Arreola",
	    "Arriaga",
	    "Arroyo",
	    "Arteaga",
	    "Atencio",
	    "Ávalos",
	    "Ávila",
	    "Avilés",
	    "Ayala",
	    "Baca",
	    "Badillo",
	    "Báez",
	    "Baeza",
	    "Bahena",
	    "Balderas",
	    "Ballesteros",
	    "Banda",
	    "Bañuelos",
	    "Barajas",
	    "Barela",
	    "Barragán",
	    "Barraza",
	    "Barrera",
	    "Barreto",
	    "Barrientos",
	    "Barrios",
	    "Batista",
	    "Becerra",
	    "Beltrán",
	    "Benavides",
	    "Benavídez",
	    "Benítez",
	    "Bermúdez",
	    "Bernal",
	    "Berríos",
	    "Bétancourt",
	    "Blanco",
	    "Bonilla",
	    "Borrego",
	    "Botello",
	    "Bravo",
	    "Briones",
	    "Briseño",
	    "Brito",
	    "Bueno",
	    "Burgos",
	    "Bustamante",
	    "Bustos",
	    "Caballero",
	    "Cabán",
	    "Cabrera",
	    "Cadena",
	    "Caldera",
	    "Calderón",
	    "Calvillo",
	    "Camacho",
	    "Camarillo",
	    "Campos",
	    "Canales",
	    "Candelaria",
	    "Cano",
	    "Cantú",
	    "Caraballo",
	    "Carbajal",
	    "Cardenas",
	    "Cardona",
	    "Carmona",
	    "Carranza",
	    "Carrasco",
	    "Carrasquillo",
	    "Carreón",
	    "Carrera",
	    "Carrero",
	    "Carrillo",
	    "Carrion",
	    "Carvajal",
	    "Casanova",
	    "Casares",
	    "Casárez",
	    "Casas",
	    "Casillas",
	    "Castañeda",
	    "Castellanos",
	    "Castillo",
	    "Castro",
	    "Cavazos",
	    "Cazares",
	    "Ceballos",
	    "Cedillo",
	    "Ceja",
	    "Centeno",
	    "Cepeda",
	    "Cerda",
	    "Cervantes",
	    "Cervántez",
	    "Chacón",
	    "Chapa",
	    "Chavarría",
	    "Chávez",
	    "Cintrón",
	    "Cisneros",
	    "Collado",
	    "Collazo",
	    "Colón",
	    "Colunga",
	    "Concepción",
	    "Contreras",
	    "Cordero",
	    "Córdova",
	    "Cornejo",
	    "Corona",
	    "Coronado",
	    "Corral",
	    "Corrales",
	    "Correa",
	    "Cortés",
	    "Cortez",
	    "Cotto",
	    "Covarrubias",
	    "Crespo",
	    "Cruz",
	    "Cuellar",
	    "Curiel",
	    "Dávila",
	    "de Anda",
	    "de Jesús",
	    "Delacrúz",
	    "Delafuente",
	    "Delagarza",
	    "Delao",
	    "Delapaz",
	    "Delarosa",
	    "Delatorre",
	    "Deleón",
	    "Delgadillo",
	    "Delgado",
	    "Delrío",
	    "Delvalle",
	    "Díaz",
	    "Domínguez",
	    "Domínquez",
	    "Duarte",
	    "Dueñas",
	    "Duran",
	    "Echevarría",
	    "Elizondo",
	    "Enríquez",
	    "Escalante",
	    "Escamilla",
	    "Escobar",
	    "Escobedo",
	    "Esparza",
	    "Espinal",
	    "Espino",
	    "Espinosa",
	    "Espinoza",
	    "Esquibel",
	    "Esquivel",
	    "Estévez",
	    "Estrada",
	    "Fajardo",
	    "Farías",
	    "Feliciano",
	    "Fernández",
	    "Ferrer",
	    "Fierro",
	    "Figueroa",
	    "Flores",
	    "Flórez",
	    "Fonseca",
	    "Franco",
	    "Frías",
	    "Fuentes",
	    "Gaitán",
	    "Galarza",
	    "Galindo",
	    "Gallardo",
	    "Gallegos",
	    "Galván",
	    "Gálvez",
	    "Gamboa",
	    "Gamez",
	    "Gaona",
	    "Garay",
	    "García",
	    "Garibay",
	    "Garica",
	    "Garrido",
	    "Garza",
	    "Gastélum",
	    "Gaytán",
	    "Gil",
	    "Girón",
	    "Godínez",
	    "Godoy",
	    "Gómez",
	    "Gonzales",
	    "González",
	    "Gollum",
	    "Gracia",
	    "Granado",
	    "Granados",
	    "Griego",
	    "Grijalva",
	    "Guajardo",
	    "Guardado",
	    "Guerra",
	    "Guerrero",
	    "Guevara",
	    "Guillen",
	    "Gurule",
	    "Gutiérrez",
	    "Guzmán",
	    "Haro",
	    "Henríquez",
	    "Heredia",
	    "Hernádez",
	    "Hernandes",
	    "Hernández",
	    "Herrera",
	    "Hidalgo",
	    "Hinojosa",
	    "Holguín",
	    "Huerta",
	    "Hurtado",
	    "Ibarra",
	    "Iglesias",
	    "Irizarry",
	    "Jaime",
	    "Jaimes",
	    "Jáquez",
	    "Jaramillo",
	    "Jasso",
	    "Jiménez",
	    "Jimínez",
	    "Juárez",
	    "Jurado",
	    "Laboy",
	    "Lara",
	    "Laureano",
	    "Leal",
	    "Lebrón",
	    "Ledesma",
	    "Leiva",
	    "Lemus",
	    "León",
	    "Lerma",
	    "Leyva",
	    "Limón",
	    "Linares",
	    "Lira",
	    "Llamas",
	    "Loera",
	    "Lomeli",
	    "Longoria",
	    "López",
	    "Lovato",
	    "Loya",
	    "Lozada",
	    "Lozano",
	    "Lucero",
	    "Lucio",
	    "Luevano",
	    "Lugo",
	    "Luna",
	    "Macías",
	    "Madera",
	    "Madrid",
	    "Madrigal",
	    "Maestas",
	    "Magaña",
	    "Malave",
	    "Maldonado",
	    "Manzanares",
	    "Mares",
	    "Marín",
	    "Márquez",
	    "Marrero",
	    "Marroquín",
	    "Martínez",
	    "Mascareñas",
	    "Mata",
	    "Mateo",
	    "Matías",
	    "Matos",
	    "Maya",
	    "Mayorga",
	    "Medina",
	    "Medrano",
	    "Mejía",
	    "Meléndez",
	    "Melgar",
	    "Mena",
	    "Menchaca",
	    "Méndez",
	    "Mendoza",
	    "Menéndez",
	    "Meraz",
	    "Mercado",
	    "Merino",
	    "Mesa",
	    "Meza",
	    "Miramontes",
	    "Miranda",
	    "Mireles",
	    "Mojica",
	    "Molina",
	    "Mondragón",
	    "Monroy",
	    "Montalvo",
	    "Montañez",
	    "Montaño",
	    "Montemayor",
	    "Montenegro",
	    "Montero",
	    "Montes",
	    "Montez",
	    "Montoya",
	    "Mora",
	    "Morales",
	    "Moreno",
	    "Mota",
	    "Moya",
	    "Munguía",
	    "Muñiz",
	    "Muñoz",
	    "Murillo",
	    "Muro",
	    "Nájera",
	    "Naranjo",
	    "Narváez",
	    "Nava",
	    "Navarrete",
	    "Navarro",
	    "Nazario",
	    "Negrete",
	    "Negrón",
	    "Nevárez",
	    "Nieto",
	    "Nieves",
	    "Niño",
	    "Noriega",
	    "Núñez",
	    "Ocampo",
	    "Ocasio",
	    "Ochoa",
	    "Ojeda",
	    "Olivares",
	    "Olivárez",
	    "Olivas",
	    "Olivera",
	    "Olivo",
	    "Olmos",
	    "Olvera",
	    "Ontiveros",
	    "Oquendo",
	    "Ordóñez",
	    "Orellana",
	    "Ornelas",
	    "Orosco",
	    "Orozco",
	    "Orta",
	    "Ortega",
	    "Ortiz",
	    "Osorio",
	    "Otero",
	    "Ozuna",
	    "Pabón",
	    "Pacheco",
	    "Padilla",
	    "Padrón",
	    "Páez",
	    "Pagan",
	    "Palacios",
	    "Palomino",
	    "Palomo",
	    "Pantoja",
	    "Paredes",
	    "Parra",
	    "Partida",
	    "Patiño",
	    "Paz",
	    "Pedraza",
	    "Pedroza",
	    "Pelayo",
	    "Peña",
	    "Perales",
	    "Peralta",
	    "Perea",
	    "Peres",
	    "Pérez",
	    "Pichardo",
	    "Piña",
	    "Pineda",
	    "Pizarro",
	    "Polanco",
	    "Ponce",
	    "Porras",
	    "Portillo",
	    "Posada",
	    "Prado",
	    "Preciado",
	    "Prieto",
	    "Puente",
	    "Puga",
	    "Pulido",
	    "Quesada",
	    "Quezada",
	    "Quiñones",
	    "Quiñónez",
	    "Quintana",
	    "Quintanilla",
	    "Quintero",
	    "Quiroz",
	    "Rael",
	    "Ramírez",
	    "Ramón",
	    "Ramos",
	    "Rangel",
	    "Rascón",
	    "Raya",
	    "Razo",
	    "Regalado",
	    "Rendón",
	    "Rentería",
	    "Reséndez",
	    "Reyes",
	    "Reyna",
	    "Reynoso",
	    "Rico",
	    "Rincón",
	    "Riojas",
	    "Ríos",
	    "Rivas",
	    "Rivera",
	    "Rivero",
	    "Robledo",
	    "Robles",
	    "Rocha",
	    "Rodarte",
	    "Rodrígez",
	    "Rodríguez",
	    "Rodríquez",
	    "Rojas",
	    "Rojo",
	    "Roldán",
	    "Rolón",
	    "Romero",
	    "Romo",
	    "Roque",
	    "Rosado",
	    "Rosales",
	    "Rosario",
	    "Rosas",
	    "Roybal",
	    "Rubio",
	    "Ruelas",
	    "Ruiz",
	    "Saavedra",
	    "Sáenz",
	    "Saiz",
	    "Salas",
	    "Salazar",
	    "Salcedo",
	    "Salcido",
	    "Saldaña",
	    "Saldivar",
	    "Salgado",
	    "Salinas",
	    "Samaniego",
	    "Sanabria",
	    "Sanches",
	    "Sánchez",
	    "Sandoval",
	    "Santacruz",
	    "Santana",
	    "Santiago",
	    "Santillán",
	    "Sarabia",
	    "Sauceda",
	    "Saucedo",
	    "Sedillo",
	    "Segovia",
	    "Segura",
	    "Sepúlveda",
	    "Serna",
	    "Serrano",
	    "Serrato",
	    "Sevilla",
	    "Sierra",
	    "Sisneros",
	    "Solano",
	    "Solís",
	    "Soliz",
	    "Solorio",
	    "Solorzano",
	    "Soria",
	    "Sosa",
	    "Sotelo",
	    "Soto",
	    "Suárez",
	    "Tafoya",
	    "Tamayo",
	    "Tamez",
	    "Tapia",
	    "Tejada",
	    "Tejeda",
	    "Téllez",
	    "Tello",
	    "Terán",
	    "Terrazas",
	    "Tijerina",
	    "Tirado",
	    "Toledo",
	    "Toro",
	    "Torres",
	    "Tórrez",
	    "Tovar",
	    "Trejo",
	    "Treviño",
	    "Trujillo",
	    "Ulibarri",
	    "Ulloa",
	    "Urbina",
	    "Ureña",
	    "Urías",
	    "Uribe",
	    "Urrutia",
	    "Vaca",
	    "Valadez",
	    "Valdés",
	    "Valdez",
	    "Valdivia",
	    "Valencia",
	    "Valentín",
	    "Valenzuela",
	    "Valladares",
	    "Valle",
	    "Vallejo",
	    "Valles",
	    "Valverde",
	    "Vanegas",
	    "Varela",
	    "Vargas",
	    "Vásquez",
	    "Vázquez",
	    "Vega",
	    "Vela",
	    "Velasco",
	    "Velásquez",
	    "Velázquez",
	    "Vélez",
	    "Véliz",
	    "Venegas",
	    "Vera",
	    "Verdugo",
	    "Verduzco",
	    "Vergara",
	    "Viera",
	    "Vigil",
	    "Villa",
	    "Villagómez",
	    "Villalobos",
	    "Villalpando",
	    "Villanueva",
	    "Villareal",
	    "Villarreal",
	    "Villaseñor",
	    "Villegas",
	    "Yáñez",
	    "Ybarra",
	    "Zambrano",
	    "Zamora",
	    "Zamudio",
	    "Zapata",
	    "Zaragoza",
	    "Zarate",
	    "Zavala",
	    "Zayas",
	    "Zelaya",
	    "Zepeda",
	    "Zúñiga"
	  ],
	  "prefix": [
	    "Sr.",
	    "Sra.",
	    "Sta."
	  ],
	  "suffix": [
	    "Jr.",
	    "Sr.",
	    "I",
	    "II",
	    "III",
	    "IV",
	    "V",
	    "MD",
	    "DDS",
	    "PhD",
	    "DVM"
	  ],
	  "title": {
	    "descriptor": [
	      "Jefe",
	      "Senior",
	      "Directo",
	      "Corporativo",
	      "Dinánmico",
	      "Futuro",
	      "Producto",
	      "Nacional",
	      "Regional",
	      "Distrito",
	      "Central",
	      "Global",
	      "Cliente",
	      "Inversor",
	      "International",
	      "Heredado",
	      "Adelante",
	      "Interno",
	      "Humano",
	      "Gerente",
	      "Director"
	    ],
	    "level": [
	      "Soluciones",
	      "Programa",
	      "Marca",
	      "Seguridada",
	      "Investigación",
	      "Marketing",
	      "Normas",
	      "Implementación",
	      "Integración",
	      "Funcionalidad",
	      "Respuesta",
	      "Paradigma",
	      "Tácticas",
	      "Identidad",
	      "Mercados",
	      "Grupo",
	      "División",
	      "Aplicaciones",
	      "Optimización",
	      "Operaciones",
	      "Infraestructura",
	      "Intranet",
	      "Comunicaciones",
	      "Web",
	      "Calidad",
	      "Seguro",
	      "Mobilidad",
	      "Cuentas",
	      "Datos",
	      "Creativo",
	      "Configuración",
	      "Contabilidad",
	      "Interacciones",
	      "Factores",
	      "Usabilidad",
	      "Métricas"
	    ],
	    "job": [
	      "Supervisor",
	      "Asociado",
	      "Ejecutivo",
	      "Relacciones",
	      "Oficial",
	      "Gerente",
	      "Ingeniero",
	      "Especialista",
	      "Director",
	      "Coordinador",
	      "Administrador",
	      "Arquitecto",
	      "Analista",
	      "Diseñador",
	      "Planificador",
	      "Técnico",
	      "Funcionario",
	      "Desarrollador",
	      "Productor",
	      "Consultor",
	      "Asistente",
	      "Facilitador",
	      "Agente",
	      "Representante",
	      "Estratega"
	    ]
	  },
	  "name": [
	    "#{prefix} #{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}"
	  ]
	};
	es.phone_number = {
	  "formats": [
	    "9##-###-###",
	    "9##.###.###",
	    "9## ### ###",
	    "9########"
	  ]
	};
	es.cell_phone = {
	  "formats": [
	    "6##-###-###",
	    "6##.###.###",
	    "6## ### ###",
	    "6########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var fa = {};
	module["exports"] = fa;
	fa.title = "Farsi";
	fa.name = {
	  "first_name": [
	    "آبان دخت",
	    "آبتین",
	    "آتوسا",
	    "آفر",
	    "آفره دخت",
	    "آذرنوش‌",
	    "آذین",
	    "آراه",
	    "آرزو",
	    "آرش",
	    "آرتین",
	    "آرتام",
	    "آرتمن",
	    "آرشام",
	    "آرمان",
	    "آرمین",
	    "آرمیتا",
	    "آریا فر",
	    "آریا",
	    "آریا مهر",
	    "آرین",
	    "آزاده",
	    "آزرم",
	    "آزرمدخت",
	    "آزیتا",
	    "آناهیتا",
	    "آونگ",
	    "آهو",
	    "آیدا",
	    "اتسز",
	    "اختر",
	    "ارد",
	    "ارد شیر",
	    "اردوان",
	    "ارژن",
	    "ارژنگ",
	    "ارسلان",
	    "ارغوان",
	    "ارمغان",
	    "ارنواز",
	    "اروانه",
	    "استر",
	    "اسفندیار",
	    "اشکان",
	    "اشکبوس",
	    "افسانه",
	    "افسون",
	    "افشین",
	    "امید",
	    "انوش (‌ آنوشا )",
	    "انوشروان",
	    "اورنگ",
	    "اوژن",
	    "اوستا",
	    "اهورا",
	    "ایاز",
	    "ایران",
	    "ایراندخت",
	    "ایرج",
	    "ایزدیار",
	    "بابک",
	    "باپوک",
	    "باربد",
	    "بارمان",
	    "بامداد",
	    "بامشاد",
	    "بانو",
	    "بختیار",
	    "برانوش",
	    "بردیا",
	    "برزو",
	    "برزویه",
	    "برزین",
	    "برمک",
	    "بزرگمهر",
	    "بنفشه",
	    "بوژان",
	    "بویان",
	    "بهار",
	    "بهارک",
	    "بهاره",
	    "بهتاش",
	    "بهداد",
	    "بهرام",
	    "بهدیس",
	    "بهرخ",
	    "بهرنگ",
	    "بهروز",
	    "بهزاد",
	    "بهشاد",
	    "بهمن",
	    "بهناز",
	    "بهنام",
	    "بهنود",
	    "بهنوش",
	    "بیتا",
	    "بیژن",
	    "پارسا",
	    "پاکان",
	    "پاکتن",
	    "پاکدخت",
	    "پانته آ",
	    "پدرام",
	    "پرتو",
	    "پرشنگ",
	    "پرتو",
	    "پرستو",
	    "پرویز",
	    "پردیس",
	    "پرهام",
	    "پژمان",
	    "پژوا",
	    "پرنیا",
	    "پشنگ",
	    "پروانه",
	    "پروین",
	    "پری",
	    "پریچهر",
	    "پریدخت",
	    "پریسا",
	    "پرناز",
	    "پریوش",
	    "پریا",
	    "پوپک",
	    "پوران",
	    "پوراندخت",
	    "پوریا",
	    "پولاد",
	    "پویا",
	    "پونه",
	    "پیام",
	    "پیروز",
	    "پیمان",
	    "تابان",
	    "تاباندخت",
	    "تاجی",
	    "تارا",
	    "تاویار",
	    "ترانه",
	    "تناز",
	    "توران",
	    "توراندخت",
	    "تورج",
	    "تورتک",
	    "توفان",
	    "توژال",
	    "تیر داد",
	    "تینا",
	    "تینو",
	    "جابان",
	    "جامین",
	    "جاوید",
	    "جریره",
	    "جمشید",
	    "جوان",
	    "جویا",
	    "جهان",
	    "جهانبخت",
	    "جهانبخش",
	    "جهاندار",
	    "جهانگیر",
	    "جهان بانو",
	    "جهاندخت",
	    "جهان ناز",
	    "جیران",
	    "چابک",
	    "چالاک",
	    "چاوش",
	    "چترا",
	    "چوبین",
	    "چهرزاد",
	    "خاوردخت",
	    "خداداد",
	    "خدایار",
	    "خرم",
	    "خرمدخت",
	    "خسرو",
	    "خشایار",
	    "خورشید",
	    "دادمهر",
	    "دارا",
	    "داراب",
	    "داریا",
	    "داریوش",
	    "دانوش",
	    "داور‌",
	    "دایان",
	    "دریا",
	    "دل آرا",
	    "دل آویز",
	    "دلارام",
	    "دل انگیز",
	    "دلبر",
	    "دلبند",
	    "دلربا",
	    "دلشاد",
	    "دلکش",
	    "دلناز",
	    "دلنواز",
	    "دورشاسب",
	    "دنیا",
	    "دیااکو",
	    "دیانوش",
	    "دیبا",
	    "دیبا دخت",
	    "رابو",
	    "رابین",
	    "رادبانو",
	    "رادمان",
	    "رازبان",
	    "راژانه",
	    "راسا",
	    "رامتین",
	    "رامش",
	    "رامشگر",
	    "رامونا",
	    "رامیار",
	    "رامیلا",
	    "رامین",
	    "راویار",
	    "رژینا",
	    "رخپاک",
	    "رخسار",
	    "رخشانه",
	    "رخشنده",
	    "رزمیار",
	    "رستم",
	    "رکسانا",
	    "روبینا",
	    "رودابه",
	    "روزبه",
	    "روشنک",
	    "روناک",
	    "رهام",
	    "رهی",
	    "ریبار",
	    "راسپینا",
	    "زادبخت",
	    "زاد به",
	    "زاد چهر",
	    "زاد فر",
	    "زال",
	    "زادماسب",
	    "زاوا",
	    "زردشت",
	    "زرنگار",
	    "زری",
	    "زرین",
	    "زرینه",
	    "زمانه",
	    "زونا",
	    "زیبا",
	    "زیبار",
	    "زیما",
	    "زینو",
	    "ژاله",
	    "ژالان",
	    "ژیار",
	    "ژینا",
	    "ژیوار",
	    "سارا",
	    "سارک",
	    "سارنگ",
	    "ساره",
	    "ساسان",
	    "ساغر",
	    "سام",
	    "سامان",
	    "سانا",
	    "ساناز",
	    "سانیار",
	    "ساویز",
	    "ساهی",
	    "ساینا",
	    "سایه",
	    "سپنتا",
	    "سپند",
	    "سپهر",
	    "سپهرداد",
	    "سپیدار",
	    "سپید بانو",
	    "سپیده",
	    "ستاره",
	    "ستی",
	    "سرافراز",
	    "سرور",
	    "سروش",
	    "سرور",
	    "سوبا",
	    "سوبار",
	    "سنبله",
	    "سودابه",
	    "سوری",
	    "سورن",
	    "سورنا",
	    "سوزان",
	    "سوزه",
	    "سوسن",
	    "سومار",
	    "سولان",
	    "سولماز",
	    "سوگند",
	    "سهراب",
	    "سهره",
	    "سهند",
	    "سیامک",
	    "سیاوش",
	    "سیبوبه ‌",
	    "سیما",
	    "سیمدخت",
	    "سینا",
	    "سیمین",
	    "سیمین دخت",
	    "شاپرک",
	    "شادی",
	    "شادمهر",
	    "شاران",
	    "شاهپور",
	    "شاهدخت",
	    "شاهرخ",
	    "شاهین",
	    "شاهیندخت",
	    "شایسته",
	    "شباهنگ",
	    "شب بو",
	    "شبدیز",
	    "شبنم",
	    "شراره",
	    "شرمین",
	    "شروین",
	    "شکوفه",
	    "شکفته",
	    "شمشاد",
	    "شمین",
	    "شوان",
	    "شمیلا",
	    "شورانگیز",
	    "شوری",
	    "شهاب",
	    "شهبار",
	    "شهباز",
	    "شهبال",
	    "شهپر",
	    "شهداد",
	    "شهرآرا",
	    "شهرام",
	    "شهربانو",
	    "شهرزاد",
	    "شهرناز",
	    "شهرنوش",
	    "شهره",
	    "شهریار",
	    "شهرزاد",
	    "شهلا",
	    "شهنواز",
	    "شهین",
	    "شیبا",
	    "شیدا",
	    "شیده",
	    "شیردل",
	    "شیرزاد",
	    "شیرنگ",
	    "شیرو",
	    "شیرین دخت",
	    "شیما",
	    "شینا",
	    "شیرین",
	    "شیوا",
	    "طوس",
	    "طوطی",
	    "طهماسب",
	    "طهمورث",
	    "غوغا",
	    "غنچه",
	    "فتانه",
	    "فدا",
	    "فراز",
	    "فرامرز",
	    "فرانک",
	    "فراهان",
	    "فربد",
	    "فربغ",
	    "فرجاد",
	    "فرخ",
	    "فرخ پی",
	    "فرخ داد",
	    "فرخ رو",
	    "فرخ زاد",
	    "فرخ لقا",
	    "فرخ مهر",
	    "فرداد",
	    "فردیس",
	    "فرین",
	    "فرزاد",
	    "فرزام",
	    "فرزان",
	    "فرزانه",
	    "فرزین",
	    "فرشاد",
	    "فرشته",
	    "فرشید",
	    "فرمان",
	    "فرناز",
	    "فرنگیس",
	    "فرنود",
	    "فرنوش",
	    "فرنیا",
	    "فروتن",
	    "فرود",
	    "فروز",
	    "فروزان",
	    "فروزش",
	    "فروزنده",
	    "فروغ",
	    "فرهاد",
	    "فرهنگ",
	    "فرهود",
	    "فربار",
	    "فریبا",
	    "فرید",
	    "فریدخت",
	    "فریدون",
	    "فریمان",
	    "فریناز",
	    "فرینوش",
	    "فریوش",
	    "فیروز",
	    "فیروزه",
	    "قابوس",
	    "قباد",
	    "قدسی",
	    "کابان",
	    "کابوک",
	    "کارا",
	    "کارو",
	    "کاراکو",
	    "کامبخت",
	    "کامبخش",
	    "کامبیز",
	    "کامجو",
	    "کامدین",
	    "کامران",
	    "کامراوا",
	    "کامک",
	    "کامنوش",
	    "کامیار",
	    "کانیار",
	    "کاووس",
	    "کاوه",
	    "کتایون",
	    "کرشمه",
	    "کسری",
	    "کلاله",
	    "کمبوجیه",
	    "کوشا",
	    "کهبد",
	    "کهرام",
	    "کهزاد",
	    "کیارش",
	    "کیان",
	    "کیانا",
	    "کیانچهر",
	    "کیاندخت",
	    "کیانوش",
	    "کیاوش",
	    "کیخسرو",
	    "کیقباد",
	    "کیکاووس",
	    "کیوان",
	    "کیوان دخت",
	    "کیومرث",
	    "کیهان",
	    "کیاندخت",
	    "کیهانه",
	    "گرد آفرید",
	    "گردان",
	    "گرشا",
	    "گرشاسب",
	    "گرشین",
	    "گرگین",
	    "گزل",
	    "گشتاسب",
	    "گشسب",
	    "گشسب بانو",
	    "گل",
	    "گل آذین",
	    "گل آرا‌",
	    "گلاره",
	    "گل افروز",
	    "گلاله",
	    "گل اندام",
	    "گلاویز",
	    "گلباد",
	    "گلبار",
	    "گلبام",
	    "گلبان",
	    "گلبانو",
	    "گلبرگ",
	    "گلبو",
	    "گلبهار",
	    "گلبیز",
	    "گلپاره",
	    "گلپر",
	    "گلپری",
	    "گلپوش",
	    "گل پونه",
	    "گلچین",
	    "گلدخت",
	    "گلدیس",
	    "گلربا",
	    "گلرخ",
	    "گلرنگ",
	    "گلرو",
	    "گلشن",
	    "گلریز",
	    "گلزاد",
	    "گلزار",
	    "گلسا",
	    "گلشید",
	    "گلنار",
	    "گلناز",
	    "گلنسا",
	    "گلنواز",
	    "گلنوش",
	    "گلی",
	    "گودرز",
	    "گوماتو",
	    "گهر چهر",
	    "گوهر ناز",
	    "گیتی",
	    "گیسو",
	    "گیلدا",
	    "گیو",
	    "لادن",
	    "لاله",
	    "لاله رخ",
	    "لاله دخت",
	    "لبخند",
	    "لقاء",
	    "لومانا",
	    "لهراسب",
	    "مارال",
	    "ماری",
	    "مازیار",
	    "ماکان",
	    "مامک",
	    "مانا",
	    "ماندانا",
	    "مانوش",
	    "مانی",
	    "مانیا",
	    "ماهان",
	    "ماهاندخت",
	    "ماه برزین",
	    "ماه جهان",
	    "ماهچهر",
	    "ماهدخت",
	    "ماهور",
	    "ماهرخ",
	    "ماهزاد",
	    "مردآویز",
	    "مرداس",
	    "مرزبان",
	    "مرمر",
	    "مزدک",
	    "مژده",
	    "مژگان",
	    "مستان",
	    "مستانه",
	    "مشکاندخت",
	    "مشکناز",
	    "مشکین دخت",
	    "منیژه",
	    "منوچهر",
	    "مهبانو",
	    "مهبد",
	    "مه داد",
	    "مهتاب",
	    "مهدیس",
	    "مه جبین",
	    "مه دخت",
	    "مهر آذر",
	    "مهر آرا",
	    "مهر آسا",
	    "مهر آفاق",
	    "مهر افرین",
	    "مهرآب",
	    "مهرداد",
	    "مهر افزون",
	    "مهرام",
	    "مهران",
	    "مهراندخت",
	    "مهراندیش",
	    "مهرانفر",
	    "مهرانگیز",
	    "مهرداد",
	    "مهر دخت",
	    "مهرزاده ‌",
	    "مهرناز",
	    "مهرنوش",
	    "مهرنکار",
	    "مهرنیا",
	    "مهروز",
	    "مهری",
	    "مهریار",
	    "مهسا",
	    "مهستی",
	    "مه سیما",
	    "مهشاد",
	    "مهشید",
	    "مهنام",
	    "مهناز",
	    "مهنوش",
	    "مهوش",
	    "مهیار",
	    "مهین",
	    "مهین دخت",
	    "میترا",
	    "میخک",
	    "مینا",
	    "مینا دخت",
	    "مینو",
	    "مینودخت",
	    "مینو فر",
	    "نادر",
	    "ناز آفرین",
	    "نازبانو",
	    "نازپرور",
	    "نازچهر",
	    "نازفر",
	    "نازلی",
	    "نازی",
	    "نازیدخت",
	    "نامور",
	    "ناهید",
	    "ندا",
	    "نرسی",
	    "نرگس",
	    "نرمک",
	    "نرمین",
	    "نریمان",
	    "نسترن",
	    "نسرین",
	    "نسرین دخت",
	    "نسرین نوش",
	    "نکیسا",
	    "نگار",
	    "نگاره",
	    "نگارین",
	    "نگین",
	    "نوا",
	    "نوش",
	    "نوش آذر",
	    "نوش آور",
	    "نوشا",
	    "نوش آفرین",
	    "نوشدخت",
	    "نوشروان",
	    "نوشفر",
	    "نوشناز",
	    "نوشین",
	    "نوید",
	    "نوین",
	    "نوین دخت",
	    "نیش ا",
	    "نیک بین",
	    "نیک پی",
	    "نیک چهر",
	    "نیک خواه",
	    "نیکداد",
	    "نیکدخت",
	    "نیکدل",
	    "نیکزاد",
	    "نیلوفر",
	    "نیما",
	    "وامق",
	    "ورجاوند",
	    "وریا",
	    "وشمگیر",
	    "وهرز",
	    "وهسودان",
	    "ویدا",
	    "ویس",
	    "ویشتاسب",
	    "ویگن",
	    "هژیر",
	    "هخامنش",
	    "هربد( هیربد )",
	    "هرمز",
	    "همایون",
	    "هما",
	    "همادخت",
	    "همدم",
	    "همراز",
	    "همراه",
	    "هنگامه",
	    "هوتن",
	    "هور",
	    "هورتاش",
	    "هورچهر",
	    "هورداد",
	    "هوردخت",
	    "هورزاد",
	    "هورمند",
	    "هوروش",
	    "هوشنگ",
	    "هوشیار",
	    "هومان",
	    "هومن",
	    "هونام",
	    "هویدا",
	    "هیتاسب",
	    "هیرمند",
	    "هیما",
	    "هیوا",
	    "یادگار",
	    "یاسمن ( یاسمین )",
	    "یاشار",
	    "یاور",
	    "یزدان",
	    "یگانه",
	    "یوشیتا"
	  ],
	  "last_name": [
	    "عارف",
	    "عاشوری",
	    "عالی",
	    "عبادی",
	    "عبدالکریمی",
	    "عبدالملکی",
	    "عراقی",
	    "عزیزی",
	    "عصار",
	    "عقیلی",
	    "علم",
	    "علم‌الهدی",
	    "علی عسگری",
	    "علی‌آبادی",
	    "علیا",
	    "علی‌پور",
	    "علی‌زمانی",
	    "عنایت",
	    "غضنفری",
	    "غنی",
	    "فارسی",
	    "فاطمی",
	    "فانی",
	    "فتاحی",
	    "فرامرزی",
	    "فرج",
	    "فرشیدورد",
	    "فرمانفرمائیان",
	    "فروتن",
	    "فرهنگ",
	    "فریاد",
	    "فنایی",
	    "فنی‌زاده",
	    "فولادوند",
	    "فهمیده",
	    "قاضی",
	    "قانعی",
	    "قانونی",
	    "قمیشی",
	    "قنبری",
	    "قهرمان",
	    "قهرمانی",
	    "قهرمانیان",
	    "قهستانی",
	    "کاشی",
	    "کاکاوند",
	    "کامکار",
	    "کاملی",
	    "کاویانی",
	    "کدیور",
	    "کردبچه",
	    "کرمانی",
	    "کریمی",
	    "کلباسی",
	    "کمالی",
	    "کوشکی",
	    "کهنمویی",
	    "کیان",
	    "کیانی (نام خانوادگی)",
	    "کیمیایی",
	    "گل محمدی",
	    "گلپایگانی",
	    "گنجی",
	    "لاجوردی",
	    "لاچینی",
	    "لاهوتی",
	    "لنکرانی",
	    "لوکس",
	    "مجاهد",
	    "مجتبایی",
	    "مجتبوی",
	    "مجتهد شبستری",
	    "مجتهدی",
	    "مجرد",
	    "محجوب",
	    "محجوبی",
	    "محدثی",
	    "محمدرضایی",
	    "محمدی",
	    "مددی",
	    "مرادخانی",
	    "مرتضوی",
	    "مستوفی",
	    "مشا",
	    "مصاحب",
	    "مصباح",
	    "مصباح‌زاده",
	    "مطهری",
	    "مظفر",
	    "معارف",
	    "معروف",
	    "معین",
	    "مفتاح",
	    "مفتح",
	    "مقدم",
	    "ملایری",
	    "ملک",
	    "ملکیان",
	    "منوچهری",
	    "موحد",
	    "موسوی",
	    "موسویان",
	    "مهاجرانی",
	    "مهدی‌پور",
	    "میرباقری",
	    "میردامادی",
	    "میرزاده",
	    "میرسپاسی",
	    "میزبانی",
	    "ناظری",
	    "نامور",
	    "نجفی",
	    "ندوشن",
	    "نراقی",
	    "نعمت‌زاده",
	    "نقدی",
	    "نقیب‌زاده",
	    "نواب",
	    "نوبخت",
	    "نوبختی",
	    "نهاوندی",
	    "نیشابوری",
	    "نیلوفری",
	    "واثقی",
	    "واعظ",
	    "واعظ‌زاده",
	    "واعظی",
	    "وکیلی",
	    "هاشمی",
	    "هاشمی رفسنجانی",
	    "هاشمیان",
	    "هامون",
	    "هدایت",
	    "هراتی",
	    "هروی",
	    "همایون",
	    "همت",
	    "همدانی",
	    "هوشیار",
	    "هومن",
	    "یاحقی",
	    "یادگار",
	    "یثربی",
	    "یلدا"
	  ],
	  "prefix": [
	    "آقای",
	    "خانم",
	    "دکتر"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var fr = {};
	module["exports"] = fr;
	fr.title = "French";
	fr.address = {
	  "building_number": [
	    "####",
	    "###",
	    "##",
	    "#"
	  ],
	  "street_prefix": [
	    "Allée, Voie",
	    "Rue",
	    "Avenue",
	    "Boulevard",
	    "Quai",
	    "Passage",
	    "Impasse",
	    "Place"
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "# étage"
	  ],
	  "postcode": [
	    "#####"
	  ],
	  "state": [
	    "Alsace",
	    "Aquitaine",
	    "Auvergne",
	    "Basse-Normandie",
	    "Bourgogne",
	    "Bretagne",
	    "Centre",
	    "Champagne-Ardenne",
	    "Corse",
	    "Franche-Comté",
	    "Haute-Normandie",
	    "Île-de-France",
	    "Languedoc-Roussillon",
	    "Limousin",
	    "Lorraine",
	    "Midi-Pyrénées",
	    "Nord-Pas-de-Calais",
	    "Pays de la Loire",
	    "Picardie",
	    "Poitou-Charentes",
	    "Provence-Alpes-Côte d'Azur",
	    "Rhône-Alpes"
	  ],
	  "city_name": [
	    "Paris",
	    "Marseille",
	    "Lyon",
	    "Toulouse",
	    "Nice",
	    "Nantes",
	    "Strasbourg",
	    "Montpellier",
	    "Bordeaux",
	    "Lille13",
	    "Rennes",
	    "Reims",
	    "Le Havre",
	    "Saint-Étienne",
	    "Toulon",
	    "Grenoble",
	    "Dijon",
	    "Angers",
	    "Saint-Denis",
	    "Villeurbanne",
	    "Le Mans",
	    "Aix-en-Provence",
	    "Brest",
	    "Nîmes",
	    "Limoges",
	    "Clermont-Ferrand",
	    "Tours",
	    "Amiens",
	    "Metz",
	    "Perpignan",
	    "Besançon",
	    "Orléans",
	    "Boulogne-Billancourt",
	    "Mulhouse",
	    "Rouen",
	    "Caen",
	    "Nancy",
	    "Saint-Denis",
	    "Saint-Paul",
	    "Montreuil",
	    "Argenteuil",
	    "Roubaix",
	    "Dunkerque14",
	    "Tourcoing",
	    "Nanterre",
	    "Avignon",
	    "Créteil",
	    "Poitiers",
	    "Fort-de-France",
	    "Courbevoie",
	    "Versailles",
	    "Vitry-sur-Seine",
	    "Colombes",
	    "Pau",
	    "Aulnay-sous-Bois",
	    "Asnières-sur-Seine",
	    "Rueil-Malmaison",
	    "Saint-Pierre",
	    "Antibes",
	    "Saint-Maur-des-Fossés",
	    "Champigny-sur-Marne",
	    "La Rochelle",
	    "Aubervilliers",
	    "Calais",
	    "Cannes",
	    "Le Tampon",
	    "Béziers",
	    "Colmar",
	    "Bourges",
	    "Drancy",
	    "Mérignac",
	    "Saint-Nazaire",
	    "Valence",
	    "Ajaccio",
	    "Issy-les-Moulineaux",
	    "Villeneuve-d'Ascq",
	    "Levallois-Perret",
	    "Noisy-le-Grand",
	    "Quimper",
	    "La Seyne-sur-Mer",
	    "Antony",
	    "Troyes",
	    "Neuilly-sur-Seine",
	    "Sarcelles",
	    "Les Abymes",
	    "Vénissieux",
	    "Clichy",
	    "Lorient",
	    "Pessac",
	    "Ivry-sur-Seine",
	    "Cergy",
	    "Cayenne",
	    "Niort",
	    "Chambéry",
	    "Montauban",
	    "Saint-Quentin",
	    "Villejuif",
	    "Hyères",
	    "Beauvais",
	    "Cholet"
	  ],
	  "city": [
	    "#{city_name}"
	  ],
	  "street_suffix": [
	    "de l'Abbaye",
	    "Adolphe Mille",
	    "d'Alésia",
	    "d'Argenteuil",
	    "d'Assas",
	    "du Bac",
	    "de Paris",
	    "La Boétie",
	    "Bonaparte",
	    "de la Bûcherie",
	    "de Caumartin",
	    "Charlemagne",
	    "du Chat-qui-Pêche",
	    "de la Chaussée-d'Antin",
	    "du Dahomey",
	    "Dauphine",
	    "Delesseux",
	    "du Faubourg Saint-Honoré",
	    "du Faubourg-Saint-Denis",
	    "de la Ferronnerie",
	    "des Francs-Bourgeois",
	    "des Grands Augustins",
	    "de la Harpe",
	    "du Havre",
	    "de la Huchette",
	    "Joubert",
	    "Laffitte",
	    "Lepic",
	    "des Lombards",
	    "Marcadet",
	    "Molière",
	    "Monsieur-le-Prince",
	    "de Montmorency",
	    "Montorgueil",
	    "Mouffetard",
	    "de Nesle",
	    "Oberkampf",
	    "de l'Odéon",
	    "d'Orsel",
	    "de la Paix",
	    "des Panoramas",
	    "Pastourelle",
	    "Pierre Charron",
	    "de la Pompe",
	    "de Presbourg",
	    "de Provence",
	    "de Richelieu",
	    "de Rivoli",
	    "des Rosiers",
	    "Royale",
	    "d'Abbeville",
	    "Saint-Honoré",
	    "Saint-Bernard",
	    "Saint-Denis",
	    "Saint-Dominique",
	    "Saint-Jacques",
	    "Saint-Séverin",
	    "des Saussaies",
	    "de Seine",
	    "de Solférino",
	    "Du Sommerard",
	    "de Tilsitt",
	    "Vaneau",
	    "de Vaugirard",
	    "de la Victoire",
	    "Zadkine"
	  ],
	  "street_name": [
	    "#{street_prefix} #{street_suffix}"
	  ],
	  "street_address": [
	    "#{building_number} #{street_name}"
	  ],
	  "default_country": [
	    "France"
	  ]
	};
	fr.company = {
	  "suffix": [
	    "SARL",
	    "SA",
	    "EURL",
	    "SAS",
	    "SEM",
	    "SCOP",
	    "GIE",
	    "EI"
	  ],
	  "adjective": [
	      "Adaptive",
	      "Advanced",
	      "Ameliorated",
	      "Assimilated",
	      "Automated",
	      "Balanced",
	      "Business-focused",
	      "Centralized",
	      "Cloned",
	      "Compatible",
	      "Configurable",
	      "Cross-group",
	      "Cross-platform",
	      "Customer-focused",
	      "Customizable",
	      "Decentralized",
	      "De-engineered",
	      "Devolved",
	      "Digitized",
	      "Distributed",
	      "Diverse",
	      "Down-sized",
	      "Enhanced",
	      "Enterprise-wide",
	      "Ergonomic",
	      "Exclusive",
	      "Expanded",
	      "Extended",
	      "Face to face",
	      "Focused",
	      "Front-line",
	      "Fully-configurable",
	      "Function-based",
	      "Fundamental",
	      "Future-proofed",
	      "Grass-roots",
	      "Horizontal",
	      "Implemented",
	      "Innovative",
	      "Integrated",
	      "Intuitive",
	      "Inverse",
	      "Managed",
	      "Mandatory",
	      "Monitored",
	      "Multi-channelled",
	      "Multi-lateral",
	      "Multi-layered",
	      "Multi-tiered",
	      "Networked",
	      "Object-based",
	      "Open-architected",
	      "Open-source",
	      "Operative",
	      "Optimized",
	      "Optional",
	      "Organic",
	      "Organized",
	      "Persevering",
	      "Persistent",
	      "Phased",
	      "Polarised",
	      "Pre-emptive",
	      "Proactive",
	      "Profit-focused",
	      "Profound",
	      "Programmable",
	      "Progressive",
	      "Public-key",
	      "Quality-focused",
	      "Reactive",
	      "Realigned",
	      "Re-contextualized",
	      "Re-engineered",
	      "Reduced",
	      "Reverse-engineered",
	      "Right-sized",
	      "Robust",
	      "Seamless",
	      "Secured",
	      "Self-enabling",
	      "Sharable",
	      "Stand-alone",
	      "Streamlined",
	      "Switchable",
	      "Synchronised",
	      "Synergistic",
	      "Synergized",
	      "Team-oriented",
	      "Total",
	      "Triple-buffered",
	      "Universal",
	      "Up-sized",
	      "Upgradable",
	      "User-centric",
	      "User-friendly",
	      "Versatile",
	      "Virtual",
	      "Visionary",
	      "Vision-oriented"
	    ],
	    "descriptor":
	    [
	      "24 hour",
	      "24/7",
	      "3rd generation",
	      "4th generation",
	      "5th generation",
	      "6th generation",
	      "actuating",
	      "analyzing",
	      "asymmetric",
	      "asynchronous",
	      "attitude-oriented",
	      "background",
	      "bandwidth-monitored",
	      "bi-directional",
	      "bifurcated",
	      "bottom-line",
	      "clear-thinking",
	      "client-driven",
	      "client-server",
	      "coherent",
	      "cohesive",
	      "composite",
	      "context-sensitive",
	      "contextually-based",
	      "content-based",
	      "dedicated",
	      "demand-driven",
	      "didactic",
	      "directional",
	      "discrete",
	      "disintermediate",
	      "dynamic",
	      "eco-centric",
	      "empowering",
	      "encompassing",
	      "even-keeled",
	      "executive",
	      "explicit",
	      "exuding",
	      "fault-tolerant",
	      "foreground",
	      "fresh-thinking",
	      "full-range",
	      "global",
	      "grid-enabled",
	      "heuristic",
	      "high-level",
	      "holistic",
	      "homogeneous",
	      "human-resource",
	      "hybrid",
	      "impactful",
	      "incremental",
	      "intangible",
	      "interactive",
	      "intermediate",
	      "leading edge",
	      "local",
	      "logistical",
	      "maximized",
	      "methodical",
	      "mission-critical",
	      "mobile",
	      "modular",
	      "motivating",
	      "multimedia",
	      "multi-state",
	      "multi-tasking",
	      "national",
	      "needs-based",
	      "neutral",
	      "next generation",
	      "non-volatile",
	      "object-oriented",
	      "optimal",
	      "optimizing",
	      "radical",
	      "real-time",
	      "reciprocal",
	      "regional",
	      "responsive",
	      "scalable",
	      "secondary",
	      "solution-oriented",
	      "stable",
	      "static",
	      "systematic",
	      "systemic",
	      "system-worthy",
	      "tangible",
	      "tertiary",
	      "transitional",
	      "uniform",
	      "upward-trending",
	      "user-facing",
	      "value-added",
	      "web-enabled",
	      "well-modulated",
	      "zero administration",
	      "zero defect",
	      "zero tolerance"
	    ],
	    "noun":
	    [
	      "ability",
	      "access",
	      "adapter",
	      "algorithm",
	      "alliance",
	      "analyzer",
	      "application",
	      "approach",
	      "architecture",
	      "archive",
	      "artificial intelligence",
	      "array",
	      "attitude",
	      "benchmark",
	      "budgetary management",
	      "capability",
	      "capacity",
	      "challenge",
	      "circuit",
	      "collaboration",
	      "complexity",
	      "concept",
	      "conglomeration",
	      "contingency",
	      "core",
	      "customer loyalty",
	      "database",
	      "data-warehouse",
	      "definition",
	      "emulation",
	      "encoding",
	      "encryption",
	      "extranet",
	      "firmware",
	      "flexibility",
	      "focus group",
	      "forecast",
	      "frame",
	      "framework",
	      "function",
	      "functionalities",
	      "Graphic Interface",
	      "groupware",
	      "Graphical User Interface",
	      "hardware",
	      "help-desk",
	      "hierarchy",
	      "hub",
	      "implementation",
	      "info-mediaries",
	      "infrastructure",
	      "initiative",
	      "installation",
	      "instruction set",
	      "interface",
	      "internet solution",
	      "intranet",
	      "knowledge user",
	      "knowledge base",
	      "local area network",
	      "leverage",
	      "matrices",
	      "matrix",
	      "methodology",
	      "middleware",
	      "migration",
	      "model",
	      "moderator",
	      "monitoring",
	      "moratorium",
	      "neural-net",
	      "open architecture",
	      "open system",
	      "orchestration",
	      "paradigm",
	      "parallelism",
	      "policy",
	      "portal",
	      "pricing structure",
	      "process improvement",
	      "product",
	      "productivity",
	      "project",
	      "projection",
	      "protocol",
	      "secured line",
	      "service-desk",
	      "software",
	      "solution",
	      "standardization",
	      "strategy",
	      "structure",
	      "success",
	      "superstructure",
	      "support",
	      "synergy",
	      "system engine",
	      "task-force",
	      "throughput",
	      "time-frame",
	      "toolset",
	      "utilisation",
	      "website",
	      "workforce"
	  ],
	  "bs_verb": [
	      "implement",
	      "utilize",
	      "integrate",
	      "streamline",
	      "optimize",
	      "evolve",
	      "transform",
	      "embrace",
	      "enable",
	      "orchestrate",
	      "leverage",
	      "reinvent",
	      "aggregate",
	      "architect",
	      "enhance",
	      "incentivize",
	      "morph",
	      "empower",
	      "envisioneer",
	      "monetize",
	      "harness",
	      "facilitate",
	      "seize",
	      "disintermediate",
	      "synergize",
	      "strategize",
	      "deploy",
	      "brand",
	      "grow",
	      "target",
	      "syndicate",
	      "synthesize",
	      "deliver",
	      "mesh",
	      "incubate",
	      "engage",
	      "maximize",
	      "benchmark",
	      "expedite",
	      "reintermediate",
	      "whiteboard",
	      "visualize",
	      "repurpose",
	      "innovate",
	      "scale",
	      "unleash",
	      "drive",
	      "extend",
	      "engineer",
	      "revolutionize",
	      "generate",
	      "exploit",
	      "transition",
	      "e-enable",
	      "iterate",
	      "cultivate",
	      "matrix",
	      "productize",
	      "redefine",
	      "recontextualize"
	    ],
	    "bs_adjective":
	    [
	      "clicks-and-mortar",
	      "value-added",
	      "vertical",
	      "proactive",
	      "robust",
	      "revolutionary",
	      "scalable",
	      "leading-edge",
	      "innovative",
	      "intuitive",
	      "strategic",
	      "e-business",
	      "mission-critical",
	      "sticky",
	      "one-to-one",
	      "24/7",
	      "end-to-end",
	      "global",
	      "B2B",
	      "B2C",
	      "granular",
	      "frictionless",
	      "virtual",
	      "viral",
	      "dynamic",
	      "24/365",
	      "best-of-breed",
	      "killer",
	      "magnetic",
	      "bleeding-edge",
	      "web-enabled",
	      "interactive",
	      "dot-com",
	      "sexy",
	      "back-end",
	      "real-time",
	      "efficient",
	      "front-end",
	      "distributed",
	      "seamless",
	      "extensible",
	      "turn-key",
	      "world-class",
	      "open-source",
	      "cross-platform",
	      "cross-media",
	      "synergistic",
	      "bricks-and-clicks",
	      "out-of-the-box",
	      "enterprise",
	      "integrated",
	      "impactful",
	      "wireless",
	      "transparent",
	      "next-generation",
	      "cutting-edge",
	      "user-centric",
	      "visionary",
	      "customized",
	      "ubiquitous",
	      "plug-and-play",
	      "collaborative",
	      "compelling",
	      "holistic",
	      "rich"
	    ],
	    "bs_noun": [
	      "synergies",
	      "web-readiness",
	      "paradigms",
	      "markets",
	      "partnerships",
	      "infrastructures",
	      "platforms",
	      "initiatives",
	      "channels",
	      "eyeballs",
	      "communities",
	      "ROI",
	      "solutions",
	      "e-tailers",
	      "e-services",
	      "action-items",
	      "portals",
	      "niches",
	      "technologies",
	      "content",
	      "vortals",
	      "supply-chains",
	      "convergence",
	      "relationships",
	      "architectures",
	      "interfaces",
	      "e-markets",
	      "e-commerce",
	      "systems",
	      "bandwidth",
	      "infomediaries",
	      "models",
	      "mindshare",
	      "deliverables",
	      "users",
	      "schemas",
	      "networks",
	      "applications",
	      "metrics",
	      "e-business",
	      "functionalities",
	      "experiences",
	      "web services",
	      "methodologies"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name} et #{Name.last_name}"
	  ]
	};
	fr.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.fr",
	    "hotmail.fr"
	  ],
	  "domain_suffix": [
	    "com",
	    "fr",
	    "eu",
	    "info",
	    "name",
	    "net",
	    "org"
	  ]
	};
	fr.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ],
	  "supplemental": [
	    "abbas",
	    "abduco",
	    "abeo",
	    "abscido",
	    "absconditus",
	    "absens",
	    "absorbeo",
	    "absque",
	    "abstergo",
	    "absum",
	    "abundans",
	    "abutor",
	    "accedo",
	    "accendo",
	    "acceptus",
	    "accipio",
	    "accommodo",
	    "accusator",
	    "acer",
	    "acerbitas",
	    "acervus",
	    "acidus",
	    "acies",
	    "acquiro",
	    "acsi",
	    "adamo",
	    "adaugeo",
	    "addo",
	    "adduco",
	    "ademptio",
	    "adeo",
	    "adeptio",
	    "adfectus",
	    "adfero",
	    "adficio",
	    "adflicto",
	    "adhaero",
	    "adhuc",
	    "adicio",
	    "adimpleo",
	    "adinventitias",
	    "adipiscor",
	    "adiuvo",
	    "administratio",
	    "admiratio",
	    "admitto",
	    "admoneo",
	    "admoveo",
	    "adnuo",
	    "adopto",
	    "adsidue",
	    "adstringo",
	    "adsuesco",
	    "adsum",
	    "adulatio",
	    "adulescens",
	    "adultus",
	    "aduro",
	    "advenio",
	    "adversus",
	    "advoco",
	    "aedificium",
	    "aeger",
	    "aegre",
	    "aegrotatio",
	    "aegrus",
	    "aeneus",
	    "aequitas",
	    "aequus",
	    "aer",
	    "aestas",
	    "aestivus",
	    "aestus",
	    "aetas",
	    "aeternus",
	    "ager",
	    "aggero",
	    "aggredior",
	    "agnitio",
	    "agnosco",
	    "ago",
	    "ait",
	    "aiunt",
	    "alienus",
	    "alii",
	    "alioqui",
	    "aliqua",
	    "alius",
	    "allatus",
	    "alo",
	    "alter",
	    "altus",
	    "alveus",
	    "amaritudo",
	    "ambitus",
	    "ambulo",
	    "amicitia",
	    "amiculum",
	    "amissio",
	    "amita",
	    "amitto",
	    "amo",
	    "amor",
	    "amoveo",
	    "amplexus",
	    "amplitudo",
	    "amplus",
	    "ancilla",
	    "angelus",
	    "angulus",
	    "angustus",
	    "animadverto",
	    "animi",
	    "animus",
	    "annus",
	    "anser",
	    "ante",
	    "antea",
	    "antepono",
	    "antiquus",
	    "aperio",
	    "aperte",
	    "apostolus",
	    "apparatus",
	    "appello",
	    "appono",
	    "appositus",
	    "approbo",
	    "apto",
	    "aptus",
	    "apud",
	    "aqua",
	    "ara",
	    "aranea",
	    "arbitro",
	    "arbor",
	    "arbustum",
	    "arca",
	    "arceo",
	    "arcesso",
	    "arcus",
	    "argentum",
	    "argumentum",
	    "arguo",
	    "arma",
	    "armarium",
	    "armo",
	    "aro",
	    "ars",
	    "articulus",
	    "artificiose",
	    "arto",
	    "arx",
	    "ascisco",
	    "ascit",
	    "asper",
	    "aspicio",
	    "asporto",
	    "assentator",
	    "astrum",
	    "atavus",
	    "ater",
	    "atqui",
	    "atrocitas",
	    "atrox",
	    "attero",
	    "attollo",
	    "attonbitus",
	    "auctor",
	    "auctus",
	    "audacia",
	    "audax",
	    "audentia",
	    "audeo",
	    "audio",
	    "auditor",
	    "aufero",
	    "aureus",
	    "auris",
	    "aurum",
	    "aut",
	    "autem",
	    "autus",
	    "auxilium",
	    "avaritia",
	    "avarus",
	    "aveho",
	    "averto",
	    "avoco",
	    "baiulus",
	    "balbus",
	    "barba",
	    "bardus",
	    "basium",
	    "beatus",
	    "bellicus",
	    "bellum",
	    "bene",
	    "beneficium",
	    "benevolentia",
	    "benigne",
	    "bestia",
	    "bibo",
	    "bis",
	    "blandior",
	    "bonus",
	    "bos",
	    "brevis",
	    "cado",
	    "caecus",
	    "caelestis",
	    "caelum",
	    "calamitas",
	    "calcar",
	    "calco",
	    "calculus",
	    "callide",
	    "campana",
	    "candidus",
	    "canis",
	    "canonicus",
	    "canto",
	    "capillus",
	    "capio",
	    "capitulus",
	    "capto",
	    "caput",
	    "carbo",
	    "carcer",
	    "careo",
	    "caries",
	    "cariosus",
	    "caritas",
	    "carmen",
	    "carpo",
	    "carus",
	    "casso",
	    "caste",
	    "casus",
	    "catena",
	    "caterva",
	    "cattus",
	    "cauda",
	    "causa",
	    "caute",
	    "caveo",
	    "cavus",
	    "cedo",
	    "celebrer",
	    "celer",
	    "celo",
	    "cena",
	    "cenaculum",
	    "ceno",
	    "censura",
	    "centum",
	    "cerno",
	    "cernuus",
	    "certe",
	    "certo",
	    "certus",
	    "cervus",
	    "cetera",
	    "charisma",
	    "chirographum",
	    "cibo",
	    "cibus",
	    "cicuta",
	    "cilicium",
	    "cimentarius",
	    "ciminatio",
	    "cinis",
	    "circumvenio",
	    "cito",
	    "civis",
	    "civitas",
	    "clam",
	    "clamo",
	    "claro",
	    "clarus",
	    "claudeo",
	    "claustrum",
	    "clementia",
	    "clibanus",
	    "coadunatio",
	    "coaegresco",
	    "coepi",
	    "coerceo",
	    "cogito",
	    "cognatus",
	    "cognomen",
	    "cogo",
	    "cohaero",
	    "cohibeo",
	    "cohors",
	    "colligo",
	    "colloco",
	    "collum",
	    "colo",
	    "color",
	    "coma",
	    "combibo",
	    "comburo",
	    "comedo",
	    "comes",
	    "cometes",
	    "comis",
	    "comitatus",
	    "commemoro",
	    "comminor",
	    "commodo",
	    "communis",
	    "comparo",
	    "compello",
	    "complectus",
	    "compono",
	    "comprehendo",
	    "comptus",
	    "conatus",
	    "concedo",
	    "concido",
	    "conculco",
	    "condico",
	    "conduco",
	    "confero",
	    "confido",
	    "conforto",
	    "confugo",
	    "congregatio",
	    "conicio",
	    "coniecto",
	    "conitor",
	    "coniuratio",
	    "conor",
	    "conqueror",
	    "conscendo",
	    "conservo",
	    "considero",
	    "conspergo",
	    "constans",
	    "consuasor",
	    "contabesco",
	    "contego",
	    "contigo",
	    "contra",
	    "conturbo",
	    "conventus",
	    "convoco",
	    "copia",
	    "copiose",
	    "cornu",
	    "corona",
	    "corpus",
	    "correptius",
	    "corrigo",
	    "corroboro",
	    "corrumpo",
	    "coruscus",
	    "cotidie",
	    "crapula",
	    "cras",
	    "crastinus",
	    "creator",
	    "creber",
	    "crebro",
	    "credo",
	    "creo",
	    "creptio",
	    "crepusculum",
	    "cresco",
	    "creta",
	    "cribro",
	    "crinis",
	    "cruciamentum",
	    "crudelis",
	    "cruentus",
	    "crur",
	    "crustulum",
	    "crux",
	    "cubicularis",
	    "cubitum",
	    "cubo",
	    "cui",
	    "cuius",
	    "culpa",
	    "culpo",
	    "cultellus",
	    "cultura",
	    "cum",
	    "cunabula",
	    "cunae",
	    "cunctatio",
	    "cupiditas",
	    "cupio",
	    "cuppedia",
	    "cupressus",
	    "cur",
	    "cura",
	    "curatio",
	    "curia",
	    "curiositas",
	    "curis",
	    "curo",
	    "curriculum",
	    "currus",
	    "cursim",
	    "curso",
	    "cursus",
	    "curto",
	    "curtus",
	    "curvo",
	    "curvus",
	    "custodia",
	    "damnatio",
	    "damno",
	    "dapifer",
	    "debeo",
	    "debilito",
	    "decens",
	    "decerno",
	    "decet",
	    "decimus",
	    "decipio",
	    "decor",
	    "decretum",
	    "decumbo",
	    "dedecor",
	    "dedico",
	    "deduco",
	    "defaeco",
	    "defendo",
	    "defero",
	    "defessus",
	    "defetiscor",
	    "deficio",
	    "defigo",
	    "defleo",
	    "defluo",
	    "defungo",
	    "degenero",
	    "degero",
	    "degusto",
	    "deinde",
	    "delectatio",
	    "delego",
	    "deleo",
	    "delibero",
	    "delicate",
	    "delinquo",
	    "deludo",
	    "demens",
	    "demergo",
	    "demitto",
	    "demo",
	    "demonstro",
	    "demoror",
	    "demulceo",
	    "demum",
	    "denego",
	    "denique",
	    "dens",
	    "denuncio",
	    "denuo",
	    "deorsum",
	    "depereo",
	    "depono",
	    "depopulo",
	    "deporto",
	    "depraedor",
	    "deprecator",
	    "deprimo",
	    "depromo",
	    "depulso",
	    "deputo",
	    "derelinquo",
	    "derideo",
	    "deripio",
	    "desidero",
	    "desino",
	    "desipio",
	    "desolo",
	    "desparatus",
	    "despecto",
	    "despirmatio",
	    "infit",
	    "inflammatio",
	    "paens",
	    "patior",
	    "patria",
	    "patrocinor",
	    "patruus",
	    "pauci",
	    "paulatim",
	    "pauper",
	    "pax",
	    "peccatus",
	    "pecco",
	    "pecto",
	    "pectus",
	    "pecunia",
	    "pecus",
	    "peior",
	    "pel",
	    "ocer",
	    "socius",
	    "sodalitas",
	    "sol",
	    "soleo",
	    "solio",
	    "solitudo",
	    "solium",
	    "sollers",
	    "sollicito",
	    "solum",
	    "solus",
	    "solutio",
	    "solvo",
	    "somniculosus",
	    "somnus",
	    "sonitus",
	    "sono",
	    "sophismata",
	    "sopor",
	    "sordeo",
	    "sortitus",
	    "spargo",
	    "speciosus",
	    "spectaculum",
	    "speculum",
	    "sperno",
	    "spero",
	    "spes",
	    "spiculum",
	    "spiritus",
	    "spoliatio",
	    "sponte",
	    "stabilis",
	    "statim",
	    "statua",
	    "stella",
	    "stillicidium",
	    "stipes",
	    "stips",
	    "sto",
	    "strenuus",
	    "strues",
	    "studio",
	    "stultus",
	    "suadeo",
	    "suasoria",
	    "sub",
	    "subito",
	    "subiungo",
	    "sublime",
	    "subnecto",
	    "subseco",
	    "substantia",
	    "subvenio",
	    "succedo",
	    "succurro",
	    "sufficio",
	    "suffoco",
	    "suffragium",
	    "suggero",
	    "sui",
	    "sulum",
	    "sum",
	    "summa",
	    "summisse",
	    "summopere",
	    "sumo",
	    "sumptus",
	    "supellex",
	    "super",
	    "suppellex",
	    "supplanto",
	    "suppono",
	    "supra",
	    "surculus",
	    "surgo",
	    "sursum",
	    "suscipio",
	    "suspendo",
	    "sustineo",
	    "suus",
	    "synagoga",
	    "tabella",
	    "tabernus",
	    "tabesco",
	    "tabgo",
	    "tabula",
	    "taceo",
	    "tactus",
	    "taedium",
	    "talio",
	    "talis",
	    "talus",
	    "tam",
	    "tamdiu",
	    "tamen",
	    "tametsi",
	    "tamisium",
	    "tamquam",
	    "tandem",
	    "tantillus",
	    "tantum",
	    "tardus",
	    "tego",
	    "temeritas",
	    "temperantia",
	    "templum",
	    "temptatio",
	    "tempus",
	    "tenax",
	    "tendo",
	    "teneo",
	    "tener",
	    "tenuis",
	    "tenus",
	    "tepesco",
	    "tepidus",
	    "ter",
	    "terebro",
	    "teres",
	    "terga",
	    "tergeo",
	    "tergiversatio",
	    "tergo",
	    "tergum",
	    "termes",
	    "terminatio",
	    "tero",
	    "terra",
	    "terreo",
	    "territo",
	    "terror",
	    "tersus",
	    "tertius",
	    "testimonium",
	    "texo",
	    "textilis",
	    "textor",
	    "textus",
	    "thalassinus",
	    "theatrum",
	    "theca",
	    "thema",
	    "theologus",
	    "thermae",
	    "thesaurus",
	    "thesis",
	    "thorax",
	    "thymbra",
	    "thymum",
	    "tibi",
	    "timidus",
	    "timor",
	    "titulus",
	    "tolero",
	    "tollo",
	    "tondeo",
	    "tonsor",
	    "torqueo",
	    "torrens",
	    "tot",
	    "totidem",
	    "toties",
	    "totus",
	    "tracto",
	    "trado",
	    "traho",
	    "trans",
	    "tredecim",
	    "tremo",
	    "trepide",
	    "tres",
	    "tribuo",
	    "tricesimus",
	    "triduana",
	    "triginta",
	    "tripudio",
	    "tristis",
	    "triumphus",
	    "trucido",
	    "truculenter",
	    "tubineus",
	    "tui",
	    "tum",
	    "tumultus",
	    "tunc",
	    "turba",
	    "turbo",
	    "turpe",
	    "turpis",
	    "tutamen",
	    "tutis",
	    "tyrannus",
	    "uberrime",
	    "ubi",
	    "ulciscor",
	    "ullus",
	    "ulterius",
	    "ultio",
	    "ultra",
	    "umbra",
	    "umerus",
	    "umquam",
	    "una",
	    "unde",
	    "undique",
	    "universe",
	    "unus",
	    "urbanus",
	    "urbs",
	    "uredo",
	    "usitas",
	    "usque",
	    "ustilo",
	    "ustulo",
	    "usus",
	    "uter",
	    "uterque",
	    "utilis",
	    "utique",
	    "utor",
	    "utpote",
	    "utrimque",
	    "utroque",
	    "utrum",
	    "uxor",
	    "vaco",
	    "vacuus",
	    "vado",
	    "vae",
	    "valde",
	    "valens",
	    "valeo",
	    "valetudo",
	    "validus",
	    "vallum",
	    "vapulus",
	    "varietas",
	    "varius",
	    "vehemens",
	    "vel",
	    "velociter",
	    "velum",
	    "velut",
	    "venia",
	    "venio",
	    "ventito",
	    "ventosus",
	    "ventus",
	    "venustas",
	    "ver",
	    "verbera",
	    "verbum",
	    "vere",
	    "verecundia",
	    "vereor",
	    "vergo",
	    "veritas",
	    "vero",
	    "versus",
	    "verto",
	    "verumtamen",
	    "verus",
	    "vesco",
	    "vesica",
	    "vesper",
	    "vespillo",
	    "vester",
	    "vestigium",
	    "vestrum",
	    "vetus",
	    "via",
	    "vicinus",
	    "vicissitudo",
	    "victoria",
	    "victus",
	    "videlicet",
	    "video",
	    "viduata",
	    "viduo",
	    "vigilo",
	    "vigor",
	    "vilicus",
	    "vilis",
	    "vilitas",
	    "villa",
	    "vinco",
	    "vinculum",
	    "vindico",
	    "vinitor",
	    "vinum",
	    "vir",
	    "virga",
	    "virgo",
	    "viridis",
	    "viriliter",
	    "virtus",
	    "vis",
	    "viscus",
	    "vita",
	    "vitiosus",
	    "vitium",
	    "vito",
	    "vivo",
	    "vix",
	    "vobis",
	    "vociferor",
	    "voco",
	    "volaticus",
	    "volo",
	    "volubilis",
	    "voluntarius",
	    "volup",
	    "volutabrum",
	    "volva",
	    "vomer",
	    "vomica",
	    "vomito",
	    "vorago",
	    "vorax",
	    "voro",
	    "vos",
	    "votum",
	    "voveo",
	    "vox",
	    "vulariter",
	    "vulgaris",
	    "vulgivagus",
	    "vulgo",
	    "vulgus",
	    "vulnero",
	    "vulnus",
	    "vulpes",
	    "vulticulus",
	    "vultuosus",
	    "xiphias"
	  ]
	};
	fr.name = {
	  "first_name": [
	    "Enzo",
	    "Lucas",
	    "Mathis",
	    "Nathan",
	    "Thomas",
	    "Hugo",
	    "Théo",
	    "Tom",
	    "Louis",
	    "Raphaël",
	    "Clément",
	    "Léo",
	    "Mathéo",
	    "Maxime",
	    "Alexandre",
	    "Antoine",
	    "Yanis",
	    "Paul",
	    "Baptiste",
	    "Alexis",
	    "Gabriel",
	    "Arthur",
	    "Jules",
	    "Ethan",
	    "Noah",
	    "Quentin",
	    "Axel",
	    "Evan",
	    "Mattéo",
	    "Romain",
	    "Valentin",
	    "Maxence",
	    "Noa",
	    "Adam",
	    "Nicolas",
	    "Julien",
	    "Mael",
	    "Pierre",
	    "Rayan",
	    "Victor",
	    "Mohamed",
	    "Adrien",
	    "Kylian",
	    "Sacha",
	    "Benjamin",
	    "Léa",
	    "Clara",
	    "Manon",
	    "Chloé",
	    "Camille",
	    "Ines",
	    "Sarah",
	    "Jade",
	    "Lola",
	    "Anaïs",
	    "Lucie",
	    "Océane",
	    "Lilou",
	    "Marie",
	    "Eva",
	    "Romane",
	    "Lisa",
	    "Zoe",
	    "Julie",
	    "Mathilde",
	    "Louise",
	    "Juliette",
	    "Clémence",
	    "Célia",
	    "Laura",
	    "Lena",
	    "Maëlys",
	    "Charlotte",
	    "Ambre",
	    "Maeva",
	    "Pauline",
	    "Lina",
	    "Jeanne",
	    "Lou",
	    "Noémie",
	    "Justine",
	    "Louna",
	    "Elisa",
	    "Alice",
	    "Emilie",
	    "Carla",
	    "Maëlle",
	    "Alicia",
	    "Mélissa"
	  ],
	  "last_name": [
	    "Martin",
	    "Bernard",
	    "Dubois",
	    "Thomas",
	    "Robert",
	    "Richard",
	    "Petit",
	    "Durand",
	    "Leroy",
	    "Moreau",
	    "Simon",
	    "Laurent",
	    "Lefebvre",
	    "Michel",
	    "Garcia",
	    "David",
	    "Bertrand",
	    "Roux",
	    "Vincent",
	    "Fournier",
	    "Morel",
	    "Girard",
	    "Andre",
	    "Lefevre",
	    "Mercier",
	    "Dupont",
	    "Lambert",
	    "Bonnet",
	    "Francois",
	    "Martinez",
	    "Legrand",
	    "Garnier",
	    "Faure",
	    "Rousseau",
	    "Blanc",
	    "Guerin",
	    "Muller",
	    "Henry",
	    "Roussel",
	    "Nicolas",
	    "Perrin",
	    "Morin",
	    "Mathieu",
	    "Clement",
	    "Gauthier",
	    "Dumont",
	    "Lopez",
	    "Fontaine",
	    "Chevalier",
	    "Robin",
	    "Masson",
	    "Sanchez",
	    "Gerard",
	    "Nguyen",
	    "Boyer",
	    "Denis",
	    "Lemaire",
	    "Duval",
	    "Joly",
	    "Gautier",
	    "Roger",
	    "Roche",
	    "Roy",
	    "Noel",
	    "Meyer",
	    "Lucas",
	    "Meunier",
	    "Jean",
	    "Perez",
	    "Marchand",
	    "Dufour",
	    "Blanchard",
	    "Marie",
	    "Barbier",
	    "Brun",
	    "Dumas",
	    "Brunet",
	    "Schmitt",
	    "Leroux",
	    "Colin",
	    "Fernandez",
	    "Pierre",
	    "Renard",
	    "Arnaud",
	    "Rolland",
	    "Caron",
	    "Aubert",
	    "Giraud",
	    "Leclerc",
	    "Vidal",
	    "Bourgeois",
	    "Renaud",
	    "Lemoine",
	    "Picard",
	    "Gaillard",
	    "Philippe",
	    "Leclercq",
	    "Lacroix",
	    "Fabre",
	    "Dupuis",
	    "Olivier",
	    "Rodriguez",
	    "Da silva",
	    "Hubert",
	    "Louis",
	    "Charles",
	    "Guillot",
	    "Riviere",
	    "Le gall",
	    "Guillaume",
	    "Adam",
	    "Rey",
	    "Moulin",
	    "Gonzalez",
	    "Berger",
	    "Lecomte",
	    "Menard",
	    "Fleury",
	    "Deschamps",
	    "Carpentier",
	    "Julien",
	    "Benoit",
	    "Paris",
	    "Maillard",
	    "Marchal",
	    "Aubry",
	    "Vasseur",
	    "Le roux",
	    "Renault",
	    "Jacquet",
	    "Collet",
	    "Prevost",
	    "Poirier",
	    "Charpentier",
	    "Royer",
	    "Huet",
	    "Baron",
	    "Dupuy",
	    "Pons",
	    "Paul",
	    "Laine",
	    "Carre",
	    "Breton",
	    "Remy",
	    "Schneider",
	    "Perrot",
	    "Guyot",
	    "Barre",
	    "Marty",
	    "Cousin"
	  ],
	  "prefix": [
	    "M",
	    "Mme",
	    "Mlle",
	    "Dr",
	    "Prof"
	  ],
	  "title": {
	    "job": [
	      "Superviseur",
	      "Executif",
	      "Manager",
	      "Ingenieur",
	      "Specialiste",
	      "Directeur",
	      "Coordinateur",
	      "Administrateur",
	      "Architecte",
	      "Analyste",
	      "Designer",
	      "Technicien",
	      "Developpeur",
	      "Producteur",
	      "Consultant",
	      "Assistant",
	      "Agent",
	      "Stagiaire"
	    ]
	  },
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{last_name} #{first_name}"
	  ]
	};
	fr.phone_number = {
	  "formats": [
	    "01########",
	    "02########",
	    "03########",
	    "04########",
	    "05########",
	    "06########",
	    "07########",
	    "+33 1########",
	    "+33 2########",
	    "+33 3########",
	    "+33 4########",
	    "+33 5########",
	    "+33 6########",
	    "+33 7########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var it = {};
	module["exports"] = it;
	it.title = "Italian";
	it.address = {
	  "city_prefix": [
	    "San",
	    "Borgo",
	    "Sesto",
	    "Quarto",
	    "Settimo"
	  ],
	  "city_suffix": [
	    "a mare",
	    "lido",
	    "ligure",
	    "del friuli",
	    "salentino",
	    "calabro",
	    "veneto",
	    "nell'emilia",
	    "umbro",
	    "laziale",
	    "terme",
	    "sardo"
	  ],
	  "country": [
	    "Afghanistan",
	    "Albania",
	    "Algeria",
	    "American Samoa",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antartide (territori a sud del 60° parallelo)",
	    "Antigua e Barbuda",
	    "Argentina",
	    "Armenia",
	    "Aruba",
	    "Australia",
	    "Austria",
	    "Azerbaijan",
	    "Bahamas",
	    "Bahrain",
	    "Bangladesh",
	    "Barbados",
	    "Bielorussia",
	    "Belgio",
	    "Belize",
	    "Benin",
	    "Bermuda",
	    "Bhutan",
	    "Bolivia",
	    "Bosnia e Herzegovina",
	    "Botswana",
	    "Bouvet Island (Bouvetoya)",
	    "Brasile",
	    "Territorio dell'arcipelago indiano",
	    "Isole Vergini Britanniche",
	    "Brunei Darussalam",
	    "Bulgaria",
	    "Burkina Faso",
	    "Burundi",
	    "Cambogia",
	    "Cameroon",
	    "Canada",
	    "Capo Verde",
	    "Isole Cayman",
	    "Repubblica Centrale Africana",
	    "Chad",
	    "Cile",
	    "Cina",
	    "Isola di Pasqua",
	    "Isola di Cocos (Keeling)",
	    "Colombia",
	    "Comoros",
	    "Congo",
	    "Isole Cook",
	    "Costa Rica",
	    "Costa d'Avorio",
	    "Croazia",
	    "Cuba",
	    "Cipro",
	    "Repubblica Ceca",
	    "Danimarca",
	    "Gibuti",
	    "Repubblica Dominicana",
	    "Equador",
	    "Egitto",
	    "El Salvador",
	    "Guinea Equatoriale",
	    "Eritrea",
	    "Estonia",
	    "Etiopia",
	    "Isole Faroe",
	    "Isole Falkland (Malvinas)",
	    "Fiji",
	    "Finlandia",
	    "Francia",
	    "Guyana Francese",
	    "Polinesia Francese",
	    "Territori Francesi del sud",
	    "Gabon",
	    "Gambia",
	    "Georgia",
	    "Germania",
	    "Ghana",
	    "Gibilterra",
	    "Grecia",
	    "Groenlandia",
	    "Grenada",
	    "Guadalupa",
	    "Guam",
	    "Guatemala",
	    "Guernsey",
	    "Guinea",
	    "Guinea-Bissau",
	    "Guyana",
	    "Haiti",
	    "Heard Island and McDonald Islands",
	    "Città del Vaticano",
	    "Honduras",
	    "Hong Kong",
	    "Ungheria",
	    "Islanda",
	    "India",
	    "Indonesia",
	    "Iran",
	    "Iraq",
	    "Irlanda",
	    "Isola di Man",
	    "Israele",
	    "Italia",
	    "Giamaica",
	    "Giappone",
	    "Jersey",
	    "Giordania",
	    "Kazakhstan",
	    "Kenya",
	    "Kiribati",
	    "Korea",
	    "Kuwait",
	    "Republicca Kirgiza",
	    "Repubblica del Laos",
	    "Latvia",
	    "Libano",
	    "Lesotho",
	    "Liberia",
	    "Libyan Arab Jamahiriya",
	    "Liechtenstein",
	    "Lituania",
	    "Lussemburgo",
	    "Macao",
	    "Macedonia",
	    "Madagascar",
	    "Malawi",
	    "Malesia",
	    "Maldive",
	    "Mali",
	    "Malta",
	    "Isole Marshall",
	    "Martinica",
	    "Mauritania",
	    "Mauritius",
	    "Mayotte",
	    "Messico",
	    "Micronesia",
	    "Moldova",
	    "Principato di Monaco",
	    "Mongolia",
	    "Montenegro",
	    "Montserrat",
	    "Marocco",
	    "Mozambico",
	    "Myanmar",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Antille Olandesi",
	    "Olanda",
	    "Nuova Caledonia",
	    "Nuova Zelanda",
	    "Nicaragua",
	    "Niger",
	    "Nigeria",
	    "Niue",
	    "Isole Norfolk",
	    "Northern Mariana Islands",
	    "Norvegia",
	    "Oman",
	    "Pakistan",
	    "Palau",
	    "Palestina",
	    "Panama",
	    "Papua Nuova Guinea",
	    "Paraguay",
	    "Peru",
	    "Filippine",
	    "Pitcairn Islands",
	    "Polonia",
	    "Portogallo",
	    "Porto Rico",
	    "Qatar",
	    "Reunion",
	    "Romania",
	    "Russia",
	    "Rwanda",
	    "San Bartolomeo",
	    "Sant'Elena",
	    "Saint Kitts and Nevis",
	    "Saint Lucia",
	    "Saint Martin",
	    "Saint Pierre and Miquelon",
	    "Saint Vincent and the Grenadines",
	    "Samoa",
	    "San Marino",
	    "Sao Tome and Principe",
	    "Arabia Saudita",
	    "Senegal",
	    "Serbia",
	    "Seychelles",
	    "Sierra Leone",
	    "Singapore",
	    "Slovenia",
	    "Isole Solomon",
	    "Somalia",
	    "Sud Africa",
	    "Georgia del sud e South Sandwich Islands",
	    "Spagna",
	    "Sri Lanka",
	    "Sudan",
	    "Suriname",
	    "Svalbard & Jan Mayen Islands",
	    "Swaziland",
	    "Svezia",
	    "Svizzera",
	    "Siria",
	    "Taiwan",
	    "Tajikistan",
	    "Tanzania",
	    "Tailandia",
	    "Timor-Leste",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidad e Tobago",
	    "Tunisia",
	    "Turchia",
	    "Turkmenistan",
	    "Isole di Turks and Caicos",
	    "Tuvalu",
	    "Uganda",
	    "Ucraina",
	    "Emirati Arabi Uniti",
	    "Regno Unito",
	    "Stati Uniti d'America",
	    "United States Minor Outlying Islands",
	    "Isole Vergini Statunitensi",
	    "Uruguay",
	    "Uzbekistan",
	    "Vanuatu",
	    "Venezuela",
	    "Vietnam",
	    "Wallis and Futuna",
	    "Western Sahara",
	    "Yemen",
	    "Zambia",
	    "Zimbabwe"
	  ],
	  "building_number": [
	    "###",
	    "##",
	    "#"
	  ],
	  "street_suffix": [
	    "Piazza",
	    "Strada",
	    "Via",
	    "Borgo",
	    "Contrada",
	    "Rotonda",
	    "Incrocio"
	  ],
	  "secondary_address": [
	    "Appartamento ##",
	    "Piano #"
	  ],
	  "postcode": [
	    "#####"
	  ],
	  "state": [
	    "Agrigento",
	    "Alessandria",
	    "Ancona",
	    "Aosta",
	    "Arezzo",
	    "Ascoli Piceno",
	    "Asti",
	    "Avellino",
	    "Bari",
	    "Barletta-Andria-Trani",
	    "Belluno",
	    "Benevento",
	    "Bergamo",
	    "Biella",
	    "Bologna",
	    "Bolzano",
	    "Brescia",
	    "Brindisi",
	    "Cagliari",
	    "Caltanissetta",
	    "Campobasso",
	    "Carbonia-Iglesias",
	    "Caserta",
	    "Catania",
	    "Catanzaro",
	    "Chieti",
	    "Como",
	    "Cosenza",
	    "Cremona",
	    "Crotone",
	    "Cuneo",
	    "Enna",
	    "Fermo",
	    "Ferrara",
	    "Firenze",
	    "Foggia",
	    "Forlì-Cesena",
	    "Frosinone",
	    "Genova",
	    "Gorizia",
	    "Grosseto",
	    "Imperia",
	    "Isernia",
	    "La Spezia",
	    "L'Aquila",
	    "Latina",
	    "Lecce",
	    "Lecco",
	    "Livorno",
	    "Lodi",
	    "Lucca",
	    "Macerata",
	    "Mantova",
	    "Massa-Carrara",
	    "Matera",
	    "Messina",
	    "Milano",
	    "Modena",
	    "Monza e della Brianza",
	    "Napoli",
	    "Novara",
	    "Nuoro",
	    "Olbia-Tempio",
	    "Oristano",
	    "Padova",
	    "Palermo",
	    "Parma",
	    "Pavia",
	    "Perugia",
	    "Pesaro e Urbino",
	    "Pescara",
	    "Piacenza",
	    "Pisa",
	    "Pistoia",
	    "Pordenone",
	    "Potenza",
	    "Prato",
	    "Ragusa",
	    "Ravenna",
	    "Reggio Calabria",
	    "Reggio Emilia",
	    "Rieti",
	    "Rimini",
	    "Roma",
	    "Rovigo",
	    "Salerno",
	    "Medio Campidano",
	    "Sassari",
	    "Savona",
	    "Siena",
	    "Siracusa",
	    "Sondrio",
	    "Taranto",
	    "Teramo",
	    "Terni",
	    "Torino",
	    "Ogliastra",
	    "Trapani",
	    "Trento",
	    "Treviso",
	    "Trieste",
	    "Udine",
	    "Varese",
	    "Venezia",
	    "Verbano-Cusio-Ossola",
	    "Vercelli",
	    "Verona",
	    "Vibo Valentia",
	    "Vicenza",
	    "Viterbo"
	  ],
	  "state_abbr": [
	    "AG",
	    "AL",
	    "AN",
	    "AO",
	    "AR",
	    "AP",
	    "AT",
	    "AV",
	    "BA",
	    "BT",
	    "BL",
	    "BN",
	    "BG",
	    "BI",
	    "BO",
	    "BZ",
	    "BS",
	    "BR",
	    "CA",
	    "CL",
	    "CB",
	    "CI",
	    "CE",
	    "CT",
	    "CZ",
	    "CH",
	    "CO",
	    "CS",
	    "CR",
	    "KR",
	    "CN",
	    "EN",
	    "FM",
	    "FE",
	    "FI",
	    "FG",
	    "FC",
	    "FR",
	    "GE",
	    "GO",
	    "GR",
	    "IM",
	    "IS",
	    "SP",
	    "AQ",
	    "LT",
	    "LE",
	    "LC",
	    "LI",
	    "LO",
	    "LU",
	    "MC",
	    "MN",
	    "MS",
	    "MT",
	    "ME",
	    "MI",
	    "MO",
	    "MB",
	    "NA",
	    "NO",
	    "NU",
	    "OT",
	    "OR",
	    "PD",
	    "PA",
	    "PR",
	    "PV",
	    "PG",
	    "PU",
	    "PE",
	    "PC",
	    "PI",
	    "PT",
	    "PN",
	    "PZ",
	    "PO",
	    "RG",
	    "RA",
	    "RC",
	    "RE",
	    "RI",
	    "RN",
	    "RM",
	    "RO",
	    "SA",
	    "VS",
	    "SS",
	    "SV",
	    "SI",
	    "SR",
	    "SO",
	    "TA",
	    "TE",
	    "TR",
	    "TO",
	    "OG",
	    "TP",
	    "TN",
	    "TV",
	    "TS",
	    "UD",
	    "VA",
	    "VE",
	    "VB",
	    "VC",
	    "VR",
	    "VV",
	    "VI",
	    "VT"
	  ],
	  "city": [
	    "#{city_prefix} #{Name.first_name} #{city_suffix}",
	    "#{city_prefix} #{Name.first_name}",
	    "#{Name.first_name} #{city_suffix}",
	    "#{Name.last_name} #{city_suffix}"
	  ],
	  "street_name": [
	    "#{street_suffix} #{Name.first_name}",
	    "#{street_suffix} #{Name.last_name}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}",
	    "#{street_name} #{building_number}, #{secondary_address}"
	  ],
	  "default_country": [
	    "Italia"
	  ]
	};
	it.company = {
	  "suffix": [
	    "SPA",
	    "e figli",
	    "Group",
	    "s.r.l."
	  ],
	  "noun": [
	      "Abilità",
	      "Access",
	      "Adattatore",
	      "Algoritmo",
	      "Alleanza",
	      "Analizzatore",
	      "Applicazione",
	      "Approccio",
	      "Architettura",
	      "Archivio",
	      "Intelligenza artificiale",
	      "Array",
	      "Attitudine",
	      "Benchmark",
	      "Capacità",
	      "Sfida",
	      "Circuito",
	      "Collaborazione",
	      "Complessità",
	      "Concetto",
	      "Conglomerato",
	      "Contingenza",
	      "Core",
	      "Database",
	      "Data-warehouse",
	      "Definizione",
	      "Emulazione",
	      "Codifica",
	      "Criptazione",
	      "Firmware",
	      "Flessibilità",
	      "Previsione",
	      "Frame",
	      "framework",
	      "Funzione",
	      "Funzionalità",
	      "Interfaccia grafica",
	      "Hardware",
	      "Help-desk",
	      "Gerarchia",
	      "Hub",
	      "Implementazione",
	      "Infrastruttura",
	      "Iniziativa",
	      "Installazione",
	      "Set di istruzioni",
	      "Interfaccia",
	      "Soluzione internet",
	      "Intranet",
	      "Conoscenza base",
	      "Matrici",
	      "Matrice",
	      "Metodologia",
	      "Middleware",
	      "Migrazione",
	      "Modello",
	      "Moderazione",
	      "Monitoraggio",
	      "Moratoria",
	      "Rete",
	      "Architettura aperta",
	      "Sistema aperto",
	      "Orchestrazione",
	      "Paradigma",
	      "Parallelismo",
	      "Policy",
	      "Portale",
	      "Struttura di prezzo",
	      "Prodotto",
	      "Produttività",
	      "Progetto",
	      "Proiezione",
	      "Protocollo",
	      "Servizio clienti",
	      "Software",
	      "Soluzione",
	      "Standardizzazione",
	      "Strategia",
	      "Struttura",
	      "Successo",
	      "Sovrastruttura",
	      "Supporto",
	      "Sinergia",
	      "Task-force",
	      "Finestra temporale",
	      "Strumenti",
	      "Utilizzazione",
	      "Sito web",
	      "Forza lavoro"
	    ],
	    "descriptor":[
	      "adattiva",
	      "avanzata",
	      "migliorata",
	      "assimilata",
	      "automatizzata",
	      "bilanciata",
	      "centralizzata",
	      "compatibile",
	      "configurabile",
	      "cross-platform",
	      "decentralizzata",
	      "digitalizzata",
	      "distribuita",
	      "piccola",
	      "ergonomica",
	      "esclusiva",
	      "espansa",
	      "estesa",
	      "configurabile",
	      "fondamentale",
	      "orizzontale",
	      "implementata",
	      "innovativa",
	      "integrata",
	      "intuitiva",
	      "inversa",
	      "gestita",
	      "obbligatoria",
	      "monitorata",
	      "multi-canale",
	      "multi-laterale",
	      "open-source",
	      "operativa",
	      "ottimizzata",
	      "organica",
	      "persistente",
	      "polarizzata",
	      "proattiva",
	      "programmabile",
	      "progressiva",
	      "reattiva",
	      "riallineata",
	      "ricontestualizzata",
	      "ridotta",
	      "robusta",
	      "sicura",
	      "condivisibile",
	      "stand-alone",
	      "switchabile",
	      "sincronizzata",
	      "sinergica",
	      "totale",
	      "universale",
	      "user-friendly",
	      "versatile",
	      "virtuale",
	      "visionaria"
	    ],
	    "adjective":
	    [
	      "24 ore",
	      "24/7",
	      "terza generazione",
	      "quarta generazione",
	      "quinta generazione",
	      "sesta generazione",
	      "asimmetrica",
	      "asincrona",
	      "background",
	      "bi-direzionale",
	      "biforcata",
	      "bottom-line",
	      "coerente",
	      "coesiva",
	      "composita",
	      "sensibile al contesto",
	      "basta sul contesto",
	      "basata sul contenuto",
	      "dedicata",
	      "didattica",
	      "direzionale",
	      "discreta",
	      "dinamica",
	      "eco-centrica",
	      "esecutiva",
	      "esplicita",
	      "full-range",
	      "globale",
	      "euristica",
	      "alto livello",
	      "olistica",
	      "omogenea",
	      "ibrida",
	      "impattante",
	      "incrementale",
	      "intangibile",
	      "interattiva",
	      "intermediaria",
	      "locale",
	      "logistica",
	      "massimizzata",
	      "metodica",
	      "mission-critical",
	      "mobile",
	      "modulare",
	      "motivazionale",
	      "multimedia",
	      "multi-tasking",
	      "nazionale",
	      "neutrale",
	      "nextgeneration",
	      "non-volatile",
	      "object-oriented",
	      "ottima",
	      "ottimizzante",
	      "radicale",
	      "real-time",
	      "reciproca",
	      "regionale",
	      "responsiva",
	      "scalabile",
	      "secondaria",
	      "stabile",
	      "statica",
	      "sistematica",
	      "sistemica",
	      "tangibile",
	      "terziaria",
	      "uniforme",
	      "valore aggiunto"
	  ],
	  "bs_noun": [
	      "partnerships",
	      "comunità",
	      "ROI",
	      "soluzioni",
	      "e-services",
	      "nicchie",
	      "tecnologie",
	      "contenuti",
	      "supply-chains",
	      "convergenze",
	      "relazioni",
	      "architetture",
	      "interfacce",
	      "mercati",
	      "e-commerce",
	      "sistemi",
	      "modelli",
	      "schemi",
	      "reti",
	      "applicazioni",
	      "metriche",
	      "e-business",
	      "funzionalità",
	      "esperienze",
	      "webservices",
	      "metodologie"
	    ],
	    "bs_verb":
	    [
	      "implementate",
	      "utilizzo",
	      "integrate",
	      "ottimali",
	      "evolutive",
	      "abilitate",
	      "reinventate",
	      "aggregate",
	      "migliorate",
	      "incentivate",
	      "monetizzate",
	      "sinergizzate",
	      "strategiche",
	      "deploy",
	      "marchi",
	      "accrescitive",
	      "target",
	      "sintetizzate",
	      "spedizioni",
	      "massimizzate",
	      "innovazione",
	      "guida",
	      "estensioni",
	      "generate",
	      "exploit",
	      "transizionali",
	      "matrici",
	      "ricontestualizzate"
	    ],
	    "bs_adjective":
	    [
	      "valore aggiunto",
	      "verticalizzate",
	      "proattive",
	      "forti",
	      "rivoluzionari",
	      "scalabili",
	      "innovativi",
	      "intuitivi",
	      "strategici",
	      "e-business",
	      "mission-critical",
	      "24/7",
	      "globali",
	      "B2B",
	      "B2C",
	      "granulari",
	      "virtuali",
	      "virali",
	      "dinamiche",
	      "magnetiche",
	      "web",
	      "interattive",
	      "sexy",
	      "back-end",
	      "real-time",
	      "efficienti",
	      "front-end",
	      "distributivi",
	      "estensibili",
	      "mondiali",
	      "open-source",
	      "cross-platform",
	      "sinergiche",
	      "out-of-the-box",
	      "enterprise",
	      "integrate",
	      "di impatto",
	      "wireless",
	      "trasparenti",
	      "next-generation",
	      "cutting-edge",
	      "visionari",
	      "plug-and-play",
	      "collaborative",
	      "olistiche",
	      "ricche"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name} #{suffix}",
	    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
	  ]
	};
	it.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com",
	    "email.it",
	    "libero.it",
	    "yahoo.it"
	  ],
	  "domain_suffix": [
	    "com",
	    "com",
	    "com",
	    "net",
	    "org",
	    "it",
	    "it",
	    "it"
	  ]
	};
	it.name = {
	  "first_name": [
	    "Aaron",
	    "Akira",
	    "Alberto",
	    "Alessandro",
	    "Alighieri",
	    "Amedeo",
	    "Amos",
	    "Anselmo",
	    "Antonino",
	    "Arcibaldo",
	    "Armando",
	    "Artes",
	    "Audenico",
	    "Ausonio",
	    "Bacchisio",
	    "Battista",
	    "Bernardo",
	    "Boris",
	    "Caio",
	    "Carlo",
	    "Cecco",
	    "Cirino",
	    "Cleros",
	    "Costantino",
	    "Damiano",
	    "Danny",
	    "Davide",
	    "Demian",
	    "Dimitri",
	    "Domingo",
	    "Dylan",
	    "Edilio",
	    "Egidio",
	    "Elio",
	    "Emanuel",
	    "Enrico",
	    "Ercole",
	    "Ermes",
	    "Ethan",
	    "Eusebio",
	    "Evangelista",
	    "Fabiano",
	    "Ferdinando",
	    "Fiorentino",
	    "Flavio",
	    "Fulvio",
	    "Gabriele",
	    "Gastone",
	    "Germano",
	    "Giacinto",
	    "Gianantonio",
	    "Gianleonardo",
	    "Gianmarco",
	    "Gianriccardo",
	    "Gioacchino",
	    "Giordano",
	    "Giuliano",
	    "Graziano",
	    "Guido",
	    "Harry",
	    "Iacopo",
	    "Ilario",
	    "Ione",
	    "Italo",
	    "Jack",
	    "Jari",
	    "Joey",
	    "Joseph",
	    "Kai",
	    "Kociss",
	    "Laerte",
	    "Lauro",
	    "Leonardo",
	    "Liborio",
	    "Lorenzo",
	    "Ludovico",
	    "Maggiore",
	    "Manuele",
	    "Mariano",
	    "Marvin",
	    "Matteo",
	    "Mauro",
	    "Michael",
	    "Mirco",
	    "Modesto",
	    "Muzio",
	    "Nabil",
	    "Nathan",
	    "Nick",
	    "Noah",
	    "Odino",
	    "Olo",
	    "Oreste",
	    "Osea",
	    "Pablo",
	    "Patrizio",
	    "Piererminio",
	    "Pierfrancesco",
	    "Piersilvio",
	    "Priamo",
	    "Quarto",
	    "Quirino",
	    "Radames",
	    "Raniero",
	    "Renato",
	    "Rocco",
	    "Romeo",
	    "Rosalino",
	    "Rudy",
	    "Sabatino",
	    "Samuel",
	    "Santo",
	    "Sebastian",
	    "Serse",
	    "Silvano",
	    "Sirio",
	    "Tancredi",
	    "Terzo",
	    "Timoteo",
	    "Tolomeo",
	    "Trevis",
	    "Ubaldo",
	    "Ulrico",
	    "Valdo",
	    "Neri",
	    "Vinicio",
	    "Walter",
	    "Xavier",
	    "Yago",
	    "Zaccaria",
	    "Abramo",
	    "Adriano",
	    "Alan",
	    "Albino",
	    "Alessio",
	    "Alighiero",
	    "Amerigo",
	    "Anastasio",
	    "Antimo",
	    "Antonio",
	    "Arduino",
	    "Aroldo",
	    "Arturo",
	    "Augusto",
	    "Avide",
	    "Baldassarre",
	    "Bettino",
	    "Bortolo",
	    "Caligola",
	    "Carmelo",
	    "Celeste",
	    "Ciro",
	    "Costanzo",
	    "Dante",
	    "Danthon",
	    "Davis",
	    "Demis",
	    "Dindo",
	    "Domiziano",
	    "Edipo",
	    "Egisto",
	    "Eliziario",
	    "Emidio",
	    "Enzo",
	    "Eriberto",
	    "Erminio",
	    "Ettore",
	    "Eustachio",
	    "Fabio",
	    "Fernando",
	    "Fiorenzo",
	    "Folco",
	    "Furio",
	    "Gaetano",
	    "Gavino",
	    "Gerlando",
	    "Giacobbe",
	    "Giancarlo",
	    "Gianmaria",
	    "Giobbe",
	    "Giorgio",
	    "Giulio",
	    "Gregorio",
	    "Hector",
	    "Ian",
	    "Ippolito",
	    "Ivano",
	    "Jacopo",
	    "Jarno",
	    "Joannes",
	    "Joshua",
	    "Karim",
	    "Kris",
	    "Lamberto",
	    "Lazzaro",
	    "Leone",
	    "Lino",
	    "Loris",
	    "Luigi",
	    "Manfredi",
	    "Marco",
	    "Marino",
	    "Marzio",
	    "Mattia",
	    "Max",
	    "Michele",
	    "Mirko",
	    "Moreno",
	    "Nadir",
	    "Nazzareno",
	    "Nestore",
	    "Nico",
	    "Noel",
	    "Odone",
	    "Omar",
	    "Orfeo",
	    "Osvaldo",
	    "Pacifico",
	    "Pericle",
	    "Pietro",
	    "Primo",
	    "Quasimodo",
	    "Radio",
	    "Raoul",
	    "Renzo",
	    "Rodolfo",
	    "Romolo",
	    "Rosolino",
	    "Rufo",
	    "Sabino",
	    "Sandro",
	    "Sasha",
	    "Secondo",
	    "Sesto",
	    "Silverio",
	    "Siro",
	    "Tazio",
	    "Teseo",
	    "Timothy",
	    "Tommaso",
	    "Tristano",
	    "Umberto",
	    "Ariel",
	    "Artemide",
	    "Assia",
	    "Azue",
	    "Benedetta",
	    "Bibiana",
	    "Brigitta",
	    "Carmela",
	    "Cassiopea",
	    "Cesidia",
	    "Cira",
	    "Clea",
	    "Cleopatra",
	    "Clodovea",
	    "Concetta",
	    "Cosetta",
	    "Cristyn",
	    "Damiana",
	    "Danuta",
	    "Deborah",
	    "Demi",
	    "Diamante",
	    "Diana",
	    "Donatella",
	    "Doriana",
	    "Edvige",
	    "Elda",
	    "Elga",
	    "Elsa",
	    "Emilia",
	    "Enrica",
	    "Erminia",
	    "Eufemia",
	    "Evita",
	    "Fatima",
	    "Felicia",
	    "Filomena",
	    "Flaviana",
	    "Fortunata",
	    "Gelsomina",
	    "Genziana",
	    "Giacinta",
	    "Gilda",
	    "Giovanna",
	    "Giulietta",
	    "Grazia",
	    "Guendalina",
	    "Helga",
	    "Ileana",
	    "Ingrid",
	    "Irene",
	    "Isabel",
	    "Isira",
	    "Ivonne",
	    "Jelena",
	    "Jole",
	    "Claudia",
	    "Kayla",
	    "Kristel",
	    "Laura",
	    "Lucia",
	    "Lia",
	    "Lidia",
	    "Lisa",
	    "Loredana",
	    "Loretta",
	    "Luce",
	    "Lucrezia",
	    "Luna",
	    "Maika",
	    "Marcella",
	    "Maria",
	    "Mariagiulia",
	    "Marianita",
	    "Mariapia",
	    "Marieva",
	    "Marina",
	    "Maristella",
	    "Maruska",
	    "Matilde",
	    "Mecren",
	    "Mercedes",
	    "Mietta",
	    "Miriana",
	    "Miriam",
	    "Monia",
	    "Morgana",
	    "Naomi",
	    "Nayade",
	    "Nicoletta",
	    "Ninfa",
	    "Noemi",
	    "Nunzia",
	    "Olimpia",
	    "Oretta",
	    "Ortensia",
	    "Penelope",
	    "Piccarda",
	    "Prisca",
	    "Rebecca",
	    "Rita",
	    "Rosalba",
	    "Rosaria",
	    "Rosita",
	    "Ruth",
	    "Samira",
	    "Sarita",
	    "Selvaggia",
	    "Shaira",
	    "Sibilla",
	    "Soriana",
	    "Thea",
	    "Tosca",
	    "Ursula",
	    "Vania",
	    "Vera",
	    "Vienna",
	    "Violante",
	    "Vitalba",
	    "Zelida"
	  ],
	  "last_name": [
	    "Amato",
	    "Barbieri",
	    "Barone",
	    "Basile",
	    "Battaglia",
	    "Bellini",
	    "Benedetti",
	    "Bernardi",
	    "Bianc",
	    "Bianchi",
	    "Bruno",
	    "Caputo",
	    "Carbon",
	    "Caruso",
	    "Cattaneo",
	    "Colombo",
	    "Cont",
	    "Conte",
	    "Coppola",
	    "Costa",
	    "Costantin",
	    "D'amico",
	    "D'angelo",
	    "Damico",
	    "De Angelis",
	    "De luca",
	    "De rosa",
	    "De Santis",
	    "Donati",
	    "Esposito",
	    "Fabbri",
	    "Farin",
	    "Ferrara",
	    "Ferrari",
	    "Ferraro",
	    "Ferretti",
	    "Ferri",
	    "Fior",
	    "Fontana",
	    "Galli",
	    "Gallo",
	    "Gatti",
	    "Gentile",
	    "Giordano",
	    "Giuliani",
	    "Grassi",
	    "Grasso",
	    "Greco",
	    "Guerra",
	    "Leone",
	    "Lombardi",
	    "Lombardo",
	    "Longo",
	    "Mancini",
	    "Marchetti",
	    "Marian",
	    "Marini",
	    "Marino",
	    "Martinelli",
	    "Martini",
	    "Martino",
	    "Mazza",
	    "Messina",
	    "Milani",
	    "Montanari",
	    "Monti",
	    "Morelli",
	    "Moretti",
	    "Negri",
	    "Neri",
	    "Orlando",
	    "Pagano",
	    "Palmieri",
	    "Palumbo",
	    "Parisi",
	    "Pellegrini",
	    "Pellegrino",
	    "Piras",
	    "Ricci",
	    "Rinaldi",
	    "Riva",
	    "Rizzi",
	    "Rizzo",
	    "Romano",
	    "Ross",
	    "Rossetti",
	    "Ruggiero",
	    "Russo",
	    "Sala",
	    "Sanna",
	    "Santoro",
	    "Sartori",
	    "Serr",
	    "Silvestri",
	    "Sorrentino",
	    "Testa",
	    "Valentini",
	    "Villa",
	    "Vitale",
	    "Vitali"
	  ],
	  "prefix": [
	    "Sig.",
	    "Dott.",
	    "Dr.",
	    "Ing."
	  ],
	  "suffix": [],
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	it.phone_number = {
	  "formats": [
	    "+## ### ## ## ####",
	    "+## ## #######",
	    "+## ## ########",
	    "+## ### #######",
	    "+## ### ########",
	    "+## #### #######",
	    "+## #### ########",
	    "0## ### ####",
	    "+39 0## ### ###",
	    "3## ### ###",
	    "+39 3## ### ###"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var ja = {};
	module["exports"] = ja;
	ja.title = "Japanese";
	ja.address = {
	  "postcode": [
	    "###-####"
	  ],
	  "state": [
	    "北海道",
	    "青森県",
	    "岩手県",
	    "宮城県",
	    "秋田県",
	    "山形県",
	    "福島県",
	    "茨城県",
	    "栃木県",
	    "群馬県",
	    "埼玉県",
	    "千葉県",
	    "東京都",
	    "神奈川県",
	    "新潟県",
	    "富山県",
	    "石川県",
	    "福井県",
	    "山梨県",
	    "長野県",
	    "岐阜県",
	    "静岡県",
	    "愛知県",
	    "三重県",
	    "滋賀県",
	    "京都府",
	    "大阪府",
	    "兵庫県",
	    "奈良県",
	    "和歌山県",
	    "鳥取県",
	    "島根県",
	    "岡山県",
	    "広島県",
	    "山口県",
	    "徳島県",
	    "香川県",
	    "愛媛県",
	    "高知県",
	    "福岡県",
	    "佐賀県",
	    "長崎県",
	    "熊本県",
	    "大分県",
	    "宮崎県",
	    "鹿児島県",
	    "沖縄県"
	  ],
	  "state_abbr": [
	    "1",
	    "2",
	    "3",
	    "4",
	    "5",
	    "6",
	    "7",
	    "8",
	    "9",
	    "10",
	    "11",
	    "12",
	    "13",
	    "14",
	    "15",
	    "16",
	    "17",
	    "18",
	    "19",
	    "20",
	    "21",
	    "22",
	    "23",
	    "24",
	    "25",
	    "26",
	    "27",
	    "28",
	    "29",
	    "30",
	    "31",
	    "32",
	    "33",
	    "34",
	    "35",
	    "36",
	    "37",
	    "38",
	    "39",
	    "40",
	    "41",
	    "42",
	    "43",
	    "44",
	    "45",
	    "46",
	    "47"
	  ],
	  "city_prefix": [
	    "北",
	    "東",
	    "西",
	    "南",
	    "新",
	    "湖",
	    "港"
	  ],
	  "city_suffix": [
	    "市",
	    "区",
	    "町",
	    "村"
	  ],
	  "city": [
	    "#{city_prefix}#{Name.first_name}#{city_suffix}",
	    "#{Name.first_name}#{city_suffix}",
	    "#{city_prefix}#{Name.last_name}#{city_suffix}",
	    "#{Name.last_name}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{Name.first_name}#{street_suffix}",
	    "#{Name.last_name}#{street_suffix}"
	  ]
	};
	ja.phone_number = {
	  "formats": [
	    "0####-#-####",
	    "0###-##-####",
	    "0##-###-####",
	    "0#-####-####"
	  ]
	};
	ja.cell_phone = {
	  "formats": [
	    "090-####-####",
	    "080-####-####",
	    "070-####-####"
	  ]
	};
	ja.name = {
	  "last_name": [
	    "佐藤",
	    "鈴木",
	    "高橋",
	    "田中",
	    "渡辺",
	    "伊藤",
	    "山本",
	    "中村",
	    "小林",
	    "加藤",
	    "吉田",
	    "山田",
	    "佐々木",
	    "山口",
	    "斎藤",
	    "松本",
	    "井上",
	    "木村",
	    "林",
	    "清水"
	  ],
	  "first_name": [
	    "大翔",
	    "蓮",
	    "颯太",
	    "樹",
	    "大和",
	    "陽翔",
	    "陸斗",
	    "太一",
	    "海翔",
	    "蒼空",
	    "翼",
	    "陽菜",
	    "結愛",
	    "結衣",
	    "杏",
	    "莉子",
	    "美羽",
	    "結菜",
	    "心愛",
	    "愛菜",
	    "美咲"
	  ],
	  "name": [
	    "#{last_name} #{first_name}"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var ko = {};
	module["exports"] = ko;
	ko.title = "Korean";
	ko.address = {
	  "postcode": [
	    "###-###"
	  ],
	  "state": [
	    "강원",
	    "경기",
	    "경남",
	    "경북",
	    "광주",
	    "대구",
	    "대전",
	    "부산",
	    "서울",
	    "울산",
	    "인천",
	    "전남",
	    "전북",
	    "제주",
	    "충남",
	    "충북",
	    "세종"
	  ],
	  "state_abbr": [
	    "강원",
	    "경기",
	    "경남",
	    "경북",
	    "광주",
	    "대구",
	    "대전",
	    "부산",
	    "서울",
	    "울산",
	    "인천",
	    "전남",
	    "전북",
	    "제주",
	    "충남",
	    "충북",
	    "세종"
	  ],
	  "city_suffix": [
	    "구",
	    "시",
	    "군"
	  ],
	  "city_name": [
	    "강릉",
	    "양양",
	    "인제",
	    "광주",
	    "구리",
	    "부천",
	    "밀양",
	    "통영",
	    "창원",
	    "거창",
	    "고성",
	    "양산",
	    "김천",
	    "구미",
	    "영주",
	    "광산",
	    "남",
	    "북",
	    "고창",
	    "군산",
	    "남원",
	    "동작",
	    "마포",
	    "송파",
	    "용산",
	    "부평",
	    "강화",
	    "수성"
	  ],
	  "city": [
	    "#{city_name}#{city_suffix}"
	  ],
	  "street_root": [
	    "상계",
	    "화곡",
	    "신정",
	    "목",
	    "잠실",
	    "면목",
	    "주안",
	    "안양",
	    "중",
	    "정왕",
	    "구로",
	    "신월",
	    "연산",
	    "부평",
	    "창",
	    "만수",
	    "중계",
	    "검단",
	    "시흥",
	    "상도",
	    "방배",
	    "장유",
	    "상",
	    "광명",
	    "신길",
	    "행신",
	    "대명",
	    "동탄"
	  ],
	  "street_suffix": [
	    "읍",
	    "면",
	    "동"
	  ],
	  "street_name": [
	    "#{street_root}#{street_suffix}"
	  ]
	};
	ko.phone_number = {
	  "formats": [
	    "0#-#####-####",
	    "0##-###-####",
	    "0##-####-####"
	  ]
	};
	ko.company = {
	  "suffix": [
	    "연구소",
	    "게임즈",
	    "그룹",
	    "전자",
	    "물산",
	    "코리아"
	  ],
	  "prefix": [
	    "주식회사",
	    "한국"
	  ],
	  "name": [
	    "#{prefix} #{Name.first_name}",
	    "#{Name.first_name} #{suffix}"
	  ]
	};
	ko.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.co.kr",
	    "hanmail.net",
	    "naver.com"
	  ],
	  "domain_suffix": [
	    "co.kr",
	    "com",
	    "biz",
	    "info",
	    "ne.kr",
	    "net",
	    "or.kr",
	    "org"
	  ]
	};
	ko.lorem = {
	  "words": [
	    "국가는",
	    "법률이",
	    "정하는",
	    "바에",
	    "의하여",
	    "재외국민을",
	    "보호할",
	    "의무를",
	    "진다.",
	    "모든",
	    "국민은",
	    "신체의",
	    "자유를",
	    "가진다.",
	    "국가는",
	    "전통문화의",
	    "계승·발전과",
	    "민족문화의",
	    "창달에",
	    "노력하여야",
	    "한다.",
	    "통신·방송의",
	    "시설기준과",
	    "신문의",
	    "기능을",
	    "보장하기",
	    "위하여",
	    "필요한",
	    "사항은",
	    "법률로",
	    "정한다.",
	    "헌법에",
	    "의하여",
	    "체결·공포된",
	    "조약과",
	    "일반적으로",
	    "승인된",
	    "국제법규는",
	    "국내법과",
	    "같은",
	    "효력을",
	    "가진다.",
	    "다만,",
	    "현행범인인",
	    "경우와",
	    "장기",
	    "3년",
	    "이상의",
	    "형에",
	    "해당하는",
	    "죄를",
	    "범하고",
	    "도피",
	    "또는",
	    "증거인멸의",
	    "염려가",
	    "있을",
	    "때에는",
	    "사후에",
	    "영장을",
	    "청구할",
	    "수",
	    "있다.",
	    "저작자·발명가·과학기술자와",
	    "예술가의",
	    "권리는",
	    "법률로써",
	    "보호한다.",
	    "형사피고인은",
	    "유죄의",
	    "판결이",
	    "확정될",
	    "때까지는",
	    "무죄로",
	    "추정된다.",
	    "모든",
	    "국민은",
	    "행위시의",
	    "법률에",
	    "의하여",
	    "범죄를",
	    "구성하지",
	    "아니하는",
	    "행위로",
	    "소추되지",
	    "아니하며,",
	    "동일한",
	    "범죄에",
	    "대하여",
	    "거듭",
	    "처벌받지",
	    "아니한다.",
	    "국가는",
	    "평생교육을",
	    "진흥하여야",
	    "한다.",
	    "모든",
	    "국민은",
	    "사생활의",
	    "비밀과",
	    "자유를",
	    "침해받지",
	    "아니한다.",
	    "의무교육은",
	    "무상으로",
	    "한다.",
	    "저작자·발명가·과학기술자와",
	    "예술가의",
	    "권리는",
	    "법률로써",
	    "보호한다.",
	    "국가는",
	    "모성의",
	    "보호를",
	    "위하여",
	    "노력하여야",
	    "한다.",
	    "헌법에",
	    "의하여",
	    "체결·공포된",
	    "조약과",
	    "일반적으로",
	    "승인된",
	    "국제법규는",
	    "국내법과",
	    "같은",
	    "효력을",
	    "가진다."
	  ]
	};
	ko.name = {
	  "last_name": [
	    "김",
	    "이",
	    "박",
	    "최",
	    "정",
	    "강",
	    "조",
	    "윤",
	    "장",
	    "임",
	    "오",
	    "한",
	    "신",
	    "서",
	    "권",
	    "황",
	    "안",
	    "송",
	    "류",
	    "홍"
	  ],
	  "first_name": [
	    "서연",
	    "민서",
	    "서현",
	    "지우",
	    "서윤",
	    "지민",
	    "수빈",
	    "하은",
	    "예은",
	    "윤서",
	    "민준",
	    "지후",
	    "지훈",
	    "준서",
	    "현우",
	    "예준",
	    "건우",
	    "현준",
	    "민재",
	    "우진",
	    "은주"
	  ],
	  "name": [
	    "#{last_name} #{first_name}"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var nb_NO = {};
	module["exports"] = nb_NO;
	nb_NO.title = "Norwegian";
	nb_NO.address = {
	  "city_root": [
	    "Fet",
	    "Gjes",
	    "Høy",
	    "Inn",
	    "Fager",
	    "Lille",
	    "Lo",
	    "Mal",
	    "Nord",
	    "Nær",
	    "Sand",
	    "Sme",
	    "Stav",
	    "Stor",
	    "Tand",
	    "Ut",
	    "Vest"
	  ],
	  "city_suffix": [
	    "berg",
	    "borg",
	    "by",
	    "bø",
	    "dal",
	    "eid",
	    "fjell",
	    "fjord",
	    "foss",
	    "grunn",
	    "hamn",
	    "havn",
	    "helle",
	    "mark",
	    "nes",
	    "odden",
	    "sand",
	    "sjøen",
	    "stad",
	    "strand",
	    "strøm",
	    "sund",
	    "vik",
	    "vær",
	    "våg",
	    "ø",
	    "øy",
	    "ås"
	  ],
	  "street_prefix": [
	    "Øvre",
	    "Nedre",
	    "Søndre",
	    "Gamle",
	    "Østre",
	    "Vestre"
	  ],
	  "street_root": [
	    "Eike",
	    "Bjørke",
	    "Gran",
	    "Vass",
	    "Furu",
	    "Litj",
	    "Lille",
	    "Høy",
	    "Fosse",
	    "Elve",
	    "Ku",
	    "Konvall",
	    "Soldugg",
	    "Hestemyr",
	    "Granitt",
	    "Hegge",
	    "Rogne",
	    "Fiol",
	    "Sol",
	    "Ting",
	    "Malm",
	    "Klokker",
	    "Preste",
	    "Dam",
	    "Geiterygg",
	    "Bekke",
	    "Berg",
	    "Kirke",
	    "Kors",
	    "Bru",
	    "Blåveis",
	    "Torg",
	    "Sjø"
	  ],
	  "street_suffix": [
	    "alléen",
	    "bakken",
	    "berget",
	    "bråten",
	    "eggen",
	    "engen",
	    "ekra",
	    "faret",
	    "flata",
	    "gata",
	    "gjerdet",
	    "grenda",
	    "gropa",
	    "hagen",
	    "haugen",
	    "havna",
	    "holtet",
	    "høgda",
	    "jordet",
	    "kollen",
	    "kroken",
	    "lia",
	    "lunden",
	    "lyngen",
	    "løkka",
	    "marka",
	    "moen",
	    "myra",
	    "plassen",
	    "ringen",
	    "roa",
	    "røa",
	    "skogen",
	    "skrenten",
	    "spranget",
	    "stien",
	    "stranda",
	    "stubben",
	    "stykket",
	    "svingen",
	    "tjernet",
	    "toppen",
	    "tunet",
	    "vollen",
	    "vika",
	    "åsen"
	  ],
	  "common_street_suffix": [
	    "sgate",
	    "svei",
	    "s Gate",
	    "s Vei",
	    "gata",
	    "veien"
	  ],
	  "building_number": [
	    "#",
	    "##"
	  ],
	  "secondary_address": [
	    "Leil. ###",
	    "Oppgang A",
	    "Oppgang B"
	  ],
	  "postcode": [
	    "####",
	    "####",
	    "####",
	    "0###"
	  ],
	  "state": [
	    ""
	  ],
	  "city": [
	    "#{city_root}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{street_root}#{street_suffix}",
	    "#{street_prefix} #{street_root}#{street_suffix}",
	    "#{Name.first_name}#{common_street_suffix}",
	    "#{Name.last_name}#{common_street_suffix}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Norge"
	  ]
	};
	nb_NO.company = {
	  "suffix": [
	    "Gruppen",
	    "AS",
	    "ASA",
	    "BA",
	    "RFH",
	    "og Sønner"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
	  ]
	};
	nb_NO.internet = {
	  "domain_suffix": [
	    "no",
	    "com",
	    "net",
	    "org"
	  ]
	};
	nb_NO.name = {
	  "first_name": [
	    "Emma",
	    "Sara",
	    "Thea",
	    "Ida",
	    "Julie",
	    "Nora",
	    "Emilie",
	    "Ingrid",
	    "Hanna",
	    "Maria",
	    "Sofie",
	    "Anna",
	    "Malin",
	    "Amalie",
	    "Vilde",
	    "Frida",
	    "Andrea",
	    "Tuva",
	    "Victoria",
	    "Mia",
	    "Karoline",
	    "Mathilde",
	    "Martine",
	    "Linnea",
	    "Marte",
	    "Hedda",
	    "Marie",
	    "Helene",
	    "Silje",
	    "Leah",
	    "Maja",
	    "Elise",
	    "Oda",
	    "Kristine",
	    "Aurora",
	    "Kaja",
	    "Camilla",
	    "Mari",
	    "Maren",
	    "Mina",
	    "Selma",
	    "Jenny",
	    "Celine",
	    "Eline",
	    "Sunniva",
	    "Natalie",
	    "Tiril",
	    "Synne",
	    "Sandra",
	    "Madeleine",
	    "Markus",
	    "Mathias",
	    "Kristian",
	    "Jonas",
	    "Andreas",
	    "Alexander",
	    "Martin",
	    "Sander",
	    "Daniel",
	    "Magnus",
	    "Henrik",
	    "Tobias",
	    "Kristoffer",
	    "Emil",
	    "Adrian",
	    "Sebastian",
	    "Marius",
	    "Elias",
	    "Fredrik",
	    "Thomas",
	    "Sondre",
	    "Benjamin",
	    "Jakob",
	    "Oliver",
	    "Lucas",
	    "Oskar",
	    "Nikolai",
	    "Filip",
	    "Mats",
	    "William",
	    "Erik",
	    "Simen",
	    "Ole",
	    "Eirik",
	    "Isak",
	    "Kasper",
	    "Noah",
	    "Lars",
	    "Joakim",
	    "Johannes",
	    "Håkon",
	    "Sindre",
	    "Jørgen",
	    "Herman",
	    "Anders",
	    "Jonathan",
	    "Even",
	    "Theodor",
	    "Mikkel",
	    "Aksel"
	  ],
	  "feminine_name": [
	    "Emma",
	    "Sara",
	    "Thea",
	    "Ida",
	    "Julie",
	    "Nora",
	    "Emilie",
	    "Ingrid",
	    "Hanna",
	    "Maria",
	    "Sofie",
	    "Anna",
	    "Malin",
	    "Amalie",
	    "Vilde",
	    "Frida",
	    "Andrea",
	    "Tuva",
	    "Victoria",
	    "Mia",
	    "Karoline",
	    "Mathilde",
	    "Martine",
	    "Linnea",
	    "Marte",
	    "Hedda",
	    "Marie",
	    "Helene",
	    "Silje",
	    "Leah",
	    "Maja",
	    "Elise",
	    "Oda",
	    "Kristine",
	    "Aurora",
	    "Kaja",
	    "Camilla",
	    "Mari",
	    "Maren",
	    "Mina",
	    "Selma",
	    "Jenny",
	    "Celine",
	    "Eline",
	    "Sunniva",
	    "Natalie",
	    "Tiril",
	    "Synne",
	    "Sandra",
	    "Madeleine"
	  ],
	  "masculine_name": [
	    "Markus",
	    "Mathias",
	    "Kristian",
	    "Jonas",
	    "Andreas",
	    "Alexander",
	    "Martin",
	    "Sander",
	    "Daniel",
	    "Magnus",
	    "Henrik",
	    "Tobias",
	    "Kristoffer",
	    "Emil",
	    "Adrian",
	    "Sebastian",
	    "Marius",
	    "Elias",
	    "Fredrik",
	    "Thomas",
	    "Sondre",
	    "Benjamin",
	    "Jakob",
	    "Oliver",
	    "Lucas",
	    "Oskar",
	    "Nikolai",
	    "Filip",
	    "Mats",
	    "William",
	    "Erik",
	    "Simen",
	    "Ole",
	    "Eirik",
	    "Isak",
	    "Kasper",
	    "Noah",
	    "Lars",
	    "Joakim",
	    "Johannes",
	    "Håkon",
	    "Sindre",
	    "Jørgen",
	    "Herman",
	    "Anders",
	    "Jonathan",
	    "Even",
	    "Theodor",
	    "Mikkel",
	    "Aksel"
	  ],
	  "last_name": [
	    "Johansen",
	    "Hansen",
	    "Andersen",
	    "Kristiansen",
	    "Larsen",
	    "Olsen",
	    "Solberg",
	    "Andresen",
	    "Pedersen",
	    "Nilsen",
	    "Berg",
	    "Halvorsen",
	    "Karlsen",
	    "Svendsen",
	    "Jensen",
	    "Haugen",
	    "Martinsen",
	    "Eriksen",
	    "Sørensen",
	    "Johnsen",
	    "Myhrer",
	    "Johannessen",
	    "Nielsen",
	    "Hagen",
	    "Pettersen",
	    "Bakke",
	    "Skuterud",
	    "Løken",
	    "Gundersen",
	    "Strand",
	    "Jørgensen",
	    "Kvarme",
	    "Røed",
	    "Sæther",
	    "Stensrud",
	    "Moe",
	    "Kristoffersen",
	    "Jakobsen",
	    "Holm",
	    "Aas",
	    "Lie",
	    "Moen",
	    "Andreassen",
	    "Vedvik",
	    "Nguyen",
	    "Jacobsen",
	    "Torgersen",
	    "Ruud",
	    "Krogh",
	    "Christiansen",
	    "Bjerke",
	    "Aalerud",
	    "Borge",
	    "Sørlie",
	    "Berge",
	    "Østli",
	    "Ødegård",
	    "Torp",
	    "Henriksen",
	    "Haukelidsæter",
	    "Fjeld",
	    "Danielsen",
	    "Aasen",
	    "Fredriksen",
	    "Dahl",
	    "Berntsen",
	    "Arnesen",
	    "Wold",
	    "Thoresen",
	    "Solheim",
	    "Skoglund",
	    "Bakken",
	    "Amundsen",
	    "Solli",
	    "Smogeli",
	    "Kristensen",
	    "Glosli",
	    "Fossum",
	    "Evensen",
	    "Eide",
	    "Carlsen",
	    "Østby",
	    "Vegge",
	    "Tangen",
	    "Smedsrud",
	    "Olstad",
	    "Lunde",
	    "Kleven",
	    "Huseby",
	    "Bjørnstad",
	    "Ryan",
	    "Rasmussen",
	    "Nygård",
	    "Nordskaug",
	    "Nordby",
	    "Mathisen",
	    "Hopland",
	    "Gran",
	    "Finstad",
	    "Edvardsen"
	  ],
	  "prefix": [
	    "Dr.",
	    "Prof."
	  ],
	  "suffix": [
	    "Jr.",
	    "Sr.",
	    "I",
	    "II",
	    "III",
	    "IV",
	    "V"
	  ],
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name} #{suffix}",
	    "#{feminine_name} #{feminine_name} #{last_name}",
	    "#{masculine_name} #{masculine_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	nb_NO.phone_number = {
	  "formats": [
	    "########",
	    "## ## ## ##",
	    "### ## ###",
	    "+47 ## ## ## ##"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var nep = {};
	module["exports"] = nep;
	nep.title = "Nepalese";
	nep.name = {
	  "first_name": [
	    "Aarav",
	    "Ajita",
	    "Amit",
	    "Amita",
	    "Amrit",
	    "Arijit",
	    "Ashmi",
	    "Asmita",
	    "Bibek",
	    "Bijay",
	    "Bikash",
	    "Bina",
	    "Bishal",
	    "Bishnu",
	    "Buddha",
	    "Deepika",
	    "Dipendra",
	    "Gagan",
	    "Ganesh",
	    "Khem",
	    "Krishna",
	    "Laxmi",
	    "Manisha",
	    "Nabin",
	    "Nikita",
	    "Niraj",
	    "Nischal",
	    "Padam",
	    "Pooja",
	    "Prabin",
	    "Prakash",
	    "Prashant",
	    "Prem",
	    "Purna",
	    "Rajendra",
	    "Rajina",
	    "Raju",
	    "Rakesh",
	    "Ranjan",
	    "Ratna",
	    "Sagar",
	    "Sandeep",
	    "Sanjay",
	    "Santosh",
	    "Sarita",
	    "Shilpa",
	    "Shirisha",
	    "Shristi",
	    "Siddhartha",
	    "Subash",
	    "Sumeet",
	    "Sunita",
	    "Suraj",
	    "Susan",
	    "Sushant"
	  ],
	  "last_name": [
	    "Adhikari",
	    "Aryal",
	    "Baral",
	    "Basnet",
	    "Bastola",
	    "Basynat",
	    "Bhandari",
	    "Bhattarai",
	    "Chettri",
	    "Devkota",
	    "Dhakal",
	    "Dongol",
	    "Ghale",
	    "Gurung",
	    "Gyawali",
	    "Hamal",
	    "Jung",
	    "KC",
	    "Kafle",
	    "Karki",
	    "Khadka",
	    "Koirala",
	    "Lama",
	    "Limbu",
	    "Magar",
	    "Maharjan",
	    "Niroula",
	    "Pandey",
	    "Pradhan",
	    "Rana",
	    "Raut",
	    "Sai",
	    "Shai",
	    "Shakya",
	    "Sherpa",
	    "Shrestha",
	    "Subedi",
	    "Tamang",
	    "Thapa"
	  ]
	};
	nep.address = {
	  "postcode": [
	    0
	  ],
	  "state": [
	    "Baglung",
	    "Banke",
	    "Bara",
	    "Bardiya",
	    "Bhaktapur",
	    "Bhojupu",
	    "Chitwan",
	    "Dailekh",
	    "Dang",
	    "Dhading",
	    "Dhankuta",
	    "Dhanusa",
	    "Dolakha",
	    "Dolpha",
	    "Gorkha",
	    "Gulmi",
	    "Humla",
	    "Ilam",
	    "Jajarkot",
	    "Jhapa",
	    "Jumla",
	    "Kabhrepalanchok",
	    "Kalikot",
	    "Kapilvastu",
	    "Kaski",
	    "Kathmandu",
	    "Lalitpur",
	    "Lamjung",
	    "Manang",
	    "Mohottari",
	    "Morang",
	    "Mugu",
	    "Mustang",
	    "Myagdi",
	    "Nawalparasi",
	    "Nuwakot",
	    "Palpa",
	    "Parbat",
	    "Parsa",
	    "Ramechhap",
	    "Rauswa",
	    "Rautahat",
	    "Rolpa",
	    "Rupandehi",
	    "Sankhuwasabha",
	    "Sarlahi",
	    "Sindhuli",
	    "Sindhupalchok",
	    "Sunsari",
	    "Surket",
	    "Syangja",
	    "Tanahu",
	    "Terhathum"
	  ],
	  "city": [
	    "Bhaktapur",
	    "Biratnagar",
	    "Birendranagar",
	    "Birgunj",
	    "Butwal",
	    "Damak",
	    "Dharan",
	    "Gaur",
	    "Gorkha",
	    "Hetauda",
	    "Itahari",
	    "Janakpur",
	    "Kathmandu",
	    "Lahan",
	    "Nepalgunj",
	    "Pokhara"
	  ],
	  "default_country": [
	    "Nepal"
	  ]
	};
	nep.internet = {
	  "free_email": [
	    "worldlink.com.np",
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "np",
	    "com",
	    "info",
	    "net",
	    "org"
	  ]
	};
	nep.company = {
	  "suffix": [
	    "Pvt Ltd",
	    "Group",
	    "Ltd",
	    "Limited"
	  ]
	};
	nep.phone_number = {
	  "formats": [
	    "##-#######",
	    "+977-#-#######",
	    "+977########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var nl = {};
	module["exports"] = nl;
	nl.title = "Dutch";
	nl.address = {
	  "city_prefix": [
	    "Noord",
	    "Oost",
	    "West",
	    "Zuid",
	    "Nieuw",
	    "Oud"
	  ],
	  "city_suffix": [
	    "dam",
	    "berg",
	    " aan de Rijn",
	    " aan de IJssel",
	    "swaerd",
	    "endrecht",
	    "recht",
	    "ambacht",
	    "enmaes",
	    "wijk",
	    "sland",
	    "stroom",
	    "sluus",
	    "dijk",
	    "dorp",
	    "burg",
	    "veld",
	    "sluis",
	    "koop",
	    "lek",
	    "hout",
	    "geest",
	    "kerk",
	    "woude",
	    "hoven",
	    "hoten",
	    "ingen",
	    "plas",
	    "meer"
	  ],
	  "city": [
	    "#{Name.first_name}#{city_suffix}",
	    "#{Name.last_name}#{city_suffix}",
	    "#{city_prefix} #{Name.first_name}#{city_suffix}",
	    "#{city_prefix} #{Name.last_name}#{city_suffix}"
	  ],
	  "country": [
	    "Afghanistan",
	    "Akrotiri",
	    "Albanië",
	    "Algerije",
	    "Amerikaanse Maagdeneilanden",
	    "Amerikaans-Samoa",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antarctica",
	    "Antigua en Barbuda",
	    "Arctic Ocean",
	    "Argentinië",
	    "Armenië",
	    "Aruba",
	    "Ashmore and Cartier Islands",
	    "Atlantic Ocean",
	    "Australië",
	    "Azerbeidzjan",
	    "Bahama's",
	    "Bahrein",
	    "Bangladesh",
	    "Barbados",
	    "Belarus",
	    "België",
	    "Belize",
	    "Benin",
	    "Bermuda",
	    "Bhutan",
	    "Bolivië",
	    "Bosnië-Herzegovina",
	    "Botswana",
	    "Bouvet Island",
	    "Brazilië",
	    "British Indian Ocean Territory",
	    "Britse Maagdeneilanden",
	    "Brunei",
	    "Bulgarije",
	    "Burkina Faso",
	    "Burundi",
	    "Cambodja",
	    "Canada",
	    "Caymaneilanden",
	    "Centraal-Afrikaanse Republiek",
	    "Chili",
	    "China",
	    "Christmas Island",
	    "Clipperton Island",
	    "Cocos (Keeling) Islands",
	    "Colombia",
	    "Comoren (Unie)",
	    "Congo (Democratische Republiek)",
	    "Congo (Volksrepubliek)",
	    "Cook",
	    "Coral Sea Islands",
	    "Costa Rica",
	    "Cuba",
	    "Cyprus",
	    "Denemarken",
	    "Dhekelia",
	    "Djibouti",
	    "Dominica",
	    "Dominicaanse Republiek",
	    "Duitsland",
	    "Ecuador",
	    "Egypte",
	    "El Salvador",
	    "Equatoriaal-Guinea",
	    "Eritrea",
	    "Estland",
	    "Ethiopië",
	    "European Union",
	    "Falkland",
	    "Faroe Islands",
	    "Fiji",
	    "Filipijnen",
	    "Finland",
	    "Frankrijk",
	    "Frans-Polynesië",
	    "French Southern and Antarctic Lands",
	    "Gabon",
	    "Gambia",
	    "Gaza Strip",
	    "Georgië",
	    "Ghana",
	    "Gibraltar",
	    "Grenada",
	    "Griekenland",
	    "Groenland",
	    "Guam",
	    "Guatemala",
	    "Guernsey",
	    "Guinea",
	    "Guinee-Bissau",
	    "Guyana",
	    "Haïti",
	    "Heard Island and McDonald Islands",
	    "Heilige Stoel",
	    "Honduras",
	    "Hongarije",
	    "Hongkong",
	    "Ierland",
	    "IJsland",
	    "India",
	    "Indian Ocean",
	    "Indonesië",
	    "Irak",
	    "Iran",
	    "Isle of Man",
	    "Israël",
	    "Italië",
	    "Ivoorkust",
	    "Jamaica",
	    "Jan Mayen",
	    "Japan",
	    "Jemen",
	    "Jersey",
	    "Jordanië",
	    "Kaapverdië",
	    "Kameroen",
	    "Kazachstan",
	    "Kenia",
	    "Kirgizstan",
	    "Kiribati",
	    "Koeweit",
	    "Kroatië",
	    "Laos",
	    "Lesotho",
	    "Letland",
	    "Libanon",
	    "Liberia",
	    "Libië",
	    "Liechtenstein",
	    "Litouwen",
	    "Luxemburg",
	    "Macao",
	    "Macedonië",
	    "Madagaskar",
	    "Malawi",
	    "Maldiven",
	    "Maleisië",
	    "Mali",
	    "Malta",
	    "Marokko",
	    "Marshall Islands",
	    "Mauritanië",
	    "Mauritius",
	    "Mayotte",
	    "Mexico",
	    "Micronesia, Federated States of",
	    "Moldavië",
	    "Monaco",
	    "Mongolië",
	    "Montenegro",
	    "Montserrat",
	    "Mozambique",
	    "Myanmar",
	    "Namibië",
	    "Nauru",
	    "Navassa Island",
	    "Nederland",
	    "Nederlandse Antillen",
	    "Nepal",
	    "Ngwane",
	    "Nicaragua",
	    "Nieuw-Caledonië",
	    "Nieuw-Zeeland",
	    "Niger",
	    "Nigeria",
	    "Niue",
	    "Noordelijke Marianen",
	    "Noord-Korea",
	    "Noorwegen",
	    "Norfolk Island",
	    "Oekraïne",
	    "Oezbekistan",
	    "Oman",
	    "Oostenrijk",
	    "Pacific Ocean",
	    "Pakistan",
	    "Palau",
	    "Panama",
	    "Papoea-Nieuw-Guinea",
	    "Paracel Islands",
	    "Paraguay",
	    "Peru",
	    "Pitcairn",
	    "Polen",
	    "Portugal",
	    "Puerto Rico",
	    "Qatar",
	    "Roemenië",
	    "Rusland",
	    "Rwanda",
	    "Saint Helena",
	    "Saint Lucia",
	    "Saint Vincent en de Grenadines",
	    "Saint-Pierre en Miquelon",
	    "Salomon",
	    "Samoa",
	    "San Marino",
	    "São Tomé en Principe",
	    "Saudi-Arabië",
	    "Senegal",
	    "Servië",
	    "Seychellen",
	    "Sierra Leone",
	    "Singapore",
	    "Sint-Kitts en Nevis",
	    "Slovenië",
	    "Slowakije",
	    "Soedan",
	    "Somalië",
	    "South Georgia and the South Sandwich Islands",
	    "Southern Ocean",
	    "Spanje",
	    "Spratly Islands",
	    "Sri Lanka",
	    "Suriname",
	    "Svalbard",
	    "Syrië",
	    "Tadzjikistan",
	    "Taiwan",
	    "Tanzania",
	    "Thailand",
	    "Timor Leste",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidad en Tobago",
	    "Tsjaad",
	    "Tsjechië",
	    "Tunesië",
	    "Turkije",
	    "Turkmenistan",
	    "Turks-en Caicoseilanden",
	    "Tuvalu",
	    "Uganda",
	    "Uruguay",
	    "Vanuatu",
	    "Venezuela",
	    "Verenigd Koninkrijk",
	    "Verenigde Arabische Emiraten",
	    "Verenigde Staten van Amerika",
	    "Vietnam",
	    "Wake Island",
	    "Wallis en Futuna",
	    "Wereld",
	    "West Bank",
	    "Westelijke Sahara",
	    "Zambia",
	    "Zimbabwe",
	    "Zuid-Afrika",
	    "Zuid-Korea",
	    "Zweden",
	    "Zwitserland"
	  ],
	  "building_number": [
	    "#",
	    "##",
	    "###",
	    "###a",
	    "###b",
	    "###c",
	    "### I",
	    "### II",
	    "### III"
	  ],
	  "street_suffix": [
	    "straat",
	    "laan",
	    "weg",
	    "plantsoen",
	    "park"
	  ],
	  "secondary_address": [
	    "1 hoog",
	    "2 hoog",
	    "3 hoog"
	  ],
	  "street_name": [
	    "#{Name.first_name}#{street_suffix}",
	    "#{Name.last_name}#{street_suffix}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "postcode": [
	    "#### ??"
	  ],
	  "state": [
	    "Noord-Holland",
	    "Zuid-Holland",
	    "Utrecht",
	    "Zeeland",
	    "Overijssel",
	    "Gelderland",
	    "Drenthe",
	    "Friesland",
	    "Groningen",
	    "Noord-Braband",
	    "Limburg"
	  ],
	  "default_country": [
	    "Nederland"
	  ]
	};
	nl.company = {
	  "suffix": [
	    "BV",
	    "V.O.F.",
	    "Group",
	    "en Zonen"
	  ]
	};
	nl.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "nl",
	    "com",
	    "net",
	    "org"
	  ]
	};
	nl.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ],
	  "supplemental": [
	    "abbas",
	    "abduco",
	    "abeo",
	    "abscido",
	    "absconditus",
	    "absens",
	    "absorbeo",
	    "absque",
	    "abstergo",
	    "absum",
	    "abundans",
	    "abutor",
	    "accedo",
	    "accendo",
	    "acceptus",
	    "accipio",
	    "accommodo",
	    "accusator",
	    "acer",
	    "acerbitas",
	    "acervus",
	    "acidus",
	    "acies",
	    "acquiro",
	    "acsi",
	    "adamo",
	    "adaugeo",
	    "addo",
	    "adduco",
	    "ademptio",
	    "adeo",
	    "adeptio",
	    "adfectus",
	    "adfero",
	    "adficio",
	    "adflicto",
	    "adhaero",
	    "adhuc",
	    "adicio",
	    "adimpleo",
	    "adinventitias",
	    "adipiscor",
	    "adiuvo",
	    "administratio",
	    "admiratio",
	    "admitto",
	    "admoneo",
	    "admoveo",
	    "adnuo",
	    "adopto",
	    "adsidue",
	    "adstringo",
	    "adsuesco",
	    "adsum",
	    "adulatio",
	    "adulescens",
	    "adultus",
	    "aduro",
	    "advenio",
	    "adversus",
	    "advoco",
	    "aedificium",
	    "aeger",
	    "aegre",
	    "aegrotatio",
	    "aegrus",
	    "aeneus",
	    "aequitas",
	    "aequus",
	    "aer",
	    "aestas",
	    "aestivus",
	    "aestus",
	    "aetas",
	    "aeternus",
	    "ager",
	    "aggero",
	    "aggredior",
	    "agnitio",
	    "agnosco",
	    "ago",
	    "ait",
	    "aiunt",
	    "alienus",
	    "alii",
	    "alioqui",
	    "aliqua",
	    "alius",
	    "allatus",
	    "alo",
	    "alter",
	    "altus",
	    "alveus",
	    "amaritudo",
	    "ambitus",
	    "ambulo",
	    "amicitia",
	    "amiculum",
	    "amissio",
	    "amita",
	    "amitto",
	    "amo",
	    "amor",
	    "amoveo",
	    "amplexus",
	    "amplitudo",
	    "amplus",
	    "ancilla",
	    "angelus",
	    "angulus",
	    "angustus",
	    "animadverto",
	    "animi",
	    "animus",
	    "annus",
	    "anser",
	    "ante",
	    "antea",
	    "antepono",
	    "antiquus",
	    "aperio",
	    "aperte",
	    "apostolus",
	    "apparatus",
	    "appello",
	    "appono",
	    "appositus",
	    "approbo",
	    "apto",
	    "aptus",
	    "apud",
	    "aqua",
	    "ara",
	    "aranea",
	    "arbitro",
	    "arbor",
	    "arbustum",
	    "arca",
	    "arceo",
	    "arcesso",
	    "arcus",
	    "argentum",
	    "argumentum",
	    "arguo",
	    "arma",
	    "armarium",
	    "armo",
	    "aro",
	    "ars",
	    "articulus",
	    "artificiose",
	    "arto",
	    "arx",
	    "ascisco",
	    "ascit",
	    "asper",
	    "aspicio",
	    "asporto",
	    "assentator",
	    "astrum",
	    "atavus",
	    "ater",
	    "atqui",
	    "atrocitas",
	    "atrox",
	    "attero",
	    "attollo",
	    "attonbitus",
	    "auctor",
	    "auctus",
	    "audacia",
	    "audax",
	    "audentia",
	    "audeo",
	    "audio",
	    "auditor",
	    "aufero",
	    "aureus",
	    "auris",
	    "aurum",
	    "aut",
	    "autem",
	    "autus",
	    "auxilium",
	    "avaritia",
	    "avarus",
	    "aveho",
	    "averto",
	    "avoco",
	    "baiulus",
	    "balbus",
	    "barba",
	    "bardus",
	    "basium",
	    "beatus",
	    "bellicus",
	    "bellum",
	    "bene",
	    "beneficium",
	    "benevolentia",
	    "benigne",
	    "bestia",
	    "bibo",
	    "bis",
	    "blandior",
	    "bonus",
	    "bos",
	    "brevis",
	    "cado",
	    "caecus",
	    "caelestis",
	    "caelum",
	    "calamitas",
	    "calcar",
	    "calco",
	    "calculus",
	    "callide",
	    "campana",
	    "candidus",
	    "canis",
	    "canonicus",
	    "canto",
	    "capillus",
	    "capio",
	    "capitulus",
	    "capto",
	    "caput",
	    "carbo",
	    "carcer",
	    "careo",
	    "caries",
	    "cariosus",
	    "caritas",
	    "carmen",
	    "carpo",
	    "carus",
	    "casso",
	    "caste",
	    "casus",
	    "catena",
	    "caterva",
	    "cattus",
	    "cauda",
	    "causa",
	    "caute",
	    "caveo",
	    "cavus",
	    "cedo",
	    "celebrer",
	    "celer",
	    "celo",
	    "cena",
	    "cenaculum",
	    "ceno",
	    "censura",
	    "centum",
	    "cerno",
	    "cernuus",
	    "certe",
	    "certo",
	    "certus",
	    "cervus",
	    "cetera",
	    "charisma",
	    "chirographum",
	    "cibo",
	    "cibus",
	    "cicuta",
	    "cilicium",
	    "cimentarius",
	    "ciminatio",
	    "cinis",
	    "circumvenio",
	    "cito",
	    "civis",
	    "civitas",
	    "clam",
	    "clamo",
	    "claro",
	    "clarus",
	    "claudeo",
	    "claustrum",
	    "clementia",
	    "clibanus",
	    "coadunatio",
	    "coaegresco",
	    "coepi",
	    "coerceo",
	    "cogito",
	    "cognatus",
	    "cognomen",
	    "cogo",
	    "cohaero",
	    "cohibeo",
	    "cohors",
	    "colligo",
	    "colloco",
	    "collum",
	    "colo",
	    "color",
	    "coma",
	    "combibo",
	    "comburo",
	    "comedo",
	    "comes",
	    "cometes",
	    "comis",
	    "comitatus",
	    "commemoro",
	    "comminor",
	    "commodo",
	    "communis",
	    "comparo",
	    "compello",
	    "complectus",
	    "compono",
	    "comprehendo",
	    "comptus",
	    "conatus",
	    "concedo",
	    "concido",
	    "conculco",
	    "condico",
	    "conduco",
	    "confero",
	    "confido",
	    "conforto",
	    "confugo",
	    "congregatio",
	    "conicio",
	    "coniecto",
	    "conitor",
	    "coniuratio",
	    "conor",
	    "conqueror",
	    "conscendo",
	    "conservo",
	    "considero",
	    "conspergo",
	    "constans",
	    "consuasor",
	    "contabesco",
	    "contego",
	    "contigo",
	    "contra",
	    "conturbo",
	    "conventus",
	    "convoco",
	    "copia",
	    "copiose",
	    "cornu",
	    "corona",
	    "corpus",
	    "correptius",
	    "corrigo",
	    "corroboro",
	    "corrumpo",
	    "coruscus",
	    "cotidie",
	    "crapula",
	    "cras",
	    "crastinus",
	    "creator",
	    "creber",
	    "crebro",
	    "credo",
	    "creo",
	    "creptio",
	    "crepusculum",
	    "cresco",
	    "creta",
	    "cribro",
	    "crinis",
	    "cruciamentum",
	    "crudelis",
	    "cruentus",
	    "crur",
	    "crustulum",
	    "crux",
	    "cubicularis",
	    "cubitum",
	    "cubo",
	    "cui",
	    "cuius",
	    "culpa",
	    "culpo",
	    "cultellus",
	    "cultura",
	    "cum",
	    "cunabula",
	    "cunae",
	    "cunctatio",
	    "cupiditas",
	    "cupio",
	    "cuppedia",
	    "cupressus",
	    "cur",
	    "cura",
	    "curatio",
	    "curia",
	    "curiositas",
	    "curis",
	    "curo",
	    "curriculum",
	    "currus",
	    "cursim",
	    "curso",
	    "cursus",
	    "curto",
	    "curtus",
	    "curvo",
	    "curvus",
	    "custodia",
	    "damnatio",
	    "damno",
	    "dapifer",
	    "debeo",
	    "debilito",
	    "decens",
	    "decerno",
	    "decet",
	    "decimus",
	    "decipio",
	    "decor",
	    "decretum",
	    "decumbo",
	    "dedecor",
	    "dedico",
	    "deduco",
	    "defaeco",
	    "defendo",
	    "defero",
	    "defessus",
	    "defetiscor",
	    "deficio",
	    "defigo",
	    "defleo",
	    "defluo",
	    "defungo",
	    "degenero",
	    "degero",
	    "degusto",
	    "deinde",
	    "delectatio",
	    "delego",
	    "deleo",
	    "delibero",
	    "delicate",
	    "delinquo",
	    "deludo",
	    "demens",
	    "demergo",
	    "demitto",
	    "demo",
	    "demonstro",
	    "demoror",
	    "demulceo",
	    "demum",
	    "denego",
	    "denique",
	    "dens",
	    "denuncio",
	    "denuo",
	    "deorsum",
	    "depereo",
	    "depono",
	    "depopulo",
	    "deporto",
	    "depraedor",
	    "deprecator",
	    "deprimo",
	    "depromo",
	    "depulso",
	    "deputo",
	    "derelinquo",
	    "derideo",
	    "deripio",
	    "desidero",
	    "desino",
	    "desipio",
	    "desolo",
	    "desparatus",
	    "despecto",
	    "despirmatio",
	    "infit",
	    "inflammatio",
	    "paens",
	    "patior",
	    "patria",
	    "patrocinor",
	    "patruus",
	    "pauci",
	    "paulatim",
	    "pauper",
	    "pax",
	    "peccatus",
	    "pecco",
	    "pecto",
	    "pectus",
	    "pecunia",
	    "pecus",
	    "peior",
	    "pel",
	    "ocer",
	    "socius",
	    "sodalitas",
	    "sol",
	    "soleo",
	    "solio",
	    "solitudo",
	    "solium",
	    "sollers",
	    "sollicito",
	    "solum",
	    "solus",
	    "solutio",
	    "solvo",
	    "somniculosus",
	    "somnus",
	    "sonitus",
	    "sono",
	    "sophismata",
	    "sopor",
	    "sordeo",
	    "sortitus",
	    "spargo",
	    "speciosus",
	    "spectaculum",
	    "speculum",
	    "sperno",
	    "spero",
	    "spes",
	    "spiculum",
	    "spiritus",
	    "spoliatio",
	    "sponte",
	    "stabilis",
	    "statim",
	    "statua",
	    "stella",
	    "stillicidium",
	    "stipes",
	    "stips",
	    "sto",
	    "strenuus",
	    "strues",
	    "studio",
	    "stultus",
	    "suadeo",
	    "suasoria",
	    "sub",
	    "subito",
	    "subiungo",
	    "sublime",
	    "subnecto",
	    "subseco",
	    "substantia",
	    "subvenio",
	    "succedo",
	    "succurro",
	    "sufficio",
	    "suffoco",
	    "suffragium",
	    "suggero",
	    "sui",
	    "sulum",
	    "sum",
	    "summa",
	    "summisse",
	    "summopere",
	    "sumo",
	    "sumptus",
	    "supellex",
	    "super",
	    "suppellex",
	    "supplanto",
	    "suppono",
	    "supra",
	    "surculus",
	    "surgo",
	    "sursum",
	    "suscipio",
	    "suspendo",
	    "sustineo",
	    "suus",
	    "synagoga",
	    "tabella",
	    "tabernus",
	    "tabesco",
	    "tabgo",
	    "tabula",
	    "taceo",
	    "tactus",
	    "taedium",
	    "talio",
	    "talis",
	    "talus",
	    "tam",
	    "tamdiu",
	    "tamen",
	    "tametsi",
	    "tamisium",
	    "tamquam",
	    "tandem",
	    "tantillus",
	    "tantum",
	    "tardus",
	    "tego",
	    "temeritas",
	    "temperantia",
	    "templum",
	    "temptatio",
	    "tempus",
	    "tenax",
	    "tendo",
	    "teneo",
	    "tener",
	    "tenuis",
	    "tenus",
	    "tepesco",
	    "tepidus",
	    "ter",
	    "terebro",
	    "teres",
	    "terga",
	    "tergeo",
	    "tergiversatio",
	    "tergo",
	    "tergum",
	    "termes",
	    "terminatio",
	    "tero",
	    "terra",
	    "terreo",
	    "territo",
	    "terror",
	    "tersus",
	    "tertius",
	    "testimonium",
	    "texo",
	    "textilis",
	    "textor",
	    "textus",
	    "thalassinus",
	    "theatrum",
	    "theca",
	    "thema",
	    "theologus",
	    "thermae",
	    "thesaurus",
	    "thesis",
	    "thorax",
	    "thymbra",
	    "thymum",
	    "tibi",
	    "timidus",
	    "timor",
	    "titulus",
	    "tolero",
	    "tollo",
	    "tondeo",
	    "tonsor",
	    "torqueo",
	    "torrens",
	    "tot",
	    "totidem",
	    "toties",
	    "totus",
	    "tracto",
	    "trado",
	    "traho",
	    "trans",
	    "tredecim",
	    "tremo",
	    "trepide",
	    "tres",
	    "tribuo",
	    "tricesimus",
	    "triduana",
	    "triginta",
	    "tripudio",
	    "tristis",
	    "triumphus",
	    "trucido",
	    "truculenter",
	    "tubineus",
	    "tui",
	    "tum",
	    "tumultus",
	    "tunc",
	    "turba",
	    "turbo",
	    "turpe",
	    "turpis",
	    "tutamen",
	    "tutis",
	    "tyrannus",
	    "uberrime",
	    "ubi",
	    "ulciscor",
	    "ullus",
	    "ulterius",
	    "ultio",
	    "ultra",
	    "umbra",
	    "umerus",
	    "umquam",
	    "una",
	    "unde",
	    "undique",
	    "universe",
	    "unus",
	    "urbanus",
	    "urbs",
	    "uredo",
	    "usitas",
	    "usque",
	    "ustilo",
	    "ustulo",
	    "usus",
	    "uter",
	    "uterque",
	    "utilis",
	    "utique",
	    "utor",
	    "utpote",
	    "utrimque",
	    "utroque",
	    "utrum",
	    "uxor",
	    "vaco",
	    "vacuus",
	    "vado",
	    "vae",
	    "valde",
	    "valens",
	    "valeo",
	    "valetudo",
	    "validus",
	    "vallum",
	    "vapulus",
	    "varietas",
	    "varius",
	    "vehemens",
	    "vel",
	    "velociter",
	    "velum",
	    "velut",
	    "venia",
	    "venio",
	    "ventito",
	    "ventosus",
	    "ventus",
	    "venustas",
	    "ver",
	    "verbera",
	    "verbum",
	    "vere",
	    "verecundia",
	    "vereor",
	    "vergo",
	    "veritas",
	    "vero",
	    "versus",
	    "verto",
	    "verumtamen",
	    "verus",
	    "vesco",
	    "vesica",
	    "vesper",
	    "vespillo",
	    "vester",
	    "vestigium",
	    "vestrum",
	    "vetus",
	    "via",
	    "vicinus",
	    "vicissitudo",
	    "victoria",
	    "victus",
	    "videlicet",
	    "video",
	    "viduata",
	    "viduo",
	    "vigilo",
	    "vigor",
	    "vilicus",
	    "vilis",
	    "vilitas",
	    "villa",
	    "vinco",
	    "vinculum",
	    "vindico",
	    "vinitor",
	    "vinum",
	    "vir",
	    "virga",
	    "virgo",
	    "viridis",
	    "viriliter",
	    "virtus",
	    "vis",
	    "viscus",
	    "vita",
	    "vitiosus",
	    "vitium",
	    "vito",
	    "vivo",
	    "vix",
	    "vobis",
	    "vociferor",
	    "voco",
	    "volaticus",
	    "volo",
	    "volubilis",
	    "voluntarius",
	    "volup",
	    "volutabrum",
	    "volva",
	    "vomer",
	    "vomica",
	    "vomito",
	    "vorago",
	    "vorax",
	    "voro",
	    "vos",
	    "votum",
	    "voveo",
	    "vox",
	    "vulariter",
	    "vulgaris",
	    "vulgivagus",
	    "vulgo",
	    "vulgus",
	    "vulnero",
	    "vulnus",
	    "vulpes",
	    "vulticulus",
	    "vultuosus",
	    "xiphias"
	  ]
	};
	nl.name = {
	  "first_name": [
	    "Amber",
	    "Anna",
	    "Anne",
	    "Anouk",
	    "Bas",
	    "Bram",
	    "Britt",
	    "Daan",
	    "Emma",
	    "Eva",
	    "Femke",
	    "Finn",
	    "Fleur",
	    "Iris",
	    "Isa",
	    "Jan",
	    "Jasper",
	    "Jayden",
	    "Jesse",
	    "Johannes",
	    "Julia",
	    "Julian",
	    "Kevin",
	    "Lars",
	    "Lieke",
	    "Lisa",
	    "Lotte",
	    "Lucas",
	    "Luuk",
	    "Maud",
	    "Max",
	    "Mike",
	    "Milan",
	    "Nick",
	    "Niels",
	    "Noa",
	    "Rick",
	    "Roos",
	    "Ruben",
	    "Sander",
	    "Sanne",
	    "Sem",
	    "Sophie",
	    "Stijn",
	    "Sven",
	    "Thijs",
	    "Thijs",
	    "Thomas",
	    "Tim",
	    "Tom"
	  ],
	  "tussenvoegsel": [
	    "van",
	    "van de",
	    "van den",
	    "van 't",
	    "van het",
	    "de",
	    "den"
	  ],
	  "last_name": [
	    "Bakker",
	    "Beek",
	    "Berg",
	    "Boer",
	    "Bos",
	    "Bosch",
	    "Brink",
	    "Broek",
	    "Brouwer",
	    "Bruin",
	    "Dam",
	    "Dekker",
	    "Dijk",
	    "Dijkstra",
	    "Graaf",
	    "Groot",
	    "Haan",
	    "Hendriks",
	    "Heuvel",
	    "Hoek",
	    "Jacobs",
	    "Jansen",
	    "Janssen",
	    "Jong",
	    "Klein",
	    "Kok",
	    "Koning",
	    "Koster",
	    "Leeuwen",
	    "Linden",
	    "Maas",
	    "Meer",
	    "Meijer",
	    "Mulder",
	    "Peters",
	    "Ruiter",
	    "Schouten",
	    "Smit",
	    "Smits",
	    "Stichting",
	    "Veen",
	    "Ven",
	    "Vermeulen",
	    "Visser",
	    "Vliet",
	    "Vos",
	    "Vries",
	    "Wal",
	    "Willems",
	    "Wit"
	  ],
	  "prefix": [
	    "Dhr.",
	    "Mevr. Dr.",
	    "Bsc",
	    "Msc",
	    "Prof."
	  ],
	  "suffix": [
	    "Jr.",
	    "Sr.",
	    "I",
	    "II",
	    "III",
	    "IV",
	    "V"
	  ],
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name} #{suffix}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{tussenvoegsel} #{last_name}",
	    "#{first_name} #{tussenvoegsel} #{last_name}"
	  ]
	};
	nl.phone_number = {
	  "formats": [
	    "(####) ######",
	    "##########",
	    "06########",
	    "06 #### ####"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var pl = {};
	module["exports"] = pl;
	pl.title = "Polish";
	pl.name = {
	  "first_name": [
	    "Aaron",
	    "Abraham",
	    "Adam",
	    "Adrian",
	    "Atanazy",
	    "Agaton",
	    "Alan",
	    "Albert",
	    "Aleksander",
	    "Aleksy",
	    "Alfred",
	    "Alwar",
	    "Ambroży",
	    "Anatol",
	    "Andrzej",
	    "Antoni",
	    "Apollinary",
	    "Apollo",
	    "Arkady",
	    "Arkadiusz",
	    "Archibald",
	    "Arystarch",
	    "Arnold",
	    "Arseniusz",
	    "Artur",
	    "August",
	    "Baldwin",
	    "Bazyli",
	    "Benedykt",
	    "Beniamin",
	    "Bernard",
	    "Bertrand",
	    "Bertram",
	    "Borys",
	    "Brajan",
	    "Bruno",
	    "Cezary",
	    "Cecyliusz",
	    "Karol",
	    "Krystian",
	    "Krzysztof",
	    "Klarencjusz",
	    "Klaudiusz",
	    "Klemens",
	    "Konrad",
	    "Konstanty",
	    "Konstantyn",
	    "Kornel",
	    "Korneliusz",
	    "Korneli",
	    "Cyryl",
	    "Cyrus",
	    "Damian",
	    "Daniel",
	    "Dariusz",
	    "Dawid",
	    "Dionizy",
	    "Demetriusz",
	    "Dominik",
	    "Donald",
	    "Dorian",
	    "Edgar",
	    "Edmund",
	    "Edward",
	    "Edwin",
	    "Efrem",
	    "Efraim",
	    "Eliasz",
	    "Eleazar",
	    "Emil",
	    "Emanuel",
	    "Erast",
	    "Ernest",
	    "Eugeniusz",
	    "Eustracjusz",
	    "Fabian",
	    "Feliks",
	    "Florian",
	    "Franciszek",
	    "Fryderyk",
	    "Gabriel",
	    "Gedeon",
	    "Galfryd",
	    "Jerzy",
	    "Gerald",
	    "Gerazym",
	    "Gilbert",
	    "Gonsalwy",
	    "Grzegorz",
	    "Gwido",
	    "Harald",
	    "Henryk",
	    "Herbert",
	    "Herman",
	    "Hilary",
	    "Horacy",
	    "Hubert",
	    "Hugo",
	    "Ignacy",
	    "Igor",
	    "Hilarion",
	    "Innocenty",
	    "Hipolit",
	    "Ireneusz",
	    "Erwin",
	    "Izaak",
	    "Izajasz",
	    "Izydor",
	    "Jakub",
	    "Jeremi",
	    "Jeremiasz",
	    "Hieronim",
	    "Gerald",
	    "Joachim",
	    "Jan",
	    "Janusz",
	    "Jonatan",
	    "Józef",
	    "Jozue",
	    "Julian",
	    "Juliusz",
	    "Justyn",
	    "Kalistrat",
	    "Kazimierz",
	    "Wawrzyniec",
	    "Laurenty",
	    "Laurencjusz",
	    "Łazarz",
	    "Leon",
	    "Leonard",
	    "Leonid",
	    "Leon",
	    "Ludwik",
	    "Łukasz",
	    "Lucjan",
	    "Magnus",
	    "Makary",
	    "Marceli",
	    "Marek",
	    "Marcin",
	    "Mateusz",
	    "Maurycy",
	    "Maksym",
	    "Maksymilian",
	    "Michał",
	    "Miron",
	    "Modest",
	    "Mojżesz",
	    "Natan",
	    "Natanael",
	    "Nazariusz",
	    "Nazary",
	    "Nestor",
	    "Mikołaj",
	    "Nikodem",
	    "Olaf",
	    "Oleg",
	    "Oliwier",
	    "Onufry",
	    "Orestes",
	    "Oskar",
	    "Ansgary",
	    "Osmund",
	    "Pankracy",
	    "Pantaleon",
	    "Patryk",
	    "Patrycjusz",
	    "Patrycy",
	    "Paweł",
	    "Piotr",
	    "Filemon",
	    "Filip",
	    "Platon",
	    "Polikarp",
	    "Porfiry",
	    "Porfiriusz",
	    "Prokles",
	    "Prokul",
	    "Prokop",
	    "Kwintyn",
	    "Randolf",
	    "Rafał",
	    "Rajmund",
	    "Reginald",
	    "Rajnold",
	    "Ryszard",
	    "Robert",
	    "Roderyk",
	    "Roger",
	    "Roland",
	    "Roman",
	    "Romeo",
	    "Reginald",
	    "Rudolf",
	    "Samson",
	    "Samuel",
	    "Salwator",
	    "Sebastian",
	    "Serafin",
	    "Sergiusz",
	    "Seweryn",
	    "Zygmunt",
	    "Sylwester",
	    "Szymon",
	    "Salomon",
	    "Spirydion",
	    "Stanisław",
	    "Szczepan",
	    "Stefan",
	    "Terencjusz",
	    "Teodor",
	    "Tomasz",
	    "Tymoteusz",
	    "Tobiasz",
	    "Walenty",
	    "Walentyn",
	    "Walerian",
	    "Walery",
	    "Wiktor",
	    "Wincenty",
	    "Witalis",
	    "Włodzimierz",
	    "Władysław",
	    "Błażej",
	    "Walter",
	    "Walgierz",
	    "Wacław",
	    "Wilfryd",
	    "Wilhelm",
	    "Ksawery",
	    "Ksenofont",
	    "Jerzy",
	    "Zachariasz",
	    "Zachary",
	    "Ada",
	    "Adelajda",
	    "Agata",
	    "Agnieszka",
	    "Agrypina",
	    "Aida",
	    "Aleksandra",
	    "Alicja",
	    "Alina",
	    "Amanda",
	    "Anastazja",
	    "Angela",
	    "Andżelika",
	    "Angelina",
	    "Anna",
	    "Hanna",
	    "—",
	    "Antonina",
	    "Ariadna",
	    "Aurora",
	    "Barbara",
	    "Beatrycze",
	    "Berta",
	    "Brygida",
	    "Kamila",
	    "Karolina",
	    "Karolina",
	    "Kornelia",
	    "Katarzyna",
	    "Cecylia",
	    "Karolina",
	    "Chloe",
	    "Krystyna",
	    "Klara",
	    "Klaudia",
	    "Klementyna",
	    "Konstancja",
	    "Koralia",
	    "Daria",
	    "Diana",
	    "Dina",
	    "Dorota",
	    "Edyta",
	    "Eleonora",
	    "Eliza",
	    "Elżbieta",
	    "Izabela",
	    "Elwira",
	    "Emilia",
	    "Estera",
	    "Eudoksja",
	    "Eudokia",
	    "Eugenia",
	    "Ewa",
	    "Ewelina",
	    "Ferdynanda",
	    "Florencja",
	    "Franciszka",
	    "Gabriela",
	    "Gertruda",
	    "Gloria",
	    "Gracja",
	    "Jadwiga",
	    "Helena",
	    "Henryka",
	    "Nadzieja",
	    "Ida",
	    "Ilona",
	    "Helena",
	    "Irena",
	    "Irma",
	    "Izabela",
	    "Izolda",
	    "Jakubina",
	    "Joanna",
	    "Janina",
	    "Żaneta",
	    "Joanna",
	    "Ginewra",
	    "Józefina",
	    "Judyta",
	    "Julia",
	    "Julia",
	    "Julita",
	    "Justyna",
	    "Kira",
	    "Cyra",
	    "Kleopatra",
	    "Larysa",
	    "Laura",
	    "Laurencja",
	    "Laurentyna",
	    "Lea",
	    "Leila",
	    "Eleonora",
	    "Liliana",
	    "Lilianna",
	    "Lilia",
	    "Lilla",
	    "Liza",
	    "Eliza",
	    "Laura",
	    "Ludwika",
	    "Luiza",
	    "Łucja",
	    "Lucja",
	    "Lidia",
	    "Amabela",
	    "Magdalena",
	    "Malwina",
	    "Małgorzata",
	    "Greta",
	    "Marianna",
	    "Maryna",
	    "Marta",
	    "Martyna",
	    "Maria",
	    "Matylda",
	    "Maja",
	    "Maja",
	    "Melania",
	    "Michalina",
	    "Monika",
	    "Nadzieja",
	    "Noemi",
	    "Natalia",
	    "Nikola",
	    "Nina",
	    "Olga",
	    "Olimpia",
	    "Oliwia",
	    "Ofelia",
	    "Patrycja",
	    "Paula",
	    "Pelagia",
	    "Penelopa",
	    "Filipa",
	    "Paulina",
	    "Rachela",
	    "Rebeka",
	    "Regina",
	    "Renata",
	    "Rozalia",
	    "Róża",
	    "Roksana",
	    "Rufina",
	    "Ruta",
	    "Sabina",
	    "Sara",
	    "Serafina",
	    "Sybilla",
	    "Sylwia",
	    "Zofia",
	    "Stella",
	    "Stefania",
	    "Zuzanna",
	    "Tamara",
	    "Tacjana",
	    "Tekla",
	    "Teodora",
	    "Teresa",
	    "Walentyna",
	    "Waleria",
	    "Wanesa",
	    "Wiara",
	    "Weronika",
	    "Wiktoria",
	    "Wirginia",
	    "Bibiana",
	    "Bibianna",
	    "Wanda",
	    "Wilhelmina",
	    "Ksawera",
	    "Ksenia",
	    "Zoe"
	  ],
	  "last_name": [
	    "Adamczak",
	    "Adamczyk",
	    "Adamek",
	    "Adamiak",
	    "Adamiec",
	    "Adamowicz",
	    "Adamski",
	    "Adamus",
	    "Aleksandrowicz",
	    "Andrzejczak",
	    "Andrzejewski",
	    "Antczak",
	    "Augustyn",
	    "Augustyniak",
	    "Bagiński",
	    "Balcerzak",
	    "Banach",
	    "Banasiak",
	    "Banasik",
	    "Banaś",
	    "Baran",
	    "Baranowski",
	    "Barański",
	    "Bartczak",
	    "Bartkowiak",
	    "Bartnik",
	    "Bartosik",
	    "Bednarczyk",
	    "Bednarek",
	    "Bednarski",
	    "Bednarz",
	    "Białas",
	    "Białek",
	    "Białkowski",
	    "Bielak",
	    "Bielawski",
	    "Bielecki",
	    "Bielski",
	    "Bieniek",
	    "Biernacki",
	    "Biernat",
	    "Bieńkowski",
	    "Bilski",
	    "Bober",
	    "Bochenek",
	    "Bogucki",
	    "Bogusz",
	    "Borek",
	    "Borkowski",
	    "Borowiec",
	    "Borowski",
	    "Bożek",
	    "Broda",
	    "Brzeziński",
	    "Brzozowski",
	    "Buczek",
	    "Buczkowski",
	    "Buczyński",
	    "Budziński",
	    "Budzyński",
	    "Bujak",
	    "Bukowski",
	    "Burzyński",
	    "Bąk",
	    "Bąkowski",
	    "Błaszczak",
	    "Błaszczyk",
	    "Cebula",
	    "Chmiel",
	    "Chmielewski",
	    "Chmura",
	    "Chojnacki",
	    "Chojnowski",
	    "Cholewa",
	    "Chrzanowski",
	    "Chudzik",
	    "Cichocki",
	    "Cichoń",
	    "Cichy",
	    "Ciesielski",
	    "Cieśla",
	    "Cieślak",
	    "Cieślik",
	    "Ciszewski",
	    "Cybulski",
	    "Cygan",
	    "Czaja",
	    "Czajka",
	    "Czajkowski",
	    "Czapla",
	    "Czarnecki",
	    "Czech",
	    "Czechowski",
	    "Czekaj",
	    "Czerniak",
	    "Czerwiński",
	    "Czyż",
	    "Czyżewski",
	    "Dec",
	    "Dobosz",
	    "Dobrowolski",
	    "Dobrzyński",
	    "Domagała",
	    "Domański",
	    "Dominiak",
	    "Drabik",
	    "Drozd",
	    "Drozdowski",
	    "Drzewiecki",
	    "Dróżdż",
	    "Dubiel",
	    "Duda",
	    "Dudek",
	    "Dudziak",
	    "Dudzik",
	    "Dudziński",
	    "Duszyński",
	    "Dziedzic",
	    "Dziuba",
	    "Dąbek",
	    "Dąbkowski",
	    "Dąbrowski",
	    "Dębowski",
	    "Dębski",
	    "Długosz",
	    "Falkowski",
	    "Fijałkowski",
	    "Filipek",
	    "Filipiak",
	    "Filipowicz",
	    "Flak",
	    "Flis",
	    "Florczak",
	    "Florek",
	    "Frankowski",
	    "Frąckowiak",
	    "Frączek",
	    "Frątczak",
	    "Furman",
	    "Gadomski",
	    "Gajda",
	    "Gajewski",
	    "Gaweł",
	    "Gawlik",
	    "Gawron",
	    "Gawroński",
	    "Gałka",
	    "Gałązka",
	    "Gil",
	    "Godlewski",
	    "Golec",
	    "Gołąb",
	    "Gołębiewski",
	    "Gołębiowski",
	    "Grabowski",
	    "Graczyk",
	    "Grochowski",
	    "Grudzień",
	    "Gruszczyński",
	    "Gruszka",
	    "Grzegorczyk",
	    "Grzelak",
	    "Grzesiak",
	    "Grzesik",
	    "Grześkowiak",
	    "Grzyb",
	    "Grzybowski",
	    "Grzywacz",
	    "Gutowski",
	    "Guzik",
	    "Gwóźdź",
	    "Góra",
	    "Góral",
	    "Górecki",
	    "Górka",
	    "Górniak",
	    "Górny",
	    "Górski",
	    "Gąsior",
	    "Gąsiorowski",
	    "Głogowski",
	    "Głowacki",
	    "Głąb",
	    "Hajduk",
	    "Herman",
	    "Iwański",
	    "Izdebski",
	    "Jabłoński",
	    "Jackowski",
	    "Jagielski",
	    "Jagiełło",
	    "Jagodziński",
	    "Jakubiak",
	    "Jakubowski",
	    "Janas",
	    "Janiak",
	    "Janicki",
	    "Janik",
	    "Janiszewski",
	    "Jankowiak",
	    "Jankowski",
	    "Janowski",
	    "Janus",
	    "Janusz",
	    "Januszewski",
	    "Jaros",
	    "Jarosz",
	    "Jarząbek",
	    "Jasiński",
	    "Jastrzębski",
	    "Jaworski",
	    "Jaśkiewicz",
	    "Jezierski",
	    "Jurek",
	    "Jurkiewicz",
	    "Jurkowski",
	    "Juszczak",
	    "Jóźwiak",
	    "Jóźwik",
	    "Jędrzejczak",
	    "Jędrzejczyk",
	    "Jędrzejewski",
	    "Kacprzak",
	    "Kaczmarczyk",
	    "Kaczmarek",
	    "Kaczmarski",
	    "Kaczor",
	    "Kaczorowski",
	    "Kaczyński",
	    "Kaleta",
	    "Kalinowski",
	    "Kalisz",
	    "Kamiński",
	    "Kania",
	    "Kaniewski",
	    "Kapusta",
	    "Karaś",
	    "Karczewski",
	    "Karpiński",
	    "Karwowski",
	    "Kasperek",
	    "Kasprzak",
	    "Kasprzyk",
	    "Kaszuba",
	    "Kawa",
	    "Kawecki",
	    "Kałuża",
	    "Kaźmierczak",
	    "Kiełbasa",
	    "Kisiel",
	    "Kita",
	    "Klimczak",
	    "Klimek",
	    "Kmiecik",
	    "Kmieć",
	    "Knapik",
	    "Kobus",
	    "Kogut",
	    "Kolasa",
	    "Komorowski",
	    "Konieczna",
	    "Konieczny",
	    "Konopka",
	    "Kopczyński",
	    "Koper",
	    "Kopeć",
	    "Korzeniowski",
	    "Kos",
	    "Kosiński",
	    "Kosowski",
	    "Kostecki",
	    "Kostrzewa",
	    "Kot",
	    "Kotowski",
	    "Kowal",
	    "Kowalczuk",
	    "Kowalczyk",
	    "Kowalewski",
	    "Kowalik",
	    "Kowalski",
	    "Koza",
	    "Kozak",
	    "Kozieł",
	    "Kozioł",
	    "Kozłowski",
	    "Kołakowski",
	    "Kołodziej",
	    "Kołodziejczyk",
	    "Kołodziejski",
	    "Krajewski",
	    "Krakowiak",
	    "Krawczyk",
	    "Krawiec",
	    "Kruk",
	    "Krukowski",
	    "Krupa",
	    "Krupiński",
	    "Kruszewski",
	    "Krysiak",
	    "Krzemiński",
	    "Krzyżanowski",
	    "Król",
	    "Królikowski",
	    "Książek",
	    "Kubacki",
	    "Kubiak",
	    "Kubica",
	    "Kubicki",
	    "Kubik",
	    "Kuc",
	    "Kucharczyk",
	    "Kucharski",
	    "Kuchta",
	    "Kuciński",
	    "Kuczyński",
	    "Kujawa",
	    "Kujawski",
	    "Kula",
	    "Kulesza",
	    "Kulig",
	    "Kulik",
	    "Kuliński",
	    "Kurek",
	    "Kurowski",
	    "Kuś",
	    "Kwaśniewski",
	    "Kwiatkowski",
	    "Kwiecień",
	    "Kwieciński",
	    "Kędzierski",
	    "Kędziora",
	    "Kępa",
	    "Kłos",
	    "Kłosowski",
	    "Lach",
	    "Laskowski",
	    "Lasota",
	    "Lech",
	    "Lenart",
	    "Lesiak",
	    "Leszczyński",
	    "Lewandowski",
	    "Lewicki",
	    "Leśniak",
	    "Leśniewski",
	    "Lipiński",
	    "Lipka",
	    "Lipski",
	    "Lis",
	    "Lisiecki",
	    "Lisowski",
	    "Maciejewski",
	    "Maciąg",
	    "Mackiewicz",
	    "Madej",
	    "Maj",
	    "Majcher",
	    "Majchrzak",
	    "Majewski",
	    "Majka",
	    "Makowski",
	    "Malec",
	    "Malicki",
	    "Malinowski",
	    "Maliszewski",
	    "Marchewka",
	    "Marciniak",
	    "Marcinkowski",
	    "Marczak",
	    "Marek",
	    "Markiewicz",
	    "Markowski",
	    "Marszałek",
	    "Marzec",
	    "Masłowski",
	    "Matusiak",
	    "Matuszak",
	    "Matuszewski",
	    "Matysiak",
	    "Mazur",
	    "Mazurek",
	    "Mazurkiewicz",
	    "Maćkowiak",
	    "Małecki",
	    "Małek",
	    "Maślanka",
	    "Michalak",
	    "Michalczyk",
	    "Michalik",
	    "Michalski",
	    "Michałek",
	    "Michałowski",
	    "Mielczarek",
	    "Mierzejewski",
	    "Mika",
	    "Mikołajczak",
	    "Mikołajczyk",
	    "Mikulski",
	    "Milczarek",
	    "Milewski",
	    "Miller",
	    "Misiak",
	    "Misztal",
	    "Miśkiewicz",
	    "Modzelewski",
	    "Molenda",
	    "Morawski",
	    "Motyka",
	    "Mroczek",
	    "Mroczkowski",
	    "Mrozek",
	    "Mróz",
	    "Mucha",
	    "Murawski",
	    "Musiał",
	    "Muszyński",
	    "Młynarczyk",
	    "Napierała",
	    "Nawrocki",
	    "Nawrot",
	    "Niedziela",
	    "Niedzielski",
	    "Niedźwiecki",
	    "Niemczyk",
	    "Niemiec",
	    "Niewiadomski",
	    "Noga",
	    "Nowacki",
	    "Nowaczyk",
	    "Nowak",
	    "Nowakowski",
	    "Nowicki",
	    "Nowiński",
	    "Olczak",
	    "Olejniczak",
	    "Olejnik",
	    "Olszewski",
	    "Orzechowski",
	    "Orłowski",
	    "Osiński",
	    "Ossowski",
	    "Ostrowski",
	    "Owczarek",
	    "Paczkowski",
	    "Pająk",
	    "Pakuła",
	    "Paluch",
	    "Panek",
	    "Partyka",
	    "Pasternak",
	    "Paszkowski",
	    "Pawelec",
	    "Pawlak",
	    "Pawlicki",
	    "Pawlik",
	    "Pawlikowski",
	    "Pawłowski",
	    "Pałka",
	    "Piasecki",
	    "Piechota",
	    "Piekarski",
	    "Pietras",
	    "Pietruszka",
	    "Pietrzak",
	    "Pietrzyk",
	    "Pilarski",
	    "Pilch",
	    "Piotrowicz",
	    "Piotrowski",
	    "Piwowarczyk",
	    "Piórkowski",
	    "Piątek",
	    "Piątkowski",
	    "Piłat",
	    "Pluta",
	    "Podgórski",
	    "Polak",
	    "Popławski",
	    "Porębski",
	    "Prokop",
	    "Prus",
	    "Przybylski",
	    "Przybysz",
	    "Przybył",
	    "Przybyła",
	    "Ptak",
	    "Puchalski",
	    "Pytel",
	    "Płonka",
	    "Raczyński",
	    "Radecki",
	    "Radomski",
	    "Rak",
	    "Rakowski",
	    "Ratajczak",
	    "Robak",
	    "Rogala",
	    "Rogalski",
	    "Rogowski",
	    "Rojek",
	    "Romanowski",
	    "Rosa",
	    "Rosiak",
	    "Rosiński",
	    "Ruciński",
	    "Rudnicki",
	    "Rudziński",
	    "Rudzki",
	    "Rusin",
	    "Rutkowski",
	    "Rybak",
	    "Rybarczyk",
	    "Rybicki",
	    "Rzepka",
	    "Różański",
	    "Różycki",
	    "Sadowski",
	    "Sawicki",
	    "Serafin",
	    "Siedlecki",
	    "Sienkiewicz",
	    "Sieradzki",
	    "Sikora",
	    "Sikorski",
	    "Sitek",
	    "Siwek",
	    "Skalski",
	    "Skiba",
	    "Skibiński",
	    "Skoczylas",
	    "Skowron",
	    "Skowronek",
	    "Skowroński",
	    "Skrzypczak",
	    "Skrzypek",
	    "Skóra",
	    "Smoliński",
	    "Sobczak",
	    "Sobczyk",
	    "Sobieraj",
	    "Sobolewski",
	    "Socha",
	    "Sochacki",
	    "Sokołowski",
	    "Sokół",
	    "Sosnowski",
	    "Sowa",
	    "Sowiński",
	    "Sołtys",
	    "Sołtysiak",
	    "Sroka",
	    "Stachowiak",
	    "Stachowicz",
	    "Stachura",
	    "Stachurski",
	    "Stanek",
	    "Staniszewski",
	    "Stanisławski",
	    "Stankiewicz",
	    "Stasiak",
	    "Staszewski",
	    "Stawicki",
	    "Stec",
	    "Stefaniak",
	    "Stefański",
	    "Stelmach",
	    "Stolarczyk",
	    "Stolarski",
	    "Strzelczyk",
	    "Strzelecki",
	    "Stępień",
	    "Stępniak",
	    "Surma",
	    "Suski",
	    "Szafrański",
	    "Szatkowski",
	    "Szczepaniak",
	    "Szczepanik",
	    "Szczepański",
	    "Szczerba",
	    "Szcześniak",
	    "Szczygieł",
	    "Szczęsna",
	    "Szczęsny",
	    "Szeląg",
	    "Szewczyk",
	    "Szostak",
	    "Szulc",
	    "Szwarc",
	    "Szwed",
	    "Szydłowski",
	    "Szymański",
	    "Szymczak",
	    "Szymczyk",
	    "Szymkowiak",
	    "Szyszka",
	    "Sławiński",
	    "Słowik",
	    "Słowiński",
	    "Tarnowski",
	    "Tkaczyk",
	    "Tokarski",
	    "Tomala",
	    "Tomaszewski",
	    "Tomczak",
	    "Tomczyk",
	    "Tracz",
	    "Trojanowski",
	    "Trzciński",
	    "Trzeciak",
	    "Turek",
	    "Twardowski",
	    "Urban",
	    "Urbanek",
	    "Urbaniak",
	    "Urbanowicz",
	    "Urbańczyk",
	    "Urbański",
	    "Walczak",
	    "Walkowiak",
	    "Warchoł",
	    "Wasiak",
	    "Wasilewski",
	    "Wawrzyniak",
	    "Wesołowski",
	    "Wieczorek",
	    "Wierzbicki",
	    "Wilczek",
	    "Wilczyński",
	    "Wilk",
	    "Winiarski",
	    "Witczak",
	    "Witek",
	    "Witkowski",
	    "Wiącek",
	    "Więcek",
	    "Więckowski",
	    "Wiśniewski",
	    "Wnuk",
	    "Wojciechowski",
	    "Wojtas",
	    "Wojtasik",
	    "Wojtczak",
	    "Wojtkowiak",
	    "Wolak",
	    "Woliński",
	    "Wolny",
	    "Wolski",
	    "Woś",
	    "Woźniak",
	    "Wrona",
	    "Wroński",
	    "Wróbel",
	    "Wróblewski",
	    "Wypych",
	    "Wysocki",
	    "Wyszyński",
	    "Wójcicki",
	    "Wójcik",
	    "Wójtowicz",
	    "Wąsik",
	    "Węgrzyn",
	    "Włodarczyk",
	    "Włodarski",
	    "Zaborowski",
	    "Zabłocki",
	    "Zagórski",
	    "Zając",
	    "Zajączkowski",
	    "Zakrzewski",
	    "Zalewski",
	    "Zaremba",
	    "Zarzycki",
	    "Zaręba",
	    "Zawada",
	    "Zawadzki",
	    "Zdunek",
	    "Zieliński",
	    "Zielonka",
	    "Ziółkowski",
	    "Zięba",
	    "Ziętek",
	    "Zwoliński",
	    "Zych",
	    "Zygmunt",
	    "Łapiński",
	    "Łuczak",
	    "Łukasiewicz",
	    "Łukasik",
	    "Łukaszewski",
	    "Śliwa",
	    "Śliwiński",
	    "Ślusarczyk",
	    "Świderski",
	    "Świerczyński",
	    "Świątek",
	    "Żak",
	    "Żebrowski",
	    "Żmuda",
	    "Żuk",
	    "Żukowski",
	    "Żurawski",
	    "Żurek",
	    "Żyła"
	  ],
	  "prefix": [
	    "Pan",
	    "Pani"
	  ],
	  "title": {
	    "descriptor": [
	      "Lead",
	      "Senior",
	      "Direct",
	      "Corporate",
	      "Dynamic",
	      "Future",
	      "Product",
	      "National",
	      "Regional",
	      "District",
	      "Central",
	      "Global",
	      "Customer",
	      "Investor",
	      "Dynamic",
	      "International",
	      "Legacy",
	      "Forward",
	      "Internal",
	      "Human",
	      "Chief",
	      "Principal"
	    ],
	    "level": [
	      "Solutions",
	      "Program",
	      "Brand",
	      "Security",
	      "Research",
	      "Marketing",
	      "Directives",
	      "Implementation",
	      "Integration",
	      "Functionality",
	      "Response",
	      "Paradigm",
	      "Tactics",
	      "Identity",
	      "Markets",
	      "Group",
	      "Division",
	      "Applications",
	      "Optimization",
	      "Operations",
	      "Infrastructure",
	      "Intranet",
	      "Communications",
	      "Web",
	      "Branding",
	      "Quality",
	      "Assurance",
	      "Mobility",
	      "Accounts",
	      "Data",
	      "Creative",
	      "Configuration",
	      "Accountability",
	      "Interactions",
	      "Factors",
	      "Usability",
	      "Metrics"
	    ],
	    "job": [
	      "Supervisor",
	      "Associate",
	      "Executive",
	      "Liason",
	      "Officer",
	      "Manager",
	      "Engineer",
	      "Specialist",
	      "Director",
	      "Coordinator",
	      "Administrator",
	      "Architect",
	      "Analyst",
	      "Designer",
	      "Planner",
	      "Orchestrator",
	      "Technician",
	      "Developer",
	      "Producer",
	      "Consultant",
	      "Assistant",
	      "Facilitator",
	      "Agent",
	      "Representative",
	      "Strategist"
	    ]
	  },
	  "name": [
	    "#{prefix} #{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name}"
	  ]
	};
	pl.address = {
	  "country": [
	    "Afganistan",
	    "Albania",
	    "Algieria",
	    "Andora",
	    "Angola",
	    "Antigua i Barbuda",
	    "Arabia Saudyjska",
	    "Argentyna",
	    "Armenia",
	    "Australia",
	    "Austria",
	    "Azerbejdżan",
	    "Bahamy",
	    "Bahrajn",
	    "Bangladesz",
	    "Barbados",
	    "Belgia",
	    "Belize",
	    "Benin",
	    "Bhutan",
	    "Białoruś",
	    "Birma",
	    "Boliwia",
	    "Sucre",
	    "Bośnia i Hercegowina",
	    "Botswana",
	    "Brazylia",
	    "Brunei",
	    "Bułgaria",
	    "Burkina Faso",
	    "Burundi",
	    "Chile",
	    "Chiny",
	    "Chorwacja",
	    "Cypr",
	    "Czad",
	    "Czarnogóra",
	    "Czechy",
	    "Dania",
	    "Demokratyczna Republika Konga",
	    "Dominika",
	    "Dominikana",
	    "Dżibuti",
	    "Egipt",
	    "Ekwador",
	    "Erytrea",
	    "Estonia",
	    "Etiopia",
	    "Fidżi",
	    "Filipiny",
	    "Finlandia",
	    "Francja",
	    "Gabon",
	    "Gambia",
	    "Ghana",
	    "Grecja",
	    "Grenada",
	    "Gruzja",
	    "Gujana",
	    "Gwatemala",
	    "Gwinea",
	    "Gwinea Bissau",
	    "Gwinea Równikowa",
	    "Haiti",
	    "Hiszpania",
	    "Holandia",
	    "Haga",
	    "Honduras",
	    "Indie",
	    "Indonezja",
	    "Irak",
	    "Iran",
	    "Irlandia",
	    "Islandia",
	    "Izrael",
	    "Jamajka",
	    "Japonia",
	    "Jemen",
	    "Jordania",
	    "Kambodża",
	    "Kamerun",
	    "Kanada",
	    "Katar",
	    "Kazachstan",
	    "Kenia",
	    "Kirgistan",
	    "Kiribati",
	    "Kolumbia",
	    "Komory",
	    "Kongo",
	    "Korea Południowa",
	    "Korea Północna",
	    "Kostaryka",
	    "Kuba",
	    "Kuwejt",
	    "Laos",
	    "Lesotho",
	    "Liban",
	    "Liberia",
	    "Libia",
	    "Liechtenstein",
	    "Litwa",
	    "Luksemburg",
	    "Łotwa",
	    "Macedonia",
	    "Madagaskar",
	    "Malawi",
	    "Malediwy",
	    "Malezja",
	    "Mali",
	    "Malta",
	    "Maroko",
	    "Mauretania",
	    "Mauritius",
	    "Meksyk",
	    "Mikronezja",
	    "Mołdawia",
	    "Monako",
	    "Mongolia",
	    "Mozambik",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Niemcy",
	    "Niger",
	    "Nigeria",
	    "Nikaragua",
	    "Norwegia",
	    "Nowa Zelandia",
	    "Oman",
	    "Pakistan",
	    "Palau",
	    "Panama",
	    "Papua-Nowa Gwinea",
	    "Paragwaj",
	    "Peru",
	    "Polska",
	    "322 575",
	    "Portugalia",
	    "Republika Południowej Afryki",
	    "Republika Środkowoafrykańska",
	    "Republika Zielonego Przylądka",
	    "Rosja",
	    "Rumunia",
	    "Rwanda",
	    "Saint Kitts i Nevis",
	    "Saint Lucia",
	    "Saint Vincent i Grenadyny",
	    "Salwador",
	    "Samoa",
	    "San Marino",
	    "Senegal",
	    "Serbia",
	    "Seszele",
	    "Sierra Leone",
	    "Singapur",
	    "Słowacja",
	    "Słowenia",
	    "Somalia",
	    "Sri Lanka",
	    "Stany Zjednoczone",
	    "Suazi",
	    "Sudan",
	    "Sudan Południowy",
	    "Surinam",
	    "Syria",
	    "Szwajcaria",
	    "Szwecja",
	    "Tadżykistan",
	    "Tajlandia",
	    "Tanzania",
	    "Timor Wschodni",
	    "Togo",
	    "Tonga",
	    "Trynidad i Tobago",
	    "Tunezja",
	    "Turcja",
	    "Turkmenistan",
	    "Tuvalu",
	    "Funafuti",
	    "Uganda",
	    "Ukraina",
	    "Urugwaj",
	    2008,
	    "Uzbekistan",
	    "Vanuatu",
	    "Watykan",
	    "Wenezuela",
	    "Węgry",
	    "Wielka Brytania",
	    "Wietnam",
	    "Włochy",
	    "Wybrzeże Kości Słoniowej",
	    "Wyspy Marshalla",
	    "Wyspy Salomona",
	    "Wyspy Świętego Tomasza i Książęca",
	    "Zambia",
	    "Zimbabwe",
	    "Zjednoczone Emiraty Arabskie"
	  ],
	  "building_number": [
	    "#####",
	    "####",
	    "###"
	  ],
	  "street_prefix": [
	    "ul.",
	    "al."
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "Suite ###"
	  ],
	  "postcode": [
	    "##-###"
	  ],
	  "state": [
	    "Dolnośląskie",
	    "Kujawsko-pomorskie",
	    "Lubelskie",
	    "Lubuskie",
	    "Łódzkie",
	    "Małopolskie",
	    "Mazowieckie",
	    "Opolskie",
	    "Podkarpackie",
	    "Podlaskie",
	    "Pomorskie",
	    "Śląskie",
	    "Świętokrzyskie",
	    "Warmińsko-mazurskie",
	    "Wielkopolskie",
	    "Zachodniopomorskie"
	  ],
	  "state_abbr": [
	    "DŚ",
	    "KP",
	    "LB",
	    "LS",
	    "ŁD",
	    "MP",
	    "MZ",
	    "OP",
	    "PK",
	    "PL",
	    "PM",
	    "ŚL",
	    "ŚK",
	    "WM",
	    "WP",
	    "ZP"
	  ],
	  "city_name": [
	    "Aleksandrów Kujawski",
	    "Aleksandrów Łódzki",
	    "Alwernia",
	    "Andrychów",
	    "Annopol",
	    "Augustów",
	    "Babimost",
	    "Baborów",
	    "Baranów Sandomierski",
	    "Barcin",
	    "Barczewo",
	    "Bardo",
	    "Barlinek",
	    "Bartoszyce",
	    "Barwice",
	    "Bełchatów",
	    "Bełżyce",
	    "Będzin",
	    "Biała",
	    "Biała Piska",
	    "Biała Podlaska",
	    "Biała Rawska",
	    "Białobrzegi",
	    "Białogard",
	    "Biały Bór",
	    "Białystok",
	    "Biecz",
	    "Bielawa",
	    "Bielsk Podlaski",
	    "Bielsko-Biała",
	    "Bieruń",
	    "Bierutów",
	    "Bieżuń",
	    "Biłgoraj",
	    "Biskupiec",
	    "Bisztynek",
	    "Blachownia",
	    "Błaszki",
	    "Błażowa",
	    "Błonie",
	    "Bobolice",
	    "Bobowa",
	    "Bochnia",
	    "Bodzentyn",
	    "Bogatynia",
	    "Boguchwała",
	    "Boguszów-Gorce",
	    "Bojanowo",
	    "Bolesławiec",
	    "Bolków",
	    "Borek Wielkopolski",
	    "Borne Sulinowo",
	    "Braniewo",
	    "Brańsk",
	    "Brodnica",
	    "Brok",
	    "Brusy",
	    "Brwinów",
	    "Brzeg",
	    "Brzeg Dolny",
	    "Brzesko",
	    "Brzeszcze",
	    "Brześć Kujawski",
	    "Brzeziny",
	    "Brzostek",
	    "Brzozów",
	    "Buk",
	    "Bukowno",
	    "Busko-Zdrój",
	    "Bychawa",
	    "Byczyna",
	    "Bydgoszcz",
	    "Bystrzyca Kłodzka",
	    "Bytom",
	    "Bytom Odrzański",
	    "Bytów",
	    "Cedynia",
	    "Chełm",
	    "Chełmek",
	    "Chełmno",
	    "Chełmża",
	    "Chęciny",
	    "Chmielnik",
	    "Chocianów",
	    "Chociwel",
	    "Chodecz",
	    "Chodzież",
	    "Chojna",
	    "Chojnice",
	    "Chojnów",
	    "Choroszcz",
	    "Chorzele",
	    "Chorzów",
	    "Choszczno",
	    "Chrzanów",
	    "Ciechanowiec",
	    "Ciechanów",
	    "Ciechocinek",
	    "Cieszanów",
	    "Cieszyn",
	    "Ciężkowice",
	    "Cybinka",
	    "Czaplinek",
	    "Czarna Białostocka",
	    "Czarna Woda",
	    "Czarne",
	    "Czarnków",
	    "Czchów",
	    "Czechowice-Dziedzice",
	    "Czeladź",
	    "Czempiń",
	    "Czerniejewo",
	    "Czersk",
	    "Czerwieńsk",
	    "Czerwionka-Leszczyny",
	    "Częstochowa",
	    "Człopa",
	    "Człuchów",
	    "Czyżew",
	    "Ćmielów",
	    "Daleszyce",
	    "Darłowo",
	    "Dąbie",
	    "Dąbrowa Białostocka",
	    "Dąbrowa Górnicza",
	    "Dąbrowa Tarnowska",
	    "Debrzno",
	    "Dębica",
	    "Dęblin",
	    "Dębno",
	    "Dobczyce",
	    "Dobiegniew",
	    "Dobra (powiat łobeski)",
	    "Dobra (powiat turecki)",
	    "Dobre Miasto",
	    "Dobrodzień",
	    "Dobrzany",
	    "Dobrzyń nad Wisłą",
	    "Dolsk",
	    "Drawno",
	    "Drawsko Pomorskie",
	    "Drezdenko",
	    "Drobin",
	    "Drohiczyn",
	    "Drzewica",
	    "Dukla",
	    "Duszniki-Zdrój",
	    "Dynów",
	    "Działdowo",
	    "Działoszyce",
	    "Działoszyn",
	    "Dzierzgoń",
	    "Dzierżoniów",
	    "Dziwnów",
	    "Elbląg",
	    "Ełk",
	    "Frampol",
	    "Frombork",
	    "Garwolin",
	    "Gąbin",
	    "Gdańsk",
	    "Gdynia",
	    "Giżycko",
	    "Glinojeck",
	    "Gliwice",
	    "Głogów",
	    "Głogów Małopolski",
	    "Głogówek",
	    "Głowno",
	    "Głubczyce",
	    "Głuchołazy",
	    "Głuszyca",
	    "Gniew",
	    "Gniewkowo",
	    "Gniezno",
	    "Gogolin",
	    "Golczewo",
	    "Goleniów",
	    "Golina",
	    "Golub-Dobrzyń",
	    "Gołańcz",
	    "Gołdap",
	    "Goniądz",
	    "Gorlice",
	    "Gorzów Śląski",
	    "Gorzów Wielkopolski",
	    "Gostynin",
	    "Gostyń",
	    "Gościno",
	    "Gozdnica",
	    "Góra",
	    "Góra Kalwaria",
	    "Górowo Iławeckie",
	    "Górzno",
	    "Grabów nad Prosną",
	    "Grajewo",
	    "Grodków",
	    "Grodzisk Mazowiecki",
	    "Grodzisk Wielkopolski",
	    "Grójec",
	    "Grudziądz",
	    "Grybów",
	    "Gryfice",
	    "Gryfino",
	    "Gryfów Śląski",
	    "Gubin",
	    "Hajnówka",
	    "Halinów",
	    "Hel",
	    "Hrubieszów",
	    "Iława",
	    "Iłowa",
	    "Iłża",
	    "Imielin",
	    "Inowrocław",
	    "Ińsko",
	    "Iwonicz-Zdrój",
	    "Izbica Kujawska",
	    "Jabłonowo Pomorskie",
	    "Janikowo",
	    "Janowiec Wielkopolski",
	    "Janów Lubelski",
	    "Jarocin",
	    "Jarosław",
	    "Jasień",
	    "Jasło",
	    "Jastarnia",
	    "Jastrowie",
	    "Jastrzębie-Zdrój",
	    "Jawor",
	    "Jaworzno",
	    "Jaworzyna Śląska",
	    "Jedlicze",
	    "Jedlina-Zdrój",
	    "Jedwabne",
	    "Jelcz-Laskowice",
	    "Jelenia Góra",
	    "Jeziorany",
	    "Jędrzejów",
	    "Jordanów",
	    "Józefów (powiat biłgorajski)",
	    "Józefów (powiat otwocki)",
	    "Jutrosin",
	    "Kalety",
	    "Kalisz",
	    "Kalisz Pomorski",
	    "Kalwaria Zebrzydowska",
	    "Kałuszyn",
	    "Kamienna Góra",
	    "Kamień Krajeński",
	    "Kamień Pomorski",
	    "Kamieńsk",
	    "Kańczuga",
	    "Karczew",
	    "Kargowa",
	    "Karlino",
	    "Karpacz",
	    "Kartuzy",
	    "Katowice",
	    "Kazimierz Dolny",
	    "Kazimierza Wielka",
	    "Kąty Wrocławskie",
	    "Kcynia",
	    "Kędzierzyn-Koźle",
	    "Kępice",
	    "Kępno",
	    "Kętrzyn",
	    "Kęty",
	    "Kielce",
	    "Kietrz",
	    "Kisielice",
	    "Kleczew",
	    "Kleszczele",
	    "Kluczbork",
	    "Kłecko",
	    "Kłobuck",
	    "Kłodawa",
	    "Kłodzko",
	    "Knurów",
	    "Knyszyn",
	    "Kobylin",
	    "Kobyłka",
	    "Kock",
	    "Kolbuszowa",
	    "Kolno",
	    "Kolonowskie",
	    "Koluszki",
	    "Kołaczyce",
	    "Koło",
	    "Kołobrzeg",
	    "Koniecpol",
	    "Konin",
	    "Konstancin-Jeziorna",
	    "Konstantynów Łódzki",
	    "Końskie",
	    "Koprzywnica",
	    "Korfantów",
	    "Koronowo",
	    "Korsze",
	    "Kosów Lacki",
	    "Kostrzyn",
	    "Kostrzyn nad Odrą",
	    "Koszalin",
	    "Kościan",
	    "Kościerzyna",
	    "Kowal",
	    "Kowalewo Pomorskie",
	    "Kowary",
	    "Koziegłowy",
	    "Kozienice",
	    "Koźmin Wielkopolski",
	    "Kożuchów",
	    "Kórnik",
	    "Krajenka",
	    "Kraków",
	    "Krapkowice",
	    "Krasnobród",
	    "Krasnystaw",
	    "Kraśnik",
	    "Krobia",
	    "Krosno",
	    "Krosno Odrzańskie",
	    "Krośniewice",
	    "Krotoszyn",
	    "Kruszwica",
	    "Krynica Morska",
	    "Krynica-Zdrój",
	    "Krynki",
	    "Krzanowice",
	    "Krzepice",
	    "Krzeszowice",
	    "Krzywiń",
	    "Krzyż Wielkopolski",
	    "Książ Wielkopolski",
	    "Kudowa-Zdrój",
	    "Kunów",
	    "Kutno",
	    "Kuźnia Raciborska",
	    "Kwidzyn",
	    "Lądek-Zdrój",
	    "Legionowo",
	    "Legnica",
	    "Lesko",
	    "Leszno",
	    "Leśna",
	    "Leśnica",
	    "Lewin Brzeski",
	    "Leżajsk",
	    "Lębork",
	    "Lędziny",
	    "Libiąż",
	    "Lidzbark",
	    "Lidzbark Warmiński",
	    "Limanowa",
	    "Lipiany",
	    "Lipno",
	    "Lipsk",
	    "Lipsko",
	    "Lubaczów",
	    "Lubań",
	    "Lubartów",
	    "Lubawa",
	    "Lubawka",
	    "Lubień Kujawski",
	    "Lubin",
	    "Lublin",
	    "Lubliniec",
	    "Lubniewice",
	    "Lubomierz",
	    "Luboń",
	    "Lubraniec",
	    "Lubsko",
	    "Lwówek",
	    "Lwówek Śląski",
	    "Łabiszyn",
	    "Łańcut",
	    "Łapy",
	    "Łasin",
	    "Łask",
	    "Łaskarzew",
	    "Łaszczów",
	    "Łaziska Górne",
	    "Łazy",
	    "Łeba",
	    "Łęczna",
	    "Łęczyca",
	    "Łęknica",
	    "Łobez",
	    "Łobżenica",
	    "Łochów",
	    "Łomianki",
	    "Łomża",
	    "Łosice",
	    "Łowicz",
	    "Łódź",
	    "Łuków",
	    "Maków Mazowiecki",
	    "Maków Podhalański",
	    "Malbork",
	    "Małogoszcz",
	    "Małomice",
	    "Margonin",
	    "Marki",
	    "Maszewo",
	    "Miasteczko Śląskie",
	    "Miastko",
	    "Michałowo",
	    "Miechów",
	    "Miejska Górka",
	    "Mielec",
	    "Mieroszów",
	    "Mieszkowice",
	    "Międzybórz",
	    "Międzychód",
	    "Międzylesie",
	    "Międzyrzec Podlaski",
	    "Międzyrzecz",
	    "Międzyzdroje",
	    "Mikołajki",
	    "Mikołów",
	    "Mikstat",
	    "Milanówek",
	    "Milicz",
	    "Miłakowo",
	    "Miłomłyn",
	    "Miłosław",
	    "Mińsk Mazowiecki",
	    "Mirosławiec",
	    "Mirsk",
	    "Mława",
	    "Młynary",
	    "Mogielnica",
	    "Mogilno",
	    "Mońki",
	    "Morąg",
	    "Mordy",
	    "Moryń",
	    "Mosina",
	    "Mrągowo",
	    "Mrocza",
	    "Mszana Dolna",
	    "Mszczonów",
	    "Murowana Goślina",
	    "Muszyna",
	    "Mysłowice",
	    "Myszków",
	    "Myszyniec",
	    "Myślenice",
	    "Myślibórz",
	    "Nakło nad Notecią",
	    "Nałęczów",
	    "Namysłów",
	    "Narol",
	    "Nasielsk",
	    "Nekla",
	    "Nidzica",
	    "Niemcza",
	    "Niemodlin",
	    "Niepołomice",
	    "Nieszawa",
	    "Nisko",
	    "Nowa Dęba",
	    "Nowa Ruda",
	    "Nowa Sarzyna",
	    "Nowa Sól",
	    "Nowe",
	    "Nowe Brzesko",
	    "Nowe Miasteczko",
	    "Nowe Miasto Lubawskie",
	    "Nowe Miasto nad Pilicą",
	    "Nowe Skalmierzyce",
	    "Nowe Warpno",
	    "Nowogard",
	    "Nowogrodziec",
	    "Nowogród",
	    "Nowogród Bobrzański",
	    "Nowy Dwór Gdański",
	    "Nowy Dwór Mazowiecki",
	    "Nowy Sącz",
	    "Nowy Staw",
	    "Nowy Targ",
	    "Nowy Tomyśl",
	    "Nowy Wiśnicz",
	    "Nysa",
	    "Oborniki",
	    "Oborniki Śląskie",
	    "Obrzycko",
	    "Odolanów",
	    "Ogrodzieniec",
	    "Okonek",
	    "Olecko",
	    "Olesno",
	    "Oleszyce",
	    "Oleśnica",
	    "Olkusz",
	    "Olsztyn",
	    "Olsztynek",
	    "Olszyna",
	    "Oława",
	    "Opalenica",
	    "Opatów",
	    "Opoczno",
	    "Opole",
	    "Opole Lubelskie",
	    "Orneta",
	    "Orzesze",
	    "Orzysz",
	    "Osieczna",
	    "Osiek",
	    "Ostrołęka",
	    "Ostroróg",
	    "Ostrowiec Świętokrzyski",
	    "Ostróda",
	    "Ostrów Lubelski",
	    "Ostrów Mazowiecka",
	    "Ostrów Wielkopolski",
	    "Ostrzeszów",
	    "Ośno Lubuskie",
	    "Oświęcim",
	    "Otmuchów",
	    "Otwock",
	    "Ozimek",
	    "Ozorków",
	    "Ożarów",
	    "Ożarów Mazowiecki",
	    "Pabianice",
	    "Paczków",
	    "Pajęczno",
	    "Pakość",
	    "Parczew",
	    "Pasłęk",
	    "Pasym",
	    "Pelplin",
	    "Pełczyce",
	    "Piaseczno",
	    "Piaski",
	    "Piastów",
	    "Piechowice",
	    "Piekary Śląskie",
	    "Pieniężno",
	    "Pieńsk",
	    "Pieszyce",
	    "Pilawa",
	    "Pilica",
	    "Pilzno",
	    "Piła",
	    "Piława Górna",
	    "Pińczów",
	    "Pionki",
	    "Piotrków Kujawski",
	    "Piotrków Trybunalski",
	    "Pisz",
	    "Piwniczna-Zdrój",
	    "Pleszew",
	    "Płock",
	    "Płońsk",
	    "Płoty",
	    "Pniewy",
	    "Pobiedziska",
	    "Poddębice",
	    "Podkowa Leśna",
	    "Pogorzela",
	    "Polanica-Zdrój",
	    "Polanów",
	    "Police",
	    "Polkowice",
	    "Połaniec",
	    "Połczyn-Zdrój",
	    "Poniatowa",
	    "Poniec",
	    "Poręba",
	    "Poznań",
	    "Prabuty",
	    "Praszka",
	    "Prochowice",
	    "Proszowice",
	    "Prószków",
	    "Pruchnik",
	    "Prudnik",
	    "Prusice",
	    "Pruszcz Gdański",
	    "Pruszków",
	    "Przasnysz",
	    "Przecław",
	    "Przedbórz",
	    "Przedecz",
	    "Przemków",
	    "Przemyśl",
	    "Przeworsk",
	    "Przysucha",
	    "Pszczyna",
	    "Pszów",
	    "Puck",
	    "Puławy",
	    "Pułtusk",
	    "Puszczykowo",
	    "Pyrzyce",
	    "Pyskowice",
	    "Pyzdry",
	    "Rabka-Zdrój",
	    "Raciąż",
	    "Racibórz",
	    "Radków",
	    "Radlin",
	    "Radłów",
	    "Radom",
	    "Radomsko",
	    "Radomyśl Wielki",
	    "Radymno",
	    "Radziejów",
	    "Radzionków",
	    "Radzymin",
	    "Radzyń Chełmiński",
	    "Radzyń Podlaski",
	    "Rajgród",
	    "Rakoniewice",
	    "Raszków",
	    "Rawa Mazowiecka",
	    "Rawicz",
	    "Recz",
	    "Reda",
	    "Rejowiec Fabryczny",
	    "Resko",
	    "Reszel",
	    "Rogoźno",
	    "Ropczyce",
	    "Różan",
	    "Ruciane-Nida",
	    "Ruda Śląska",
	    "Rudnik nad Sanem",
	    "Rumia",
	    "Rybnik",
	    "Rychwał",
	    "Rydułtowy",
	    "Rydzyna",
	    "Ryglice",
	    "Ryki",
	    "Rymanów",
	    "Ryn",
	    "Rypin",
	    "Rzepin",
	    "Rzeszów",
	    "Rzgów",
	    "Sandomierz",
	    "Sanok",
	    "Sejny",
	    "Serock",
	    "Sędziszów",
	    "Sędziszów Małopolski",
	    "Sępopol",
	    "Sępólno Krajeńskie",
	    "Sianów",
	    "Siechnice",
	    "Siedlce",
	    "Siemianowice Śląskie",
	    "Siemiatycze",
	    "Sieniawa",
	    "Sieradz",
	    "Sieraków",
	    "Sierpc",
	    "Siewierz",
	    "Skalbmierz",
	    "Skała",
	    "Skarszewy",
	    "Skaryszew",
	    "Skarżysko-Kamienna",
	    "Skawina",
	    "Skępe",
	    "Skierniewice",
	    "Skoczów",
	    "Skoki",
	    "Skórcz",
	    "Skwierzyna",
	    "Sława",
	    "Sławków",
	    "Sławno",
	    "Słomniki",
	    "Słubice",
	    "Słupca",
	    "Słupsk",
	    "Sobótka",
	    "Sochaczew",
	    "Sokołów Małopolski",
	    "Sokołów Podlaski",
	    "Sokółka",
	    "Solec Kujawski",
	    "Sompolno",
	    "Sopot",
	    "Sosnowiec",
	    "Sośnicowice",
	    "Stalowa Wola",
	    "Starachowice",
	    "Stargard Szczeciński",
	    "Starogard Gdański",
	    "Stary Sącz",
	    "Staszów",
	    "Stawiski",
	    "Stawiszyn",
	    "Stąporków",
	    "Stęszew",
	    "Stoczek Łukowski",
	    "Stronie Śląskie",
	    "Strumień",
	    "Stryków",
	    "Strzegom",
	    "Strzelce Krajeńskie",
	    "Strzelce Opolskie",
	    "Strzelin",
	    "Strzelno",
	    "Strzyżów",
	    "Sucha Beskidzka",
	    "Suchań",
	    "Suchedniów",
	    "Suchowola",
	    "Sulechów",
	    "Sulejów",
	    "Sulejówek",
	    "Sulęcin",
	    "Sulmierzyce",
	    "Sułkowice",
	    "Supraśl",
	    "Suraż",
	    "Susz",
	    "Suwałki",
	    "Swarzędz",
	    "Syców",
	    "Szadek",
	    "Szamocin",
	    "Szamotuły",
	    "Szczawnica",
	    "Szczawno-Zdrój",
	    "Szczebrzeszyn",
	    "Szczecin",
	    "Szczecinek",
	    "Szczekociny",
	    "Szczucin",
	    "Szczuczyn",
	    "Szczyrk",
	    "Szczytna",
	    "Szczytno",
	    "Szepietowo",
	    "Szklarska Poręba",
	    "Szlichtyngowa",
	    "Szprotawa",
	    "Sztum",
	    "Szubin",
	    "Szydłowiec",
	    "Ścinawa",
	    "Ślesin",
	    "Śmigiel",
	    "Śrem",
	    "Środa Śląska",
	    "Środa Wielkopolska",
	    "Świątniki Górne",
	    "Świdnica",
	    "Świdnik",
	    "Świdwin",
	    "Świebodzice",
	    "Świebodzin",
	    "Świecie",
	    "Świeradów-Zdrój",
	    "Świerzawa",
	    "Świętochłowice",
	    "Świnoujście",
	    "Tarczyn",
	    "Tarnobrzeg",
	    "Tarnogród",
	    "Tarnowskie Góry",
	    "Tarnów",
	    "Tczew",
	    "Terespol",
	    "Tłuszcz",
	    "Tolkmicko",
	    "Tomaszów Lubelski",
	    "Tomaszów Mazowiecki",
	    "Toruń",
	    "Torzym",
	    "Toszek",
	    "Trzcianka",
	    "Trzciel",
	    "Trzcińsko-Zdrój",
	    "Trzebiatów",
	    "Trzebinia",
	    "Trzebnica",
	    "Trzemeszno",
	    "Tuchola",
	    "Tuchów",
	    "Tuczno",
	    "Tuliszków",
	    "Turek",
	    "Tuszyn",
	    "Twardogóra",
	    "Tychowo",
	    "Tychy",
	    "Tyczyn",
	    "Tykocin",
	    "Tyszowce",
	    "Ujazd",
	    "Ujście",
	    "Ulanów",
	    "Uniejów",
	    "Ustka",
	    "Ustroń",
	    "Ustrzyki Dolne",
	    "Wadowice",
	    "Wałbrzych",
	    "Wałcz",
	    "Warka",
	    "Warszawa",
	    "Warta",
	    "Wasilków",
	    "Wąbrzeźno",
	    "Wąchock",
	    "Wągrowiec",
	    "Wąsosz",
	    "Wejherowo",
	    "Węgliniec",
	    "Węgorzewo",
	    "Węgorzyno",
	    "Węgrów",
	    "Wiązów",
	    "Wieleń",
	    "Wielichowo",
	    "Wieliczka",
	    "Wieluń",
	    "Wieruszów",
	    "Więcbork",
	    "Wilamowice",
	    "Wisła",
	    "Witkowo",
	    "Witnica",
	    "Wleń",
	    "Władysławowo",
	    "Włocławek",
	    "Włodawa",
	    "Włoszczowa",
	    "Wodzisław Śląski",
	    "Wojcieszów",
	    "Wojkowice",
	    "Wojnicz",
	    "Wolbórz",
	    "Wolbrom",
	    "Wolin",
	    "Wolsztyn",
	    "Wołczyn",
	    "Wołomin",
	    "Wołów",
	    "Woźniki",
	    "Wrocław",
	    "Wronki",
	    "Września",
	    "Wschowa",
	    "Wyrzysk",
	    "Wysoka",
	    "Wysokie Mazowieckie",
	    "Wyszków",
	    "Wyszogród",
	    "Wyśmierzyce",
	    "Zabłudów",
	    "Zabrze",
	    "Zagórów",
	    "Zagórz",
	    "Zakliczyn",
	    "Zakopane",
	    "Zakroczym",
	    "Zalewo",
	    "Zambrów",
	    "Zamość",
	    "Zator",
	    "Zawadzkie",
	    "Zawichost",
	    "Zawidów",
	    "Zawiercie",
	    "Ząbki",
	    "Ząbkowice Śląskie",
	    "Zbąszynek",
	    "Zbąszyń",
	    "Zduny",
	    "Zduńska Wola",
	    "Zdzieszowice",
	    "Zelów",
	    "Zgierz",
	    "Zgorzelec",
	    "Zielona Góra",
	    "Zielonka",
	    "Ziębice",
	    "Złocieniec",
	    "Złoczew",
	    "Złotoryja",
	    "Złotów",
	    "Złoty Stok",
	    "Zwierzyniec",
	    "Zwoleń",
	    "Żabno",
	    "Żagań",
	    "Żarki",
	    "Żarów",
	    "Żary",
	    "Żelechów",
	    "Żerków",
	    "Żmigród",
	    "Żnin",
	    "Żory",
	    "Żukowo",
	    "Żuromin",
	    "Żychlin",
	    "Żyrardów",
	    "Żywiec"
	  ],
	  "city": [
	    "#{city_name}"
	  ],
	  "street_name": [
	    "#{street_prefix} #{Name.last_name}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Polska"
	  ]
	};
	pl.company = {
	  "suffix": [
	    "Inc",
	    "and Sons",
	    "LLC",
	    "Group"
	  ],
	  "adjetive": [
	      "Adaptive",
	      "Advanced",
	      "Ameliorated",
	      "Assimilated",
	      "Automated",
	      "Balanced",
	      "Business-focused",
	      "Centralized",
	      "Cloned",
	      "Compatible",
	      "Configurable",
	      "Cross-group",
	      "Cross-platform",
	      "Customer-focused",
	      "Customizable",
	      "Decentralized",
	      "De-engineered",
	      "Devolved",
	      "Digitized",
	      "Distributed",
	      "Diverse",
	      "Down-sized",
	      "Enhanced",
	      "Enterprise-wide",
	      "Ergonomic",
	      "Exclusive",
	      "Expanded",
	      "Extended",
	      "Face to face",
	      "Focused",
	      "Front-line",
	      "Fully-configurable",
	      "Function-based",
	      "Fundamental",
	      "Future-proofed",
	      "Grass-roots",
	      "Horizontal",
	      "Implemented",
	      "Innovative",
	      "Integrated",
	      "Intuitive",
	      "Inverse",
	      "Managed",
	      "Mandatory",
	      "Monitored",
	      "Multi-channelled",
	      "Multi-lateral",
	      "Multi-layered",
	      "Multi-tiered",
	      "Networked",
	      "Object-based",
	      "Open-architected",
	      "Open-source",
	      "Operative",
	      "Optimized",
	      "Optional",
	      "Organic",
	      "Organized",
	      "Persevering",
	      "Persistent",
	      "Phased",
	      "Polarised",
	      "Pre-emptive",
	      "Proactive",
	      "Profit-focused",
	      "Profound",
	      "Programmable",
	      "Progressive",
	      "Public-key",
	      "Quality-focused",
	      "Reactive",
	      "Realigned",
	      "Re-contextualized",
	      "Re-engineered",
	      "Reduced",
	      "Reverse-engineered",
	      "Right-sized",
	      "Robust",
	      "Seamless",
	      "Secured",
	      "Self-enabling",
	      "Sharable",
	      "Stand-alone",
	      "Streamlined",
	      "Switchable",
	      "Synchronised",
	      "Synergistic",
	      "Synergized",
	      "Team-oriented",
	      "Total",
	      "Triple-buffered",
	      "Universal",
	      "Up-sized",
	      "Upgradable",
	      "User-centric",
	      "User-friendly",
	      "Versatile",
	      "Virtual",
	      "Visionary",
	      "Vision-oriented"
	    ],
	    "descriptor":[
	      "24 hour",
	      "24/7",
	      "3rd generation",
	      "4th generation",
	      "5th generation",
	      "6th generation",
	      "actuating",
	      "analyzing",
	      "asymmetric",
	      "asynchronous",
	      "attitude-oriented",
	      "background",
	      "bandwidth-monitored",
	      "bi-directional",
	      "bifurcated",
	      "bottom-line",
	      "clear-thinking",
	      "client-driven",
	      "client-server",
	      "coherent",
	      "cohesive",
	      "composite",
	      "context-sensitive",
	      "contextually-based",
	      "content-based",
	      "dedicated",
	      "demand-driven",
	      "didactic",
	      "directional",
	      "discrete",
	      "disintermediate",
	      "dynamic",
	      "eco-centric",
	      "empowering",
	      "encompassing",
	      "even-keeled",
	      "executive",
	      "explicit",
	      "exuding",
	      "fault-tolerant",
	      "foreground",
	      "fresh-thinking",
	      "full-range",
	      "global",
	      "grid-enabled",
	      "heuristic",
	      "high-level",
	      "holistic",
	      "homogeneous",
	      "human-resource",
	      "hybrid",
	      "impactful",
	      "incremental",
	      "intangible",
	      "interactive",
	      "intermediate",
	      "leading edge",
	      "local",
	      "logistical",
	      "maximized",
	      "methodical",
	      "mission-critical",
	      "mobile",
	      "modular",
	      "motivating",
	      "multimedia",
	      "multi-state",
	      "multi-tasking",
	      "national",
	      "needs-based",
	      "neutral",
	      "next generation",
	      "non-volatile",
	      "object-oriented",
	      "optimal",
	      "optimizing",
	      "radical",
	      "real-time",
	      "reciprocal",
	      "regional",
	      "responsive",
	      "scalable",
	      "secondary",
	      "solution-oriented",
	      "stable",
	      "static",
	      "systematic",
	      "systemic",
	      "system-worthy",
	      "tangible",
	      "tertiary",
	      "transitional",
	      "uniform",
	      "upward-trending",
	      "user-facing",
	      "value-added",
	      "web-enabled",
	      "well-modulated",
	      "zero administration",
	      "zero defect",
	      "zero tolerance"
	    ],
	    "noun": [
	      "ability",
	      "access",
	      "adapter",
	      "algorithm",
	      "alliance",
	      "analyzer",
	      "application",
	      "approach",
	      "architecture",
	      "archive",
	      "artificial intelligence",
	      "array",
	      "attitude",
	      "benchmark",
	      "budgetary management",
	      "capability",
	      "capacity",
	      "challenge",
	      "circuit",
	      "collaboration",
	      "complexity",
	      "concept",
	      "conglomeration",
	      "contingency",
	      "core",
	      "customer loyalty",
	      "database",
	      "data-warehouse",
	      "definition",
	      "emulation",
	      "encoding",
	      "encryption",
	      "extranet",
	      "firmware",
	      "flexibility",
	      "focus group",
	      "forecast",
	      "frame",
	      "framework",
	      "function",
	      "functionalities",
	      "Graphic Interface",
	      "groupware",
	      "Graphical User Interface",
	      "hardware",
	      "help-desk",
	      "hierarchy",
	      "hub",
	      "implementation",
	      "info-mediaries",
	      "infrastructure",
	      "initiative",
	      "installation",
	      "instruction set",
	      "interface",
	      "internet solution",
	      "intranet",
	      "knowledge user",
	      "knowledge base",
	      "local area network",
	      "leverage",
	      "matrices",
	      "matrix",
	      "methodology",
	      "middleware",
	      "migration",
	      "model",
	      "moderator",
	      "monitoring",
	      "moratorium",
	      "neural-net",
	      "open architecture",
	      "open system",
	      "orchestration",
	      "paradigm",
	      "parallelism",
	      "policy",
	      "portal",
	      "pricing structure",
	      "process improvement",
	      "product",
	      "productivity",
	      "project",
	      "projection",
	      "protocol",
	      "secured line",
	      "service-desk",
	      "software",
	      "solution",
	      "standardization",
	      "strategy",
	      "structure",
	      "success",
	      "superstructure",
	      "support",
	      "synergy",
	      "system engine",
	      "task-force",
	      "throughput",
	      "time-frame",
	      "toolset",
	      "utilisation",
	      "website",
	      "workforce"
	  ],
	  "bs_verb": [
	      "implement",
	      "utilize",
	      "integrate",
	      "streamline",
	      "optimize",
	      "evolve",
	      "transform",
	      "embrace",
	      "enable",
	      "orchestrate",
	      "leverage",
	      "reinvent",
	      "aggregate",
	      "architect",
	      "enhance",
	      "incentivize",
	      "morph",
	      "empower",
	      "envisioneer",
	      "monetize",
	      "harness",
	      "facilitate",
	      "seize",
	      "disintermediate",
	      "synergize",
	      "strategize",
	      "deploy",
	      "brand",
	      "grow",
	      "target",
	      "syndicate",
	      "synthesize",
	      "deliver",
	      "mesh",
	      "incubate",
	      "engage",
	      "maximize",
	      "benchmark",
	      "expedite",
	      "reintermediate",
	      "whiteboard",
	      "visualize",
	      "repurpose",
	      "innovate",
	      "scale",
	      "unleash",
	      "drive",
	      "extend",
	      "engineer",
	      "revolutionize",
	      "generate",
	      "exploit",
	      "transition",
	      "e-enable",
	      "iterate",
	      "cultivate",
	      "matrix",
	      "productize",
	      "redefine",
	      "recontextualize"
	    ],
	    "bs_adjective": [
	      "clicks-and-mortar",
	      "value-added",
	      "vertical",
	      "proactive",
	      "robust",
	      "revolutionary",
	      "scalable",
	      "leading-edge",
	      "innovative",
	      "intuitive",
	      "strategic",
	      "e-business",
	      "mission-critical",
	      "sticky",
	      "one-to-one",
	      "24/7",
	      "end-to-end",
	      "global",
	      "B2B",
	      "B2C",
	      "granular",
	      "frictionless",
	      "virtual",
	      "viral",
	      "dynamic",
	      "24/365",
	      "best-of-breed",
	      "killer",
	      "magnetic",
	      "bleeding-edge",
	      "web-enabled",
	      "interactive",
	      "dot-com",
	      "sexy",
	      "back-end",
	      "real-time",
	      "efficient",
	      "front-end",
	      "distributed",
	      "seamless",
	      "extensible",
	      "turn-key",
	      "world-class",
	      "open-source",
	      "cross-platform",
	      "cross-media",
	      "synergistic",
	      "bricks-and-clicks",
	      "out-of-the-box",
	      "enterprise",
	      "integrated",
	      "impactful",
	      "wireless",
	      "transparent",
	      "next-generation",
	      "cutting-edge",
	      "user-centric",
	      "visionary",
	      "customized",
	      "ubiquitous",
	      "plug-and-play",
	      "collaborative",
	      "compelling",
	      "holistic",
	      "rich"
	    ],
	    "bs_noun": [
	      "synergies",
	      "web-readiness",
	      "paradigms",
	      "markets",
	      "partnerships",
	      "infrastructures",
	      "platforms",
	      "initiatives",
	      "channels",
	      "eyeballs",
	      "communities",
	      "ROI",
	      "solutions",
	      "e-tailers",
	      "e-services",
	      "action-items",
	      "portals",
	      "niches",
	      "technologies",
	      "content",
	      "vortals",
	      "supply-chains",
	      "convergence",
	      "relationships",
	      "architectures",
	      "interfaces",
	      "e-markets",
	      "e-commerce",
	      "systems",
	      "bandwidth",
	      "infomediaries",
	      "models",
	      "mindshare",
	      "deliverables",
	      "users",
	      "schemas",
	      "networks",
	      "applications",
	      "metrics",
	      "e-business",
	      "functionalities",
	      "experiences",
	      "web services",
	      "methodologies"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
	  ]
	};
	pl.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "pl",
	    "com.pl",
	    "net",
	    "org"
	  ]
	};
	pl.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ],
	  "supplemental": [
	    "abbas",
	    "abduco",
	    "abeo",
	    "abscido",
	    "absconditus",
	    "absens",
	    "absorbeo",
	    "absque",
	    "abstergo",
	    "absum",
	    "abundans",
	    "abutor",
	    "accedo",
	    "accendo",
	    "acceptus",
	    "accipio",
	    "accommodo",
	    "accusator",
	    "acer",
	    "acerbitas",
	    "acervus",
	    "acidus",
	    "acies",
	    "acquiro",
	    "acsi",
	    "adamo",
	    "adaugeo",
	    "addo",
	    "adduco",
	    "ademptio",
	    "adeo",
	    "adeptio",
	    "adfectus",
	    "adfero",
	    "adficio",
	    "adflicto",
	    "adhaero",
	    "adhuc",
	    "adicio",
	    "adimpleo",
	    "adinventitias",
	    "adipiscor",
	    "adiuvo",
	    "administratio",
	    "admiratio",
	    "admitto",
	    "admoneo",
	    "admoveo",
	    "adnuo",
	    "adopto",
	    "adsidue",
	    "adstringo",
	    "adsuesco",
	    "adsum",
	    "adulatio",
	    "adulescens",
	    "adultus",
	    "aduro",
	    "advenio",
	    "adversus",
	    "advoco",
	    "aedificium",
	    "aeger",
	    "aegre",
	    "aegrotatio",
	    "aegrus",
	    "aeneus",
	    "aequitas",
	    "aequus",
	    "aer",
	    "aestas",
	    "aestivus",
	    "aestus",
	    "aetas",
	    "aeternus",
	    "ager",
	    "aggero",
	    "aggredior",
	    "agnitio",
	    "agnosco",
	    "ago",
	    "ait",
	    "aiunt",
	    "alienus",
	    "alii",
	    "alioqui",
	    "aliqua",
	    "alius",
	    "allatus",
	    "alo",
	    "alter",
	    "altus",
	    "alveus",
	    "amaritudo",
	    "ambitus",
	    "ambulo",
	    "amicitia",
	    "amiculum",
	    "amissio",
	    "amita",
	    "amitto",
	    "amo",
	    "amor",
	    "amoveo",
	    "amplexus",
	    "amplitudo",
	    "amplus",
	    "ancilla",
	    "angelus",
	    "angulus",
	    "angustus",
	    "animadverto",
	    "animi",
	    "animus",
	    "annus",
	    "anser",
	    "ante",
	    "antea",
	    "antepono",
	    "antiquus",
	    "aperio",
	    "aperte",
	    "apostolus",
	    "apparatus",
	    "appello",
	    "appono",
	    "appositus",
	    "approbo",
	    "apto",
	    "aptus",
	    "apud",
	    "aqua",
	    "ara",
	    "aranea",
	    "arbitro",
	    "arbor",
	    "arbustum",
	    "arca",
	    "arceo",
	    "arcesso",
	    "arcus",
	    "argentum",
	    "argumentum",
	    "arguo",
	    "arma",
	    "armarium",
	    "armo",
	    "aro",
	    "ars",
	    "articulus",
	    "artificiose",
	    "arto",
	    "arx",
	    "ascisco",
	    "ascit",
	    "asper",
	    "aspicio",
	    "asporto",
	    "assentator",
	    "astrum",
	    "atavus",
	    "ater",
	    "atqui",
	    "atrocitas",
	    "atrox",
	    "attero",
	    "attollo",
	    "attonbitus",
	    "auctor",
	    "auctus",
	    "audacia",
	    "audax",
	    "audentia",
	    "audeo",
	    "audio",
	    "auditor",
	    "aufero",
	    "aureus",
	    "auris",
	    "aurum",
	    "aut",
	    "autem",
	    "autus",
	    "auxilium",
	    "avaritia",
	    "avarus",
	    "aveho",
	    "averto",
	    "avoco",
	    "baiulus",
	    "balbus",
	    "barba",
	    "bardus",
	    "basium",
	    "beatus",
	    "bellicus",
	    "bellum",
	    "bene",
	    "beneficium",
	    "benevolentia",
	    "benigne",
	    "bestia",
	    "bibo",
	    "bis",
	    "blandior",
	    "bonus",
	    "bos",
	    "brevis",
	    "cado",
	    "caecus",
	    "caelestis",
	    "caelum",
	    "calamitas",
	    "calcar",
	    "calco",
	    "calculus",
	    "callide",
	    "campana",
	    "candidus",
	    "canis",
	    "canonicus",
	    "canto",
	    "capillus",
	    "capio",
	    "capitulus",
	    "capto",
	    "caput",
	    "carbo",
	    "carcer",
	    "careo",
	    "caries",
	    "cariosus",
	    "caritas",
	    "carmen",
	    "carpo",
	    "carus",
	    "casso",
	    "caste",
	    "casus",
	    "catena",
	    "caterva",
	    "cattus",
	    "cauda",
	    "causa",
	    "caute",
	    "caveo",
	    "cavus",
	    "cedo",
	    "celebrer",
	    "celer",
	    "celo",
	    "cena",
	    "cenaculum",
	    "ceno",
	    "censura",
	    "centum",
	    "cerno",
	    "cernuus",
	    "certe",
	    "certo",
	    "certus",
	    "cervus",
	    "cetera",
	    "charisma",
	    "chirographum",
	    "cibo",
	    "cibus",
	    "cicuta",
	    "cilicium",
	    "cimentarius",
	    "ciminatio",
	    "cinis",
	    "circumvenio",
	    "cito",
	    "civis",
	    "civitas",
	    "clam",
	    "clamo",
	    "claro",
	    "clarus",
	    "claudeo",
	    "claustrum",
	    "clementia",
	    "clibanus",
	    "coadunatio",
	    "coaegresco",
	    "coepi",
	    "coerceo",
	    "cogito",
	    "cognatus",
	    "cognomen",
	    "cogo",
	    "cohaero",
	    "cohibeo",
	    "cohors",
	    "colligo",
	    "colloco",
	    "collum",
	    "colo",
	    "color",
	    "coma",
	    "combibo",
	    "comburo",
	    "comedo",
	    "comes",
	    "cometes",
	    "comis",
	    "comitatus",
	    "commemoro",
	    "comminor",
	    "commodo",
	    "communis",
	    "comparo",
	    "compello",
	    "complectus",
	    "compono",
	    "comprehendo",
	    "comptus",
	    "conatus",
	    "concedo",
	    "concido",
	    "conculco",
	    "condico",
	    "conduco",
	    "confero",
	    "confido",
	    "conforto",
	    "confugo",
	    "congregatio",
	    "conicio",
	    "coniecto",
	    "conitor",
	    "coniuratio",
	    "conor",
	    "conqueror",
	    "conscendo",
	    "conservo",
	    "considero",
	    "conspergo",
	    "constans",
	    "consuasor",
	    "contabesco",
	    "contego",
	    "contigo",
	    "contra",
	    "conturbo",
	    "conventus",
	    "convoco",
	    "copia",
	    "copiose",
	    "cornu",
	    "corona",
	    "corpus",
	    "correptius",
	    "corrigo",
	    "corroboro",
	    "corrumpo",
	    "coruscus",
	    "cotidie",
	    "crapula",
	    "cras",
	    "crastinus",
	    "creator",
	    "creber",
	    "crebro",
	    "credo",
	    "creo",
	    "creptio",
	    "crepusculum",
	    "cresco",
	    "creta",
	    "cribro",
	    "crinis",
	    "cruciamentum",
	    "crudelis",
	    "cruentus",
	    "crur",
	    "crustulum",
	    "crux",
	    "cubicularis",
	    "cubitum",
	    "cubo",
	    "cui",
	    "cuius",
	    "culpa",
	    "culpo",
	    "cultellus",
	    "cultura",
	    "cum",
	    "cunabula",
	    "cunae",
	    "cunctatio",
	    "cupiditas",
	    "cupio",
	    "cuppedia",
	    "cupressus",
	    "cur",
	    "cura",
	    "curatio",
	    "curia",
	    "curiositas",
	    "curis",
	    "curo",
	    "curriculum",
	    "currus",
	    "cursim",
	    "curso",
	    "cursus",
	    "curto",
	    "curtus",
	    "curvo",
	    "curvus",
	    "custodia",
	    "damnatio",
	    "damno",
	    "dapifer",
	    "debeo",
	    "debilito",
	    "decens",
	    "decerno",
	    "decet",
	    "decimus",
	    "decipio",
	    "decor",
	    "decretum",
	    "decumbo",
	    "dedecor",
	    "dedico",
	    "deduco",
	    "defaeco",
	    "defendo",
	    "defero",
	    "defessus",
	    "defetiscor",
	    "deficio",
	    "defigo",
	    "defleo",
	    "defluo",
	    "defungo",
	    "degenero",
	    "degero",
	    "degusto",
	    "deinde",
	    "delectatio",
	    "delego",
	    "deleo",
	    "delibero",
	    "delicate",
	    "delinquo",
	    "deludo",
	    "demens",
	    "demergo",
	    "demitto",
	    "demo",
	    "demonstro",
	    "demoror",
	    "demulceo",
	    "demum",
	    "denego",
	    "denique",
	    "dens",
	    "denuncio",
	    "denuo",
	    "deorsum",
	    "depereo",
	    "depono",
	    "depopulo",
	    "deporto",
	    "depraedor",
	    "deprecator",
	    "deprimo",
	    "depromo",
	    "depulso",
	    "deputo",
	    "derelinquo",
	    "derideo",
	    "deripio",
	    "desidero",
	    "desino",
	    "desipio",
	    "desolo",
	    "desparatus",
	    "despecto",
	    "despirmatio",
	    "infit",
	    "inflammatio",
	    "paens",
	    "patior",
	    "patria",
	    "patrocinor",
	    "patruus",
	    "pauci",
	    "paulatim",
	    "pauper",
	    "pax",
	    "peccatus",
	    "pecco",
	    "pecto",
	    "pectus",
	    "pecunia",
	    "pecus",
	    "peior",
	    "pel",
	    "ocer",
	    "socius",
	    "sodalitas",
	    "sol",
	    "soleo",
	    "solio",
	    "solitudo",
	    "solium",
	    "sollers",
	    "sollicito",
	    "solum",
	    "solus",
	    "solutio",
	    "solvo",
	    "somniculosus",
	    "somnus",
	    "sonitus",
	    "sono",
	    "sophismata",
	    "sopor",
	    "sordeo",
	    "sortitus",
	    "spargo",
	    "speciosus",
	    "spectaculum",
	    "speculum",
	    "sperno",
	    "spero",
	    "spes",
	    "spiculum",
	    "spiritus",
	    "spoliatio",
	    "sponte",
	    "stabilis",
	    "statim",
	    "statua",
	    "stella",
	    "stillicidium",
	    "stipes",
	    "stips",
	    "sto",
	    "strenuus",
	    "strues",
	    "studio",
	    "stultus",
	    "suadeo",
	    "suasoria",
	    "sub",
	    "subito",
	    "subiungo",
	    "sublime",
	    "subnecto",
	    "subseco",
	    "substantia",
	    "subvenio",
	    "succedo",
	    "succurro",
	    "sufficio",
	    "suffoco",
	    "suffragium",
	    "suggero",
	    "sui",
	    "sulum",
	    "sum",
	    "summa",
	    "summisse",
	    "summopere",
	    "sumo",
	    "sumptus",
	    "supellex",
	    "super",
	    "suppellex",
	    "supplanto",
	    "suppono",
	    "supra",
	    "surculus",
	    "surgo",
	    "sursum",
	    "suscipio",
	    "suspendo",
	    "sustineo",
	    "suus",
	    "synagoga",
	    "tabella",
	    "tabernus",
	    "tabesco",
	    "tabgo",
	    "tabula",
	    "taceo",
	    "tactus",
	    "taedium",
	    "talio",
	    "talis",
	    "talus",
	    "tam",
	    "tamdiu",
	    "tamen",
	    "tametsi",
	    "tamisium",
	    "tamquam",
	    "tandem",
	    "tantillus",
	    "tantum",
	    "tardus",
	    "tego",
	    "temeritas",
	    "temperantia",
	    "templum",
	    "temptatio",
	    "tempus",
	    "tenax",
	    "tendo",
	    "teneo",
	    "tener",
	    "tenuis",
	    "tenus",
	    "tepesco",
	    "tepidus",
	    "ter",
	    "terebro",
	    "teres",
	    "terga",
	    "tergeo",
	    "tergiversatio",
	    "tergo",
	    "tergum",
	    "termes",
	    "terminatio",
	    "tero",
	    "terra",
	    "terreo",
	    "territo",
	    "terror",
	    "tersus",
	    "tertius",
	    "testimonium",
	    "texo",
	    "textilis",
	    "textor",
	    "textus",
	    "thalassinus",
	    "theatrum",
	    "theca",
	    "thema",
	    "theologus",
	    "thermae",
	    "thesaurus",
	    "thesis",
	    "thorax",
	    "thymbra",
	    "thymum",
	    "tibi",
	    "timidus",
	    "timor",
	    "titulus",
	    "tolero",
	    "tollo",
	    "tondeo",
	    "tonsor",
	    "torqueo",
	    "torrens",
	    "tot",
	    "totidem",
	    "toties",
	    "totus",
	    "tracto",
	    "trado",
	    "traho",
	    "trans",
	    "tredecim",
	    "tremo",
	    "trepide",
	    "tres",
	    "tribuo",
	    "tricesimus",
	    "triduana",
	    "triginta",
	    "tripudio",
	    "tristis",
	    "triumphus",
	    "trucido",
	    "truculenter",
	    "tubineus",
	    "tui",
	    "tum",
	    "tumultus",
	    "tunc",
	    "turba",
	    "turbo",
	    "turpe",
	    "turpis",
	    "tutamen",
	    "tutis",
	    "tyrannus",
	    "uberrime",
	    "ubi",
	    "ulciscor",
	    "ullus",
	    "ulterius",
	    "ultio",
	    "ultra",
	    "umbra",
	    "umerus",
	    "umquam",
	    "una",
	    "unde",
	    "undique",
	    "universe",
	    "unus",
	    "urbanus",
	    "urbs",
	    "uredo",
	    "usitas",
	    "usque",
	    "ustilo",
	    "ustulo",
	    "usus",
	    "uter",
	    "uterque",
	    "utilis",
	    "utique",
	    "utor",
	    "utpote",
	    "utrimque",
	    "utroque",
	    "utrum",
	    "uxor",
	    "vaco",
	    "vacuus",
	    "vado",
	    "vae",
	    "valde",
	    "valens",
	    "valeo",
	    "valetudo",
	    "validus",
	    "vallum",
	    "vapulus",
	    "varietas",
	    "varius",
	    "vehemens",
	    "vel",
	    "velociter",
	    "velum",
	    "velut",
	    "venia",
	    "venio",
	    "ventito",
	    "ventosus",
	    "ventus",
	    "venustas",
	    "ver",
	    "verbera",
	    "verbum",
	    "vere",
	    "verecundia",
	    "vereor",
	    "vergo",
	    "veritas",
	    "vero",
	    "versus",
	    "verto",
	    "verumtamen",
	    "verus",
	    "vesco",
	    "vesica",
	    "vesper",
	    "vespillo",
	    "vester",
	    "vestigium",
	    "vestrum",
	    "vetus",
	    "via",
	    "vicinus",
	    "vicissitudo",
	    "victoria",
	    "victus",
	    "videlicet",
	    "video",
	    "viduata",
	    "viduo",
	    "vigilo",
	    "vigor",
	    "vilicus",
	    "vilis",
	    "vilitas",
	    "villa",
	    "vinco",
	    "vinculum",
	    "vindico",
	    "vinitor",
	    "vinum",
	    "vir",
	    "virga",
	    "virgo",
	    "viridis",
	    "viriliter",
	    "virtus",
	    "vis",
	    "viscus",
	    "vita",
	    "vitiosus",
	    "vitium",
	    "vito",
	    "vivo",
	    "vix",
	    "vobis",
	    "vociferor",
	    "voco",
	    "volaticus",
	    "volo",
	    "volubilis",
	    "voluntarius",
	    "volup",
	    "volutabrum",
	    "volva",
	    "vomer",
	    "vomica",
	    "vomito",
	    "vorago",
	    "vorax",
	    "voro",
	    "vos",
	    "votum",
	    "voveo",
	    "vox",
	    "vulariter",
	    "vulgaris",
	    "vulgivagus",
	    "vulgo",
	    "vulgus",
	    "vulnero",
	    "vulnus",
	    "vulpes",
	    "vulticulus",
	    "vultuosus",
	    "xiphias"
	  ]
	};
	pl.phone_number = {
	  "formats": [
	    "12-###-##-##",
	    "13-###-##-##",
	    "14-###-##-##",
	    "15-###-##-##",
	    "16-###-##-##",
	    "17-###-##-##",
	    "18-###-##-##",
	    "22-###-##-##",
	    "23-###-##-##",
	    "24-###-##-##",
	    "25-###-##-##",
	    "29-###-##-##",
	    "32-###-##-##",
	    "33-###-##-##",
	    "34-###-##-##",
	    "41-###-##-##",
	    "42-###-##-##",
	    "43-###-##-##",
	    "44-###-##-##",
	    "46-###-##-##",
	    "48-###-##-##",
	    "52-###-##-##",
	    "54-###-##-##",
	    "55-###-##-##",
	    "56-###-##-##",
	    "58-###-##-##",
	    "59-###-##-##",
	    "61-###-##-##",
	    "62-###-##-##",
	    "63-###-##-##",
	    "65-###-##-##",
	    "67-###-##-##",
	    "68-###-##-##",
	    "71-###-##-##",
	    "74-###-##-##",
	    "75-###-##-##",
	    "76-###-##-##",
	    "77-###-##-##",
	    "81-###-##-##",
	    "82-###-##-##",
	    "83-###-##-##",
	    "84-###-##-##",
	    "85-###-##-##",
	    "86-###-##-##",
	    "87-###-##-##",
	    "89-###-##-##",
	    "91-###-##-##",
	    "94-###-##-##",
	    "95-###-##-##"
	  ]
	};
	pl.cell_phone = {
	  "formats": [
	    "50-###-##-##",
	    "51-###-##-##",
	    "53-###-##-##",
	    "57-###-##-##",
	    "60-###-##-##",
	    "66-###-##-##",
	    "69-###-##-##",
	    "72-###-##-##",
	    "73-###-##-##",
	    "78-###-##-##",
	    "79-###-##-##",
	    "88-###-##-##"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var pt_BR = {};
	module["exports"] = pt_BR;
	pt_BR.title = "Portuguese (Brazil)";
	pt_BR.address = {
	  "city_prefix": [
	    "Nova",
	    "Velha",
	    "Grande",
	    "Vila",
	    "Município de"
	  ],
	  "city_suffix": [
	    "do Descoberto",
	    "de Nossa Senhora",
	    "do Norte",
	    "do Sul"
	  ],
	  "country": [
	    "Afeganistão",
	    "Albânia",
	    "Algéria",
	    "Samoa",
	    "Andorra",
	    "Angola",
	    "Anguilla",
	    "Antigua and Barbada",
	    "Argentina",
	    "Armênia",
	    "Aruba",
	    "Austrália",
	    "Áustria",
	    "Alzerbajão",
	    "Bahamas",
	    "Barém",
	    "Bangladesh",
	    "Barbado",
	    "Belgrado",
	    "Bélgica",
	    "Belize",
	    "Benin",
	    "Bermuda",
	    "Bhutan",
	    "Bolívia",
	    "Bôsnia",
	    "Botuasuna",
	    "Bouvetoia",
	    "Brasil",
	    "Arquipélago de Chagos",
	    "Ilhas Virgens",
	    "Brunei",
	    "Bulgária",
	    "Burkina Faso",
	    "Burundi",
	    "Cambójia",
	    "Camarões",
	    "Canadá",
	    "Cabo Verde",
	    "Ilhas Caiman",
	    "República da África Central",
	    "Chad",
	    "Chile",
	    "China",
	    "Ilhas Natal",
	    "Ilhas Cocos",
	    "Colômbia",
	    "Comoros",
	    "Congo",
	    "Ilhas Cook",
	    "Costa Rica",
	    "Costa do Marfim",
	    "Croácia",
	    "Cuba",
	    "Cyprus",
	    "República Tcheca",
	    "Dinamarca",
	    "Djibouti",
	    "Dominica",
	    "República Dominicana",
	    "Equador",
	    "Egito",
	    "El Salvador",
	    "Guiné Equatorial",
	    "Eritrea",
	    "Estônia",
	    "Etiópia",
	    "Ilhas Faroe",
	    "Malvinas",
	    "Fiji",
	    "Finlândia",
	    "França",
	    "Guiné Francesa",
	    "Polinésia Francesa",
	    "Gabão",
	    "Gâmbia",
	    "Georgia",
	    "Alemanha",
	    "Gana",
	    "Gibraltar",
	    "Grécia",
	    "Groelândia",
	    "Granada",
	    "Guadalupe",
	    "Guano",
	    "Guatemala",
	    "Guernsey",
	    "Guiné",
	    "Guiné-Bissau",
	    "Guiana",
	    "Haiti",
	    "Heard Island and McDonald Islands",
	    "Vaticano",
	    "Honduras",
	    "Hong Kong",
	    "Hungria",
	    "Iceland",
	    "Índia",
	    "Indonésia",
	    "Irã",
	    "Iraque",
	    "Irlanda",
	    "Ilha de Man",
	    "Israel",
	    "Itália",
	    "Jamaica",
	    "Japão",
	    "Jersey",
	    "Jordânia",
	    "Cazaquistão",
	    "Quênia",
	    "Kiribati",
	    "Coreia do Norte",
	    "Coreia do Sul",
	    "Kuwait",
	    "Kyrgyz Republic",
	    "República Democrática de Lao People",
	    "Latvia",
	    "Líbano",
	    "Lesotho",
	    "Libéria",
	    "Libyan Arab Jamahiriya",
	    "Liechtenstein",
	    "Lituânia",
	    "Luxemburgo",
	    "Macao",
	    "Macedônia",
	    "Madagascar",
	    "Malawi",
	    "Malásia",
	    "Maldives",
	    "Mali",
	    "Malta",
	    "Ilhas Marshall",
	    "Martinica",
	    "Mauritânia",
	    "Mauritius",
	    "Mayotte",
	    "México",
	    "Micronésia",
	    "Moldova",
	    "Mônaco",
	    "Mongólia",
	    "Montenegro",
	    "Montserrat",
	    "Marrocos",
	    "Moçambique",
	    "Myanmar",
	    "Namibia",
	    "Nauru",
	    "Nepal",
	    "Antilhas Holandesas",
	    "Holanda",
	    "Nova Caledonia",
	    "Nova Zelândia",
	    "Nicarágua",
	    "Nigéria",
	    "Niue",
	    "Ilha Norfolk",
	    "Northern Mariana Islands",
	    "Noruega",
	    "Oman",
	    "Paquistão",
	    "Palau",
	    "Território da Palestina",
	    "Panamá",
	    "Nova Guiné Papua",
	    "Paraguai",
	    "Peru",
	    "Filipinas",
	    "Polônia",
	    "Portugal",
	    "Puerto Rico",
	    "Qatar",
	    "Romênia",
	    "Rússia",
	    "Ruanda",
	    "São Bartolomeu",
	    "Santa Helena",
	    "Santa Lúcia",
	    "Saint Martin",
	    "Saint Pierre and Miquelon",
	    "Saint Vincent and the Grenadines",
	    "Samoa",
	    "San Marino",
	    "Sao Tomé e Príncipe",
	    "Arábia Saudita",
	    "Senegal",
	    "Sérvia",
	    "Seychelles",
	    "Serra Leoa",
	    "Singapura",
	    "Eslováquia",
	    "Eslovênia",
	    "Ilhas Salomão",
	    "Somália",
	    "África do Sul",
	    "South Georgia and the South Sandwich Islands",
	    "Spanha",
	    "Sri Lanka",
	    "Sudão",
	    "Suriname",
	    "Svalbard & Jan Mayen Islands",
	    "Swaziland",
	    "Suécia",
	    "Suíça",
	    "Síria",
	    "Taiwan",
	    "Tajiquistão",
	    "Tanzânia",
	    "Tailândia",
	    "Timor-Leste",
	    "Togo",
	    "Tokelau",
	    "Tonga",
	    "Trinidá e Tobago",
	    "Tunísia",
	    "Turquia",
	    "Turcomenistão",
	    "Turks and Caicos Islands",
	    "Tuvalu",
	    "Uganda",
	    "Ucrânia",
	    "Emirados Árabes Unidos",
	    "Reino Unido",
	    "Estados Unidos da América",
	    "Estados Unidos das Ilhas Virgens",
	    "Uruguai",
	    "Uzbequistão",
	    "Vanuatu",
	    "Venezuela",
	    "Vietnã",
	    "Wallis and Futuna",
	    "Sahara",
	    "Yemen",
	    "Zâmbia",
	    "Zimbábue"
	  ],
	  "building_number": [
	    "#####",
	    "####",
	    "###"
	  ],
	  "street_suffix": [
	    "Rua",
	    "Avenida",
	    "Travessa",
	    "Ponte",
	    "Alameda",
	    "Marginal",
	    "Viela",
	    "Rodovia"
	  ],
	  "secondary_address": [
	    "Apto. ###",
	    "Sobrado ##",
	    "Casa #",
	    "Lote ##",
	    "Quadra ##"
	  ],
	  "postcode": [
	    "#####",
	    "#####-###"
	  ],
	  "state": [
	    "Acre",
	    "Alagoas",
	    "Amapá",
	    "Amazonas",
	    "Bahia",
	    "Ceará",
	    "Distrito Federal",
	    "Espírito Santo",
	    "Goiás",
	    "Maranhão",
	    "Mato Grosso",
	    "Mato Grosso do Sul",
	    "Minas Gerais",
	    "Pará",
	    "Paraíba",
	    "Paraná",
	    "Pernambuco",
	    "Piauí",
	    "Rio de Janeiro",
	    "Rio Grande do Norte",
	    "Rio Grande do Sul",
	    "Rondônia",
	    "Roraima",
	    "Santa Catarina",
	    "São Paulo",
	    "Sergipe",
	    "Tocantins"
	  ],
	  "state_abbr": [
	    "AC",
	    "AL",
	    "AP",
	    "AM",
	    "BA",
	    "CE",
	    "DF",
	    "ES",
	    "GO",
	    "MA",
	    "MT",
	    "MS",
	    "PA",
	    "PB",
	    "PR",
	    "PE",
	    "PI",
	    "RJ",
	    "RN",
	    "RS",
	    "RO",
	    "RR",
	    "SC",
	    "SP"
	  ],
	  "default_country": [
	    "Brasil"
	  ]
	};
	pt_BR.company = {
	  "suffix": [
	    "S.A.",
	    "LTDA",
	    "e Associados",
	    "Comércio"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
	  ]
	};
	pt_BR.internet = {
	  "free_email": [
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com",
	    "live.com",
	    "bol.com.br"
	  ],
	  "domain_suffix": [
	    "br",
	    "com",
	    "biz",
	    "info",
	    "name",
	    "net",
	    "org"
	  ]
	};
	pt_BR.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ]
	};
	pt_BR.name = {
	  "first_name": [
	    "Alessandro",
	    "Alessandra",
	    "Alexandre",
	    "Aline",
	    "Antônio",
	    "Breno",
	    "Bruna",
	    "Carlos",
	    "Carla",
	    "Célia",
	    "Cecília",
	    "César",
	    "Danilo",
	    "Dalila",
	    "Deneval",
	    "Eduardo",
	    "Eduarda",
	    "Esther",
	    "Elísio",
	    "Fábio",
	    "Fabrício",
	    "Fabrícia",
	    "Félix",
	    "Felícia",
	    "Feliciano",
	    "Frederico",
	    "Fabiano",
	    "Gustavo",
	    "Guilherme",
	    "Gúbio",
	    "Heitor",
	    "Hélio",
	    "Hugo",
	    "Isabel",
	    "Isabela",
	    "Ígor",
	    "João",
	    "Joana",
	    "Júlio César",
	    "Júlio",
	    "Júlia",
	    "Janaína",
	    "Karla",
	    "Kléber",
	    "Lucas",
	    "Lorena",
	    "Lorraine",
	    "Larissa",
	    "Ladislau",
	    "Marcos",
	    "Meire",
	    "Marcelo",
	    "Marcela",
	    "Margarida",
	    "Mércia",
	    "Márcia",
	    "Marli",
	    "Morgana",
	    "Maria",
	    "Norberto",
	    "Natália",
	    "Nataniel",
	    "Núbia",
	    "Ofélia",
	    "Paulo",
	    "Paula",
	    "Pablo",
	    "Pedro",
	    "Raul",
	    "Rafael",
	    "Rafaela",
	    "Ricardo",
	    "Roberto",
	    "Roberta",
	    "Sílvia",
	    "Sílvia",
	    "Silas",
	    "Suélen",
	    "Sara",
	    "Salvador",
	    "Sirineu",
	    "Talita",
	    "Tertuliano",
	    "Vicente",
	    "Víctor",
	    "Vitória",
	    "Yango",
	    "Yago",
	    "Yuri",
	    "Washington",
	    "Warley"
	  ],
	  "last_name": [
	    "Silva",
	    "Souza",
	    "Carvalho",
	    "Santos",
	    "Reis",
	    "Xavier",
	    "Franco",
	    "Braga",
	    "Macedo",
	    "Batista",
	    "Barros",
	    "Moraes",
	    "Costa",
	    "Pereira",
	    "Carvalho",
	    "Melo",
	    "Saraiva",
	    "Nogueira",
	    "Oliveira",
	    "Martins",
	    "Moreira",
	    "Albuquerque"
	  ],
	  "prefix": [
	    "Sr.",
	    "Sra.",
	    "Srta.",
	    "Dr."
	  ],
	  "suffix": [
	    "Jr.",
	    "Neto",
	    "Filho"
	  ]
	};
	pt_BR.phone_number = {
	  "formats": [
	    "(##) ####-####",
	    "+55 (##) ####-####",
	    "(##) #####-####"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var ru = {};
	module["exports"] = ru;
	ru.title = "Russian";
	ru.separator = " и ";
	ru.address = {
	  "country": [
	    "Австралия",
	    "Австрия",
	    "Азербайджан",
	    "Албания",
	    "Алжир",
	    "Американское Самоа (не признана)",
	    "Ангилья",
	    "Ангола",
	    "Андорра",
	    "Антарктика (не признана)",
	    "Антигуа и Барбуда",
	    "Антильские Острова (не признана)",
	    "Аомынь (не признана)",
	    "Аргентина",
	    "Армения",
	    "Афганистан",
	    "Багамские Острова",
	    "Бангладеш",
	    "Барбадос",
	    "Бахрейн",
	    "Беларусь",
	    "Белиз",
	    "Бельгия",
	    "Бенин",
	    "Болгария",
	    "Боливия",
	    "Босния и Герцеговина",
	    "Ботсвана",
	    "Бразилия",
	    "Бруней",
	    "Буркина-Фасо",
	    "Бурунди",
	    "Бутан",
	    "Вануату",
	    "Ватикан",
	    "Великобритания",
	    "Венгрия",
	    "Венесуэла",
	    "Восточный Тимор",
	    "Вьетнам",
	    "Габон",
	    "Гаити",
	    "Гайана",
	    "Гамбия",
	    "Гана",
	    "Гваделупа (не признана)",
	    "Гватемала",
	    "Гвиана (не признана)",
	    "Гвинея",
	    "Гвинея-Бисау",
	    "Германия",
	    "Гондурас",
	    "Гренада",
	    "Греция",
	    "Грузия",
	    "Дания",
	    "Джибути",
	    "Доминика",
	    "Доминиканская Республика",
	    "Египет",
	    "Замбия",
	    "Зимбабве",
	    "Израиль",
	    "Индия",
	    "Индонезия",
	    "Иордания",
	    "Ирак",
	    "Иран",
	    "Ирландия",
	    "Исландия",
	    "Испания",
	    "Италия",
	    "Йемен",
	    "Кабо-Верде",
	    "Казахстан",
	    "Камбоджа",
	    "Камерун",
	    "Канада",
	    "Катар",
	    "Кения",
	    "Кипр",
	    "Кирибати",
	    "Китай",
	    "Колумбия",
	    "Коморские Острова",
	    "Конго",
	    "Демократическая Республика",
	    "Корея (Северная)",
	    "Корея (Южная)",
	    "Косово",
	    "Коста-Рика",
	    "Кот-д'Ивуар",
	    "Куба",
	    "Кувейт",
	    "Кука острова",
	    "Кыргызстан",
	    "Лаос",
	    "Латвия",
	    "Лесото",
	    "Либерия",
	    "Ливан",
	    "Ливия",
	    "Литва",
	    "Лихтенштейн",
	    "Люксембург",
	    "Маврикий",
	    "Мавритания",
	    "Мадагаскар",
	    "Македония",
	    "Малави",
	    "Малайзия",
	    "Мали",
	    "Мальдивы",
	    "Мальта",
	    "Маршалловы Острова",
	    "Мексика",
	    "Микронезия",
	    "Мозамбик",
	    "Молдова",
	    "Монако",
	    "Монголия",
	    "Марокко",
	    "Мьянма",
	    "Намибия",
	    "Науру",
	    "Непал",
	    "Нигер",
	    "Нигерия",
	    "Нидерланды",
	    "Никарагуа",
	    "Новая Зеландия",
	    "Норвегия",
	    "Объединенные Арабские Эмираты",
	    "Оман",
	    "Пакистан",
	    "Палау",
	    "Панама",
	    "Папуа — Новая Гвинея",
	    "Парагвай",
	    "Перу",
	    "Польша",
	    "Португалия",
	    "Республика Конго",
	    "Россия",
	    "Руанда",
	    "Румыния",
	    "Сальвадор",
	    "Самоа",
	    "Сан-Марино",
	    "Сан-Томе и Принсипи",
	    "Саудовская Аравия",
	    "Свазиленд",
	    "Сейшельские острова",
	    "Сенегал",
	    "Сент-Винсент и Гренадины",
	    "Сент-Киттс и Невис",
	    "Сент-Люсия",
	    "Сербия",
	    "Сингапур",
	    "Сирия",
	    "Словакия",
	    "Словения",
	    "Соединенные Штаты Америки",
	    "Соломоновы Острова",
	    "Сомали",
	    "Судан",
	    "Суринам",
	    "Сьерра-Леоне",
	    "Таджикистан",
	    "Таиланд",
	    "Тайвань (не признана)",
	    "Тамил-Илам (не признана)",
	    "Танзания",
	    "Тёркс и Кайкос (не признана)",
	    "Того",
	    "Токелау (не признана)",
	    "Тонга",
	    "Тринидад и Тобаго",
	    "Тувалу",
	    "Тунис",
	    "Турецкая Республика Северного Кипра (не признана)",
	    "Туркменистан",
	    "Турция",
	    "Уганда",
	    "Узбекистан",
	    "Украина",
	    "Уругвай",
	    "Фарерские Острова (не признана)",
	    "Фиджи",
	    "Филиппины",
	    "Финляндия",
	    "Франция",
	    "Французская Полинезия (не признана)",
	    "Хорватия",
	    "Центральноафриканская Республика",
	    "Чад",
	    "Черногория",
	    "Чехия",
	    "Чили",
	    "Швейцария",
	    "Швеция",
	    "Шри-Ланка",
	    "Эквадор",
	    "Экваториальная Гвинея",
	    "Эритрея",
	    "Эстония",
	    "Эфиопия",
	    "Южно-Африканская Республика",
	    "Ямайка",
	    "Япония"
	  ],
	  "building_number": [
	    "###"
	  ],
	  "street_suffix": [
	    "ул.",
	    "улица",
	    "проспект",
	    "пр.",
	    "площадь",
	    "пл."
	  ],
	  "secondary_address": [
	    "кв. ###"
	  ],
	  "postcode": [
	    "######"
	  ],
	  "state": [
	    "Республика Адыгея",
	    "Республика Башкортостан",
	    "Республика Бурятия",
	    "Республика Алтай Республика Дагестан",
	    "Республика Ингушетия",
	    "Кабардино-Балкарская Республика",
	    "Республика Калмыкия",
	    "Республика Карачаево-Черкессия",
	    "Республика Карелия",
	    "Республика Коми",
	    "Республика Марий Эл",
	    "Республика Мордовия",
	    "Республика Саха (Якутия)",
	    "Республика Северная Осетия-Алания",
	    "Республика Татарстан",
	    "Республика Тыва",
	    "Удмуртская Республика",
	    "Республика Хакасия",
	    "Чувашская Республика",
	    "Алтайский край",
	    "Краснодарский край",
	    "Красноярский край",
	    "Приморский край",
	    "Ставропольский край",
	    "Хабаровский край",
	    "Амурская область",
	    "Архангельская область",
	    "Астраханская область",
	    "Белгородская область",
	    "Брянская область",
	    "Владимирская область",
	    "Волгоградская область",
	    "Вологодская область",
	    "Воронежская область",
	    "Ивановская область",
	    "Иркутская область",
	    "Калиниградская область",
	    "Калужская область",
	    "Камчатская область",
	    "Кемеровская область",
	    "Кировская область",
	    "Костромская область",
	    "Курганская область",
	    "Курская область",
	    "Ленинградская область",
	    "Липецкая область",
	    "Магаданская область",
	    "Московская область",
	    "Мурманская область",
	    "Нижегородская область",
	    "Новгородская область",
	    "Новосибирская область",
	    "Омская область",
	    "Оренбургская область",
	    "Орловская область",
	    "Пензенская область",
	    "Пермская область",
	    "Псковская область",
	    "Ростовская область",
	    "Рязанская область",
	    "Самарская область",
	    "Саратовская область",
	    "Сахалинская область",
	    "Свердловская область",
	    "Смоленская область",
	    "Тамбовская область",
	    "Тверская область",
	    "Томская область",
	    "Тульская область",
	    "Тюменская область",
	    "Ульяновская область",
	    "Челябинская область",
	    "Читинская область",
	    "Ярославская область",
	    "Еврейская автономная область",
	    "Агинский Бурятский авт. округ",
	    "Коми-Пермяцкий автономный округ",
	    "Корякский автономный округ",
	    "Ненецкий автономный округ",
	    "Таймырский (Долгано-Ненецкий) автономный округ",
	    "Усть-Ордынский Бурятский автономный округ",
	    "Ханты-Мансийский автономный округ",
	    "Чукотский автономный округ",
	    "Эвенкийский автономный округ",
	    "Ямало-Ненецкий автономный округ",
	    "Чеченская Республика"
	  ],
	  "street_title": [
	    "Советская",
	    "Молодежная",
	    "Центральная",
	    "Школьная",
	    "Новая",
	    "Садовая",
	    "Лесная",
	    "Набережная",
	    "Ленина",
	    "Мира",
	    "Октябрьская",
	    "Зеленая",
	    "Комсомольская",
	    "Заречная",
	    "Первомайская",
	    "Гагарина",
	    "Полевая",
	    "Луговая",
	    "Пионерская",
	    "Кирова",
	    "Юбилейная",
	    "Северная",
	    "Пролетарская",
	    "Степная",
	    "Пушкина",
	    "Калинина",
	    "Южная",
	    "Колхозная",
	    "Рабочая",
	    "Солнечная",
	    "Железнодорожная",
	    "Восточная",
	    "Заводская",
	    "Чапаева",
	    "Нагорная",
	    "Строителей",
	    "Береговая",
	    "Победы",
	    "Горького",
	    "Кооперативная",
	    "Красноармейская",
	    "Совхозная",
	    "Речная",
	    "Школьный",
	    "Спортивная",
	    "Озерная",
	    "Строительная",
	    "Парковая",
	    "Чкалова",
	    "Мичурина",
	    "речень улиц",
	    "Подгорная",
	    "Дружбы",
	    "Почтовая",
	    "Партизанская",
	    "Вокзальная",
	    "Лермонтова",
	    "Свободы",
	    "Дорожная",
	    "Дачная",
	    "Маяковского",
	    "Западная",
	    "Фрунзе",
	    "Дзержинского",
	    "Московская",
	    "Свердлова",
	    "Некрасова",
	    "Гоголя",
	    "Красная",
	    "Трудовая",
	    "Шоссейная",
	    "Чехова",
	    "Коммунистическая",
	    "Труда",
	    "Комарова",
	    "Матросова",
	    "Островского",
	    "Сосновая",
	    "Клубная",
	    "Куйбышева",
	    "Крупской",
	    "Березовая",
	    "Карла Маркса",
	    "8 Марта",
	    "Больничная",
	    "Садовый",
	    "Интернациональная",
	    "Суворова",
	    "Цветочная",
	    "Трактовая",
	    "Ломоносова",
	    "Горная",
	    "Космонавтов",
	    "Энергетиков",
	    "Шевченко",
	    "Весенняя",
	    "Механизаторов",
	    "Коммунальная",
	    "Лесной",
	    "40 лет Победы",
	    "Майская"
	  ],
	  "city_name": [
	    "Москва",
	    "Владимир",
	    "Санкт-Петербург",
	    "Новосибирск",
	    "Екатеринбург",
	    "Нижний Новгород",
	    "Самара",
	    "Казань",
	    "Омск",
	    "Челябинск",
	    "Ростов-на-Дону",
	    "Уфа",
	    "Волгоград",
	    "Пермь",
	    "Красноярск",
	    "Воронеж",
	    "Саратов",
	    "Краснодар",
	    "Тольятти",
	    "Ижевск",
	    "Барнаул",
	    "Ульяновск",
	    "Тюмень",
	    "Иркутск",
	    "Владивосток",
	    "Ярославль",
	    "Хабаровск",
	    "Махачкала",
	    "Оренбург",
	    "Новокузнецк",
	    "Томск",
	    "Кемерово",
	    "Рязань",
	    "Астрахань",
	    "Пенза",
	    "Липецк",
	    "Тула",
	    "Киров",
	    "Чебоксары",
	    "Курск",
	    "Брянскm Магнитогорск",
	    "Иваново",
	    "Тверь",
	    "Ставрополь",
	    "Белгород",
	    "Сочи"
	  ],
	  "city": [
	    "#{Address.city_name}"
	  ],
	  "street_name": [
	    "#{street_suffix} #{Address.street_title}",
	    "#{Address.street_title} #{street_suffix}"
	  ],
	  "street_address": [
	    "#{street_name}, #{building_number}"
	  ],
	  "default_country": [
	    "Россия"
	  ]
	};
	ru.internet = {
	  "free_email": [
	    "yandex.ru",
	    "ya.ru",
	    "mail.ru",
	    "gmail.com",
	    "yahoo.com",
	    "hotmail.com"
	  ],
	  "domain_suffix": [
	    "com",
	    "ru",
	    "info",
	    "рф",
	    "net",
	    "org"
	  ]
	};
	ru.name = {
	  "male_first_name": [
	    "Александр",
	    "Алексей",
	    "Альберт",
	    "Анатолий",
	    "Андрей",
	    "Антон",
	    "Аркадий",
	    "Арсений",
	    "Артём",
	    "Борис",
	    "Вадим",
	    "Валентин",
	    "Валерий",
	    "Василий",
	    "Виктор",
	    "Виталий",
	    "Владимир",
	    "Владислав",
	    "Вячеслав",
	    "Геннадий",
	    "Георгий",
	    "Герман",
	    "Григорий",
	    "Даниил",
	    "Денис",
	    "Дмитрий",
	    "Евгений",
	    "Егор",
	    "Иван",
	    "Игнатий",
	    "Игорь",
	    "Илья",
	    "Константин",
	    "Лаврентий",
	    "Леонид",
	    "Лука",
	    "Макар",
	    "Максим",
	    "Матвей",
	    "Михаил",
	    "Никита",
	    "Николай",
	    "Олег",
	    "Роман",
	    "Семён",
	    "Сергей",
	    "Станислав",
	    "Степан",
	    "Фёдор",
	    "Эдуард",
	    "Юрий",
	    "Ярослав"
	  ],
	  "male_middle_name": [
	    "Александрович",
	    "Алексеевич",
	    "Альбертович",
	    "Анатольевич",
	    "Андреевич",
	    "Антонович",
	    "Аркадьевич",
	    "Арсеньевич",
	    "Артёмович",
	    "Борисович",
	    "Вадимович",
	    "Валентинович",
	    "Валерьевич",
	    "Васильевич",
	    "Викторович",
	    "Витальевич",
	    "Владимирович",
	    "Владиславович",
	    "Вячеславович",
	    "Геннадьевич",
	    "Георгиевич",
	    "Германович",
	    "Григорьевич",
	    "Даниилович",
	    "Денисович",
	    "Дмитриевич",
	    "Евгеньевич",
	    "Егорович",
	    "Иванович",
	    "Игнатьевич",
	    "Игоревич",
	    "Ильич",
	    "Константинович",
	    "Лаврентьевич",
	    "Леонидович",
	    "Лукич",
	    "Макарович",
	    "Максимович",
	    "Матвеевич",
	    "Михайлович",
	    "Никитич",
	    "Николаевич",
	    "Олегович",
	    "Романович",
	    "Семёнович",
	    "Сергеевич",
	    "Станиславович",
	    "Степанович",
	    "Фёдорович",
	    "Эдуардович",
	    "Юрьевич",
	    "Ярославович"
	  ],
	  "male_last_name": [
	    "Смирнов",
	    "Иванов",
	    "Кузнецов",
	    "Попов",
	    "Соколов",
	    "Лебедев",
	    "Козлов",
	    "Новиков",
	    "Морозов",
	    "Петров",
	    "Волков",
	    "Соловьев",
	    "Васильев",
	    "Зайцев",
	    "Павлов",
	    "Семенов",
	    "Голубев",
	    "Виноградов",
	    "Богданов",
	    "Воробьев",
	    "Федоров",
	    "Михайлов",
	    "Беляев",
	    "Тарасов",
	    "Белов",
	    "Комаров",
	    "Орлов",
	    "Киселев",
	    "Макаров",
	    "Андреев",
	    "Ковалев",
	    "Ильин",
	    "Гусев",
	    "Титов",
	    "Кузьмин",
	    "Кудрявцев",
	    "Баранов",
	    "Куликов",
	    "Алексеев",
	    "Степанов",
	    "Яковлев",
	    "Сорокин",
	    "Сергеев",
	    "Романов",
	    "Захаров",
	    "Борисов",
	    "Королев",
	    "Герасимов",
	    "Пономарев",
	    "Григорьев",
	    "Лазарев",
	    "Медведев",
	    "Ершов",
	    "Никитин",
	    "Соболев",
	    "Рябов",
	    "Поляков",
	    "Цветков",
	    "Данилов",
	    "Жуков",
	    "Фролов",
	    "Журавлев",
	    "Николаев",
	    "Крылов",
	    "Максимов",
	    "Сидоров",
	    "Осипов",
	    "Белоусов",
	    "Федотов",
	    "Дорофеев",
	    "Егоров",
	    "Матвеев",
	    "Бобров",
	    "Дмитриев",
	    "Калинин",
	    "Анисимов",
	    "Петухов",
	    "Антонов",
	    "Тимофеев",
	    "Никифоров",
	    "Веселов",
	    "Филиппов",
	    "Марков",
	    "Большаков",
	    "Суханов",
	    "Миронов",
	    "Ширяев",
	    "Александров",
	    "Коновалов",
	    "Шестаков",
	    "Казаков",
	    "Ефимов",
	    "Денисов",
	    "Громов",
	    "Фомин",
	    "Давыдов",
	    "Мельников",
	    "Щербаков",
	    "Блинов",
	    "Колесников",
	    "Карпов",
	    "Афанасьев",
	    "Власов",
	    "Маслов",
	    "Исаков",
	    "Тихонов",
	    "Аксенов",
	    "Гаврилов",
	    "Родионов",
	    "Котов",
	    "Горбунов",
	    "Кудряшов",
	    "Быков",
	    "Зуев",
	    "Третьяков",
	    "Савельев",
	    "Панов",
	    "Рыбаков",
	    "Суворов",
	    "Абрамов",
	    "Воронов",
	    "Мухин",
	    "Архипов",
	    "Трофимов",
	    "Мартынов",
	    "Емельянов",
	    "Горшков",
	    "Чернов",
	    "Овчинников",
	    "Селезнев",
	    "Панфилов",
	    "Копылов",
	    "Михеев",
	    "Галкин",
	    "Назаров",
	    "Лобанов",
	    "Лукин",
	    "Беляков",
	    "Потапов",
	    "Некрасов",
	    "Хохлов",
	    "Жданов",
	    "Наумов",
	    "Шилов",
	    "Воронцов",
	    "Ермаков",
	    "Дроздов",
	    "Игнатьев",
	    "Савин",
	    "Логинов",
	    "Сафонов",
	    "Капустин",
	    "Кириллов",
	    "Моисеев",
	    "Елисеев",
	    "Кошелев",
	    "Костин",
	    "Горбачев",
	    "Орехов",
	    "Ефремов",
	    "Исаев",
	    "Евдокимов",
	    "Калашников",
	    "Кабанов",
	    "Носков",
	    "Юдин",
	    "Кулагин",
	    "Лапин",
	    "Прохоров",
	    "Нестеров",
	    "Харитонов",
	    "Агафонов",
	    "Муравьев",
	    "Ларионов",
	    "Федосеев",
	    "Зимин",
	    "Пахомов",
	    "Шубин",
	    "Игнатов",
	    "Филатов",
	    "Крюков",
	    "Рогов",
	    "Кулаков",
	    "Терентьев",
	    "Молчанов",
	    "Владимиров",
	    "Артемьев",
	    "Гурьев",
	    "Зиновьев",
	    "Гришин",
	    "Кононов",
	    "Дементьев",
	    "Ситников",
	    "Симонов",
	    "Мишин",
	    "Фадеев",
	    "Комиссаров",
	    "Мамонтов",
	    "Носов",
	    "Гуляев",
	    "Шаров",
	    "Устинов",
	    "Вишняков",
	    "Евсеев",
	    "Лаврентьев",
	    "Брагин",
	    "Константинов",
	    "Корнилов",
	    "Авдеев",
	    "Зыков",
	    "Бирюков",
	    "Шарапов",
	    "Никонов",
	    "Щукин",
	    "Дьячков",
	    "Одинцов",
	    "Сазонов",
	    "Якушев",
	    "Красильников",
	    "Гордеев",
	    "Самойлов",
	    "Князев",
	    "Беспалов",
	    "Уваров",
	    "Шашков",
	    "Бобылев",
	    "Доронин",
	    "Белозеров",
	    "Рожков",
	    "Самсонов",
	    "Мясников",
	    "Лихачев",
	    "Буров",
	    "Сысоев",
	    "Фомичев",
	    "Русаков",
	    "Стрелков",
	    "Гущин",
	    "Тетерин",
	    "Колобов",
	    "Субботин",
	    "Фокин",
	    "Блохин",
	    "Селиверстов",
	    "Пестов",
	    "Кондратьев",
	    "Силин",
	    "Меркушев",
	    "Лыткин",
	    "Туров"
	  ],
	  "female_first_name": [
	    "Анна",
	    "Алёна",
	    "Алевтина",
	    "Александра",
	    "Алина",
	    "Алла",
	    "Анастасия",
	    "Ангелина",
	    "Анжела",
	    "Анжелика",
	    "Антонида",
	    "Антонина",
	    "Анфиса",
	    "Арина",
	    "Валентина",
	    "Валерия",
	    "Варвара",
	    "Василиса",
	    "Вера",
	    "Вероника",
	    "Виктория",
	    "Галина",
	    "Дарья",
	    "Евгения",
	    "Екатерина",
	    "Елена",
	    "Елизавета",
	    "Жанна",
	    "Зинаида",
	    "Зоя",
	    "Ирина",
	    "Кира",
	    "Клавдия",
	    "Ксения",
	    "Лариса",
	    "Лидия",
	    "Любовь",
	    "Людмила",
	    "Маргарита",
	    "Марина",
	    "Мария",
	    "Надежда",
	    "Наталья",
	    "Нина",
	    "Оксана",
	    "Ольга",
	    "Раиса",
	    "Регина",
	    "Римма",
	    "Светлана",
	    "София",
	    "Таисия",
	    "Тамара",
	    "Татьяна",
	    "Ульяна",
	    "Юлия"
	  ],
	  "female_middle_name": [
	    "Александровна",
	    "Алексеевна",
	    "Альбертовна",
	    "Анатольевна",
	    "Андреевна",
	    "Антоновна",
	    "Аркадьевна",
	    "Арсеньевна",
	    "Артёмовна",
	    "Борисовна",
	    "Вадимовна",
	    "Валентиновна",
	    "Валерьевна",
	    "Васильевна",
	    "Викторовна",
	    "Витальевна",
	    "Владимировна",
	    "Владиславовна",
	    "Вячеславовна",
	    "Геннадьевна",
	    "Георгиевна",
	    "Германовна",
	    "Григорьевна",
	    "Данииловна",
	    "Денисовна",
	    "Дмитриевна",
	    "Евгеньевна",
	    "Егоровна",
	    "Ивановна",
	    "Игнатьевна",
	    "Игоревна",
	    "Ильинична",
	    "Константиновна",
	    "Лаврентьевна",
	    "Леонидовна",
	    "Макаровна",
	    "Максимовна",
	    "Матвеевна",
	    "Михайловна",
	    "Никитична",
	    "Николаевна",
	    "Олеговна",
	    "Романовна",
	    "Семёновна",
	    "Сергеевна",
	    "Станиславовна",
	    "Степановна",
	    "Фёдоровна",
	    "Эдуардовна",
	    "Юрьевна",
	    "Ярославовна"
	  ],
	  "female_last_name": [
	    "Смирнова",
	    "Иванова",
	    "Кузнецова",
	    "Попова",
	    "Соколова",
	    "Лебедева",
	    "Козлова",
	    "Новикова",
	    "Морозова",
	    "Петрова",
	    "Волкова",
	    "Соловьева",
	    "Васильева",
	    "Зайцева",
	    "Павлова",
	    "Семенова",
	    "Голубева",
	    "Виноградова",
	    "Богданова",
	    "Воробьева",
	    "Федорова",
	    "Михайлова",
	    "Беляева",
	    "Тарасова",
	    "Белова",
	    "Комарова",
	    "Орлова",
	    "Киселева",
	    "Макарова",
	    "Андреева",
	    "Ковалева",
	    "Ильина",
	    "Гусева",
	    "Титова",
	    "Кузьмина",
	    "Кудрявцева",
	    "Баранова",
	    "Куликова",
	    "Алексеева",
	    "Степанова",
	    "Яковлева",
	    "Сорокина",
	    "Сергеева",
	    "Романова",
	    "Захарова",
	    "Борисова",
	    "Королева",
	    "Герасимова",
	    "Пономарева",
	    "Григорьева",
	    "Лазарева",
	    "Медведева",
	    "Ершова",
	    "Никитина",
	    "Соболева",
	    "Рябова",
	    "Полякова",
	    "Цветкова",
	    "Данилова",
	    "Жукова",
	    "Фролова",
	    "Журавлева",
	    "Николаева",
	    "Крылова",
	    "Максимова",
	    "Сидорова",
	    "Осипова",
	    "Белоусова",
	    "Федотова",
	    "Дорофеева",
	    "Егорова",
	    "Матвеева",
	    "Боброва",
	    "Дмитриева",
	    "Калинина",
	    "Анисимова",
	    "Петухова",
	    "Антонова",
	    "Тимофеева",
	    "Никифорова",
	    "Веселова",
	    "Филиппова",
	    "Маркова",
	    "Большакова",
	    "Суханова",
	    "Миронова",
	    "Ширяева",
	    "Александрова",
	    "Коновалова",
	    "Шестакова",
	    "Казакова",
	    "Ефимова",
	    "Денисова",
	    "Громова",
	    "Фомина",
	    "Давыдова",
	    "Мельникова",
	    "Щербакова",
	    "Блинова",
	    "Колесникова",
	    "Карпова",
	    "Афанасьева",
	    "Власова",
	    "Маслова",
	    "Исакова",
	    "Тихонова",
	    "Аксенова",
	    "Гаврилова",
	    "Родионова",
	    "Котова",
	    "Горбунова",
	    "Кудряшова",
	    "Быкова",
	    "Зуева",
	    "Третьякова",
	    "Савельева",
	    "Панова",
	    "Рыбакова",
	    "Суворова",
	    "Абрамова",
	    "Воронова",
	    "Мухина",
	    "Архипова",
	    "Трофимова",
	    "Мартынова",
	    "Емельянова",
	    "Горшкова",
	    "Чернова",
	    "Овчинникова",
	    "Селезнева",
	    "Панфилова",
	    "Копылова",
	    "Михеева",
	    "Галкина",
	    "Назарова",
	    "Лобанова",
	    "Лукина",
	    "Белякова",
	    "Потапова",
	    "Некрасова",
	    "Хохлова",
	    "Жданова",
	    "Наумова",
	    "Шилова",
	    "Воронцова",
	    "Ермакова",
	    "Дроздова",
	    "Игнатьева",
	    "Савина",
	    "Логинова",
	    "Сафонова",
	    "Капустина",
	    "Кириллова",
	    "Моисеева",
	    "Елисеева",
	    "Кошелева",
	    "Костина",
	    "Горбачева",
	    "Орехова",
	    "Ефремова",
	    "Исаева",
	    "Евдокимова",
	    "Калашникова",
	    "Кабанова",
	    "Носкова",
	    "Юдина",
	    "Кулагина",
	    "Лапина",
	    "Прохорова",
	    "Нестерова",
	    "Харитонова",
	    "Агафонова",
	    "Муравьева",
	    "Ларионова",
	    "Федосеева",
	    "Зимина",
	    "Пахомова",
	    "Шубина",
	    "Игнатова",
	    "Филатова",
	    "Крюкова",
	    "Рогова",
	    "Кулакова",
	    "Терентьева",
	    "Молчанова",
	    "Владимирова",
	    "Артемьева",
	    "Гурьева",
	    "Зиновьева",
	    "Гришина",
	    "Кононова",
	    "Дементьева",
	    "Ситникова",
	    "Симонова",
	    "Мишина",
	    "Фадеева",
	    "Комиссарова",
	    "Мамонтова",
	    "Носова",
	    "Гуляева",
	    "Шарова",
	    "Устинова",
	    "Вишнякова",
	    "Евсеева",
	    "Лаврентьева",
	    "Брагина",
	    "Константинова",
	    "Корнилова",
	    "Авдеева",
	    "Зыкова",
	    "Бирюкова",
	    "Шарапова",
	    "Никонова",
	    "Щукина",
	    "Дьячкова",
	    "Одинцова",
	    "Сазонова",
	    "Якушева",
	    "Красильникова",
	    "Гордеева",
	    "Самойлова",
	    "Князева",
	    "Беспалова",
	    "Уварова",
	    "Шашкова",
	    "Бобылева",
	    "Доронина",
	    "Белозерова",
	    "Рожкова",
	    "Самсонова",
	    "Мясникова",
	    "Лихачева",
	    "Бурова",
	    "Сысоева",
	    "Фомичева",
	    "Русакова",
	    "Стрелкова",
	    "Гущина",
	    "Тетерина",
	    "Колобова",
	    "Субботина",
	    "Фокина",
	    "Блохина",
	    "Селиверстова",
	    "Пестова",
	    "Кондратьева",
	    "Силина",
	    "Меркушева",
	    "Лыткина",
	    "Турова"
	  ],
	  "name": [
	    "#{male_first_name} #{male_last_name}",
	    "#{male_last_name} #{male_first_name}",
	    "#{male_first_name} #{male_middle_name} #{male_last_name}",
	    "#{male_last_name} #{male_first_name} #{male_middle_name}",
	    "#{female_first_name} #{female_last_name}",
	    "#{female_last_name} #{female_first_name}",
	    "#{female_first_name} #{female_middle_name} #{female_last_name}",
	    "#{female_last_name} #{female_first_name} #{female_middle_name}"
	  ]
	};
	ru.phone_number = {
	  "formats": [
	    "(9##)###-##-##"
	  ]
	};
	ru.commerce = {
	  "color": [
	    "красный",
	    "зеленый",
	    "синий",
	    "желтый",
	    "багровый",
	    "мятный",
	    "зеленовато-голубой",
	    "белый",
	    "черный",
	    "оранжевый",
	    "розовый",
	    "серый",
	    "красно-коричневый",
	    "фиолетовый",
	    "бирюзовый",
	    "желто-коричневый",
	    "небесно голубой",
	    "оранжево-розовый",
	    "темно-фиолетовый",
	    "орхидный",
	    "оливковый",
	    "пурпурный",
	    "лимонный",
	    "кремовый",
	    "сине-фиолетовый",
	    "золотой",
	    "красно-пурпурный",
	    "голубой",
	    "лазурный",
	    "лиловый",
	    "серебряный"
	  ],
	  "department": [
	    "Книги",
	    "Фильмы",
	    "музыка",
	    "игры",
	    "Электроника",
	    "компьютеры",
	    "Дом",
	    "садинструмент",
	    "Бакалея",
	    "здоровье",
	    "красота",
	    "Игрушки",
	    "детское",
	    "для малышей",
	    "Одежда",
	    "обувь",
	    "украшения",
	    "Спорт",
	    "туризм",
	    "Автомобильное",
	    "промышленное"
	  ],
	  "product_name": {
	    "adjective": [
	      "Маленький",
	      "Эргономичный",
	      "Грубый",
	      "Интеллектуальный",
	      "Великолепный",
	      "Невероятный",
	      "Фантастический",
	      "Практчиный",
	      "Лоснящийся",
	      "Потрясающий"
	    ],
	    "material": [
	      "Стальной",
	      "Деревянный",
	      "Бетонный",
	      "Пластиковый",
	      "Хлопковый",
	      "Гранитный",
	      "Резиновый"
	    ],
	    "product": [
	      "Стул",
	      "Автомобиль",
	      "Компьютер",
	      "Берет",
	      "Кулон",
	      "Стол",
	      "Свитер",
	      "Ремень",
	      "Ботинок"
	    ]
	  }
	};
	ru.company = {
	  "prefix": [
	    "ИП",
	    "ООО",
	    "ЗАО",
	    "ОАО",
	    "НКО",
	    "ТСЖ",
	    "ОП"
	  ],
	  "suffix": [
	    "Снаб",
	    "Торг",
	    "Пром",
	    "Трейд",
	    "Сбыт"
	  ],
	  "name": [
	    "#{prefix} #{Name.female_first_name}",
	    "#{prefix} #{Name.male_first_name}",
	    "#{prefix} #{Name.male_last_name}",
	    "#{prefix} #{suffix}#{suffix}",
	    "#{prefix} #{suffix}#{suffix}#{suffix}",
	    "#{prefix} #{Address.city_name}#{suffix}",
	    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
	    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var sk = {};
	module["exports"] = sk;
	sk.title = "Slovakian";
	sk.address = {
	  "city_prefix": [
	    "North",
	    "East",
	    "West",
	    "South",
	    "New",
	    "Lake",
	    "Port"
	  ],
	  "city_suffix": [
	    "town",
	    "ton",
	    "land",
	    "ville",
	    "berg",
	    "burgh",
	    "borough",
	    "bury",
	    "view",
	    "port",
	    "mouth",
	    "stad",
	    "furt",
	    "chester",
	    "mouth",
	    "fort",
	    "haven",
	    "side",
	    "shire"
	  ],
	  "country": [
	    "Afganistan",
	    "Afgánsky islamský štát",
	    "Albánsko",
	    "Albánska republika",
	    "Alžírsko",
	    "Alžírska demokratická ľudová republika",
	    "Andorra",
	    "Andorrské kniežatsvo",
	    "Angola",
	    "Angolská republika",
	    "Antigua a Barbuda",
	    "Antigua a Barbuda",
	    "Argentína",
	    "Argentínska republika",
	    "Arménsko",
	    "Arménska republika",
	    "Austrália",
	    "Austrálsky zväz",
	    "Azerbajdžan",
	    "Azerbajdžanská republika",
	    "Bahamy",
	    "Bahamské spoločenstvo",
	    "Bahrajn",
	    "Bahrajnské kráľovstvo",
	    "Bangladéš",
	    "Bangladéšska ľudová republika",
	    "Barbados",
	    "Barbados",
	    "Belgicko",
	    "Belgické kráľovstvo",
	    "Belize",
	    "Belize",
	    "Benin",
	    "Beninská republika",
	    "Bhután",
	    "Bhutánske kráľovstvo",
	    "Bielorusko",
	    "Bieloruská republika",
	    "Bolívia",
	    "Bolívijská republika",
	    "Bosna a Hercegovina",
	    "Republika Bosny a Hercegoviny",
	    "Botswana",
	    "Botswanská republika",
	    "Brazília",
	    "Brazílska federatívna republika",
	    "Brunej",
	    "Brunejský sultanát",
	    "Bulharsko",
	    "Bulharská republika",
	    "Burkina Faso",
	    "Burkina Faso",
	    "Burundi",
	    "Burundská republika",
	    "Cyprus",
	    "Cyperská republika",
	    "Čad",
	    "Republika Čad",
	    "Česko",
	    "Česká republika",
	    "Čína",
	    "Čínska ľudová republika",
	    "Dánsko",
	    "Dánsko kráľovstvo",
	    "Dominika",
	    "Spoločenstvo Dominika",
	    "Dominikánska republika",
	    "Dominikánska republika",
	    "Džibutsko",
	    "Džibutská republika",
	    "Egypt",
	    "Egyptská arabská republika",
	    "Ekvádor",
	    "Ekvádorská republika",
	    "Eritrea",
	    "Eritrejský štát",
	    "Estónsko",
	    "Estónska republika",
	    "Etiópia",
	    "Etiópska federatívna demokratická republika",
	    "Fidži",
	    "Republika ostrovy Fidži",
	    "Filipíny",
	    "Filipínska republika",
	    "Fínsko",
	    "Fínska republika",
	    "Francúzsko",
	    "Francúzska republika",
	    "Gabon",
	    "Gabonská republika",
	    "Gambia",
	    "Gambijská republika",
	    "Ghana",
	    "Ghanská republika",
	    "Grécko",
	    "Helénska republika",
	    "Grenada",
	    "Grenada",
	    "Gruzínsko",
	    "Gruzínsko",
	    "Guatemala",
	    "Guatemalská republika",
	    "Guinea",
	    "Guinejská republika",
	    "Guinea-Bissau",
	    "Republika Guinea-Bissau",
	    "Guayana",
	    "Guayanská republika",
	    "Haiti",
	    "Republika Haiti",
	    "Holandsko",
	    "Holandské kráľovstvo",
	    "Honduras",
	    "Honduraská republika",
	    "Chile",
	    "Čílska republika",
	    "Chorvátsko",
	    "Chorvátska republika",
	    "India",
	    "Indická republika",
	    "Indonézia",
	    "Indonézska republika",
	    "Irak",
	    "Iracká republika",
	    "Irán",
	    "Iránska islamská republika",
	    "Island",
	    "Islandská republika",
	    "Izrael",
	    "Štát Izrael",
	    "Írsko",
	    "Írska republika",
	    "Jamajka",
	    "Jamajka",
	    "Japonsko",
	    "Japonsko",
	    "Jemen",
	    "Jemenská republika",
	    "Jordánsko",
	    "Jordánske hášimovské kráľovstvo",
	    "Južná Afrika",
	    "Juhoafrická republika",
	    "Kambodža",
	    "Kambodžské kráľovstvo",
	    "Kamerun",
	    "Kamerunská republika",
	    "Kanada",
	    "Kanada",
	    "Kapverdy",
	    "Kapverdská republika",
	    "Katar",
	    "Štát Katar",
	    "Kazachstan",
	    "Kazašská republika",
	    "Keňa",
	    "Kenská republika",
	    "Kirgizsko",
	    "Kirgizská republika",
	    "Kiribati",
	    "Kiribatská republika",
	    "Kolumbia",
	    "Kolumbijská republika",
	    "Komory",
	    "Komorská únia",
	    "Kongo",
	    "Konžská demokratická republika",
	    "Kongo (\"Brazzaville\")",
	    "Konžská republika",
	    "Kórea (\"Južná\")",
	    "Kórejská republika",
	    "Kórea (\"Severná\")",
	    "Kórejská ľudovodemokratická republika",
	    "Kostarika",
	    "Kostarická republika",
	    "Kuba",
	    "Kubánska republika",
	    "Kuvajt",
	    "Kuvajtský štát",
	    "Laos",
	    "Laoská ľudovodemokratická republika",
	    "Lesotho",
	    "Lesothské kráľovstvo",
	    "Libanon",
	    "Libanonská republika",
	    "Libéria",
	    "Libérijská republika",
	    "Líbya",
	    "Líbyjská arabská ľudová socialistická džamáhírija",
	    "Lichtenštajnsko",
	    "Lichtenštajnské kniežatstvo",
	    "Litva",
	    "Litovská republika",
	    "Lotyšsko",
	    "Lotyšská republika",
	    "Luxembursko",
	    "Luxemburské veľkovojvodstvo",
	    "Macedónsko",
	    "Macedónska republika",
	    "Madagaskar",
	    "Madagaskarská republika",
	    "Maďarsko",
	    "Maďarská republika",
	    "Malajzia",
	    "Malajzia",
	    "Malawi",
	    "Malawijská republika",
	    "Maldivy",
	    "Maldivská republika",
	    "Mali",
	    "Malijská republika",
	    "Malta",
	    "Malta",
	    "Maroko",
	    "Marocké kráľovstvo",
	    "Marshallove ostrovy",
	    "Republika Marshallových ostrovy",
	    "Mauritánia",
	    "Mauritánska islamská republika",
	    "Maurícius",
	    "Maurícijská republika",
	    "Mexiko",
	    "Spojené štáty mexické",
	    "Mikronézia",
	    "Mikronézske federatívne štáty",
	    "Mjanmarsko",
	    "Mjanmarský zväz",
	    "Moldavsko",
	    "Moldavská republika",
	    "Monako",
	    "Monacké kniežatstvo",
	    "Mongolsko",
	    "Mongolsko",
	    "Mozambik",
	    "Mozambická republika",
	    "Namíbia",
	    "Namíbijská republika",
	    "Nauru",
	    "Naurská republika",
	    "Nemecko",
	    "Nemecká spolková republika",
	    "Nepál",
	    "Nepálske kráľovstvo",
	    "Niger",
	    "Nigerská republika",
	    "Nigéria",
	    "Nigérijská federatívna republika",
	    "Nikaragua",
	    "Nikaragujská republika",
	    "Nový Zéland",
	    "Nový Zéland",
	    "Nórsko",
	    "Nórske kráľovstvo",
	    "Omán",
	    "Ománsky sultanát",
	    "Pakistan",
	    "Pakistanská islamská republika",
	    "Palau",
	    "Palauská republika",
	    "Panama",
	    "Panamská republika",
	    "Papua-Nová Guinea",
	    "Nezávislý štát Papua-Nová Guinea",
	    "Paraguaj",
	    "Paraguajská republika",
	    "Peru",
	    "Peruánska republika",
	    "Pobrežie Slonoviny",
	    "Republika Pobrežie Slonoviny",
	    "Poľsko",
	    "Poľská republika",
	    "Portugalsko",
	    "Portugalská republika",
	    "Rakúsko",
	    "Rakúska republika",
	    "Rovníková Guinea",
	    "Republika Rovníková Guinea",
	    "Rumunsko",
	    "Rumunsko",
	    "Rusko",
	    "Ruská federácia",
	    "Rwanda",
	    "Rwandská republika",
	    "Salvádor",
	    "Salvádorská republika",
	    "Samoa",
	    "Nezávislý štát Samoa",
	    "San Maríno",
	    "Sanmarínska republika",
	    "Saudská Arábia",
	    "Kráľovstvo Saudskej Arábie",
	    "Senegal",
	    "Senegalská republika",
	    "Seychely",
	    "Seychelská republika",
	    "Sierra Leone",
	    "Republika Sierra Leone",
	    "Singapur",
	    "Singapurska republika",
	    "Slovensko",
	    "Slovenská republika",
	    "Slovinsko",
	    "Slovinská republika",
	    "Somálsko",
	    "Somálska demokratická republika",
	    "Spojené arabské emiráty",
	    "Spojené arabské emiráty",
	    "Spojené štáty americké",
	    "Spojené štáty americké",
	    "Srbsko a Čierna Hora",
	    "Srbsko a Čierna Hora",
	    "Srí Lanka",
	    "Demokratická socialistická republika Srí Lanka",
	    "Stredoafrická republika",
	    "Stredoafrická republika",
	    "Sudán",
	    "Sudánska republika",
	    "Surinam",
	    "Surinamská republika",
	    "Svazijsko",
	    "Svazijské kráľovstvo",
	    "Svätá Lucia",
	    "Svätá Lucia",
	    "Svätý Krištof a Nevis",
	    "Federácia Svätý Krištof a Nevis",
	    "Sv. Tomáš a Princov Ostrov",
	    "Demokratická republika Svätý Tomáš a Princov Ostrov",
	    "Sv. Vincent a Grenadíny",
	    "Svätý Vincent a Grenadíny",
	    "Sýria",
	    "Sýrska arabská republika",
	    "Šalamúnove ostrovy",
	    "Šalamúnove ostrovy",
	    "Španielsko",
	    "Španielske kráľovstvo",
	    "Švajčiarsko",
	    "Švajčiarska konfederácia",
	    "Švédsko",
	    "Švédske kráľovstvo",
	    "Tadžikistan",
	    "Tadžická republika",
	    "Taliansko",
	    "Talianska republika",
	    "Tanzánia",
	    "Tanzánijská zjednotená republika",
	    "Thajsko",
	    "Thajské kráľovstvo",
	    "Togo",
	    "Tožská republika",
	    "Tonga",
	    "Tonžské kráľovstvo",
	    "Trinidad a Tobago",
	    "Republika Trinidad a Tobago",
	    "Tunisko",
	    "Tuniská republika",
	    "Turecko",
	    "Turecká republika",
	    "Turkménsko",
	    "Turkménsko",
	    "Tuvalu",
	    "Tuvalu",
	    "Uganda",
	    "Ugandská republika",
	    "Ukrajina",
	    "Uruguaj",
	    "Uruguajská východná republika",
	    "Uzbekistan",
	    "Vanuatu",
	    "Vanuatská republika",
	    "Vatikán",
	    "Svätá Stolica",
	    "Veľká Británia",
	    "Spojené kráľovstvo Veľkej Británie a Severného Írska",
	    "Venezuela",
	    "Venezuelská bolívarovská republika",
	    "Vietnam",
	    "Vietnamská socialistická republika",
	    "Východný Timor",
	    "Demokratická republika Východný Timor",
	    "Zambia",
	    "Zambijská republika",
	    "Zimbabwe",
	    "Zimbabwianska republika"
	  ],
	  "building_number": [
	    "#",
	    "##",
	    "###"
	  ],
	  "secondary_address": [
	    "Apt. ###",
	    "Suite ###"
	  ],
	  "postcode": [
	    "#####",
	    "### ##",
	    "## ###"
	  ],
	  "state": [],
	  "state_abbr": [],
	  "time_zone": [
	    "Pacific/Midway",
	    "Pacific/Pago_Pago",
	    "Pacific/Honolulu",
	    "America/Juneau",
	    "America/Los_Angeles",
	    "America/Tijuana",
	    "America/Denver",
	    "America/Phoenix",
	    "America/Chihuahua",
	    "America/Mazatlan",
	    "America/Chicago",
	    "America/Regina",
	    "America/Mexico_City",
	    "America/Mexico_City",
	    "America/Monterrey",
	    "America/Guatemala",
	    "America/New_York",
	    "America/Indiana/Indianapolis",
	    "America/Bogota",
	    "America/Lima",
	    "America/Lima",
	    "America/Halifax",
	    "America/Caracas",
	    "America/La_Paz",
	    "America/Santiago",
	    "America/St_Johns",
	    "America/Sao_Paulo",
	    "America/Argentina/Buenos_Aires",
	    "America/Guyana",
	    "America/Godthab",
	    "Atlantic/South_Georgia",
	    "Atlantic/Azores",
	    "Atlantic/Cape_Verde",
	    "Europe/Dublin",
	    "Europe/London",
	    "Europe/Lisbon",
	    "Europe/London",
	    "Africa/Casablanca",
	    "Africa/Monrovia",
	    "Etc/UTC",
	    "Europe/Belgrade",
	    "Europe/Bratislava",
	    "Europe/Budapest",
	    "Europe/Ljubljana",
	    "Europe/Prague",
	    "Europe/Sarajevo",
	    "Europe/Skopje",
	    "Europe/Warsaw",
	    "Europe/Zagreb",
	    "Europe/Brussels",
	    "Europe/Copenhagen",
	    "Europe/Madrid",
	    "Europe/Paris",
	    "Europe/Amsterdam",
	    "Europe/Berlin",
	    "Europe/Berlin",
	    "Europe/Rome",
	    "Europe/Stockholm",
	    "Europe/Vienna",
	    "Africa/Algiers",
	    "Europe/Bucharest",
	    "Africa/Cairo",
	    "Europe/Helsinki",
	    "Europe/Kiev",
	    "Europe/Riga",
	    "Europe/Sofia",
	    "Europe/Tallinn",
	    "Europe/Vilnius",
	    "Europe/Athens",
	    "Europe/Istanbul",
	    "Europe/Minsk",
	    "Asia/Jerusalem",
	    "Africa/Harare",
	    "Africa/Johannesburg",
	    "Europe/Moscow",
	    "Europe/Moscow",
	    "Europe/Moscow",
	    "Asia/Kuwait",
	    "Asia/Riyadh",
	    "Africa/Nairobi",
	    "Asia/Baghdad",
	    "Asia/Tehran",
	    "Asia/Muscat",
	    "Asia/Muscat",
	    "Asia/Baku",
	    "Asia/Tbilisi",
	    "Asia/Yerevan",
	    "Asia/Kabul",
	    "Asia/Yekaterinburg",
	    "Asia/Karachi",
	    "Asia/Karachi",
	    "Asia/Tashkent",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kolkata",
	    "Asia/Kathmandu",
	    "Asia/Dhaka",
	    "Asia/Dhaka",
	    "Asia/Colombo",
	    "Asia/Almaty",
	    "Asia/Novosibirsk",
	    "Asia/Rangoon",
	    "Asia/Bangkok",
	    "Asia/Bangkok",
	    "Asia/Jakarta",
	    "Asia/Krasnoyarsk",
	    "Asia/Shanghai",
	    "Asia/Chongqing",
	    "Asia/Hong_Kong",
	    "Asia/Urumqi",
	    "Asia/Kuala_Lumpur",
	    "Asia/Singapore",
	    "Asia/Taipei",
	    "Australia/Perth",
	    "Asia/Irkutsk",
	    "Asia/Ulaanbaatar",
	    "Asia/Seoul",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Tokyo",
	    "Asia/Yakutsk",
	    "Australia/Darwin",
	    "Australia/Adelaide",
	    "Australia/Melbourne",
	    "Australia/Melbourne",
	    "Australia/Sydney",
	    "Australia/Brisbane",
	    "Australia/Hobart",
	    "Asia/Vladivostok",
	    "Pacific/Guam",
	    "Pacific/Port_Moresby",
	    "Asia/Magadan",
	    "Asia/Magadan",
	    "Pacific/Noumea",
	    "Pacific/Fiji",
	    "Asia/Kamchatka",
	    "Pacific/Majuro",
	    "Pacific/Auckland",
	    "Pacific/Auckland",
	    "Pacific/Tongatapu",
	    "Pacific/Fakaofo",
	    "Pacific/Apia"
	  ],
	  "city_name": [
	    "Bánovce nad Bebravou",
	    "Banská Bystrica",
	    "Banská Štiavnica",
	    "Bardejov",
	    "Bratislava I",
	    "Bratislava II",
	    "Bratislava III",
	    "Bratislava IV",
	    "Bratislava V",
	    "Brezno",
	    "Bytča",
	    "Čadca",
	    "Detva",
	    "Dolný Kubín",
	    "Dunajská Streda",
	    "Galanta",
	    "Gelnica",
	    "Hlohovec",
	    "Humenné",
	    "Ilava",
	    "Kežmarok",
	    "Komárno",
	    "Košice I",
	    "Košice II",
	    "Košice III",
	    "Košice IV",
	    "Košice-okolie",
	    "Krupina",
	    "Kysucké Nové Mesto",
	    "Levice",
	    "Levoča",
	    "Liptovský Mikuláš",
	    "Lučenec",
	    "Malacky",
	    "Martin",
	    "Medzilaborce",
	    "Michalovce",
	    "Myjava",
	    "Námestovo",
	    "Nitra",
	    "Nové Mesto n.Váhom",
	    "Nové Zámky",
	    "Partizánske",
	    "Pezinok",
	    "Piešťany",
	    "Poltár",
	    "Poprad",
	    "Považská Bystrica",
	    "Prešov",
	    "Prievidza",
	    "Púchov",
	    "Revúca",
	    "Rimavská Sobota",
	    "Rožňava",
	    "Ružomberok",
	    "Sabinov",
	    "Šaľa",
	    "Senec",
	    "Senica",
	    "Skalica",
	    "Snina",
	    "Sobrance",
	    "Spišská Nová Ves",
	    "Stará Ľubovňa",
	    "Stropkov",
	    "Svidník",
	    "Topoľčany",
	    "Trebišov",
	    "Trenčín",
	    "Trnava",
	    "Turčianske Teplice",
	    "Tvrdošín",
	    "Veľký Krtíš",
	    "Vranov nad Topľou",
	    "Žarnovica",
	    "Žiar nad Hronom",
	    "Žilina",
	    "Zlaté Moravce",
	    "Zvolen"
	  ],
	  "city": [
	    "#{city_name}"
	  ],
	  "street": [
	    "Adámiho",
	    "Ahoj",
	    "Albína Brunovského",
	    "Albrechtova",
	    "Alejová",
	    "Alešova",
	    "Alibernetová",
	    "Alžbetínska",
	    "Alžbety Gwerkovej",
	    "Ambroseho",
	    "Ambrušova",
	    "Americká",
	    "Americké námestie",
	    "Americké námestie",
	    "Andreja Mráza",
	    "Andreja Plávku",
	    "Andrusovova",
	    "Anenská",
	    "Anenská",
	    "Antolská",
	    "Astronomická",
	    "Astrová",
	    "Azalková",
	    "Azovská",
	    "Babuškova",
	    "Bachova",
	    "Bajkalská",
	    "Bajkalská",
	    "Bajkalská",
	    "Bajkalská",
	    "Bajkalská",
	    "Bajkalská",
	    "Bajzova",
	    "Bancíkovej",
	    "Banícka",
	    "Baníkova",
	    "Banskobystrická",
	    "Banšelova",
	    "Bardejovská",
	    "Bartókova",
	    "Bartoňova",
	    "Bartoškova",
	    "Baštová",
	    "Bazová",
	    "Bažantia",
	    "Beblavého",
	    "Beckovská",
	    "Bedľová",
	    "Belániková",
	    "Belehradská",
	    "Belinského",
	    "Belopotockého",
	    "Beňadická",
	    "Bencúrova",
	    "Benediktiho",
	    "Beniakova",
	    "Bernolákova",
	    "Beskydská",
	    "Betliarska",
	    "Bezručova",
	    "Biela",
	    "Bielkova",
	    "Björnsonova",
	    "Blagoevova",
	    "Blatnická",
	    "Blumentálska",
	    "Blyskáčová",
	    "Bočná",
	    "Bohrova",
	    "Bohúňova",
	    "Bojnická",
	    "Borodáčova",
	    "Borská",
	    "Bosákova",
	    "Botanická",
	    "Bottova",
	    "Boženy Němcovej",
	    "Bôrik",
	    "Bradáčova",
	    "Bradlianska",
	    "Brančská",
	    "Bratská",
	    "Brestová",
	    "Brezovská",
	    "Briežky",
	    "Brnianska",
	    "Brodná",
	    "Brodská",
	    "Broskyňová",
	    "Břeclavská",
	    "Budatínska",
	    "Budatínska",
	    "Budatínska",
	    "Búdkova  cesta",
	    "Budovateľská",
	    "Budyšínska",
	    "Budyšínska",
	    "Buková",
	    "Bukureštská",
	    "Bulharská",
	    "Bulíkova",
	    "Bystrého",
	    "Bzovícka",
	    "Cablkova",
	    "Cesta na Červený most",
	    "Cesta na Červený most",
	    "Cesta na Senec",
	    "Cikkerova",
	    "Cintorínska",
	    "Cintulova",
	    "Cukrová",
	    "Cyrilova",
	    "Čajakova",
	    "Čajkovského",
	    "Čaklovská",
	    "Čalovská",
	    "Čapajevova",
	    "Čapkova",
	    "Čárskeho",
	    "Čavojského",
	    "Čečinová",
	    "Čelakovského",
	    "Čerešňová",
	    "Černyševského",
	    "Červeňova",
	    "Česká",
	    "Československých par",
	    "Čipkárska",
	    "Čmelíkova",
	    "Čmeľovec",
	    "Čulenova",
	    "Daliborovo námestie",
	    "Dankovského",
	    "Dargovská",
	    "Ďatelinová",
	    "Daxnerovo námestie",
	    "Devínska cesta",
	    "Dlhé diely I.",
	    "Dlhé diely II.",
	    "Dlhé diely III.",
	    "Dobrovičova",
	    "Dobrovičova",
	    "Dobrovského",
	    "Dobšinského",
	    "Dohnalova",
	    "Dohnányho",
	    "Doležalova",
	    "Dolná",
	    "Dolnozemská cesta",
	    "Domkárska",
	    "Domové role",
	    "Donnerova",
	    "Donovalova",
	    "Dostojevského rad",
	    "Dr. Vladimíra Clemen",
	    "Drevená",
	    "Drieňová",
	    "Drieňová",
	    "Drieňová",
	    "Drotárska cesta",
	    "Drotárska cesta",
	    "Drotárska cesta",
	    "Družicová",
	    "Družstevná",
	    "Dubnická",
	    "Dubová",
	    "Dúbravská cesta",
	    "Dudova",
	    "Dulovo námestie",
	    "Dulovo námestie",
	    "Dunajská",
	    "Dvořákovo nábrežie",
	    "Edisonova",
	    "Einsteinova",
	    "Elektrárenská",
	    "Exnárova",
	    "F. Kostku",
	    "Fadruszova",
	    "Fajnorovo nábrežie",
	    "Fándlyho",
	    "Farebná",
	    "Farská",
	    "Farského",
	    "Fazuľová",
	    "Fedinova",
	    "Ferienčíkova",
	    "Fialkové údolie",
	    "Fibichova",
	    "Filiálne nádražie",
	    "Flöglova",
	    "Floriánske námestie",
	    "Fraňa Kráľa",
	    "Francisciho",
	    "Francúzskych partizá",
	    "Františkánska",
	    "Františkánske námest",
	    "Furdekova",
	    "Furdekova",
	    "Gabčíkova",
	    "Gagarinova",
	    "Gagarinova",
	    "Gagarinova",
	    "Gajova",
	    "Galaktická",
	    "Galandova",
	    "Gallova",
	    "Galvaniho",
	    "Gašparíkova",
	    "Gaštanová",
	    "Gavlovičova",
	    "Gemerská",
	    "Gercenova",
	    "Gessayova",
	    "Gettingová",
	    "Godrova",
	    "Gogoľova",
	    "Goláňova",
	    "Gondova",
	    "Goralská",
	    "Gorazdova",
	    "Gorkého",
	    "Gregorovej",
	    "Grösslingova",
	    "Gruzínska",
	    "Gunduličova",
	    "Gusevova",
	    "Haanova",
	    "Haburská",
	    "Halašova",
	    "Hálkova",
	    "Hálova",
	    "Hamuliakova",
	    "Hanácka",
	    "Handlovská",
	    "Hany Meličkovej",
	    "Harmanecká",
	    "Hasičská",
	    "Hattalova",
	    "Havlíčkova",
	    "Havrania",
	    "Haydnova",
	    "Herlianska",
	    "Herlianska",
	    "Heydukova",
	    "Hlaváčikova",
	    "Hlavatého",
	    "Hlavné námestie",
	    "Hlboká cesta",
	    "Hlboká cesta",
	    "Hlivová",
	    "Hlučínska",
	    "Hodálova",
	    "Hodžovo námestie",
	    "Holekova",
	    "Holíčska",
	    "Hollého",
	    "Holubyho",
	    "Hontianska",
	    "Horárska",
	    "Horné Židiny",
	    "Horská",
	    "Horská",
	    "Hrad",
	    "Hradné údolie",
	    "Hrachová",
	    "Hraničná",
	    "Hrebendova",
	    "Hríbová",
	    "Hriňovská",
	    "Hrobákova",
	    "Hrobárska",
	    "Hroboňova",
	    "Hudecova",
	    "Humenské námestie",
	    "Hummelova",
	    "Hurbanovo námestie",
	    "Hurbanovo námestie",
	    "Hviezdoslavovo námes",
	    "Hýrošova",
	    "Chalupkova",
	    "Chemická",
	    "Chlumeckého",
	    "Chorvátska",
	    "Chorvátska",
	    "Iľjušinova",
	    "Ilkovičova",
	    "Inovecká",
	    "Inovecká",
	    "Iskerníková",
	    "Ivana Horvátha",
	    "Ivánska cesta",
	    "J.C.Hronského",
	    "Jabloňová",
	    "Jadrová",
	    "Jakabova",
	    "Jakubovo námestie",
	    "Jamnického",
	    "Jána Stanislava",
	    "Janáčkova",
	    "Jančova",
	    "Janíkove role",
	    "Jankolova",
	    "Jánošíkova",
	    "Jánoškova",
	    "Janotova",
	    "Jánska",
	    "Jantárová cesta",
	    "Jarabinková",
	    "Jarná",
	    "Jaroslavova",
	    "Jarošova",
	    "Jaseňová",
	    "Jasná",
	    "Jasovská",
	    "Jastrabia",
	    "Jašíkova",
	    "Javorinská",
	    "Javorová",
	    "Jazdecká",
	    "Jedlíkova",
	    "Jégého",
	    "Jelačičova",
	    "Jelenia",
	    "Jesenná",
	    "Jesenského",
	    "Jiráskova",
	    "Jiskrova",
	    "Jozefská",
	    "Junácka",
	    "Jungmannova",
	    "Jurigovo námestie",
	    "Jurovského",
	    "Jurská",
	    "Justičná",
	    "K lomu",
	    "K Železnej studienke",
	    "Kalinčiakova",
	    "Kamenárska",
	    "Kamenné námestie",
	    "Kapicova",
	    "Kapitulská",
	    "Kapitulský dvor",
	    "Kapucínska",
	    "Kapušianska",
	    "Karadžičova",
	    "Karadžičova",
	    "Karadžičova",
	    "Karadžičova",
	    "Karloveská",
	    "Karloveské rameno",
	    "Karpatská",
	    "Kašmírska",
	    "Kaštielska",
	    "Kaukazská",
	    "Kempelenova",
	    "Kežmarské námestie",
	    "Kladnianska",
	    "Klariská",
	    "Kláštorská",
	    "Klatovská",
	    "Klatovská",
	    "Klemensova",
	    "Klincová",
	    "Klobučnícka",
	    "Klokočova",
	    "Kľukatá",
	    "Kmeťovo námestie",
	    "Koceľova",
	    "Kočánkova",
	    "Kohútova",
	    "Kolárska",
	    "Kolískova",
	    "Kollárovo námestie",
	    "Kollárovo námestie",
	    "Kolmá",
	    "Komárňanská",
	    "Komárnická",
	    "Komárnická",
	    "Komenského námestie",
	    "Kominárska",
	    "Komonicová",
	    "Konopná",
	    "Konvalinková",
	    "Konventná",
	    "Kopanice",
	    "Kopčianska",
	    "Koperníkova",
	    "Korabinského",
	    "Koreničova",
	    "Kostlivého",
	    "Kostolná",
	    "Košická",
	    "Košická",
	    "Košická",
	    "Kováčska",
	    "Kovorobotnícka",
	    "Kozia",
	    "Koziarka",
	    "Kozmonautická",
	    "Krajná",
	    "Krakovská",
	    "Kráľovské údolie",
	    "Krasinského",
	    "Kraskova",
	    "Krásna",
	    "Krásnohorská",
	    "Krasovského",
	    "Krátka",
	    "Krčméryho",
	    "Kremnická",
	    "Kresánkova",
	    "Krivá",
	    "Križkova",
	    "Krížna",
	    "Krížna",
	    "Krížna",
	    "Krížna",
	    "Krmanova",
	    "Krompašská",
	    "Krupinská",
	    "Krupkova",
	    "Kubániho",
	    "Kubínska",
	    "Kuklovská",
	    "Kukučínova",
	    "Kukuričná",
	    "Kulíškova",
	    "Kultúrna",
	    "Kupeckého",
	    "Kúpeľná",
	    "Kutlíkova",
	    "Kutuzovova",
	    "Kuzmányho",
	    "Kvačalova",
	    "Kvetná",
	    "Kýčerského",
	    "Kyjevská",
	    "Kysucká",
	    "Laborecká",
	    "Lackova",
	    "Ladislava Sáru",
	    "Ľadová",
	    "Lachova",
	    "Ľaliová",
	    "Lamačská cesta",
	    "Lamačská cesta",
	    "Lamanského",
	    "Landererova",
	    "Langsfeldova",
	    "Ľanová",
	    "Laskomerského",
	    "Laučekova",
	    "Laurinská",
	    "Lazaretská",
	    "Lazaretská",
	    "Legerského",
	    "Legionárska",
	    "Legionárska",
	    "Lehockého",
	    "Lehockého",
	    "Lenardova",
	    "Lermontovova",
	    "Lesná",
	    "Leškova",
	    "Letecká",
	    "Letisko M.R.Štefánik",
	    "Letná",
	    "Levárska",
	    "Levická",
	    "Levočská",
	    "Lidická",
	    "Lietavská",
	    "Lichardova",
	    "Lipová",
	    "Lipovinová",
	    "Liptovská",
	    "Listová",
	    "Líščie nivy",
	    "Líščie údolie",
	    "Litovská",
	    "Lodná",
	    "Lombardiniho",
	    "Lomonosovova",
	    "Lopenícka",
	    "Lovinského",
	    "Ľubietovská",
	    "Ľubinská",
	    "Ľubľanská",
	    "Ľubochnianska",
	    "Ľubovnianska",
	    "Lúčna",
	    "Ľudové námestie",
	    "Ľudovíta Fullu",
	    "Luhačovická",
	    "Lužická",
	    "Lužná",
	    "Lýcejná",
	    "Lykovcová",
	    "M. Hella",
	    "Magnetová",
	    "Macharova",
	    "Majakovského",
	    "Majerníkova",
	    "Májkova",
	    "Májová",
	    "Makovického",
	    "Malá",
	    "Malé pálenisko",
	    "Malinová",
	    "Malý Draždiak",
	    "Malý trh",
	    "Mamateyova",
	    "Mamateyova",
	    "Mánesovo námestie",
	    "Mariánska",
	    "Marie Curie-Sklodows",
	    "Márie Medveďovej",
	    "Markova",
	    "Marótyho",
	    "Martákovej",
	    "Martinčekova",
	    "Martinčekova",
	    "Martinengova",
	    "Martinská",
	    "Mateja Bela",
	    "Matejkova",
	    "Matičná",
	    "Matúšova",
	    "Medená",
	    "Medzierka",
	    "Medzilaborecká",
	    "Merlotová",
	    "Mesačná",
	    "Mestská",
	    "Meteorová",
	    "Metodova",
	    "Mickiewiczova",
	    "Mierová",
	    "Michalská",
	    "Mikovíniho",
	    "Mikulášska",
	    "Miletičova",
	    "Miletičova",
	    "Mišíkova",
	    "Mišíkova",
	    "Mišíkova",
	    "Mliekárenská",
	    "Mlynarovičova",
	    "Mlynská dolina",
	    "Mlynská dolina",
	    "Mlynská dolina",
	    "Mlynské luhy",
	    "Mlynské nivy",
	    "Mlynské nivy",
	    "Mlynské nivy",
	    "Mlynské nivy",
	    "Mlynské nivy",
	    "Mlyny",
	    "Modranská",
	    "Mojmírova",
	    "Mokráň záhon",
	    "Mokrohájska cesta",
	    "Moldavská",
	    "Molecova",
	    "Moravská",
	    "Moskovská",
	    "Most SNP",
	    "Mostová",
	    "Mošovského",
	    "Motýlia",
	    "Moyzesova",
	    "Mozartova",
	    "Mraziarenská",
	    "Mudroňova",
	    "Mudroňova",
	    "Mudroňova",
	    "Muchovo námestie",
	    "Murgašova",
	    "Muškátová",
	    "Muštová",
	    "Múzejná",
	    "Myjavská",
	    "Mýtna",
	    "Mýtna",
	    "Na Baránku",
	    "Na Brezinách",
	    "Na Hrebienku",
	    "Na Kalvárii",
	    "Na Kampárke",
	    "Na kopci",
	    "Na križovatkách",
	    "Na lánoch",
	    "Na paši",
	    "Na piesku",
	    "Na Riviére",
	    "Na Sitine",
	    "Na Slavíne",
	    "Na stráni",
	    "Na Štyridsiatku",
	    "Na úvrati",
	    "Na vŕšku",
	    "Na výslní",
	    "Nábělkova",
	    "Nábrežie arm. gen. L",
	    "Nábrežná",
	    "Nad Dunajom",
	    "Nad lomom",
	    "Nad lúčkami",
	    "Nad lúčkami",
	    "Nad ostrovom",
	    "Nad Sihoťou",
	    "Námestie 1. mája",
	    "Námestie Alexandra D",
	    "Námestie Biely kríž",
	    "Námestie Hraničiarov",
	    "Námestie Jána Pavla",
	    "Námestie Ľudovíta Št",
	    "Námestie Martina Ben",
	    "Nám. M.R.Štefánika",
	    "Námestie slobody",
	    "Námestie slobody",
	    "Námestie SNP",
	    "Námestie SNP",
	    "Námestie sv. Františ",
	    "Narcisová",
	    "Nedbalova",
	    "Nekrasovova",
	    "Neronetová",
	    "Nerudova",
	    "Nevädzová",
	    "Nezábudková",
	    "Niťová",
	    "Nitrianska",
	    "Nížinná",
	    "Nobelova",
	    "Nobelovo námestie",
	    "Nová",
	    "Nová Rožňavská",
	    "Novackého",
	    "Nové pálenisko",
	    "Nové záhrady I",
	    "Nové záhrady II",
	    "Nové záhrady III",
	    "Nové záhrady IV",
	    "Nové záhrady V",
	    "Nové záhrady VI",
	    "Nové záhrady VII",
	    "Novinárska",
	    "Novobanská",
	    "Novohradská",
	    "Novosvetská",
	    "Novosvetská",
	    "Novosvetská",
	    "Obežná",
	    "Obchodná",
	    "Očovská",
	    "Odbojárov",
	    "Odborárska",
	    "Odborárske námestie",
	    "Odborárske námestie",
	    "Ohnicová",
	    "Okánikova",
	    "Okružná",
	    "Olbrachtova",
	    "Olejkárska",
	    "Ondavská",
	    "Ondrejovova",
	    "Oravská",
	    "Orechová cesta",
	    "Orechový rad",
	    "Oriešková",
	    "Ormisova",
	    "Osadná",
	    "Ostravská",
	    "Ostredková",
	    "Osuského",
	    "Osvetová",
	    "Otonelská",
	    "Ovručská",
	    "Ovsištské námestie",
	    "Pajštúnska",
	    "Palackého",
	    "Palárikova",
	    "Palárikova",
	    "Pálavská",
	    "Palisády",
	    "Palisády",
	    "Palisády",
	    "Palkovičova",
	    "Panenská",
	    "Pankúchova",
	    "Panónska cesta",
	    "Panská",
	    "Papánkovo námestie",
	    "Papraďová",
	    "Páričkova",
	    "Parková",
	    "Partizánska",
	    "Pasienky",
	    "Paulínyho",
	    "Pavlovičova",
	    "Pavlovova",
	    "Pavlovská",
	    "Pažického",
	    "Pažítková",
	    "Pečnianska",
	    "Pernecká",
	    "Pestovateľská",
	    "Peterská",
	    "Petzvalova",
	    "Pezinská",
	    "Piesočná",
	    "Piešťanská",
	    "Pifflova",
	    "Pilárikova",
	    "Pionierska",
	    "Pivoňková",
	    "Planckova",
	    "Planét",
	    "Plátenícka",
	    "Pluhová",
	    "Plynárenská",
	    "Plzenská",
	    "Pobrežná",
	    "Pod Bôrikom",
	    "Pod Kalváriou",
	    "Pod lesom",
	    "Pod Rovnicami",
	    "Pod vinicami",
	    "Podhorského",
	    "Podjavorinskej",
	    "Podlučinského",
	    "Podniková",
	    "Podtatranského",
	    "Pohronská",
	    "Polárna",
	    "Poloreckého",
	    "Poľná",
	    "Poľská",
	    "Poludníková",
	    "Porubského",
	    "Poštová",
	    "Považská",
	    "Povraznícka",
	    "Povraznícka",
	    "Pražská",
	    "Predstaničné námesti",
	    "Prepoštská",
	    "Prešernova",
	    "Prešovská",
	    "Prešovská",
	    "Prešovská",
	    "Pri Bielom kríži",
	    "Pri dvore",
	    "Pri Dynamitke",
	    "Pri Habánskom mlyne",
	    "Pri hradnej studni",
	    "Pri seči",
	    "Pri Starej Prachárni",
	    "Pri Starom háji",
	    "Pri Starom Mýte",
	    "Pri strelnici",
	    "Pri Suchom mlyne",
	    "Pri zvonici",
	    "Pribinova",
	    "Pribinova",
	    "Pribinova",
	    "Pribišova",
	    "Pribylinská",
	    "Priečna",
	    "Priekopy",
	    "Priemyselná",
	    "Priemyselná",
	    "Prievozská",
	    "Prievozská",
	    "Prievozská",
	    "Príkopova",
	    "Primaciálne námestie",
	    "Prístav",
	    "Prístavná",
	    "Prokofievova",
	    "Prokopa Veľkého",
	    "Prokopova",
	    "Prúdová",
	    "Prvosienková",
	    "Púpavová",
	    "Pustá",
	    "Puškinova",
	    "Račianska",
	    "Račianska",
	    "Račianske mýto",
	    "Radarová",
	    "Rádiová",
	    "Radlinského",
	    "Radničná",
	    "Radničné námestie",
	    "Radvanská",
	    "Rajská",
	    "Raketová",
	    "Rákosová",
	    "Rastislavova",
	    "Rázusovo nábrežie",
	    "Repná",
	    "Rešetkova",
	    "Revolučná",
	    "Révová",
	    "Revúcka",
	    "Rezedová",
	    "Riazanská",
	    "Riazanská",
	    "Ribayová",
	    "Riečna",
	    "Rigeleho",
	    "Rízlingová",
	    "Riznerova",
	    "Robotnícka",
	    "Romanova",
	    "Röntgenova",
	    "Rosná",
	    "Rovná",
	    "Rovniankova",
	    "Rovníková",
	    "Rozmarínová",
	    "Rožňavská",
	    "Rožňavská",
	    "Rožňavská",
	    "Rubinsteinova",
	    "Rudnayovo námestie",
	    "Rumančeková",
	    "Rusovská cesta",
	    "Ružičková",
	    "Ružinovská",
	    "Ružinovská",
	    "Ružinovská",
	    "Ružomberská",
	    "Ružová dolina",
	    "Ružová dolina",
	    "Rybárska brána",
	    "Rybné námestie",
	    "Rýdziková",
	    "Sabinovská",
	    "Sabinovská",
	    "Sad Janka Kráľa",
	    "Sadová",
	    "Sartorisova",
	    "Sasinkova",
	    "Seberíniho",
	    "Sečovská",
	    "Sedlárska",
	    "Sedmokrásková",
	    "Segnerova",
	    "Sekulská",
	    "Semianova",
	    "Senická",
	    "Senná",
	    "Schillerova",
	    "Schody pri starej vo",
	    "Sibírska",
	    "Sienkiewiczova",
	    "Silvánska",
	    "Sinokvetná",
	    "Skalická cesta",
	    "Skalná",
	    "Sklenárova",
	    "Sklenárska",
	    "Sládkovičova",
	    "Sladová",
	    "Slávičie údolie",
	    "Slavín",
	    "Slepá",
	    "Sliačska",
	    "Sliezska",
	    "Slivková",
	    "Slnečná",
	    "Slovanská",
	    "Slovinská",
	    "Slovnaftská",
	    "Slowackého",
	    "Smetanova",
	    "Smikova",
	    "Smolenická",
	    "Smolnícka",
	    "Smrečianska",
	    "Soferove schody",
	    "Socháňova",
	    "Sokolská",
	    "Solivarská",
	    "Sološnická",
	    "Somolického",
	    "Somolického",
	    "Sosnová",
	    "Spišská",
	    "Spojná",
	    "Spoločenská",
	    "Sputniková",
	    "Sreznevského",
	    "Srnčia",
	    "Stachanovská",
	    "Stálicová",
	    "Staničná",
	    "Stará Černicová",
	    "Stará Ivánska cesta",
	    "Stará Prievozská",
	    "Stará Vajnorská",
	    "Stará vinárska",
	    "Staré Grunty",
	    "Staré ihrisko",
	    "Staré záhrady",
	    "Starhradská",
	    "Starohájska",
	    "Staromestská",
	    "Staroturský chodník",
	    "Staviteľská",
	    "Stodolova",
	    "Stoklasová",
	    "Strakova",
	    "Strážnická",
	    "Strážny dom",
	    "Strečnianska",
	    "Stredná",
	    "Strelecká",
	    "Strmá cesta",
	    "Strojnícka",
	    "Stropkovská",
	    "Struková",
	    "Studená",
	    "Stuhová",
	    "Súbežná",
	    "Súhvezdná",
	    "Suché mýto",
	    "Suchohradská",
	    "Súkennícka",
	    "Súľovská",
	    "Sumbalova",
	    "Súmračná",
	    "Súťažná",
	    "Svätého Vincenta",
	    "Svätoplukova",
	    "Svätoplukova",
	    "Svätovojtešská",
	    "Svetlá",
	    "Svíbová",
	    "Svidnícka",
	    "Svoradova",
	    "Svrčia",
	    "Syslia",
	    "Šafárikovo námestie",
	    "Šafárikovo námestie",
	    "Šafránová",
	    "Šagátova",
	    "Šalviová",
	    "Šancová",
	    "Šancová",
	    "Šancová",
	    "Šancová",
	    "Šándorova",
	    "Šarišská",
	    "Šášovská",
	    "Šaštínska",
	    "Ševčenkova",
	    "Šintavská",
	    "Šípková",
	    "Škarniclova",
	    "Školská",
	    "Škovránčia",
	    "Škultétyho",
	    "Šoltésovej",
	    "Špieszova",
	    "Špitálska",
	    "Športová",
	    "Šrobárovo námestie",
	    "Šťastná",
	    "Štedrá",
	    "Štefánikova",
	    "Štefánikova",
	    "Štefánikova",
	    "Štefanovičova",
	    "Štefunkova",
	    "Štetinova",
	    "Štiavnická",
	    "Štúrova",
	    "Štyndlova",
	    "Šulekova",
	    "Šulekova",
	    "Šulekova",
	    "Šumavská",
	    "Šuňavcova",
	    "Šustekova",
	    "Švabinského",
	    "Tabaková",
	    "Tablicova",
	    "Táborská",
	    "Tajovského",
	    "Tallerova",
	    "Tehelná",
	    "Technická",
	    "Tekovská",
	    "Telocvičná",
	    "Tematínska",
	    "Teplická",
	    "Terchovská",
	    "Teslova",
	    "Tetmayerova",
	    "Thurzova",
	    "Tichá",
	    "Tilgnerova",
	    "Timravina",
	    "Tobrucká",
	    "Tokajícka",
	    "Tolstého",
	    "Tománkova",
	    "Tomášikova",
	    "Tomášikova",
	    "Tomášikova",
	    "Tomášikova",
	    "Tomášikova",
	    "Topoľčianska",
	    "Topoľová",
	    "Továrenská",
	    "Trebišovská",
	    "Trebišovská",
	    "Trebišovská",
	    "Trenčianska",
	    "Treskoňova",
	    "Trnavská cesta",
	    "Trnavská cesta",
	    "Trnavská cesta",
	    "Trnavská cesta",
	    "Trnavská cesta",
	    "Trnavské mýto",
	    "Tŕňová",
	    "Trojdomy",
	    "Tučkova",
	    "Tupolevova",
	    "Turbínova",
	    "Turčianska",
	    "Turnianska",
	    "Tvarožkova",
	    "Tylova",
	    "Tyršovo nábrežie",
	    "Údernícka",
	    "Údolná",
	    "Uhorková",
	    "Ukrajinská",
	    "Ulica 29. augusta",
	    "Ulica 29. augusta",
	    "Ulica 29. augusta",
	    "Ulica 29. augusta",
	    "Ulica Imricha Karvaš",
	    "Ulica Jozefa Krónera",
	    "Ulica Viktora Tegelh",
	    "Úprkova",
	    "Úradnícka",
	    "Uránová",
	    "Urbánkova",
	    "Ursínyho",
	    "Uršulínska",
	    "Úzka",
	    "V záhradách",
	    "Vajanského nábrežie",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Vajnorská",
	    "Valašská",
	    "Valchárska",
	    "Vansovej",
	    "Vápenná",
	    "Varínska",
	    "Varšavská",
	    "Varšavská",
	    "Vavilovova",
	    "Vavrínova",
	    "Vazovova",
	    "Včelárska",
	    "Velehradská",
	    "Veltlínska",
	    "Ventúrska",
	    "Veterná",
	    "Veternicová",
	    "Vetvová",
	    "Viedenská cesta",
	    "Viedenská cesta",
	    "Vietnamská",
	    "Vígľašská",
	    "Vihorlatská",
	    "Viktorínova",
	    "Vilová",
	    "Vincenta Hložníka",
	    "Vínna",
	    "Vlastenecké námestie",
	    "Vlčkova",
	    "Vlčkova",
	    "Vlčkova",
	    "Vodný vrch",
	    "Votrubova",
	    "Vrábeľská",
	    "Vrakunská cesta",
	    "Vranovská",
	    "Vretenová",
	    "Vrchná",
	    "Vrútocká",
	    "Vyhliadka",
	    "Vyhnianska cesta",
	    "Vysoká",
	    "Vyšehradská",
	    "Vyšná",
	    "Wattova",
	    "Wilsonova",
	    "Wolkrova",
	    "Za Kasárňou",
	    "Za sokolovňou",
	    "Za Stanicou",
	    "Za tehelňou",
	    "Záborského",
	    "Zadunajská cesta",
	    "Záhorácka",
	    "Záhradnícka",
	    "Záhradnícka",
	    "Záhradnícka",
	    "Záhradnícka",
	    "Záhrebská",
	    "Záhrebská",
	    "Zálužická",
	    "Zámocká",
	    "Zámocké schody",
	    "Zámočnícka",
	    "Západná",
	    "Západný rad",
	    "Záporožská",
	    "Zátišie",
	    "Závodníkova",
	    "Zelená",
	    "Zelinárska",
	    "Zimná",
	    "Zlaté piesky",
	    "Zlaté schody",
	    "Znievska",
	    "Zohorská",
	    "Zochova",
	    "Zrinského",
	    "Zvolenská",
	    "Žabí majer",
	    "Žabotova",
	    "Žehrianska",
	    "Železná",
	    "Železničiarska",
	    "Žellova",
	    "Žiarska",
	    "Židovská",
	    "Žilinská",
	    "Žilinská",
	    "Živnostenská",
	    "Žižkova",
	    "Župné námestie"
	  ],
	  "street_name": [
	    "#{street}"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Slovensko"
	  ]
	};
	sk.company = {
	  "suffix": [
	    "s.r.o.",
	    "a.s.",
	    "v.o.s."
	  ],
	  "adjective": [
	      "Adaptive",
	      "Advanced",
	      "Ameliorated",
	      "Assimilated",
	      "Automated",
	      "Balanced",
	      "Business-focused",
	      "Centralized",
	      "Cloned",
	      "Compatible",
	      "Configurable",
	      "Cross-group",
	      "Cross-platform",
	      "Customer-focused",
	      "Customizable",
	      "Decentralized",
	      "De-engineered",
	      "Devolved",
	      "Digitized",
	      "Distributed",
	      "Diverse",
	      "Down-sized",
	      "Enhanced",
	      "Enterprise-wide",
	      "Ergonomic",
	      "Exclusive",
	      "Expanded",
	      "Extended",
	      "Face to face",
	      "Focused",
	      "Front-line",
	      "Fully-configurable",
	      "Function-based",
	      "Fundamental",
	      "Future-proofed",
	      "Grass-roots",
	      "Horizontal",
	      "Implemented",
	      "Innovative",
	      "Integrated",
	      "Intuitive",
	      "Inverse",
	      "Managed",
	      "Mandatory",
	      "Monitored",
	      "Multi-channelled",
	      "Multi-lateral",
	      "Multi-layered",
	      "Multi-tiered",
	      "Networked",
	      "Object-based",
	      "Open-architected",
	      "Open-source",
	      "Operative",
	      "Optimized",
	      "Optional",
	      "Organic",
	      "Organized",
	      "Persevering",
	      "Persistent",
	      "Phased",
	      "Polarised",
	      "Pre-emptive",
	      "Proactive",
	      "Profit-focused",
	      "Profound",
	      "Programmable",
	      "Progressive",
	      "Public-key",
	      "Quality-focused",
	      "Reactive",
	      "Realigned",
	      "Re-contextualized",
	      "Re-engineered",
	      "Reduced",
	      "Reverse-engineered",
	      "Right-sized",
	      "Robust",
	      "Seamless",
	      "Secured",
	      "Self-enabling",
	      "Sharable",
	      "Stand-alone",
	      "Streamlined",
	      "Switchable",
	      "Synchronised",
	      "Synergistic",
	      "Synergized",
	      "Team-oriented",
	      "Total",
	      "Triple-buffered",
	      "Universal",
	      "Up-sized",
	      "Upgradable",
	      "User-centric",
	      "User-friendly",
	      "Versatile",
	      "Virtual",
	      "Visionary",
	      "Vision-oriented"
	    ],
	    "descriptor":
	    [
	      "24 hour",
	      "24/7",
	      "3rd generation",
	      "4th generation",
	      "5th generation",
	      "6th generation",
	      "actuating",
	      "analyzing",
	      "asymmetric",
	      "asynchronous",
	      "attitude-oriented",
	      "background",
	      "bandwidth-monitored",
	      "bi-directional",
	      "bifurcated",
	      "bottom-line",
	      "clear-thinking",
	      "client-driven",
	      "client-server",
	      "coherent",
	      "cohesive",
	      "composite",
	      "context-sensitive",
	      "contextually-based",
	      "content-based",
	      "dedicated",
	      "demand-driven",
	      "didactic",
	      "directional",
	      "discrete",
	      "disintermediate",
	      "dynamic",
	      "eco-centric",
	      "empowering",
	      "encompassing",
	      "even-keeled",
	      "executive",
	      "explicit",
	      "exuding",
	      "fault-tolerant",
	      "foreground",
	      "fresh-thinking",
	      "full-range",
	      "global",
	      "grid-enabled",
	      "heuristic",
	      "high-level",
	      "holistic",
	      "homogeneous",
	      "human-resource",
	      "hybrid",
	      "impactful",
	      "incremental",
	      "intangible",
	      "interactive",
	      "intermediate",
	      "leading edge",
	      "local",
	      "logistical",
	      "maximized",
	      "methodical",
	      "mission-critical",
	      "mobile",
	      "modular",
	      "motivating",
	      "multimedia",
	      "multi-state",
	      "multi-tasking",
	      "national",
	      "needs-based",
	      "neutral",
	      "next generation",
	      "non-volatile",
	      "object-oriented",
	      "optimal",
	      "optimizing",
	      "radical",
	      "real-time",
	      "reciprocal",
	      "regional",
	      "responsive",
	      "scalable",
	      "secondary",
	      "solution-oriented",
	      "stable",
	      "static",
	      "systematic",
	      "systemic",
	      "system-worthy",
	      "tangible",
	      "tertiary",
	      "transitional",
	      "uniform",
	      "upward-trending",
	      "user-facing",
	      "value-added",
	      "web-enabled",
	      "well-modulated",
	      "zero administration",
	      "zero defect",
	      "zero tolerance"
	    ],
	    "noun":
	    [
	      "ability",
	      "access",
	      "adapter",
	      "algorithm",
	      "alliance",
	      "analyzer",
	      "application",
	      "approach",
	      "architecture",
	      "archive",
	      "artificial intelligence",
	      "array",
	      "attitude",
	      "benchmark",
	      "budgetary management",
	      "capability",
	      "capacity",
	      "challenge",
	      "circuit",
	      "collaboration",
	      "complexity",
	      "concept",
	      "conglomeration",
	      "contingency",
	      "core",
	      "customer loyalty",
	      "database",
	      "data-warehouse",
	      "definition",
	      "emulation",
	      "encoding",
	      "encryption",
	      "extranet",
	      "firmware",
	      "flexibility",
	      "focus group",
	      "forecast",
	      "frame",
	      "framework",
	      "function",
	      "functionalities",
	      "Graphic Interface",
	      "groupware",
	      "Graphical User Interface",
	      "hardware",
	      "help-desk",
	      "hierarchy",
	      "hub",
	      "implementation",
	      "info-mediaries",
	      "infrastructure",
	      "initiative",
	      "installation",
	      "instruction set",
	      "interface",
	      "internet solution",
	      "intranet",
	      "knowledge user",
	      "knowledge base",
	      "local area network",
	      "leverage",
	      "matrices",
	      "matrix",
	      "methodology",
	      "middleware",
	      "migration",
	      "model",
	      "moderator",
	      "monitoring",
	      "moratorium",
	      "neural-net",
	      "open architecture",
	      "open system",
	      "orchestration",
	      "paradigm",
	      "parallelism",
	      "policy",
	      "portal",
	      "pricing structure",
	      "process improvement",
	      "product",
	      "productivity",
	      "project",
	      "projection",
	      "protocol",
	      "secured line",
	      "service-desk",
	      "software",
	      "solution",
	      "standardization",
	      "strategy",
	      "structure",
	      "success",
	      "superstructure",
	      "support",
	      "synergy",
	      "system engine",
	      "task-force",
	      "throughput",
	      "time-frame",
	      "toolset",
	      "utilisation",
	      "website",
	      "workforce"
	  ],
	  "bs_verb": [
	      "implement",
	      "utilize",
	      "integrate",
	      "streamline",
	      "optimize",
	      "evolve",
	      "transform",
	      "embrace",
	      "enable",
	      "orchestrate",
	      "leverage",
	      "reinvent",
	      "aggregate",
	      "architect",
	      "enhance",
	      "incentivize",
	      "morph",
	      "empower",
	      "envisioneer",
	      "monetize",
	      "harness",
	      "facilitate",
	      "seize",
	      "disintermediate",
	      "synergize",
	      "strategize",
	      "deploy",
	      "brand",
	      "grow",
	      "target",
	      "syndicate",
	      "synthesize",
	      "deliver",
	      "mesh",
	      "incubate",
	      "engage",
	      "maximize",
	      "benchmark",
	      "expedite",
	      "reintermediate",
	      "whiteboard",
	      "visualize",
	      "repurpose",
	      "innovate",
	      "scale",
	      "unleash",
	      "drive",
	      "extend",
	      "engineer",
	      "revolutionize",
	      "generate",
	      "exploit",
	      "transition",
	      "e-enable",
	      "iterate",
	      "cultivate",
	      "matrix",
	      "productize",
	      "redefine",
	      "recontextualize"
	    ],
	    "bs_noun": [
	      "clicks-and-mortar",
	      "value-added",
	      "vertical",
	      "proactive",
	      "robust",
	      "revolutionary",
	      "scalable",
	      "leading-edge",
	      "innovative",
	      "intuitive",
	      "strategic",
	      "e-business",
	      "mission-critical",
	      "sticky",
	      "one-to-one",
	      "24/7",
	      "end-to-end",
	      "global",
	      "B2B",
	      "B2C",
	      "granular",
	      "frictionless",
	      "virtual",
	      "viral",
	      "dynamic",
	      "24/365",
	      "best-of-breed",
	      "killer",
	      "magnetic",
	      "bleeding-edge",
	      "web-enabled",
	      "interactive",
	      "dot-com",
	      "sexy",
	      "back-end",
	      "real-time",
	      "efficient",
	      "front-end",
	      "distributed",
	      "seamless",
	      "extensible",
	      "turn-key",
	      "world-class",
	      "open-source",
	      "cross-platform",
	      "cross-media",
	      "synergistic",
	      "bricks-and-clicks",
	      "out-of-the-box",
	      "enterprise",
	      "integrated",
	      "impactful",
	      "wireless",
	      "transparent",
	      "next-generation",
	      "cutting-edge",
	      "user-centric",
	      "visionary",
	      "customized",
	      "ubiquitous",
	      "plug-and-play",
	      "collaborative",
	      "compelling",
	      "holistic",
	      "rich"
	    ],
	    "bs_noun": [
	      "synergies",
	      "web-readiness",
	      "paradigms",
	      "markets",
	      "partnerships",
	      "infrastructures",
	      "platforms",
	      "initiatives",
	      "channels",
	      "eyeballs",
	      "communities",
	      "ROI",
	      "solutions",
	      "e-tailers",
	      "e-services",
	      "action-items",
	      "portals",
	      "niches",
	      "technologies",
	      "content",
	      "vortals",
	      "supply-chains",
	      "convergence",
	      "relationships",
	      "architectures",
	      "interfaces",
	      "e-markets",
	      "e-commerce",
	      "systems",
	      "bandwidth",
	      "infomediaries",
	      "models",
	      "mindshare",
	      "deliverables",
	      "users",
	      "schemas",
	      "networks",
	      "applications",
	      "metrics",
	      "e-business",
	      "functionalities",
	      "experiences",
	      "web services",
	      "methodologies"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name} #{suffix}",
	    "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
	  ]
	};
	sk.internet = {
	  "free_email": [
	    "gmail.com",
	    "zoznam.sk",
	    "azet.sk"
	  ],
	  "domain_suffix": [
	    "sk",
	    "com",
	    "net",
	    "eu",
	    "org"
	  ]
	};
	sk.lorem = {
	  "words": [
	    "alias",
	    "consequatur",
	    "aut",
	    "perferendis",
	    "sit",
	    "voluptatem",
	    "accusantium",
	    "doloremque",
	    "aperiam",
	    "eaque",
	    "ipsa",
	    "quae",
	    "ab",
	    "illo",
	    "inventore",
	    "veritatis",
	    "et",
	    "quasi",
	    "architecto",
	    "beatae",
	    "vitae",
	    "dicta",
	    "sunt",
	    "explicabo",
	    "aspernatur",
	    "aut",
	    "odit",
	    "aut",
	    "fugit",
	    "sed",
	    "quia",
	    "consequuntur",
	    "magni",
	    "dolores",
	    "eos",
	    "qui",
	    "ratione",
	    "voluptatem",
	    "sequi",
	    "nesciunt",
	    "neque",
	    "dolorem",
	    "ipsum",
	    "quia",
	    "dolor",
	    "sit",
	    "amet",
	    "consectetur",
	    "adipisci",
	    "velit",
	    "sed",
	    "quia",
	    "non",
	    "numquam",
	    "eius",
	    "modi",
	    "tempora",
	    "incidunt",
	    "ut",
	    "labore",
	    "et",
	    "dolore",
	    "magnam",
	    "aliquam",
	    "quaerat",
	    "voluptatem",
	    "ut",
	    "enim",
	    "ad",
	    "minima",
	    "veniam",
	    "quis",
	    "nostrum",
	    "exercitationem",
	    "ullam",
	    "corporis",
	    "nemo",
	    "enim",
	    "ipsam",
	    "voluptatem",
	    "quia",
	    "voluptas",
	    "sit",
	    "suscipit",
	    "laboriosam",
	    "nisi",
	    "ut",
	    "aliquid",
	    "ex",
	    "ea",
	    "commodi",
	    "consequatur",
	    "quis",
	    "autem",
	    "vel",
	    "eum",
	    "iure",
	    "reprehenderit",
	    "qui",
	    "in",
	    "ea",
	    "voluptate",
	    "velit",
	    "esse",
	    "quam",
	    "nihil",
	    "molestiae",
	    "et",
	    "iusto",
	    "odio",
	    "dignissimos",
	    "ducimus",
	    "qui",
	    "blanditiis",
	    "praesentium",
	    "laudantium",
	    "totam",
	    "rem",
	    "voluptatum",
	    "deleniti",
	    "atque",
	    "corrupti",
	    "quos",
	    "dolores",
	    "et",
	    "quas",
	    "molestias",
	    "excepturi",
	    "sint",
	    "occaecati",
	    "cupiditate",
	    "non",
	    "provident",
	    "sed",
	    "ut",
	    "perspiciatis",
	    "unde",
	    "omnis",
	    "iste",
	    "natus",
	    "error",
	    "similique",
	    "sunt",
	    "in",
	    "culpa",
	    "qui",
	    "officia",
	    "deserunt",
	    "mollitia",
	    "animi",
	    "id",
	    "est",
	    "laborum",
	    "et",
	    "dolorum",
	    "fuga",
	    "et",
	    "harum",
	    "quidem",
	    "rerum",
	    "facilis",
	    "est",
	    "et",
	    "expedita",
	    "distinctio",
	    "nam",
	    "libero",
	    "tempore",
	    "cum",
	    "soluta",
	    "nobis",
	    "est",
	    "eligendi",
	    "optio",
	    "cumque",
	    "nihil",
	    "impedit",
	    "quo",
	    "porro",
	    "quisquam",
	    "est",
	    "qui",
	    "minus",
	    "id",
	    "quod",
	    "maxime",
	    "placeat",
	    "facere",
	    "possimus",
	    "omnis",
	    "voluptas",
	    "assumenda",
	    "est",
	    "omnis",
	    "dolor",
	    "repellendus",
	    "temporibus",
	    "autem",
	    "quibusdam",
	    "et",
	    "aut",
	    "consequatur",
	    "vel",
	    "illum",
	    "qui",
	    "dolorem",
	    "eum",
	    "fugiat",
	    "quo",
	    "voluptas",
	    "nulla",
	    "pariatur",
	    "at",
	    "vero",
	    "eos",
	    "et",
	    "accusamus",
	    "officiis",
	    "debitis",
	    "aut",
	    "rerum",
	    "necessitatibus",
	    "saepe",
	    "eveniet",
	    "ut",
	    "et",
	    "voluptates",
	    "repudiandae",
	    "sint",
	    "et",
	    "molestiae",
	    "non",
	    "recusandae",
	    "itaque",
	    "earum",
	    "rerum",
	    "hic",
	    "tenetur",
	    "a",
	    "sapiente",
	    "delectus",
	    "ut",
	    "aut",
	    "reiciendis",
	    "voluptatibus",
	    "maiores",
	    "doloribus",
	    "asperiores",
	    "repellat"
	  ],
	  "supplemental": [
	    "abbas",
	    "abduco",
	    "abeo",
	    "abscido",
	    "absconditus",
	    "absens",
	    "absorbeo",
	    "absque",
	    "abstergo",
	    "absum",
	    "abundans",
	    "abutor",
	    "accedo",
	    "accendo",
	    "acceptus",
	    "accipio",
	    "accommodo",
	    "accusator",
	    "acer",
	    "acerbitas",
	    "acervus",
	    "acidus",
	    "acies",
	    "acquiro",
	    "acsi",
	    "adamo",
	    "adaugeo",
	    "addo",
	    "adduco",
	    "ademptio",
	    "adeo",
	    "adeptio",
	    "adfectus",
	    "adfero",
	    "adficio",
	    "adflicto",
	    "adhaero",
	    "adhuc",
	    "adicio",
	    "adimpleo",
	    "adinventitias",
	    "adipiscor",
	    "adiuvo",
	    "administratio",
	    "admiratio",
	    "admitto",
	    "admoneo",
	    "admoveo",
	    "adnuo",
	    "adopto",
	    "adsidue",
	    "adstringo",
	    "adsuesco",
	    "adsum",
	    "adulatio",
	    "adulescens",
	    "adultus",
	    "aduro",
	    "advenio",
	    "adversus",
	    "advoco",
	    "aedificium",
	    "aeger",
	    "aegre",
	    "aegrotatio",
	    "aegrus",
	    "aeneus",
	    "aequitas",
	    "aequus",
	    "aer",
	    "aestas",
	    "aestivus",
	    "aestus",
	    "aetas",
	    "aeternus",
	    "ager",
	    "aggero",
	    "aggredior",
	    "agnitio",
	    "agnosco",
	    "ago",
	    "ait",
	    "aiunt",
	    "alienus",
	    "alii",
	    "alioqui",
	    "aliqua",
	    "alius",
	    "allatus",
	    "alo",
	    "alter",
	    "altus",
	    "alveus",
	    "amaritudo",
	    "ambitus",
	    "ambulo",
	    "amicitia",
	    "amiculum",
	    "amissio",
	    "amita",
	    "amitto",
	    "amo",
	    "amor",
	    "amoveo",
	    "amplexus",
	    "amplitudo",
	    "amplus",
	    "ancilla",
	    "angelus",
	    "angulus",
	    "angustus",
	    "animadverto",
	    "animi",
	    "animus",
	    "annus",
	    "anser",
	    "ante",
	    "antea",
	    "antepono",
	    "antiquus",
	    "aperio",
	    "aperte",
	    "apostolus",
	    "apparatus",
	    "appello",
	    "appono",
	    "appositus",
	    "approbo",
	    "apto",
	    "aptus",
	    "apud",
	    "aqua",
	    "ara",
	    "aranea",
	    "arbitro",
	    "arbor",
	    "arbustum",
	    "arca",
	    "arceo",
	    "arcesso",
	    "arcus",
	    "argentum",
	    "argumentum",
	    "arguo",
	    "arma",
	    "armarium",
	    "armo",
	    "aro",
	    "ars",
	    "articulus",
	    "artificiose",
	    "arto",
	    "arx",
	    "ascisco",
	    "ascit",
	    "asper",
	    "aspicio",
	    "asporto",
	    "assentator",
	    "astrum",
	    "atavus",
	    "ater",
	    "atqui",
	    "atrocitas",
	    "atrox",
	    "attero",
	    "attollo",
	    "attonbitus",
	    "auctor",
	    "auctus",
	    "audacia",
	    "audax",
	    "audentia",
	    "audeo",
	    "audio",
	    "auditor",
	    "aufero",
	    "aureus",
	    "auris",
	    "aurum",
	    "aut",
	    "autem",
	    "autus",
	    "auxilium",
	    "avaritia",
	    "avarus",
	    "aveho",
	    "averto",
	    "avoco",
	    "baiulus",
	    "balbus",
	    "barba",
	    "bardus",
	    "basium",
	    "beatus",
	    "bellicus",
	    "bellum",
	    "bene",
	    "beneficium",
	    "benevolentia",
	    "benigne",
	    "bestia",
	    "bibo",
	    "bis",
	    "blandior",
	    "bonus",
	    "bos",
	    "brevis",
	    "cado",
	    "caecus",
	    "caelestis",
	    "caelum",
	    "calamitas",
	    "calcar",
	    "calco",
	    "calculus",
	    "callide",
	    "campana",
	    "candidus",
	    "canis",
	    "canonicus",
	    "canto",
	    "capillus",
	    "capio",
	    "capitulus",
	    "capto",
	    "caput",
	    "carbo",
	    "carcer",
	    "careo",
	    "caries",
	    "cariosus",
	    "caritas",
	    "carmen",
	    "carpo",
	    "carus",
	    "casso",
	    "caste",
	    "casus",
	    "catena",
	    "caterva",
	    "cattus",
	    "cauda",
	    "causa",
	    "caute",
	    "caveo",
	    "cavus",
	    "cedo",
	    "celebrer",
	    "celer",
	    "celo",
	    "cena",
	    "cenaculum",
	    "ceno",
	    "censura",
	    "centum",
	    "cerno",
	    "cernuus",
	    "certe",
	    "certo",
	    "certus",
	    "cervus",
	    "cetera",
	    "charisma",
	    "chirographum",
	    "cibo",
	    "cibus",
	    "cicuta",
	    "cilicium",
	    "cimentarius",
	    "ciminatio",
	    "cinis",
	    "circumvenio",
	    "cito",
	    "civis",
	    "civitas",
	    "clam",
	    "clamo",
	    "claro",
	    "clarus",
	    "claudeo",
	    "claustrum",
	    "clementia",
	    "clibanus",
	    "coadunatio",
	    "coaegresco",
	    "coepi",
	    "coerceo",
	    "cogito",
	    "cognatus",
	    "cognomen",
	    "cogo",
	    "cohaero",
	    "cohibeo",
	    "cohors",
	    "colligo",
	    "colloco",
	    "collum",
	    "colo",
	    "color",
	    "coma",
	    "combibo",
	    "comburo",
	    "comedo",
	    "comes",
	    "cometes",
	    "comis",
	    "comitatus",
	    "commemoro",
	    "comminor",
	    "commodo",
	    "communis",
	    "comparo",
	    "compello",
	    "complectus",
	    "compono",
	    "comprehendo",
	    "comptus",
	    "conatus",
	    "concedo",
	    "concido",
	    "conculco",
	    "condico",
	    "conduco",
	    "confero",
	    "confido",
	    "conforto",
	    "confugo",
	    "congregatio",
	    "conicio",
	    "coniecto",
	    "conitor",
	    "coniuratio",
	    "conor",
	    "conqueror",
	    "conscendo",
	    "conservo",
	    "considero",
	    "conspergo",
	    "constans",
	    "consuasor",
	    "contabesco",
	    "contego",
	    "contigo",
	    "contra",
	    "conturbo",
	    "conventus",
	    "convoco",
	    "copia",
	    "copiose",
	    "cornu",
	    "corona",
	    "corpus",
	    "correptius",
	    "corrigo",
	    "corroboro",
	    "corrumpo",
	    "coruscus",
	    "cotidie",
	    "crapula",
	    "cras",
	    "crastinus",
	    "creator",
	    "creber",
	    "crebro",
	    "credo",
	    "creo",
	    "creptio",
	    "crepusculum",
	    "cresco",
	    "creta",
	    "cribro",
	    "crinis",
	    "cruciamentum",
	    "crudelis",
	    "cruentus",
	    "crur",
	    "crustulum",
	    "crux",
	    "cubicularis",
	    "cubitum",
	    "cubo",
	    "cui",
	    "cuius",
	    "culpa",
	    "culpo",
	    "cultellus",
	    "cultura",
	    "cum",
	    "cunabula",
	    "cunae",
	    "cunctatio",
	    "cupiditas",
	    "cupio",
	    "cuppedia",
	    "cupressus",
	    "cur",
	    "cura",
	    "curatio",
	    "curia",
	    "curiositas",
	    "curis",
	    "curo",
	    "curriculum",
	    "currus",
	    "cursim",
	    "curso",
	    "cursus",
	    "curto",
	    "curtus",
	    "curvo",
	    "curvus",
	    "custodia",
	    "damnatio",
	    "damno",
	    "dapifer",
	    "debeo",
	    "debilito",
	    "decens",
	    "decerno",
	    "decet",
	    "decimus",
	    "decipio",
	    "decor",
	    "decretum",
	    "decumbo",
	    "dedecor",
	    "dedico",
	    "deduco",
	    "defaeco",
	    "defendo",
	    "defero",
	    "defessus",
	    "defetiscor",
	    "deficio",
	    "defigo",
	    "defleo",
	    "defluo",
	    "defungo",
	    "degenero",
	    "degero",
	    "degusto",
	    "deinde",
	    "delectatio",
	    "delego",
	    "deleo",
	    "delibero",
	    "delicate",
	    "delinquo",
	    "deludo",
	    "demens",
	    "demergo",
	    "demitto",
	    "demo",
	    "demonstro",
	    "demoror",
	    "demulceo",
	    "demum",
	    "denego",
	    "denique",
	    "dens",
	    "denuncio",
	    "denuo",
	    "deorsum",
	    "depereo",
	    "depono",
	    "depopulo",
	    "deporto",
	    "depraedor",
	    "deprecator",
	    "deprimo",
	    "depromo",
	    "depulso",
	    "deputo",
	    "derelinquo",
	    "derideo",
	    "deripio",
	    "desidero",
	    "desino",
	    "desipio",
	    "desolo",
	    "desparatus",
	    "despecto",
	    "despirmatio",
	    "infit",
	    "inflammatio",
	    "paens",
	    "patior",
	    "patria",
	    "patrocinor",
	    "patruus",
	    "pauci",
	    "paulatim",
	    "pauper",
	    "pax",
	    "peccatus",
	    "pecco",
	    "pecto",
	    "pectus",
	    "pecunia",
	    "pecus",
	    "peior",
	    "pel",
	    "ocer",
	    "socius",
	    "sodalitas",
	    "sol",
	    "soleo",
	    "solio",
	    "solitudo",
	    "solium",
	    "sollers",
	    "sollicito",
	    "solum",
	    "solus",
	    "solutio",
	    "solvo",
	    "somniculosus",
	    "somnus",
	    "sonitus",
	    "sono",
	    "sophismata",
	    "sopor",
	    "sordeo",
	    "sortitus",
	    "spargo",
	    "speciosus",
	    "spectaculum",
	    "speculum",
	    "sperno",
	    "spero",
	    "spes",
	    "spiculum",
	    "spiritus",
	    "spoliatio",
	    "sponte",
	    "stabilis",
	    "statim",
	    "statua",
	    "stella",
	    "stillicidium",
	    "stipes",
	    "stips",
	    "sto",
	    "strenuus",
	    "strues",
	    "studio",
	    "stultus",
	    "suadeo",
	    "suasoria",
	    "sub",
	    "subito",
	    "subiungo",
	    "sublime",
	    "subnecto",
	    "subseco",
	    "substantia",
	    "subvenio",
	    "succedo",
	    "succurro",
	    "sufficio",
	    "suffoco",
	    "suffragium",
	    "suggero",
	    "sui",
	    "sulum",
	    "sum",
	    "summa",
	    "summisse",
	    "summopere",
	    "sumo",
	    "sumptus",
	    "supellex",
	    "super",
	    "suppellex",
	    "supplanto",
	    "suppono",
	    "supra",
	    "surculus",
	    "surgo",
	    "sursum",
	    "suscipio",
	    "suspendo",
	    "sustineo",
	    "suus",
	    "synagoga",
	    "tabella",
	    "tabernus",
	    "tabesco",
	    "tabgo",
	    "tabula",
	    "taceo",
	    "tactus",
	    "taedium",
	    "talio",
	    "talis",
	    "talus",
	    "tam",
	    "tamdiu",
	    "tamen",
	    "tametsi",
	    "tamisium",
	    "tamquam",
	    "tandem",
	    "tantillus",
	    "tantum",
	    "tardus",
	    "tego",
	    "temeritas",
	    "temperantia",
	    "templum",
	    "temptatio",
	    "tempus",
	    "tenax",
	    "tendo",
	    "teneo",
	    "tener",
	    "tenuis",
	    "tenus",
	    "tepesco",
	    "tepidus",
	    "ter",
	    "terebro",
	    "teres",
	    "terga",
	    "tergeo",
	    "tergiversatio",
	    "tergo",
	    "tergum",
	    "termes",
	    "terminatio",
	    "tero",
	    "terra",
	    "terreo",
	    "territo",
	    "terror",
	    "tersus",
	    "tertius",
	    "testimonium",
	    "texo",
	    "textilis",
	    "textor",
	    "textus",
	    "thalassinus",
	    "theatrum",
	    "theca",
	    "thema",
	    "theologus",
	    "thermae",
	    "thesaurus",
	    "thesis",
	    "thorax",
	    "thymbra",
	    "thymum",
	    "tibi",
	    "timidus",
	    "timor",
	    "titulus",
	    "tolero",
	    "tollo",
	    "tondeo",
	    "tonsor",
	    "torqueo",
	    "torrens",
	    "tot",
	    "totidem",
	    "toties",
	    "totus",
	    "tracto",
	    "trado",
	    "traho",
	    "trans",
	    "tredecim",
	    "tremo",
	    "trepide",
	    "tres",
	    "tribuo",
	    "tricesimus",
	    "triduana",
	    "triginta",
	    "tripudio",
	    "tristis",
	    "triumphus",
	    "trucido",
	    "truculenter",
	    "tubineus",
	    "tui",
	    "tum",
	    "tumultus",
	    "tunc",
	    "turba",
	    "turbo",
	    "turpe",
	    "turpis",
	    "tutamen",
	    "tutis",
	    "tyrannus",
	    "uberrime",
	    "ubi",
	    "ulciscor",
	    "ullus",
	    "ulterius",
	    "ultio",
	    "ultra",
	    "umbra",
	    "umerus",
	    "umquam",
	    "una",
	    "unde",
	    "undique",
	    "universe",
	    "unus",
	    "urbanus",
	    "urbs",
	    "uredo",
	    "usitas",
	    "usque",
	    "ustilo",
	    "ustulo",
	    "usus",
	    "uter",
	    "uterque",
	    "utilis",
	    "utique",
	    "utor",
	    "utpote",
	    "utrimque",
	    "utroque",
	    "utrum",
	    "uxor",
	    "vaco",
	    "vacuus",
	    "vado",
	    "vae",
	    "valde",
	    "valens",
	    "valeo",
	    "valetudo",
	    "validus",
	    "vallum",
	    "vapulus",
	    "varietas",
	    "varius",
	    "vehemens",
	    "vel",
	    "velociter",
	    "velum",
	    "velut",
	    "venia",
	    "venio",
	    "ventito",
	    "ventosus",
	    "ventus",
	    "venustas",
	    "ver",
	    "verbera",
	    "verbum",
	    "vere",
	    "verecundia",
	    "vereor",
	    "vergo",
	    "veritas",
	    "vero",
	    "versus",
	    "verto",
	    "verumtamen",
	    "verus",
	    "vesco",
	    "vesica",
	    "vesper",
	    "vespillo",
	    "vester",
	    "vestigium",
	    "vestrum",
	    "vetus",
	    "via",
	    "vicinus",
	    "vicissitudo",
	    "victoria",
	    "victus",
	    "videlicet",
	    "video",
	    "viduata",
	    "viduo",
	    "vigilo",
	    "vigor",
	    "vilicus",
	    "vilis",
	    "vilitas",
	    "villa",
	    "vinco",
	    "vinculum",
	    "vindico",
	    "vinitor",
	    "vinum",
	    "vir",
	    "virga",
	    "virgo",
	    "viridis",
	    "viriliter",
	    "virtus",
	    "vis",
	    "viscus",
	    "vita",
	    "vitiosus",
	    "vitium",
	    "vito",
	    "vivo",
	    "vix",
	    "vobis",
	    "vociferor",
	    "voco",
	    "volaticus",
	    "volo",
	    "volubilis",
	    "voluntarius",
	    "volup",
	    "volutabrum",
	    "volva",
	    "vomer",
	    "vomica",
	    "vomito",
	    "vorago",
	    "vorax",
	    "voro",
	    "vos",
	    "votum",
	    "voveo",
	    "vox",
	    "vulariter",
	    "vulgaris",
	    "vulgivagus",
	    "vulgo",
	    "vulgus",
	    "vulnero",
	    "vulnus",
	    "vulpes",
	    "vulticulus",
	    "vultuosus",
	    "xiphias"
	  ]
	};
	sk.name = {
	  "man_first_name": [
	    "Drahoslav",
	    "Severín",
	    "Alexej",
	    "Ernest",
	    "Rastislav",
	    "Radovan",
	    "Dobroslav",
	    "Dalibor",
	    "Vincent",
	    "Miloš",
	    "Timotej",
	    "Gejza",
	    "Bohuš",
	    "Alfonz",
	    "Gašpar",
	    "Emil",
	    "Erik",
	    "Blažej",
	    "Zdenko",
	    "Dezider",
	    "Arpád",
	    "Valentín",
	    "Pravoslav",
	    "Jaromír",
	    "Roman",
	    "Matej",
	    "Frederik",
	    "Viktor",
	    "Alexander",
	    "Radomír",
	    "Albín",
	    "Bohumil",
	    "Kazimír",
	    "Fridrich",
	    "Radoslav",
	    "Tomáš",
	    "Alan",
	    "Branislav",
	    "Bruno",
	    "Gregor",
	    "Vlastimil",
	    "Boleslav",
	    "Eduard",
	    "Jozef",
	    "Víťazoslav",
	    "Blahoslav",
	    "Beňadik",
	    "Adrián",
	    "Gabriel",
	    "Marián",
	    "Emanuel",
	    "Miroslav",
	    "Benjamín",
	    "Hugo",
	    "Richard",
	    "Izidor",
	    "Zoltán",
	    "Albert",
	    "Igor",
	    "Július",
	    "Aleš",
	    "Fedor",
	    "Rudolf",
	    "Valér",
	    "Marcel",
	    "Ervín",
	    "Slavomír",
	    "Vojtech",
	    "Juraj",
	    "Marek",
	    "Jaroslav",
	    "Žigmund",
	    "Florián",
	    "Roland",
	    "Pankrác",
	    "Servác",
	    "Bonifác",
	    "Svetozár",
	    "Bernard",
	    "Júlia",
	    "Urban",
	    "Dušan",
	    "Viliam",
	    "Ferdinand",
	    "Norbert",
	    "Róbert",
	    "Medard",
	    "Zlatko",
	    "Anton",
	    "Vasil",
	    "Vít",
	    "Adolf",
	    "Vratislav",
	    "Alfréd",
	    "Alojz",
	    "Ján",
	    "Tadeáš",
	    "Ladislav",
	    "Peter",
	    "Pavol",
	    "Miloslav",
	    "Prokop",
	    "Cyril",
	    "Metod",
	    "Patrik",
	    "Oliver",
	    "Ivan",
	    "Kamil",
	    "Henrich",
	    "Drahomír",
	    "Bohuslav",
	    "Iľja",
	    "Daniel",
	    "Vladimír",
	    "Jakub",
	    "Krištof",
	    "Ignác",
	    "Gustáv",
	    "Jerguš",
	    "Dominik",
	    "Oskar",
	    "Vavrinec",
	    "Ľubomír",
	    "Mojmír",
	    "Leonard",
	    "Tichomír",
	    "Filip",
	    "Bartolomej",
	    "Ľudovít",
	    "Samuel",
	    "Augustín",
	    "Belo",
	    "Oleg",
	    "Bystrík",
	    "Ctibor",
	    "Ľudomil",
	    "Konštantín",
	    "Ľuboslav",
	    "Matúš",
	    "Móric",
	    "Ľuboš",
	    "Ľubor",
	    "Vladislav",
	    "Cyprián",
	    "Václav",
	    "Michal",
	    "Jarolím",
	    "Arnold",
	    "Levoslav",
	    "František",
	    "Dionýz",
	    "Maximilián",
	    "Koloman",
	    "Boris",
	    "Lukáš",
	    "Kristián",
	    "Vendelín",
	    "Sergej",
	    "Aurel",
	    "Demeter",
	    "Denis",
	    "Hubert",
	    "Karol",
	    "Imrich",
	    "René",
	    "Bohumír",
	    "Teodor",
	    "Tibor",
	    "Maroš",
	    "Martin",
	    "Svätopluk",
	    "Stanislav",
	    "Leopold",
	    "Eugen",
	    "Félix",
	    "Klement",
	    "Kornel",
	    "Milan",
	    "Vratko",
	    "Ondrej",
	    "Andrej",
	    "Edmund",
	    "Oldrich",
	    "Oto",
	    "Mikuláš",
	    "Ambróz",
	    "Radúz",
	    "Bohdan",
	    "Adam",
	    "Štefan",
	    "Dávid",
	    "Silvester"
	  ],
	  "woman_first_name": [
	    "Alexandra",
	    "Karina",
	    "Daniela",
	    "Andrea",
	    "Antónia",
	    "Bohuslava",
	    "Dáša",
	    "Malvína",
	    "Kristína",
	    "Nataša",
	    "Bohdana",
	    "Drahomíra",
	    "Sára",
	    "Zora",
	    "Tamara",
	    "Ema",
	    "Tatiana",
	    "Erika",
	    "Veronika",
	    "Agáta",
	    "Dorota",
	    "Vanda",
	    "Zoja",
	    "Gabriela",
	    "Perla",
	    "Ida",
	    "Liana",
	    "Miloslava",
	    "Vlasta",
	    "Lívia",
	    "Eleonóra",
	    "Etela",
	    "Romana",
	    "Zlatica",
	    "Anežka",
	    "Bohumila",
	    "Františka",
	    "Angela",
	    "Matilda",
	    "Svetlana",
	    "Ľubica",
	    "Alena",
	    "Soňa",
	    "Vieroslava",
	    "Zita",
	    "Miroslava",
	    "Irena",
	    "Milena",
	    "Estera",
	    "Justína",
	    "Dana",
	    "Danica",
	    "Jela",
	    "Jaroslava",
	    "Jarmila",
	    "Lea",
	    "Anastázia",
	    "Galina",
	    "Lesana",
	    "Hermína",
	    "Monika",
	    "Ingrida",
	    "Viktória",
	    "Blažena",
	    "Žofia",
	    "Sofia",
	    "Gizela",
	    "Viola",
	    "Gertrúda",
	    "Zina",
	    "Júlia",
	    "Juliana",
	    "Želmíra",
	    "Ela",
	    "Vanesa",
	    "Iveta",
	    "Vilma",
	    "Petronela",
	    "Žaneta",
	    "Xénia",
	    "Karolína",
	    "Lenka",
	    "Laura",
	    "Stanislava",
	    "Margaréta",
	    "Dobroslava",
	    "Blanka",
	    "Valéria",
	    "Paulína",
	    "Sidónia",
	    "Adriána",
	    "Beáta",
	    "Petra",
	    "Melánia",
	    "Diana",
	    "Berta",
	    "Patrícia",
	    "Lujza",
	    "Amália",
	    "Milota",
	    "Nina",
	    "Margita",
	    "Kamila",
	    "Dušana",
	    "Magdaléna",
	    "Oľga",
	    "Anna",
	    "Hana",
	    "Božena",
	    "Marta",
	    "Libuša",
	    "Božidara",
	    "Dominika",
	    "Hortenzia",
	    "Jozefína",
	    "Štefánia",
	    "Ľubomíra",
	    "Zuzana",
	    "Darina",
	    "Marcela",
	    "Milica",
	    "Elena",
	    "Helena",
	    "Lýdia",
	    "Anabela",
	    "Jana",
	    "Silvia",
	    "Nikola",
	    "Ružena",
	    "Nora",
	    "Drahoslava",
	    "Linda",
	    "Melinda",
	    "Rebeka",
	    "Rozália",
	    "Regína",
	    "Alica",
	    "Marianna",
	    "Miriama",
	    "Martina",
	    "Mária",
	    "Jolana",
	    "Ľudomila",
	    "Ľudmila",
	    "Olympia",
	    "Eugénia",
	    "Ľuboslava",
	    "Zdenka",
	    "Edita",
	    "Michaela",
	    "Stela",
	    "Viera",
	    "Natália",
	    "Eliška",
	    "Brigita",
	    "Valentína",
	    "Terézia",
	    "Vladimíra",
	    "Hedviga",
	    "Uršuľa",
	    "Alojza",
	    "Kvetoslava",
	    "Sabína",
	    "Dobromila",
	    "Klára",
	    "Simona",
	    "Aurélia",
	    "Denisa",
	    "Renáta",
	    "Irma",
	    "Agnesa",
	    "Klaudia",
	    "Alžbeta",
	    "Elvíra",
	    "Cecília",
	    "Emília",
	    "Katarína",
	    "Henrieta",
	    "Bibiána",
	    "Barbora",
	    "Marína",
	    "Izabela",
	    "Hilda",
	    "Otília",
	    "Lucia",
	    "Branislava",
	    "Bronislava",
	    "Ivica",
	    "Albína",
	    "Kornélia",
	    "Sláva",
	    "Slávka",
	    "Judita",
	    "Dagmara",
	    "Adela",
	    "Nadežda",
	    "Eva",
	    "Filoména",
	    "Ivana",
	    "Milada"
	  ],
	  "man_last_name": [
	    "Antal",
	    "Babka",
	    "Bahna",
	    "Bahno",
	    "Baláž",
	    "Baran",
	    "Baranka",
	    "Bartovič",
	    "Bartoš",
	    "Bača",
	    "Bernolák",
	    "Beňo",
	    "Bicek",
	    "Bielik",
	    "Blaho",
	    "Bondra",
	    "Bosák",
	    "Boška",
	    "Brezina",
	    "Bukovský",
	    "Chalupka",
	    "Chudík",
	    "Cibula",
	    "Cibulka",
	    "Cibuľa",
	    "Cyprich",
	    "Cíger",
	    "Danko",
	    "Daňko",
	    "Daňo",
	    "Debnár",
	    "Dej",
	    "Dekýš",
	    "Doležal",
	    "Dočolomanský",
	    "Droppa",
	    "Dubovský",
	    "Dudek",
	    "Dula",
	    "Dulla",
	    "Dusík",
	    "Dvonč",
	    "Dzurjanin",
	    "Dávid",
	    "Fabian",
	    "Fabián",
	    "Fajnor",
	    "Farkašovský",
	    "Fico",
	    "Filc",
	    "Filip",
	    "Finka",
	    "Ftorek",
	    "Gašpar",
	    "Gašparovič",
	    "Gocník",
	    "Gregor",
	    "Greguš",
	    "Grznár",
	    "Hablák",
	    "Habšuda",
	    "Halda",
	    "Haluška",
	    "Halák",
	    "Hanko",
	    "Hanzal",
	    "Haščák",
	    "Heretik",
	    "Hečko",
	    "Hlaváček",
	    "Hlinka",
	    "Holub",
	    "Holuby",
	    "Hossa",
	    "Hoza",
	    "Hraško",
	    "Hric",
	    "Hrmo",
	    "Hrušovský",
	    "Huba",
	    "Ihnačák",
	    "Janeček",
	    "Janoška",
	    "Jantošovič",
	    "Janík",
	    "Janček",
	    "Jedľovský",
	    "Jendek",
	    "Jonata",
	    "Jurina",
	    "Jurkovič",
	    "Jurík",
	    "Jánošík",
	    "Kafenda",
	    "Kaliský",
	    "Karul",
	    "Keníž",
	    "Klapka",
	    "Kmeť",
	    "Kolesár",
	    "Kollár",
	    "Kolnik",
	    "Kolník",
	    "Kolár",
	    "Korec",
	    "Kostka",
	    "Kostrec",
	    "Kováč",
	    "Kováčik",
	    "Koza",
	    "Kočiš",
	    "Krajíček",
	    "Krajči",
	    "Krajčo",
	    "Krajčovič",
	    "Krajčír",
	    "Králik",
	    "Krúpa",
	    "Kubík",
	    "Kyseľ",
	    "Kállay",
	    "Labuda",
	    "Lepšík",
	    "Lipták",
	    "Lisický",
	    "Lubina",
	    "Lukáč",
	    "Lupták",
	    "Líška",
	    "Madej",
	    "Majeský",
	    "Malachovský",
	    "Malíšek",
	    "Mamojka",
	    "Marcinko",
	    "Marián",
	    "Masaryk",
	    "Maslo",
	    "Matiaško",
	    "Medveď",
	    "Melcer",
	    "Mečiar",
	    "Michalík",
	    "Mihalik",
	    "Mihál",
	    "Mihálik",
	    "Mikloško",
	    "Mikulík",
	    "Mikuš",
	    "Mikúš",
	    "Milota",
	    "Mináč",
	    "Mišík",
	    "Mojžiš",
	    "Mokroš",
	    "Mora",
	    "Moravčík",
	    "Mydlo",
	    "Nemec",
	    "Nitra",
	    "Novák",
	    "Obšut",
	    "Ondruš",
	    "Otčenáš",
	    "Pauko",
	    "Pavlikovský",
	    "Pavúk",
	    "Pašek",
	    "Paška",
	    "Paško",
	    "Pelikán",
	    "Petrovický",
	    "Petruška",
	    "Peško",
	    "Plch",
	    "Plekanec",
	    "Podhradský",
	    "Podkonický",
	    "Poliak",
	    "Pupák",
	    "Rak",
	    "Repiský",
	    "Romančík",
	    "Rus",
	    "Ružička",
	    "Rybníček",
	    "Rybár",
	    "Rybárik",
	    "Samson",
	    "Sedliak",
	    "Senko",
	    "Sklenka",
	    "Skokan",
	    "Skutecký",
	    "Slašťan",
	    "Sloboda",
	    "Slobodník",
	    "Slota",
	    "Slovák",
	    "Smrek",
	    "Stodola",
	    "Straka",
	    "Strnisko",
	    "Svrbík",
	    "Sámel",
	    "Sýkora",
	    "Tatar",
	    "Tatarka",
	    "Tatár",
	    "Tatárka",
	    "Thomka",
	    "Tomeček",
	    "Tomka",
	    "Tomko",
	    "Truben",
	    "Turčok",
	    "Uram",
	    "Urblík",
	    "Vajcík",
	    "Vajda",
	    "Valach",
	    "Valachovič",
	    "Valent",
	    "Valuška",
	    "Vanek",
	    "Vesel",
	    "Vicen",
	    "Višňovský",
	    "Vlach",
	    "Vojtek",
	    "Vydarený",
	    "Zajac",
	    "Zima",
	    "Zimka",
	    "Záborský",
	    "Zúbrik",
	    "Čapkovič",
	    "Čaplovič",
	    "Čarnogurský",
	    "Čierny",
	    "Čobrda",
	    "Ďaďo",
	    "Ďurica",
	    "Ďuriš",
	    "Šidlo",
	    "Šimonovič",
	    "Škriniar",
	    "Škultéty",
	    "Šmajda",
	    "Šoltés",
	    "Šoltýs",
	    "Štefan",
	    "Štefanka",
	    "Šulc",
	    "Šurka",
	    "Švehla",
	    "Šťastný"
	  ],
	  "woman_last_name": [
	    "Antalová",
	    "Babková",
	    "Bahnová",
	    "Balážová",
	    "Baranová",
	    "Baranková",
	    "Bartovičová",
	    "Bartošová",
	    "Bačová",
	    "Bernoláková",
	    "Beňová",
	    "Biceková",
	    "Bieliková",
	    "Blahová",
	    "Bondrová",
	    "Bosáková",
	    "Bošková",
	    "Brezinová",
	    "Bukovská",
	    "Chalupková",
	    "Chudíková",
	    "Cibulová",
	    "Cibulková",
	    "Cyprichová",
	    "Cígerová",
	    "Danková",
	    "Daňková",
	    "Daňová",
	    "Debnárová",
	    "Dejová",
	    "Dekýšová",
	    "Doležalová",
	    "Dočolomanská",
	    "Droppová",
	    "Dubovská",
	    "Dudeková",
	    "Dulová",
	    "Dullová",
	    "Dusíková",
	    "Dvončová",
	    "Dzurjaninová",
	    "Dávidová",
	    "Fabianová",
	    "Fabiánová",
	    "Fajnorová",
	    "Farkašovská",
	    "Ficová",
	    "Filcová",
	    "Filipová",
	    "Finková",
	    "Ftoreková",
	    "Gašparová",
	    "Gašparovičová",
	    "Gocníková",
	    "Gregorová",
	    "Gregušová",
	    "Grznárová",
	    "Habláková",
	    "Habšudová",
	    "Haldová",
	    "Halušková",
	    "Haláková",
	    "Hanková",
	    "Hanzalová",
	    "Haščáková",
	    "Heretiková",
	    "Hečková",
	    "Hlaváčeková",
	    "Hlinková",
	    "Holubová",
	    "Holubyová",
	    "Hossová",
	    "Hozová",
	    "Hrašková",
	    "Hricová",
	    "Hrmová",
	    "Hrušovská",
	    "Hubová",
	    "Ihnačáková",
	    "Janečeková",
	    "Janošková",
	    "Jantošovičová",
	    "Janíková",
	    "Jančeková",
	    "Jedľovská",
	    "Jendeková",
	    "Jonatová",
	    "Jurinová",
	    "Jurkovičová",
	    "Juríková",
	    "Jánošíková",
	    "Kafendová",
	    "Kaliská",
	    "Karulová",
	    "Kenížová",
	    "Klapková",
	    "Kmeťová",
	    "Kolesárová",
	    "Kollárová",
	    "Kolniková",
	    "Kolníková",
	    "Kolárová",
	    "Korecová",
	    "Kostkaová",
	    "Kostrecová",
	    "Kováčová",
	    "Kováčiková",
	    "Kozová",
	    "Kočišová",
	    "Krajíčeková",
	    "Krajčová",
	    "Krajčovičová",
	    "Krajčírová",
	    "Králiková",
	    "Krúpová",
	    "Kubíková",
	    "Kyseľová",
	    "Kállayová",
	    "Labudová",
	    "Lepšíková",
	    "Liptáková",
	    "Lisická",
	    "Lubinová",
	    "Lukáčová",
	    "Luptáková",
	    "Líšková",
	    "Madejová",
	    "Majeská",
	    "Malachovská",
	    "Malíšeková",
	    "Mamojková",
	    "Marcinková",
	    "Mariánová",
	    "Masaryková",
	    "Maslová",
	    "Matiašková",
	    "Medveďová",
	    "Melcerová",
	    "Mečiarová",
	    "Michalíková",
	    "Mihaliková",
	    "Mihálová",
	    "Miháliková",
	    "Miklošková",
	    "Mikulíková",
	    "Mikušová",
	    "Mikúšová",
	    "Milotová",
	    "Mináčová",
	    "Mišíková",
	    "Mojžišová",
	    "Mokrošová",
	    "Morová",
	    "Moravčíková",
	    "Mydlová",
	    "Nemcová",
	    "Nováková",
	    "Obšutová",
	    "Ondrušová",
	    "Otčenášová",
	    "Pauková",
	    "Pavlikovská",
	    "Pavúková",
	    "Pašeková",
	    "Pašková",
	    "Pelikánová",
	    "Petrovická",
	    "Petrušková",
	    "Pešková",
	    "Plchová",
	    "Plekanecová",
	    "Podhradská",
	    "Podkonická",
	    "Poliaková",
	    "Pupáková",
	    "Raková",
	    "Repiská",
	    "Romančíková",
	    "Rusová",
	    "Ružičková",
	    "Rybníčeková",
	    "Rybárová",
	    "Rybáriková",
	    "Samsonová",
	    "Sedliaková",
	    "Senková",
	    "Sklenková",
	    "Skokanová",
	    "Skutecká",
	    "Slašťanová",
	    "Slobodová",
	    "Slobodníková",
	    "Slotová",
	    "Slováková",
	    "Smreková",
	    "Stodolová",
	    "Straková",
	    "Strnisková",
	    "Svrbíková",
	    "Sámelová",
	    "Sýkorová",
	    "Tatarová",
	    "Tatarková",
	    "Tatárová",
	    "Tatárkaová",
	    "Thomková",
	    "Tomečeková",
	    "Tomková",
	    "Trubenová",
	    "Turčoková",
	    "Uramová",
	    "Urblíková",
	    "Vajcíková",
	    "Vajdová",
	    "Valachová",
	    "Valachovičová",
	    "Valentová",
	    "Valušková",
	    "Vaneková",
	    "Veselová",
	    "Vicenová",
	    "Višňovská",
	    "Vlachová",
	    "Vojteková",
	    "Vydarená",
	    "Zajacová",
	    "Zimová",
	    "Zimková",
	    "Záborská",
	    "Zúbriková",
	    "Čapkovičová",
	    "Čaplovičová",
	    "Čarnogurská",
	    "Čierná",
	    "Čobrdová",
	    "Ďaďová",
	    "Ďuricová",
	    "Ďurišová",
	    "Šidlová",
	    "Šimonovičová",
	    "Škriniarová",
	    "Škultétyová",
	    "Šmajdová",
	    "Šoltésová",
	    "Šoltýsová",
	    "Štefanová",
	    "Štefanková",
	    "Šulcová",
	    "Šurková",
	    "Švehlová",
	    "Šťastná"
	  ],
	  "prefix": [
	    "Ing.",
	    "Mgr.",
	    "JUDr.",
	    "MUDr."
	  ],
	  "suffix": [
	    "Phd."
	  ],
	  "title": {
	    "descriptor": [
	      "Lead",
	      "Senior",
	      "Direct",
	      "Corporate",
	      "Dynamic",
	      "Future",
	      "Product",
	      "National",
	      "Regional",
	      "District",
	      "Central",
	      "Global",
	      "Customer",
	      "Investor",
	      "Dynamic",
	      "International",
	      "Legacy",
	      "Forward",
	      "Internal",
	      "Human",
	      "Chief",
	      "Principal"
	    ],
	    "level": [
	      "Solutions",
	      "Program",
	      "Brand",
	      "Security",
	      "Research",
	      "Marketing",
	      "Directives",
	      "Implementation",
	      "Integration",
	      "Functionality",
	      "Response",
	      "Paradigm",
	      "Tactics",
	      "Identity",
	      "Markets",
	      "Group",
	      "Division",
	      "Applications",
	      "Optimization",
	      "Operations",
	      "Infrastructure",
	      "Intranet",
	      "Communications",
	      "Web",
	      "Branding",
	      "Quality",
	      "Assurance",
	      "Mobility",
	      "Accounts",
	      "Data",
	      "Creative",
	      "Configuration",
	      "Accountability",
	      "Interactions",
	      "Factors",
	      "Usability",
	      "Metrics"
	    ],
	    "job": [
	      "Supervisor",
	      "Associate",
	      "Executive",
	      "Liason",
	      "Officer",
	      "Manager",
	      "Engineer",
	      "Specialist",
	      "Director",
	      "Coordinator",
	      "Administrator",
	      "Architect",
	      "Analyst",
	      "Designer",
	      "Planner",
	      "Orchestrator",
	      "Technician",
	      "Developer",
	      "Producer",
	      "Consultant",
	      "Assistant",
	      "Facilitator",
	      "Agent",
	      "Representative",
	      "Strategist"
	    ]
	  },
	  "name": [
	    "#{prefix} #{man_first_name} #{man_last_name}",
	    "#{prefix} #{woman_first_name} #{woman_last_name}",
	    "#{man_first_name} #{man_last_name} #{suffix}",
	    "#{woman_first_name} #{woman_last_name} #{suffix}",
	    "#{man_first_name} #{man_last_name}",
	    "#{man_first_name} #{man_last_name}",
	    "#{man_first_name} #{man_last_name}",
	    "#{woman_first_name} #{woman_last_name}",
	    "#{woman_first_name} #{woman_last_name}",
	    "#{woman_first_name} #{woman_last_name}"
	  ]
	};
	sk.phone_number = {
	  "formats": [
	    "09## ### ###",
	    "0## #### ####",
	    "0# #### ####",
	    "+421 ### ### ###"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var sv = {};
	module["exports"] = sv;
	sv.title = "Swedish";
	sv.address = {
	  "city_prefix": [
	    "Söder",
	    "Norr",
	    "Väst",
	    "Öster",
	    "Aling",
	    "Ar",
	    "Av",
	    "Bo",
	    "Br",
	    "Bå",
	    "Ek",
	    "En",
	    "Esk",
	    "Fal",
	    "Gäv",
	    "Göte",
	    "Ha",
	    "Helsing",
	    "Karl",
	    "Krist",
	    "Kram",
	    "Kung",
	    "Kö",
	    "Lyck",
	    "Ny"
	  ],
	  "city_suffix": [
	    "stad",
	    "land",
	    "sås",
	    "ås",
	    "holm",
	    "tuna",
	    "sta",
	    "berg",
	    "löv",
	    "borg",
	    "mora",
	    "hamn",
	    "fors",
	    "köping",
	    "by",
	    "hult",
	    "torp",
	    "fred",
	    "vik"
	  ],
	  "country": [
	    "Ryssland",
	    "Kanada",
	    "Kina",
	    "USA",
	    "Brasilien",
	    "Australien",
	    "Indien",
	    "Argentina",
	    "Kazakstan",
	    "Algeriet",
	    "DR Kongo",
	    "Danmark",
	    "Färöarna",
	    "Grönland",
	    "Saudiarabien",
	    "Mexiko",
	    "Indonesien",
	    "Sudan",
	    "Libyen",
	    "Iran",
	    "Mongoliet",
	    "Peru",
	    "Tchad",
	    "Niger",
	    "Angola",
	    "Mali",
	    "Sydafrika",
	    "Colombia",
	    "Etiopien",
	    "Bolivia",
	    "Mauretanien",
	    "Egypten",
	    "Tanzania",
	    "Nigeria",
	    "Venezuela",
	    "Namibia",
	    "Pakistan",
	    "Moçambique",
	    "Turkiet",
	    "Chile",
	    "Zambia",
	    "Marocko",
	    "Västsahara",
	    "Burma",
	    "Afghanistan",
	    "Somalia",
	    "Centralafrikanska republiken",
	    "Sydsudan",
	    "Ukraina",
	    "Botswana",
	    "Madagaskar",
	    "Kenya",
	    "Frankrike",
	    "Franska Guyana",
	    "Jemen",
	    "Thailand",
	    "Spanien",
	    "Turkmenistan",
	    "Kamerun",
	    "Papua Nya Guinea",
	    "Sverige",
	    "Uzbekistan",
	    "Irak",
	    "Paraguay",
	    "Zimbabwe",
	    "Japan",
	    "Tyskland",
	    "Kongo",
	    "Finland",
	    "Malaysia",
	    "Vietnam",
	    "Norge",
	    "Svalbard",
	    "Jan Mayen",
	    "Elfenbenskusten",
	    "Polen",
	    "Italien",
	    "Filippinerna",
	    "Ecuador",
	    "Burkina Faso",
	    "Nya Zeeland",
	    "Gabon",
	    "Guinea",
	    "Storbritannien",
	    "Ghana",
	    "Rumänien",
	    "Laos",
	    "Uganda",
	    "Guyana",
	    "Oman",
	    "Vitryssland",
	    "Kirgizistan",
	    "Senegal",
	    "Syrien",
	    "Kambodja",
	    "Uruguay",
	    "Tunisien",
	    "Surinam",
	    "Nepal",
	    "Bangladesh",
	    "Tadzjikistan",
	    "Grekland",
	    "Nicaragua",
	    "Eritrea",
	    "Nordkorea",
	    "Malawi",
	    "Benin",
	    "Honduras",
	    "Liberia",
	    "Bulgarien",
	    "Kuba",
	    "Guatemala",
	    "Island",
	    "Sydkorea",
	    "Ungern",
	    "Portugal",
	    "Jordanien",
	    "Serbien",
	    "Azerbajdzjan",
	    "Österrike",
	    "Förenade Arabemiraten",
	    "Tjeckien",
	    "Panama",
	    "Sierra Leone",
	    "Irland",
	    "Georgien",
	    "Sri Lanka",
	    "Litauen",
	    "Lettland",
	    "Togo",
	    "Kroatien",
	    "Bosnien och Hercegovina",
	    "Costa Rica",
	    "Slovakien",
	    "Dominikanska republiken",
	    "Bhutan",
	    "Estland",
	    "Danmark",
	    "Färöarna",
	    "Grönland",
	    "Nederländerna",
	    "Schweiz",
	    "Guinea-Bissau",
	    "Taiwan",
	    "Moldavien",
	    "Belgien",
	    "Lesotho",
	    "Armenien",
	    "Albanien",
	    "Salomonöarna",
	    "Ekvatorialguinea",
	    "Burundi",
	    "Haiti",
	    "Rwanda",
	    "Makedonien",
	    "Djibouti",
	    "Belize",
	    "Israel",
	    "El Salvador",
	    "Slovenien",
	    "Fiji",
	    "Kuwait",
	    "Swaziland",
	    "Timor-Leste",
	    "Montenegro",
	    "Bahamas",
	    "Vanuatu",
	    "Qatar",
	    "Gambia",
	    "Jamaica",
	    "Kosovo",
	    "Libanon",
	    "Cypern",
	    "Brunei",
	    "Trinidad och Tobago",
	    "Kap Verde",
	    "Samoa",
	    "Luxemburg",
	    "Komorerna",
	    "Mauritius",
	    "São Tomé och Príncipe",
	    "Kiribati",
	    "Dominica",
	    "Tonga",
	    "Mikronesiens federerade stater",
	    "Singapore",
	    "Bahrain",
	    "Saint Lucia",
	    "Andorra",
	    "Palau",
	    "Seychellerna",
	    "Antigua och Barbuda",
	    "Barbados",
	    "Saint Vincent och Grenadinerna",
	    "Grenada",
	    "Malta",
	    "Maldiverna",
	    "Saint Kitts och Nevis",
	    "Marshallöarna",
	    "Liechtenstein",
	    "San Marino",
	    "Tuvalu",
	    "Nauru",
	    "Monaco",
	    "Vatikanstaten"
	  ],
	  "common_street_suffix": [
	    "s Väg",
	    "s Gata"
	  ],
	  "street_prefix": [
	    "Västra",
	    "Östra",
	    "Norra",
	    "Södra",
	    "Övre",
	    "Undre"
	  ],
	  "street_root": [
	    "Björk",
	    "Järnvägs",
	    "Ring",
	    "Skol",
	    "Skogs",
	    "Ny",
	    "Gran",
	    "Idrotts",
	    "Stor",
	    "Kyrk",
	    "Industri",
	    "Park",
	    "Strand",
	    "Skol",
	    "Trädgård",
	    "Ängs",
	    "Kyrko",
	    "Villa",
	    "Ek",
	    "Kvarn",
	    "Stations",
	    "Back",
	    "Furu",
	    "Gen",
	    "Fabriks",
	    "Åker",
	    "Bäck",
	    "Asp"
	  ],
	  "street_suffix": [
	    "vägen",
	    "gatan",
	    "gränden",
	    "gärdet",
	    "allén"
	  ],
	  "state": [
	    "Blekinge",
	    "Dalarna",
	    "Gotland",
	    "Gävleborg",
	    "Göteborg",
	    "Halland",
	    "Jämtland",
	    "Jönköping",
	    "Kalmar",
	    "Kronoberg",
	    "Norrbotten",
	    "Skaraborg",
	    "Skåne",
	    "Stockholm",
	    "Södermanland",
	    "Uppsala",
	    "Värmland",
	    "Västerbotten",
	    "Västernorrland",
	    "Västmanland",
	    "Älvsborg",
	    "Örebro",
	    "Östergötland"
	  ],
	  "city": [
	    "#{city_prefix}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{street_root}#{street_suffix}",
	    "#{street_prefix} #{street_root}#{street_suffix}",
	    "#{Name.first_name}#{common_street_suffix}",
	    "#{Name.last_name}#{common_street_suffix}"
	  ],
	  "postcode": [
	    "#####"
	  ],
	  "building_number": [
	    "###",
	    "##",
	    "#"
	  ],
	  "secondary_address": [
	    "Lgh. ###",
	    "Hus ###"
	  ],
	  "street_address": [
	    "#{street_name} #{building_number}"
	  ],
	  "default_country": [
	    "Sverige"
	  ]
	};
	sv.company = {
	  "suffix": [
	    "Gruppen",
	    "AB",
	    "HB",
	    "Group",
	    "Investment",
	    "Kommanditbolag",
	    "Aktiebolag"
	  ],
	  "name": [
	    "#{Name.last_name} #{suffix}",
	    "#{Name.last_name}-#{Name.last_name}",
	    "#{Name.last_name}, #{Name.last_name} #{suffix}"
	  ]
	};
	sv.internet = {
	  "domain_suffix": [
	    "se",
	    "nu",
	    "info",
	    "com",
	    "org"
	  ]
	};
	sv.name = {
	  "first_name_women": [
	    "Maria",
	    "Anna",
	    "Margareta",
	    "Elisabeth",
	    "Eva",
	    "Birgitta",
	    "Kristina",
	    "Karin",
	    "Elisabet",
	    "Marie"
	  ],
	  "first_name_men": [
	    "Erik",
	    "Lars",
	    "Karl",
	    "Anders",
	    "Per",
	    "Johan",
	    "Nils",
	    "Lennart",
	    "Emil",
	    "Hans"
	  ],
	  "last_name": [
	    "Johansson",
	    "Andersson",
	    "Karlsson",
	    "Nilsson",
	    "Eriksson",
	    "Larsson",
	    "Olsson",
	    "Persson",
	    "Svensson",
	    "Gustafsson"
	  ],
	  "prefix": [
	    "Dr.",
	    "Prof.",
	    "PhD."
	  ],
	  "title": {
	    "descriptor": [
	      "Lead",
	      "Senior",
	      "Direct",
	      "Corporate",
	      "Dynamic",
	      "Future",
	      "Product",
	      "National",
	      "Regional",
	      "District",
	      "Central",
	      "Global",
	      "Customer",
	      "Investor",
	      "Dynamic",
	      "International",
	      "Legacy",
	      "Forward",
	      "Internal",
	      "Human",
	      "Chief",
	      "Principal"
	    ],
	    "level": [
	      "Solutions",
	      "Program",
	      "Brand",
	      "Security",
	      "Research",
	      "Marketing",
	      "Directives",
	      "Implementation",
	      "Integration",
	      "Functionality",
	      "Response",
	      "Paradigm",
	      "Tactics",
	      "Identity",
	      "Markets",
	      "Group",
	      "Division",
	      "Applications",
	      "Optimization",
	      "Operations",
	      "Infrastructure",
	      "Intranet",
	      "Communications",
	      "Web",
	      "Branding",
	      "Quality",
	      "Assurance",
	      "Mobility",
	      "Accounts",
	      "Data",
	      "Creative",
	      "Configuration",
	      "Accountability",
	      "Interactions",
	      "Factors",
	      "Usability",
	      "Metrics"
	    ],
	    "job": [
	      "Supervisor",
	      "Associate",
	      "Executive",
	      "Liason",
	      "Officer",
	      "Manager",
	      "Engineer",
	      "Specialist",
	      "Director",
	      "Coordinator",
	      "Administrator",
	      "Architect",
	      "Analyst",
	      "Designer",
	      "Planner",
	      "Orchestrator",
	      "Technician",
	      "Developer",
	      "Producer",
	      "Consultant",
	      "Assistant",
	      "Facilitator",
	      "Agent",
	      "Representative",
	      "Strategist"
	    ]
	  },
	  "name": [
	    "#{first_name_women} #{last_name}",
	    "#{first_name_men} #{last_name}",
	    "#{first_name_women} #{last_name}",
	    "#{first_name_men} #{last_name}",
	    "#{first_name_women} #{last_name}",
	    "#{first_name_men} #{last_name}",
	    "#{prefix} #{first_name_men} #{last_name}",
	    "#{prefix} #{first_name_women} #{last_name}"
	  ]
	};
	sv.phone_number = {
	  "formats": [
	    "####-#####",
	    "####-######"
	  ]
	};
	sv.cell_phone = {
	  "common_cell_prefix": [
	    56,
	    62,
	    59
	  ],
	  "formats": [
	    "#{common_cell_prefix}-###-####"
	  ]
	};
	sv.commerce = {
	  "color": [
	    "vit",
	    "silver",
	    "grå",
	    "svart",
	    "röd",
	    "grön",
	    "blå",
	    "gul",
	    "lila",
	    "indigo",
	    "guld",
	    "brun",
	    "rosa",
	    "purpur",
	    "korall"
	  ],
	  "department": [
	    "Böcker",
	    "Filmer",
	    "Musik",
	    "Spel",
	    "Elektronik",
	    "Datorer",
	    "Hem",
	    "Trädgård",
	    "Verktyg",
	    "Livsmedel",
	    "Hälsa",
	    "Skönhet",
	    "Leksaker",
	    "Klädsel",
	    "Skor",
	    "Smycken",
	    "Sport"
	  ],
	  "product_name": {
	    "adjective": [
	      "Liten",
	      "Ergonomisk",
	      "Robust",
	      "Intelligent",
	      "Söt",
	      "Otrolig",
	      "Fatastisk",
	      "Praktisk",
	      "Slimmad",
	      "Grym"
	    ],
	    "material": [
	      "Stål",
	      "Metall",
	      "Trä",
	      "Betong",
	      "Plast",
	      "Bomul",
	      "Grnit",
	      "Gummi",
	      "Latex"
	    ],
	    "product": [
	      "Stol",
	      "Bil",
	      "Dator",
	      "Handskar",
	      "Pants",
	      "Shirt",
	      "Table",
	      "Shoes",
	      "Hat"
	    ]
	  }
	};
	sv.team = {
	  "suffix": [
	    "IF",
	    "FF",
	    "BK",
	    "HK",
	    "AIF",
	    "SK",
	    "FC",
	    "SK",
	    "BoIS",
	    "FK",
	    "BIS",
	    "FIF",
	    "IK"
	  ],
	  "name": [
	    "#{Address.city} #{suffix}"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var vi = {};
	module["exports"] = vi;
	vi.title = "Vietnamese";
	vi.address = {
	  "city_root": [
	    "Bắc Giang",
	    "Bắc Kạn",
	    "Bắc Ninh",
	    "Cao Bằng",
	    "Điện Biên",
	    "Hà Giang",
	    "Hà Nam",
	    "Hà Tây",
	    "Hải Dương",
	    "TP Hải Phòng",
	    "Hòa Bình",
	    "Hưng Yên",
	    "Lai Châu",
	    "Lào Cai",
	    "Lạng Sơn",
	    "Nam Định",
	    "Ninh Bình",
	    "Phú Thọ",
	    "Quảng Ninh",
	    "Sơn La",
	    "Thái Bình",
	    "Thái Nguyên",
	    "Tuyên Quang",
	    "Vĩnh Phúc",
	    "Yên Bái",
	    "TP Đà Nẵng",
	    "Bình Định",
	    "Đắk Lắk",
	    "Đắk Nông",
	    "Gia Lai",
	    "Hà Tĩnh",
	    "Khánh Hòa",
	    "Kon Tum",
	    "Nghệ An",
	    "Phú Yên",
	    "Quảng Bình",
	    "Quảng Nam",
	    "Quảng Ngãi",
	    "Quảng Trị",
	    "Thanh Hóa",
	    "Thừa Thiên Huế",
	    "TP TP. Hồ Chí Minh",
	    "An Giang",
	    "Bà Rịa Vũng Tàu",
	    "Bạc Liêu",
	    "Bến Tre",
	    "Bình Dương",
	    "Bình Phước",
	    "Bình Thuận",
	    "Cà Mau",
	    "TP Cần Thơ",
	    "Đồng Nai",
	    "Đồng Tháp",
	    "Hậu Giang",
	    "Kiên Giang",
	    "Lâm Đồng",
	    "Long An",
	    "Ninh Thuận",
	    "Sóc Trăng",
	    "Tây Ninh",
	    "Tiền Giang",
	    "Trà Vinh",
	    "Vĩnh Long"
	  ],
	  "city": [
	    "#{city_root}"
	  ],
	  "postcode": "/[A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}/",
	  "county": [
	    "Avon",
	    "Bedfordshire",
	    "Berkshire",
	    "Borders",
	    "Buckinghamshire",
	    "Cambridgeshire",
	    "Central",
	    "Cheshire",
	    "Cleveland",
	    "Clwyd",
	    "Cornwall",
	    "County Antrim",
	    "County Armagh",
	    "County Down",
	    "County Fermanagh",
	    "County Londonderry",
	    "County Tyrone",
	    "Cumbria",
	    "Derbyshire",
	    "Devon",
	    "Dorset",
	    "Dumfries and Galloway",
	    "Durham",
	    "Dyfed",
	    "East Sussex",
	    "Essex",
	    "Fife",
	    "Gloucestershire",
	    "Grampian",
	    "Greater Manchester",
	    "Gwent",
	    "Gwynedd County",
	    "Hampshire",
	    "Herefordshire",
	    "Hertfordshire",
	    "Highlands and Islands",
	    "Humberside",
	    "Isle of Wight",
	    "Kent",
	    "Lancashire",
	    "Leicestershire",
	    "Lincolnshire",
	    "Lothian",
	    "Merseyside",
	    "Mid Glamorgan",
	    "Norfolk",
	    "North Yorkshire",
	    "Northamptonshire",
	    "Northumberland",
	    "Nottinghamshire",
	    "Oxfordshire",
	    "Powys",
	    "Rutland",
	    "Shropshire",
	    "Somerset",
	    "South Glamorgan",
	    "South Yorkshire",
	    "Staffordshire",
	    "Strathclyde",
	    "Suffolk",
	    "Surrey",
	    "Tayside",
	    "Tyne and Wear",
	    "Việt Nam",
	    "Warwickshire",
	    "West Glamorgan",
	    "West Midlands",
	    "West Sussex",
	    "West Yorkshire",
	    "Wiltshire",
	    "Worcestershire"
	  ],
	  "default_country": [
	    "Việt Nam"
	  ]
	};
	vi.internet = {
	  "domain_suffix": [
	    "com",
	    "net",
	    "info",
	    "vn",
	    "com.vn"
	  ]
	};
	vi.phone_number = {
	  "formats": [
	    "01#### #####",
	    "01### ######",
	    "01#1 ### ####",
	    "011# ### ####",
	    "02# #### ####",
	    "03## ### ####",
	    "055 #### ####",
	    "056 #### ####",
	    "0800 ### ####",
	    "08## ### ####",
	    "09## ### ####",
	    "016977 ####",
	    "01### #####",
	    "0500 ######",
	    "0800 ######"
	  ]
	};
	vi.cell_phone = {
	  "formats": [
	    "074## ######",
	    "075## ######",
	    "076## ######",
	    "077## ######",
	    "078## ######",
	    "079## ######"
	  ]
	};
	vi.name = {
	  "first_name": [
	    "Phạm",
	    "Nguyễn",
	    "Trần",
	    "Lê",
	    "Lý",
	    "Hoàng",
	    "Phan",
	    "Vũ",
	    "Tăng",
	    "Đặng",
	    "Bùi",
	    "Đỗ",
	    "Hồ",
	    "Ngô",
	    "Dương",
	    "Đào",
	    "Đoàn",
	    "Vương",
	    "Trịnh",
	    "Đinh",
	    "Lâm",
	    "Phùng",
	    "Mai",
	    "Tô",
	    "Trương",
	    "Hà"
	  ],
	  "last_name": [
	    "Nam",
	    "Trung",
	    "Thanh",
	    "Thị",
	    "Văn",
	    "Dương",
	    "Tăng",
	    "Quốc",
	    "Như",
	    "Phạm",
	    "Nguyễn",
	    "Trần",
	    "Lê",
	    "Lý",
	    "Hoàng",
	    "Phan",
	    "Vũ",
	    "Tăng",
	    "Đặng",
	    "Bùi",
	    "Đỗ",
	    "Hồ",
	    "Ngô",
	    "Dương",
	    "Đào",
	    "Đoàn",
	    "Vương",
	    "Trịnh",
	    "Đinh",
	    "Lâm",
	    "Phùng",
	    "Mai",
	    "Tô",
	    "Trương",
	    "Hà",
	    "Vinh",
	    "Nhung",
	    "Hòa",
	    "Tiến",
	    "Tâm",
	    "Bửu",
	    "Loan",
	    "Hiền",
	    "Hải",
	    "Vân",
	    "Kha",
	    "Minh",
	    "Nhân",
	    "Triệu",
	    "Tuân",
	    "Hữu",
	    "Đức",
	    "Phú",
	    "Khoa",
	    "Thắgn",
	    "Sơn",
	    "Dung",
	    "Tú",
	    "Trinh",
	    "Thảo",
	    "Sa",
	    "Kim",
	    "Long",
	    "Thi",
	    "Cường",
	    "Ngọc",
	    "Sinh",
	    "Khang",
	    "Phong",
	    "Thắm",
	    "Thu",
	    "Thủy",
	    "Nhàn"
	  ],
	  "name": [
	    "#{first_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name}",
	    "#{first_name} #{last_name} #{last_name} #{last_name}"
	  ]
	};
	vi.company = {
	  "prefix": [
	    "Công ty",
	    "Cty TNHH",
	    "Cty",
	    "Cửa hàng",
	    "Trung tâm",
	    "Chi nhánh"
	  ],
	  "name": [
	    "#{prefix} #{Name.last_name}"
	  ]
	};
	vi.lorem = {
	  "words": [
	    "đã",
	    "đang",
	    "ừ",
	    "ờ",
	    "á",
	    "không",
	    "biết",
	    "gì",
	    "hết",
	    "đâu",
	    "nha",
	    "thế",
	    "thì",
	    "là",
	    "đánh",
	    "đá",
	    "đập",
	    "phá",
	    "viết",
	    "vẽ",
	    "tô",
	    "thuê",
	    "mướn",
	    "mượn",
	    "mua",
	    "một",
	    "hai",
	    "ba",
	    "bốn",
	    "năm",
	    "sáu",
	    "bảy",
	    "tám",
	    "chín",
	    "mười",
	    "thôi",
	    "việc",
	    "nghỉ",
	    "làm",
	    "nhà",
	    "cửa",
	    "xe",
	    "đạp",
	    "ác",
	    "độc",
	    "khoảng",
	    "khoan",
	    "thuyền",
	    "tàu",
	    "bè",
	    "lầu",
	    "xanh",
	    "đỏ",
	    "tím",
	    "vàng",
	    "kim",
	    "chỉ",
	    "khâu",
	    "may",
	    "vá",
	    "em",
	    "anh",
	    "yêu",
	    "thương",
	    "thích",
	    "con",
	    "cái",
	    "bàn",
	    "ghế",
	    "tủ",
	    "quần",
	    "áo",
	    "nón",
	    "dép",
	    "giày",
	    "lỗi",
	    "được",
	    "ghét",
	    "giết",
	    "chết",
	    "hết",
	    "tôi",
	    "bạn",
	    "tui",
	    "trời",
	    "trăng",
	    "mây",
	    "gió",
	    "máy",
	    "hàng",
	    "hóa",
	    "leo",
	    "núi",
	    "bơi",
	    "biển",
	    "chìm",
	    "xuồng",
	    "nước",
	    "ngọt",
	    "ruộng",
	    "đồng",
	    "quê",
	    "hương"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var zh_CN = {};
	module["exports"] = zh_CN;
	zh_CN.title = "Chinese";
	zh_CN.address = {
	  "city_prefix": [
	    "长",
	    "上",
	    "南",
	    "西",
	    "北",
	    "诸",
	    "宁",
	    "珠",
	    "武",
	    "衡",
	    "成",
	    "福",
	    "厦",
	    "贵",
	    "吉",
	    "海",
	    "太",
	    "济",
	    "安",
	    "吉",
	    "包"
	  ],
	  "city_suffix": [
	    "沙市",
	    "京市",
	    "宁市",
	    "安市",
	    "乡县",
	    "海市",
	    "码市",
	    "汉市",
	    "阳市",
	    "都市",
	    "州市",
	    "门市",
	    "阳市",
	    "口市",
	    "原市",
	    "南市",
	    "徽市",
	    "林市",
	    "头市"
	  ],
	  "building_number": [
	    "#####",
	    "####",
	    "###",
	    "##",
	    "#"
	  ],
	  "street_suffix": [
	    "巷",
	    "街",
	    "路",
	    "桥",
	    "侬",
	    "旁",
	    "中心",
	    "栋"
	  ],
	  "postcode": [
	    "######"
	  ],
	  "state": [
	    "北京市",
	    "上海市",
	    "天津市",
	    "重庆市",
	    "黑龙江省",
	    "吉林省",
	    "辽宁省",
	    "内蒙古",
	    "河北省",
	    "新疆",
	    "甘肃省",
	    "青海省",
	    "陕西省",
	    "宁夏",
	    "河南省",
	    "山东省",
	    "山西省",
	    "安徽省",
	    "湖北省",
	    "湖南省",
	    "江苏省",
	    "四川省",
	    "贵州省",
	    "云南省",
	    "广西省",
	    "西藏",
	    "浙江省",
	    "江西省",
	    "广东省",
	    "福建省",
	    "台湾省",
	    "海南省",
	    "香港",
	    "澳门"
	  ],
	  "state_abbr": [
	    "京",
	    "沪",
	    "津",
	    "渝",
	    "黑",
	    "吉",
	    "辽",
	    "蒙",
	    "冀",
	    "新",
	    "甘",
	    "青",
	    "陕",
	    "宁",
	    "豫",
	    "鲁",
	    "晋",
	    "皖",
	    "鄂",
	    "湘",
	    "苏",
	    "川",
	    "黔",
	    "滇",
	    "桂",
	    "藏",
	    "浙",
	    "赣",
	    "粤",
	    "闽",
	    "台",
	    "琼",
	    "港",
	    "澳"
	  ],
	  "city": [
	    "#{city_prefix}#{city_suffix}"
	  ],
	  "street_name": [
	    "#{Name.last_name}#{street_suffix}"
	  ],
	  "street_address": [
	    "#{street_name}#{building_number}号"
	  ],
	  "default_country": [
	    "中国"
	  ]
	};
	zh_CN.name = {
	  "first_name": [
	    "王",
	    "李",
	    "张",
	    "刘",
	    "陈",
	    "杨",
	    "黄",
	    "吴",
	    "赵",
	    "周",
	    "徐",
	    "孙",
	    "马",
	    "朱",
	    "胡",
	    "林",
	    "郭",
	    "何",
	    "高",
	    "罗",
	    "郑",
	    "梁",
	    "谢",
	    "宋",
	    "唐",
	    "许",
	    "邓",
	    "冯",
	    "韩",
	    "曹",
	    "曾",
	    "彭",
	    "萧",
	    "蔡",
	    "潘",
	    "田",
	    "董",
	    "袁",
	    "于",
	    "余",
	    "叶",
	    "蒋",
	    "杜",
	    "苏",
	    "魏",
	    "程",
	    "吕",
	    "丁",
	    "沈",
	    "任",
	    "姚",
	    "卢",
	    "傅",
	    "钟",
	    "姜",
	    "崔",
	    "谭",
	    "廖",
	    "范",
	    "汪",
	    "陆",
	    "金",
	    "石",
	    "戴",
	    "贾",
	    "韦",
	    "夏",
	    "邱",
	    "方",
	    "侯",
	    "邹",
	    "熊",
	    "孟",
	    "秦",
	    "白",
	    "江",
	    "阎",
	    "薛",
	    "尹",
	    "段",
	    "雷",
	    "黎",
	    "史",
	    "龙",
	    "陶",
	    "贺",
	    "顾",
	    "毛",
	    "郝",
	    "龚",
	    "邵",
	    "万",
	    "钱",
	    "严",
	    "赖",
	    "覃",
	    "洪",
	    "武",
	    "莫",
	    "孔"
	  ],
	  "last_name": [
	    "绍齐",
	    "博文",
	    "梓晨",
	    "胤祥",
	    "瑞霖",
	    "明哲",
	    "天翊",
	    "凯瑞",
	    "健雄",
	    "耀杰",
	    "潇然",
	    "子涵",
	    "越彬",
	    "钰轩",
	    "智辉",
	    "致远",
	    "俊驰",
	    "雨泽",
	    "烨磊",
	    "晟睿",
	    "文昊",
	    "修洁",
	    "黎昕",
	    "远航",
	    "旭尧",
	    "鸿涛",
	    "伟祺",
	    "荣轩",
	    "越泽",
	    "浩宇",
	    "瑾瑜",
	    "皓轩",
	    "擎苍",
	    "擎宇",
	    "志泽",
	    "子轩",
	    "睿渊",
	    "弘文",
	    "哲瀚",
	    "雨泽",
	    "楷瑞",
	    "建辉",
	    "晋鹏",
	    "天磊",
	    "绍辉",
	    "泽洋",
	    "鑫磊",
	    "鹏煊",
	    "昊强",
	    "伟宸",
	    "博超",
	    "君浩",
	    "子骞",
	    "鹏涛",
	    "炎彬",
	    "鹤轩",
	    "越彬",
	    "风华",
	    "靖琪",
	    "明辉",
	    "伟诚",
	    "明轩",
	    "健柏",
	    "修杰",
	    "志泽",
	    "弘文",
	    "峻熙",
	    "嘉懿",
	    "煜城",
	    "懿轩",
	    "烨伟",
	    "苑博",
	    "伟泽",
	    "熠彤",
	    "鸿煊",
	    "博涛",
	    "烨霖",
	    "烨华",
	    "煜祺",
	    "智宸",
	    "正豪",
	    "昊然",
	    "明杰",
	    "立诚",
	    "立轩",
	    "立辉",
	    "峻熙",
	    "弘文",
	    "熠彤",
	    "鸿煊",
	    "烨霖",
	    "哲瀚",
	    "鑫鹏",
	    "昊天",
	    "思聪",
	    "展鹏",
	    "笑愚",
	    "志强",
	    "炫明",
	    "雪松",
	    "思源",
	    "智渊",
	    "思淼",
	    "晓啸",
	    "天宇",
	    "浩然",
	    "文轩",
	    "鹭洋",
	    "振家",
	    "乐驹",
	    "晓博",
	    "文博",
	    "昊焱",
	    "立果",
	    "金鑫",
	    "锦程",
	    "嘉熙",
	    "鹏飞",
	    "子默",
	    "思远",
	    "浩轩",
	    "语堂",
	    "聪健",
	    "明",
	    "文",
	    "果",
	    "思",
	    "鹏",
	    "驰",
	    "涛",
	    "琪",
	    "浩",
	    "航",
	    "彬"
	  ],
	  "name": [
	    "#{first_name}#{last_name}"
	  ]
	};
	zh_CN.phone_number = {
	  "formats": [
	    "###-########",
	    "####-########",
	    "###########"
	  ]
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(83)(module)))

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * deep-eql
	 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Module dependencies
	 */

	var type = __webpack_require__(367);

	/*!
	 * Buffer.isBuffer browser shim
	 */

	var Buffer;
	try { Buffer = __webpack_require__(352).Buffer; }
	catch(ex) {
	  Buffer = {};
	  Buffer.isBuffer = function() { return false; }
	}

	/*!
	 * Primary Export
	 */

	module.exports = deepEqual;

	/**
	 * Assert super-strict (egal) equality between
	 * two objects of any type.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @param {Array} memoised (optional)
	 * @return {Boolean} equal match
	 */

	function deepEqual(a, b, m) {
	  if (sameValue(a, b)) {
	    return true;
	  } else if ('date' === type(a)) {
	    return dateEqual(a, b);
	  } else if ('regexp' === type(a)) {
	    return regexpEqual(a, b);
	  } else if (Buffer.isBuffer(a)) {
	    return bufferEqual(a, b);
	  } else if ('arguments' === type(a)) {
	    return argumentsEqual(a, b, m);
	  } else if (!typeEqual(a, b)) {
	    return false;
	  } else if (('object' !== type(a) && 'object' !== type(b))
	  && ('array' !== type(a) && 'array' !== type(b))) {
	    return sameValue(a, b);
	  } else {
	    return objectEqual(a, b, m);
	  }
	}

	/*!
	 * Strict (egal) equality test. Ensures that NaN always
	 * equals NaN and `-0` does not equal `+0`.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} equal match
	 */

	function sameValue(a, b) {
	  if (a === b) return a !== 0 || 1 / a === 1 / b;
	  return a !== a && b !== b;
	}

	/*!
	 * Compare the types of two given objects and
	 * return if they are equal. Note that an Array
	 * has a type of `array` (not `object`) and arguments
	 * have a type of `arguments` (not `array`/`object`).
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function typeEqual(a, b) {
	  return type(a) === type(b);
	}

	/*!
	 * Compare two Date objects by asserting that
	 * the time values are equal using `saveValue`.
	 *
	 * @param {Date} a
	 * @param {Date} b
	 * @return {Boolean} result
	 */

	function dateEqual(a, b) {
	  if ('date' !== type(b)) return false;
	  return sameValue(a.getTime(), b.getTime());
	}

	/*!
	 * Compare two regular expressions by converting them
	 * to string and checking for `sameValue`.
	 *
	 * @param {RegExp} a
	 * @param {RegExp} b
	 * @return {Boolean} result
	 */

	function regexpEqual(a, b) {
	  if ('regexp' !== type(b)) return false;
	  return sameValue(a.toString(), b.toString());
	}

	/*!
	 * Assert deep equality of two `arguments` objects.
	 * Unfortunately, these must be sliced to arrays
	 * prior to test to ensure no bad behavior.
	 *
	 * @param {Arguments} a
	 * @param {Arguments} b
	 * @param {Array} memoize (optional)
	 * @return {Boolean} result
	 */

	function argumentsEqual(a, b, m) {
	  if ('arguments' !== type(b)) return false;
	  a = [].slice.call(a);
	  b = [].slice.call(b);
	  return deepEqual(a, b, m);
	}

	/*!
	 * Get enumerable properties of a given object.
	 *
	 * @param {Object} a
	 * @return {Array} property names
	 */

	function enumerable(a) {
	  var res = [];
	  for (var key in a) res.push(key);
	  return res;
	}

	/*!
	 * Simple equality for flat iterable objects
	 * such as Arrays or Node.js buffers.
	 *
	 * @param {Iterable} a
	 * @param {Iterable} b
	 * @return {Boolean} result
	 */

	function iterableEqual(a, b) {
	  if (a.length !==  b.length) return false;

	  var i = 0;
	  var match = true;

	  for (; i < a.length; i++) {
	    if (a[i] !== b[i]) {
	      match = false;
	      break;
	    }
	  }

	  return match;
	}

	/*!
	 * Extension to `iterableEqual` specifically
	 * for Node.js Buffers.
	 *
	 * @param {Buffer} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function bufferEqual(a, b) {
	  if (!Buffer.isBuffer(b)) return false;
	  return iterableEqual(a, b);
	}

	/*!
	 * Block for `objectEqual` ensuring non-existing
	 * values don't get in.
	 *
	 * @param {Mixed} object
	 * @return {Boolean} result
	 */

	function isValue(a) {
	  return a !== null && a !== undefined;
	}

	/*!
	 * Recursively check the equality of two objects.
	 * Once basic sameness has been established it will
	 * defer to `deepEqual` for each enumerable key
	 * in the object.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */

	function objectEqual(a, b, m) {
	  if (!isValue(a) || !isValue(b)) {
	    return false;
	  }

	  if (a.prototype !== b.prototype) {
	    return false;
	  }

	  var i;
	  if (m) {
	    for (i = 0; i < m.length; i++) {
	      if ((m[i][0] === a && m[i][1] === b)
	      ||  (m[i][0] === b && m[i][1] === a)) {
	        return true;
	      }
	    }
	  } else {
	    m = [];
	  }

	  try {
	    var ka = enumerable(a);
	    var kb = enumerable(b);
	  } catch (ex) {
	    return false;
	  }

	  ka.sort();
	  kb.sort();

	  if (!iterableEqual(ka, kb)) {
	    return false;
	  }

	  m.push([ a, b ]);

	  var key;
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], m)) {
	      return false;
	    }
	  }

	  return true;
	}


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = require("buffer");

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexShrink: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeOpacity: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(368);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(353);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(369);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(218);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(76);

	var flattenChildren = __webpack_require__(370);
	var instantiateReactComponent = __webpack_require__(257);
	var shouldUpdateReactComponent = __webpack_require__(259);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	var createNodesFromMarkup = __webpack_require__(371);
	var emptyFunction = __webpack_require__(94);
	var getMarkupWrap = __webpack_require__(372);
	var invariant = __webpack_require__(98);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);
	var escapeTextContentForBrowser = __webpack_require__(226);
	var setInnerHTML = __webpack_require__(258);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(81);

	var getNodeForCharacterOffset = __webpack_require__(373);
	var getTextContentAccessor = __webpack_require__(360);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(317);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(374);


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(212);
	var warning = __webpack_require__(91);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(81);

	var createArrayFromMixed = __webpack_require__(375);
	var getMarkupWrap = __webpack_require__(372);
	var invariant = __webpack_require__(98);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(81);

	var invariant = __webpack_require__(98);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */

	/*!
	 * Primary Exports
	 */

	var exports = module.exports = getType;

	/*!
	 * Detectable javascript natives
	 */

	var natives = {
	    '[object Array]': 'array'
	  , '[object RegExp]': 'regexp'
	  , '[object Function]': 'function'
	  , '[object Arguments]': 'arguments'
	  , '[object Date]': 'date'
	};

	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */

	function getType (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	}

	exports.Library = Library;

	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */

	function Library () {
	  this.tests = {};
	}

	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */

	Library.prototype.of = getType;

	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */

	Library.prototype.define = function (type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};

	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */

	Library.prototype.test = function (obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];

	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(376);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(98);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;


/***/ }
/******/ ]);